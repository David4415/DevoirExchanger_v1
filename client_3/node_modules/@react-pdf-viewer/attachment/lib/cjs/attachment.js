'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@react-pdf-viewer/core');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var fileName = function (url) {
    var str = url.split('/').pop();
    return str ? str.split('#')[0].split('?')[0] : url;
};

var downloadFile = function (url, data) {
    var blobUrl = typeof data === 'string' ? '' : URL.createObjectURL(new Blob([data], { type: '' }));
    var link = document.createElement('a');
    link.style.display = 'none';
    link.href = blobUrl || url;
    link.setAttribute('download', fileName(url));
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    if (blobUrl) {
        URL.revokeObjectURL(blobUrl);
    }
};

var AttachmentList = function (_a) {
    var files = _a.files;
    var l10n = React__namespace.useContext(core.LocalizationContext);
    var renderItem = function (file) {
        var onClick = function () { return downloadFile(file.fileName, file.data); };
        return (React__namespace.createElement("li", { className: "rpv-attachment__item", key: "attachment-" + file.fileName, title: (l10n && l10n.attachment ? l10n.attachment.clickToDownload : 'Click to download'), onClick: onClick }, file.fileName));
    };
    return files.length === 0 ? (React__namespace.createElement("div", { className: "rpv-attachment__empty" }, l10n && l10n.attachment ? l10n.attachment.noAttachment : 'There is no attachment')) : (React__namespace.createElement("ul", { className: "rpv-attachment__list" }, files.map(renderItem)));
};

var AttachmentLoader = function (_a) {
    var doc = _a.doc;
    var _b = React__namespace.useState({
        files: [],
        isLoaded: false,
    }), attachments = _b[0], setAttachments = _b[1];
    React__namespace.useEffect(function () {
        doc.getAttachments().then(function (response) {
            var files = response
                ? Object.keys(response).map(function (file) {
                    return {
                        data: response[file].content,
                        fileName: response[file].filename,
                    };
                })
                : [];
            setAttachments({
                files: files,
                isLoaded: true,
            });
        });
    }, [doc]);
    return !attachments.isLoaded ? React__namespace.createElement(core.Spinner, null) : React__namespace.createElement(AttachmentList, { files: attachments.files });
};

var AttachmentListWithStore = function (_a) {
    var store = _a.store;
    var _b = React__namespace.useState(store.get('doc')), currentDoc = _b[0], setCurrentDoc = _b[1];
    var handleDocumentChanged = function (doc) {
        setCurrentDoc(doc);
    };
    React__namespace.useEffect(function () {
        store.subscribe('doc', handleDocumentChanged);
        return function () {
            store.unsubscribe('doc', handleDocumentChanged);
        };
    }, []);
    return currentDoc ? (React__namespace.createElement(AttachmentLoader, { doc: currentDoc })) : (React__namespace.createElement("div", { className: "rpv-attachment__loader" },
        React__namespace.createElement(core.Spinner, null)));
};

var attachmentPlugin = function () {
    var store = React__namespace.useMemo(function () { return core.createStore({}); }, []);
    var AttachmentsDecorator = function () { return React__namespace.createElement(AttachmentListWithStore, { store: store }); };
    return {
        onDocumentLoad: function (props) {
            store.update('doc', props.doc);
        },
        Attachments: AttachmentsDecorator,
    };
};

exports.attachmentPlugin = attachmentPlugin;
