{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [,\n      /* 0 */\n\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.addLinkAttributes = addLinkAttributes;\n        exports.deprecated = deprecated;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.isDataScheme = isDataScheme;\n        exports.isFetchSupported = isFetchSupported;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n        exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n        exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            (0, _util.unreachable)(\"Abstract method `create` called.\");\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class DOMCanvasFactory extends BaseCanvasFactory {\n          constructor({\n            ownerDocument = globalThis.document\n          } = {}) {\n            super();\n            this._document = ownerDocument;\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            const context = canvas.getContext(\"2d\");\n            canvas.width = width;\n            canvas.height = height;\n            return {\n              canvas,\n              context\n            };\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor({\n            baseUrl = null,\n            isCompressed = false\n          }) {\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch({\n            name\n          }) {\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class DOMCMapReaderFactory extends BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {\n              return fetch(url).then(async response => {\n                if (!response.ok) {\n                  throw new Error(response.statusText);\n                }\n\n                let cMapData;\n\n                if (this.isCompressed) {\n                  cMapData = new Uint8Array(await response.arrayBuffer());\n                } else {\n                  cMapData = (0, _util.stringToBytes)(await response.text());\n                }\n\n                return {\n                  cMapData,\n                  compressionType\n                };\n              });\n            }\n\n            return new Promise((resolve, reject) => {\n              const request = new XMLHttpRequest();\n              request.open(\"GET\", url, true);\n\n              if (this.isCompressed) {\n                request.responseType = \"arraybuffer\";\n              }\n\n              request.onreadystatechange = () => {\n                if (request.readyState !== XMLHttpRequest.DONE) {\n                  return;\n                }\n\n                if (request.status === 200 || request.status === 0) {\n                  let cMapData;\n\n                  if (this.isCompressed && request.response) {\n                    cMapData = new Uint8Array(request.response);\n                  } else if (!this.isCompressed && request.responseText) {\n                    cMapData = (0, _util.stringToBytes)(request.responseText);\n                  }\n\n                  if (cMapData) {\n                    resolve({\n                      cMapData,\n                      compressionType\n                    });\n                    return;\n                  }\n                }\n\n                reject(new Error(request.statusText));\n              };\n\n              request.send(null);\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMSVGFactory {\n          create(width, height) {\n            (0, _util.assert)(width > 0 && height > 0, \"Invalid SVG dimensions\");\n            const svg = document.createElementNS(SVG_NS, \"svg:svg\");\n            svg.setAttribute(\"version\", \"1.1\");\n            svg.setAttribute(\"width\", width + \"px\");\n            svg.setAttribute(\"height\", height + \"px\");\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n            return svg;\n          }\n\n          createElement(type) {\n            (0, _util.assert)(typeof type === \"string\", \"Invalid SVG element type\");\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor({\n            viewBox,\n            scale,\n            rotation,\n            offsetX = 0,\n            offsetY = 0,\n            dontFlip = false\n          }) {\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n              height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n              height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          clone({\n            scale = this.scale,\n            rotation = this.rotation,\n            offsetX = this.offsetX,\n            offsetY = this.offsetY,\n            dontFlip = false\n          } = {}) {\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg, type) {\n            super(msg);\n            this.type = type;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n        const LinkTarget = {\n          NONE: 0,\n          SELF: 1,\n          BLANK: 2,\n          PARENT: 3,\n          TOP: 4\n        };\n        exports.LinkTarget = LinkTarget;\n\n        function addLinkAttributes(link, {\n          url,\n          target,\n          rel,\n          enabled = true\n        } = {}) {\n          (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n          const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n          if (enabled) {\n            link.href = link.title = urlNullRemoved;\n          } else {\n            link.href = \"\";\n            link.title = `Disabled: ${urlNullRemoved}`;\n\n            link.onclick = () => {\n              return false;\n            };\n          }\n\n          let targetStr = \"\";\n\n          switch (target) {\n            case LinkTarget.NONE:\n              break;\n\n            case LinkTarget.SELF:\n              targetStr = \"_self\";\n              break;\n\n            case LinkTarget.BLANK:\n              targetStr = \"_blank\";\n              break;\n\n            case LinkTarget.PARENT:\n              targetStr = \"_parent\";\n              break;\n\n            case LinkTarget.TOP:\n              targetStr = \"_top\";\n              break;\n          }\n\n          link.target = targetStr;\n          link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n        }\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          const anchor = url.indexOf(\"#\");\n          const query = url.indexOf(\"?\");\n          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n          return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n        }\n\n        function getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch (ex) {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          constructor() {\n            this.started = Object.create(null);\n            this.times = [];\n          }\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const time of this.times) {\n              const name = time.name;\n\n              if (name.length > longest) {\n                longest = name.length;\n              }\n            }\n\n            for (const time of this.times) {\n              const duration = time.end - time.start;\n              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isFetchSupported() {\n          return typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype && typeof ReadableStream !== \"undefined\";\n        }\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch (ex) {\n            return false;\n          }\n        }\n\n        function loadScript(src, removeScriptElement = false) {\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).appendChild(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || !(0, _util.isString)(input)) {\n              return null;\n            }\n\n            if (!pdfDateStringRegex) {\n              pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            }\n\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n        /***/\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createObjectURL = createObjectURL;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.isBool = isBool;\n        exports.isNum = isNum;\n        exports.isSameOrigin = isSameOrigin;\n        exports.isString = isString;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.removeNullCharacters = removeNullCharacters;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n        __w_pdfjs_require__(3);\n\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        const AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        const AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        const FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function isSameOrigin(baseUrl, otherUrl) {\n          let base;\n\n          try {\n            base = new URL(baseUrl);\n\n            if (!base.origin || base.origin === \"null\") {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n\n          const other = new URL(otherUrl, base);\n          return base.origin === other.origin;\n        }\n\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url, baseUrl) {\n          if (!url) {\n            return null;\n          }\n\n          try {\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = this.constructor.name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg);\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg);\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {}\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {}\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg);\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {}\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {}\n\n        exports.AbortException = AbortException;\n        const NullCharactersRegExp = /\\x00/g;\n\n        function removeNullCharacters(str) {\n          if (typeof str !== \"string\") {\n            warn(\"The argument for removeNullCharacters must be a string.\");\n            return str;\n          }\n\n          return str.replace(NullCharactersRegExp, \"\");\n        }\n\n        function bytesToString(bytes) {\n          assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n\n          assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n          return arr.byteLength;\n        }\n\n        function arraysToBytes(arr) {\n          const length = arr.length;\n\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n\n          let resultLength = 0;\n\n          for (let i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n\n          let pos = 0;\n          const data = new Uint8Array(resultLength);\n\n          for (let i = 0; i < length; i++) {\n            let item = arr[i];\n\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n\n            const itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n\n          return data;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        const IsLittleEndianCached = {\n          get value() {\n            return shadow(this, \"value\", isLittleEndian());\n          }\n\n        };\n        exports.IsLittleEndianCached = IsLittleEndianCached;\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        const IsEvalSupportedCached = {\n          get value() {\n            return shadow(this, \"value\", isEvalSupported());\n          }\n\n        };\n        exports.IsEvalSupportedCached = IsEvalSupportedCached;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = Util.applyTransform(r, m);\n            const p2 = Util.applyTransform(r.slice(2, 4), m);\n            const p3 = Util.applyTransform([r[0], r[3]], m);\n            const p4 = Util.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static apply3dTransform(m, v) {\n            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            function compare(a, b) {\n              return a - b;\n            }\n\n            const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n            const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n            const result = [];\n            rect1 = Util.normalizeRect(rect1);\n            rect2 = Util.normalizeRect(rect2);\n\n            if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n              result[0] = orderedX[1];\n              result[2] = orderedX[2];\n            } else {\n              return null;\n            }\n\n            if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n              result[1] = orderedY[1];\n              result[3] = orderedY[2];\n            } else {\n              return null;\n            }\n\n            return result;\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\n        function stringToPDFString(str) {\n          const length = str.length,\n                strBuf = [];\n\n          if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n            }\n          } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n            }\n          } else {\n            for (let i = 0; i < length; ++i) {\n              const code = PDFStringTranslateTable[str.charCodeAt(i)];\n              strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, match => {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n\n            return `\\\\${match}`;\n          });\n        }\n\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n\n        function stringToUTF16BEString(str) {\n          const buf = [\"\\xFE\\xFF\"];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff));\n            buf.push(String.fromCharCode(char & 0xff));\n          }\n\n          return buf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isBool(v) {\n          return typeof v === \"boolean\";\n        }\n\n        function isNum(v) {\n          return typeof v === \"number\";\n        }\n\n        function isString(v) {\n          return typeof v === \"string\";\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate(date = new Date()) {\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        function createPromiseCapability() {\n          const capability = Object.create(null);\n          let isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get() {\n              return isSettled;\n            }\n\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        function createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n          if (URL.createObjectURL && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        }\n        /***/\n\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n        var _is_node = __w_pdfjs_require__(4);\n\n        ;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        /***/\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getDocument = getDocument;\n        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n        exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _font_loader = __w_pdfjs_require__(6);\n\n        var _node_utils = __w_pdfjs_require__(7);\n\n        var _annotation_storage = __w_pdfjs_require__(8);\n\n        var _api_compatibility = __w_pdfjs_require__(9);\n\n        var _canvas = __w_pdfjs_require__(10);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _message_handler = __w_pdfjs_require__(13);\n\n        var _metadata = __w_pdfjs_require__(14);\n\n        var _optional_content_config = __w_pdfjs_require__(15);\n\n        var _transport_stream = __w_pdfjs_require__(16);\n\n        var _webgl = __w_pdfjs_require__(17);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        let createPDFNetworkStream;\n\n        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n          createPDFNetworkStream = pdfNetworkStreamFactory;\n        }\n\n        function getDocument(src) {\n          const task = new PDFDocumentLoadingTask();\n          let source;\n\n          if (typeof src === \"string\" || src instanceof URL) {\n            source = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            source = {\n              data: src\n            };\n          } else if (src instanceof PDFDataRangeTransport) {\n            source = {\n              range: src\n            };\n          } else {\n            if (typeof src !== \"object\") {\n              throw new Error(\"Invalid parameter in getDocument, \" + \"need either string, URL, Uint8Array, or parameter object.\");\n            }\n\n            if (!src.url && !src.data && !src.range) {\n              throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n            }\n\n            source = src;\n          }\n\n          const params = Object.create(null);\n          let rangeTransport = null,\n              worker = null;\n\n          for (const key in source) {\n            const value = source[key];\n\n            switch (key) {\n              case \"url\":\n                if (typeof window !== \"undefined\") {\n                  try {\n                    params[key] = new URL(value, window.location).href;\n                    continue;\n                  } catch (ex) {\n                    (0, _util.warn)(`Cannot create valid URL: \"${ex}\".`);\n                  }\n                } else if (typeof value === \"string\" || value instanceof URL) {\n                  params[key] = value.toString();\n                  continue;\n                }\n\n                throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n\n              case \"range\":\n                rangeTransport = value;\n                continue;\n\n              case \"worker\":\n                worker = value;\n                continue;\n\n              case \"data\":\n                if (_is_node.isNodeJS && typeof Buffer !== \"undefined\" && value instanceof Buffer) {\n                  params[key] = new Uint8Array(value);\n                } else if (value instanceof Uint8Array) {\n                  break;\n                } else if (typeof value === \"string\") {\n                  params[key] = (0, _util.stringToBytes)(value);\n                } else if (typeof value === \"object\" && value !== null && !isNaN(value.length)) {\n                  params[key] = new Uint8Array(value);\n                } else if ((0, _util.isArrayBuffer)(value)) {\n                  params[key] = new Uint8Array(value);\n                } else {\n                  throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string, or array-like object is expected in the data property.\");\n                }\n\n                continue;\n            }\n\n            params[key] = value;\n          }\n\n          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n          params.ignoreErrors = params.stopAtErrors !== true;\n          params.fontExtraProperties = params.fontExtraProperties === true;\n          params.pdfBug = params.pdfBug === true;\n          params.enableXfa = params.enableXfa === true;\n\n          if (typeof params.docBaseUrl !== \"string\" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {\n            params.docBaseUrl = null;\n          }\n\n          if (!Number.isInteger(params.maxImageSize)) {\n            params.maxImageSize = -1;\n          }\n\n          if (typeof params.isEvalSupported !== \"boolean\") {\n            params.isEvalSupported = true;\n          }\n\n          if (typeof params.disableFontFace !== \"boolean\") {\n            params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;\n          }\n\n          if (typeof params.ownerDocument === \"undefined\") {\n            params.ownerDocument = globalThis.document;\n          }\n\n          if (typeof params.disableRange !== \"boolean\") {\n            params.disableRange = false;\n          }\n\n          if (typeof params.disableStream !== \"boolean\") {\n            params.disableStream = false;\n          }\n\n          if (typeof params.disableAutoFetch !== \"boolean\") {\n            params.disableAutoFetch = false;\n          }\n\n          (0, _util.setVerbosityLevel)(params.verbosity);\n\n          if (!worker) {\n            const workerParams = {\n              verbosity: params.verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const docId = task.docId;\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length: params.length,\n                  initialData: params.initialData,\n                  progressiveDone: params.progressiveDone,\n                  contentDispositionFilename: params.contentDispositionFilename,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                }, rangeTransport);\n              } else if (!params.data) {\n                networkStream = createPDFNetworkStream({\n                  url: params.url,\n                  length: params.length,\n                  httpHeaders: params.httpHeaders,\n                  withCredentials: params.withCredentials,\n                  rangeChunkSize: params.rangeChunkSize,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function ([workerId, networkStream]) {\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              messageHandler.postMessageTransfers = worker.postMessageTransfers;\n              const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n          if (worker.destroyed) {\n            return Promise.reject(new Error(\"Worker was destroyed\"));\n          }\n\n          if (pdfDataRangeTransport) {\n            source.length = pdfDataRangeTransport.length;\n            source.initialData = pdfDataRangeTransport.initialData;\n            source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n          }\n\n          return worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n            docId,\n            apiVersion: '2.8.335',\n            source: {\n              data: source.data,\n              url: source.url,\n              password: source.password,\n              disableAutoFetch: source.disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n              length: source.length\n            },\n            maxImageSize: source.maxImageSize,\n            disableFontFace: source.disableFontFace,\n            postMessageTransfers: worker.postMessageTransfers,\n            docBaseUrl: source.docBaseUrl,\n            ignoreErrors: source.ignoreErrors,\n            isEvalSupported: source.isEvalSupported,\n            fontExtraProperties: source.fontExtraProperties,\n            enableXfa: source.enableXfa\n          }).then(function (workerId) {\n            if (worker.destroyed) {\n              throw new Error(\"Worker was destroyed\");\n            }\n\n            return workerId;\n          });\n        }\n\n        const PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n          let nextDocumentId = 0;\n\n          class PDFDocumentLoadingTask {\n            constructor() {\n              this._capability = (0, _util.createPromiseCapability)();\n              this._transport = null;\n              this._worker = null;\n              this.docId = \"d\" + nextDocumentId++;\n              this.destroyed = false;\n              this.onPassword = null;\n              this.onProgress = null;\n              this.onUnsupportedFeature = null;\n            }\n\n            get promise() {\n              return this._capability.promise;\n            }\n\n            destroy() {\n              this.destroyed = true;\n              const transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n              return transportDestroyed.then(() => {\n                this._transport = null;\n\n                if (this._worker) {\n                  this._worker.destroy();\n\n                  this._worker = null;\n                }\n              });\n            }\n\n          }\n\n          return PDFDocumentLoadingTask;\n        }();\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = (0, _util.createPromiseCapability)();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprint() {\n            return this._pdfInfo.fingerprint;\n          }\n\n          get isPureXfa() {\n            return this._pdfInfo.isPureXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJavaScript() {\n            return this._transport.getJavaScript();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          getStats() {\n            return this._transport.getStats();\n          }\n\n          cleanup(keepLoadedFonts = false) {\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          saveDocument(annotationStorage) {\n            return this._transport.saveDocument(annotationStorage);\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._ownerDocument = ownerDocument;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this.cleanupAfterRender = false;\n            this.pendingCleanup = false;\n            this._intentStates = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport({\n            scale,\n            rotation = this.rotate,\n            offsetX = 0,\n            offsetY = 0,\n            dontFlip = false\n          } = {}) {\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations({\n            intent = null\n          } = {}) {\n            if (!this._annotationsPromise || this._annotationsIntent !== intent) {\n              this._annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);\n              this._annotationsIntent = intent;\n            }\n\n            return this._annotationsPromise;\n          }\n\n          getJSActions() {\n            return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));\n          }\n\n          getXfa() {\n            return this._xfaPromise || (this._xfaPromise = this._transport.getPageXfa(this._pageIndex));\n          }\n\n          render({\n            canvasContext,\n            viewport,\n            intent = \"display\",\n            enableWebGL = false,\n            renderInteractiveForms = false,\n            transform = null,\n            imageLayer = null,\n            canvasFactory = null,\n            background = null,\n            annotationStorage = null,\n            optionalContentConfigPromise = null\n          }) {\n            var _intentState;\n\n            if (this._stats) {\n              this._stats.time(\"Overall\");\n            }\n\n            const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n            this.pendingCleanup = false;\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(renderingIntent);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(renderingIntent, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n              ownerDocument: this._ownerDocument\n            });\n            const webGLContext = new _webgl.WebGLContext({\n              enable: enableWebGL\n            });\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList({\n                pageIndex: this._pageIndex,\n                intent: renderingIntent,\n                renderInteractiveForms: renderInteractiveForms === true,\n                annotationStorage: (annotationStorage === null || annotationStorage === void 0 ? void 0 : annotationStorage.serializable) || null\n              });\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this.cleanupAfterRender || renderingIntent === \"print\") {\n                this.pendingCleanup = true;\n              }\n\n              this._tryCleanup();\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              if (this._stats) {\n                this._stats.timeEnd(\"Rendering\");\n\n                this._stats.timeEnd(\"Overall\");\n              }\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: canvasFactoryInstance,\n              webGLContext,\n              useRequestAnimationFrame: renderingIntent !== \"print\",\n              pdfBug: this._pdfBug\n            });\n            ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\n              if (this.pendingCleanup) {\n                complete();\n                return;\n              }\n\n              if (this._stats) {\n                this._stats.time(\"Rendering\");\n              }\n\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const renderingIntent = \"oplist\";\n\n            let intentState = this._intentStates.get(renderingIntent);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(renderingIntent, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              var _intentState2;\n\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n              ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList({\n                pageIndex: this._pageIndex,\n                intent: renderingIntent\n              });\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent({\n            normalizeWhitespace = false,\n            disableCombineTextItems = false\n          } = {}) {\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              normalizeWhitespace: normalizeWhitespace === true,\n              combineTextItems: disableCombineTextItems !== true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent(params = {}) {\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function ({\n                  value,\n                  done\n                }) {\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            this._transport.pageCache[this._pageIndex] = null;\n            const waitOn = [];\n\n            for (const [intent, intentState] of this._intentStates) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intent === \"oplist\") {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n            this._annotationsPromise = null;\n            this._jsActionsPromise = null;\n            this._xfaPromise = null;\n            this.pendingCleanup = false;\n            return Promise.all(waitOn);\n          }\n\n          cleanup(resetStats = false) {\n            this.pendingCleanup = true;\n            return this._tryCleanup(resetStats);\n          }\n\n          _tryCleanup(resetStats = false) {\n            if (!this.pendingCleanup) {\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n            this._annotationsPromise = null;\n            this._jsActionsPromise = null;\n            this._xfaPromise = null;\n\n            if (resetStats && this._stats) {\n              this._stats = new _display_utils.StatTimer();\n            }\n\n            this.pendingCleanup = false;\n            return true;\n          }\n\n          _startRenderPage(transparency, intent) {\n            const intentState = this._intentStates.get(intent);\n\n            if (!intentState) {\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd(\"Page Request\");\n            }\n\n            if (intentState.displayReadyCapability) {\n              intentState.displayReadyCapability.resolve(transparency);\n            }\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this._tryCleanup();\n            }\n          }\n\n          _pumpOperatorList(args) {\n            (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.');\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", args);\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(args.intent);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(({\n                value,\n                done\n              }) => {\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this._tryCleanup();\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList({\n            intentState,\n            reason,\n            force = false\n          }) {\n            (0, _util.assert)(reason instanceof Error || typeof reason === \"object\" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.');\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n\n                  intentState.streamReaderCancelTimeout = null;\n                }, RENDERING_CANCELLED_TIMEOUT);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason === null || reason === void 0 ? void 0 : reason.message));\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [intent, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(intent);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          constructor() {\n            this._listeners = [];\n            this._deferred = Promise.resolve(undefined);\n          }\n\n          postMessage(obj, transfers) {\n            function cloneValue(value) {\n              if (typeof value !== \"object\" || value === null) {\n                return value;\n              }\n\n              if (cloned.has(value)) {\n                return cloned.get(value);\n              }\n\n              let buffer, result;\n\n              if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n                if (transfers === null || transfers === void 0 ? void 0 : transfers.includes(buffer)) {\n                  result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n                } else {\n                  result = new value.constructor(value);\n                }\n\n                cloned.set(value, result);\n                return result;\n              }\n\n              if (value instanceof Map) {\n                result = new Map();\n                cloned.set(value, result);\n\n                for (const [key, val] of value) {\n                  result.set(key, cloneValue(val));\n                }\n\n                return result;\n              }\n\n              if (value instanceof Set) {\n                result = new Set();\n                cloned.set(value, result);\n\n                for (const val of value) {\n                  result.add(cloneValue(val));\n                }\n\n                return result;\n              }\n\n              result = Array.isArray(value) ? [] : {};\n              cloned.set(value, result);\n\n              for (const i in value) {\n                let desc,\n                    p = value;\n\n                while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                  p = Object.getPrototypeOf(p);\n                }\n\n                if (typeof desc.value === \"undefined\") {\n                  continue;\n                }\n\n                if (typeof desc.value === \"function\") {\n                  var _value$hasOwnProperty;\n\n                  if ((_value$hasOwnProperty = value.hasOwnProperty) === null || _value$hasOwnProperty === void 0 ? void 0 : _value$hasOwnProperty.call(value, i)) {\n                    throw new Error(`LoopbackPort.postMessage - cannot clone: ${value[i]}`);\n                  }\n\n                  continue;\n                }\n\n                result[i] = cloneValue(desc.value);\n              }\n\n              return result;\n            }\n\n            const cloned = new WeakMap();\n            const event = {\n              data: cloneValue(obj)\n            };\n\n            this._deferred.then(() => {\n              for (const listener of this._listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this._listeners.push(listener);\n          }\n\n          removeEventListener(name, listener) {\n            const i = this._listeners.indexOf(listener);\n\n            this._listeners.splice(i, 1);\n          }\n\n          terminate() {\n            this._listeners.length = 0;\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n\n        const PDFWorker = function PDFWorkerClosure() {\n          const pdfWorkerPorts = new WeakMap();\n          let isWorkerDisabled = false;\n          let fallbackWorkerSrc;\n          let nextFakeWorkerId = 0;\n          let fakeWorkerCapability;\n\n          if (_is_node.isNodeJS && typeof require === \"function\") {\n            isWorkerDisabled = true;\n            fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\" && \"currentScript\" in document) {\n            var _document$currentScri;\n\n            const pdfjsFilePath = (_document$currentScri = document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;\n\n            if (pdfjsFilePath) {\n              fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          function getWorkerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (typeof fallbackWorkerSrc !== \"undefined\") {\n              if (!_is_node.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          function getMainThreadWorkerMessageHandler() {\n            let mainWorkerMessageHandler;\n\n            try {\n              var _globalThis$pdfjsWork;\n\n              mainWorkerMessageHandler = (_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler;\n            } catch (ex) {}\n\n            return mainWorkerMessageHandler || null;\n          }\n\n          function setupFakeWorkerGlobal() {\n            if (fakeWorkerCapability) {\n              return fakeWorkerCapability.promise;\n            }\n\n            fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n            const loader = async function () {\n              const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_is_node.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(getWorkerSrc());\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(getWorkerSrc());\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n            return fakeWorkerCapability.promise;\n          }\n\n          function createCDNWrapper(url) {\n            const wrapper = \"importScripts('\" + url + \"');\";\n            return URL.createObjectURL(new Blob([wrapper]));\n          }\n\n          class PDFWorker {\n            constructor({\n              name = null,\n              port = null,\n              verbosity = (0, _util.getVerbosityLevel)()\n            } = {}) {\n              if (port && pdfWorkerPorts.has(port)) {\n                throw new Error(\"Cannot use more than one PDFWorker per port\");\n              }\n\n              this.name = name;\n              this.destroyed = false;\n              this.postMessageTransfers = true;\n              this.verbosity = verbosity;\n              this._readyCapability = (0, _util.createPromiseCapability)();\n              this._port = null;\n              this._webWorker = null;\n              this._messageHandler = null;\n\n              if (port) {\n                pdfWorkerPorts.set(port, this);\n\n                this._initializeFromPort(port);\n\n                return;\n              }\n\n              this._initialize();\n            }\n\n            get promise() {\n              return this._readyCapability.promise;\n            }\n\n            get port() {\n              return this._port;\n            }\n\n            get messageHandler() {\n              return this._messageHandler;\n            }\n\n            _initializeFromPort(port) {\n              this._port = port;\n              this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n              this._messageHandler.on(\"ready\", function () {});\n\n              this._readyCapability.resolve();\n            }\n\n            _initialize() {\n              if (typeof Worker !== \"undefined\" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n                let workerSrc = getWorkerSrc();\n\n                try {\n                  if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                    workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n                  }\n\n                  const worker = new Worker(workerSrc);\n                  const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                  const terminateEarly = () => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n                    messageHandler.destroy();\n                    worker.terminate();\n\n                    if (this.destroyed) {\n                      this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                    } else {\n                      this._setupFakeWorker();\n                    }\n                  };\n\n                  const onWorkerError = () => {\n                    if (!this._webWorker) {\n                      terminateEarly();\n                    }\n                  };\n\n                  worker.addEventListener(\"error\", onWorkerError);\n                  messageHandler.on(\"test\", data => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n\n                    if (this.destroyed) {\n                      terminateEarly();\n                      return;\n                    }\n\n                    if (data) {\n                      this._messageHandler = messageHandler;\n                      this._port = worker;\n                      this._webWorker = worker;\n\n                      if (!data.supportTransfers) {\n                        this.postMessageTransfers = false;\n                      }\n\n                      this._readyCapability.resolve();\n\n                      messageHandler.send(\"configure\", {\n                        verbosity: this.verbosity\n                      });\n                    } else {\n                      this._setupFakeWorker();\n\n                      messageHandler.destroy();\n                      worker.terminate();\n                    }\n                  });\n                  messageHandler.on(\"ready\", data => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n\n                    if (this.destroyed) {\n                      terminateEarly();\n                      return;\n                    }\n\n                    try {\n                      sendTest();\n                    } catch (e) {\n                      this._setupFakeWorker();\n                    }\n                  });\n\n                  const sendTest = () => {\n                    const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n                    try {\n                      messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                    } catch (ex) {\n                      (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                      testObj[0] = 0;\n                      messageHandler.send(\"test\", testObj);\n                    }\n                  };\n\n                  sendTest();\n                  return;\n                } catch (e) {\n                  (0, _util.info)(\"The worker has been disabled.\");\n                }\n              }\n\n              this._setupFakeWorker();\n            }\n\n            _setupFakeWorker() {\n              if (!isWorkerDisabled) {\n                (0, _util.warn)(\"Setting up fake worker.\");\n                isWorkerDisabled = true;\n              }\n\n              setupFakeWorkerGlobal().then(WorkerMessageHandler => {\n                if (this.destroyed) {\n                  this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                  return;\n                }\n\n                const port = new LoopbackPort();\n                this._port = port;\n                const id = \"fake\" + nextFakeWorkerId++;\n                const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n                WorkerMessageHandler.setup(workerHandler, port);\n                const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n                this._messageHandler = messageHandler;\n\n                this._readyCapability.resolve();\n\n                messageHandler.send(\"configure\", {\n                  verbosity: this.verbosity\n                });\n              }).catch(reason => {\n                this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n              });\n            }\n\n            destroy() {\n              this.destroyed = true;\n\n              if (this._webWorker) {\n                this._webWorker.terminate();\n\n                this._webWorker = null;\n              }\n\n              pdfWorkerPorts.delete(this._port);\n              this._port = null;\n\n              if (this._messageHandler) {\n                this._messageHandler.destroy();\n\n                this._messageHandler = null;\n              }\n            }\n\n            static fromPort(params) {\n              if (!params || !params.port) {\n                throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n              }\n\n              if (pdfWorkerPorts.has(params.port)) {\n                return pdfWorkerPorts.get(params.port);\n              }\n\n              return new PDFWorker(params);\n            }\n\n            static getWorkerSrc() {\n              return getWorkerSrc();\n            }\n\n          }\n\n          return PDFWorker;\n        }();\n\n        exports.PDFWorker = PDFWorker;\n\n        class WorkerTransport {\n          constructor(messageHandler, loadingTask, networkStream, params) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              docId: loadingTask.docId,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              ownerDocument: params.ownerDocument\n            });\n            this._params = params;\n            this.CMapReaderFactory = new params.CMapReaderFactory({\n              baseUrl: params.cMapUrl,\n              isCompressed: params.cMapPacked\n            });\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._passwordCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.pageCache = [];\n            this.pagePromises = [];\n            this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n            this.setupMessageHandler();\n          }\n\n          get loadingTaskSettled() {\n            return this.loadingTask._capability.settled;\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = (0, _util.createPromiseCapability)();\n\n            if (this._passwordCapability) {\n              this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            }\n\n            const waitOn = [];\n            this.pageCache.forEach(function (page) {\n              if (page) {\n                waitOn.push(page._destroy());\n              }\n            });\n            this.pageCache.length = 0;\n            this.pagePromises.length = 0;\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n\n            if (this.loadingTaskSettled) {\n              const annotationStorageResetModified = this.loadingTask.promise.then(pdfDocument => {\n                if (pdfDocument.hasOwnProperty(\"annotationStorage\")) {\n                  pdfDocument.annotationStorage.resetModified();\n                }\n              }).catch(() => {});\n              waitOn.push(annotationStorageResetModified);\n            }\n\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this._hasJSActionsPromise = null;\n\n              if (this._networkStream) {\n                this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n              }\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function ({\n                  value,\n                  done\n                }) {\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = (0, _util.createPromiseCapability)();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress && loadingTask.onProgress) {\n                    loadingTask.onProgress(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    if (loadingTask.onProgress) {\n                      loadingTask.onProgress({\n                        loaded: evt.loaded,\n                        total: evt.total\n                      });\n                    }\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function ({\n                  value,\n                  done\n                }) {\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", ({\n              pdfInfo\n            }) => {\n              this._numPages = pdfInfo.numPages;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n              }\n\n              if (!(reason instanceof Error)) {\n                const msg = \"DocException - expected a valid Error.\";\n                (0, _util.warn)(msg);\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this._passwordCapability = (0, _util.createPromiseCapability)();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  this._passwordCapability.resolve({\n                    password\n                  });\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this._passwordCapability.reject(ex);\n                }\n              } else {\n                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this._passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.length,\n                  total: data.length\n                });\n              }\n\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.pageCache[data.pageIndex];\n\n              page._startRenderPage(data.transparency, data.intent);\n            });\n            messageHandler.on(\"commonobj\", data => {\n              var _globalThis$FontInspe;\n\n              if (this.destroyed) {\n                return;\n              }\n\n              const [id, type, exportedData] = data;\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  let fontRegistry = null;\n\n                  if (params.pdfBug && ((_globalThis$FontInspe = globalThis.FontInspector) === null || _globalThis$FontInspe === void 0 ? void 0 : _globalThis$FontInspe.enabled)) {\n                    fontRegistry = {\n                      registerFont(font, url) {\n                        globalThis.FontInspector.fontAdded(font, url);\n                      }\n\n                    };\n                  }\n\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                    fontRegistry\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", data => {\n              var _imageData$data;\n\n              if (this.destroyed) {\n                return undefined;\n              }\n\n              const [id, pageIndex, type, imageData] = data;\n              const pageProxy = this.pageCache[pageIndex];\n\n              if (pageProxy.objs.has(id)) {\n                return undefined;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                  if ((imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) > MAX_IMAGE_SIZE_TO_STORE) {\n                    pageProxy.cleanupAfterRender = true;\n                  }\n\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n\n              return undefined;\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.loaded,\n                  total: data.total\n                });\n              }\n            });\n            messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n            messageHandler.on(\"FetchBuiltInCMap\", (data, sink) => {\n              if (this.destroyed) {\n                sink.error(new Error(\"Worker was destroyed\"));\n                return;\n              }\n\n              let fetched = false;\n\n              sink.onPull = () => {\n                if (fetched) {\n                  sink.close();\n                  return;\n                }\n\n                fetched = true;\n                this.CMapReaderFactory.fetch(data).then(function (builtInCMap) {\n                  sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n                }).catch(function (reason) {\n                  sink.error(reason);\n                });\n              };\n            });\n          }\n\n          _onUnsupportedFeature({\n            featureId\n          }) {\n            if (this.destroyed) {\n              return;\n            }\n\n            if (this.loadingTask.onUnsupportedFeature) {\n              this.loadingTask.onUnsupportedFeature(featureId);\n            }\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request\"));\n            }\n\n            const pageIndex = pageNumber - 1;\n\n            if (pageIndex in this.pagePromises) {\n              return this.pagePromises[pageIndex];\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n              this.pageCache[pageIndex] = page;\n              return page;\n            });\n            this.pagePromises[pageIndex] = promise;\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              ref\n            }).catch(function (reason) {\n              return Promise.reject(new Error(reason));\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          saveDocument(annotationStorage) {\n            var _this$_fullReader;\n\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              numPages: this._numPages,\n              annotationStorage: (annotationStorage === null || annotationStorage === void 0 ? void 0 : annotationStorage.serializable) || null,\n              filename: ((_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) ?? null\n            }).finally(() => {\n              if (annotationStorage) {\n                annotationStorage.resetModified();\n              }\n            });\n          }\n\n          getFieldObjects() {\n            return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n          }\n\n          hasJSActions() {\n            return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise(\"HasJSActions\", null));\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getJavaScript() {\n            return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n          }\n\n          getDocJSActions() {\n            return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getPageXfa(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageXfa\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n              var _this$_fullReader2, _this$_fullReader3;\n\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: ((_this$_fullReader2 = this._fullReader) === null || _this$_fullReader2 === void 0 ? void 0 : _this$_fullReader2.filename) ?? null,\n                contentLength: ((_this$_fullReader3 = this._fullReader) === null || _this$_fullReader3 === void 0 ? void 0 : _this$_fullReader3.contentLength) ?? null\n              };\n            });\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          getStats() {\n            return this.messageHandler.sendWithPromise(\"GetStats\", null);\n          }\n\n          async startCleanup(keepLoadedFonts = false) {\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            if (this.destroyed) {\n              return;\n            }\n\n            for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n              const page = this.pageCache[i];\n\n              if (!page) {\n                continue;\n              }\n\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this._hasJSActionsPromise = null;\n          }\n\n          get loadingParams() {\n            const params = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch: params.disableAutoFetch,\n              disableFontFace: params.disableFontFace\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          constructor() {\n            this._objs = Object.create(null);\n          }\n\n          _ensureObj(objId) {\n            if (this._objs[objId]) {\n              return this._objs[objId];\n            }\n\n            return this._objs[objId] = {\n              capability: (0, _util.createPromiseCapability)(),\n              data: null,\n              resolved: false\n            };\n          }\n\n          get(objId, callback = null) {\n            if (callback) {\n              this._ensureObj(objId).capability.promise.then(callback);\n\n              return null;\n            }\n\n            const obj = this._objs[objId];\n\n            if (!obj || !obj.resolved) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this._objs[objId];\n            return (obj === null || obj === void 0 ? void 0 : obj.resolved) || false;\n          }\n\n          resolve(objId, data) {\n            const obj = this._ensureObj(objId);\n\n            obj.resolved = true;\n            obj.data = data;\n            obj.capability.resolve(data);\n          }\n\n          clear() {\n            this._objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          constructor(internalRenderTask) {\n            this._internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this._internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            this._internalRenderTask.cancel();\n          }\n\n        }\n\n        const InternalRenderTask = function InternalRenderTaskClosure() {\n          const canvasInRendering = new WeakSet();\n\n          class InternalRenderTask {\n            constructor({\n              callback,\n              params,\n              objs,\n              commonObjs,\n              operatorList,\n              pageIndex,\n              canvasFactory,\n              webGLContext,\n              useRequestAnimationFrame = false,\n              pdfBug = false\n            }) {\n              this.callback = callback;\n              this.params = params;\n              this.objs = objs;\n              this.commonObjs = commonObjs;\n              this.operatorListIdx = null;\n              this.operatorList = operatorList;\n              this._pageIndex = pageIndex;\n              this.canvasFactory = canvasFactory;\n              this.webGLContext = webGLContext;\n              this._pdfBug = pdfBug;\n              this.running = false;\n              this.graphicsReadyCallback = null;\n              this.graphicsReady = false;\n              this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n              this.cancelled = false;\n              this.capability = (0, _util.createPromiseCapability)();\n              this.task = new RenderTask(this);\n              this._cancelBound = this.cancel.bind(this);\n              this._continueBound = this._continue.bind(this);\n              this._scheduleNextBound = this._scheduleNext.bind(this);\n              this._nextBound = this._next.bind(this);\n              this._canvas = params.canvasContext.canvas;\n            }\n\n            get completed() {\n              return this.capability.promise.catch(function () {});\n            }\n\n            initializeGraphics({\n              transparency = false,\n              optionalContentConfig\n            }) {\n              var _globalThis$StepperMa;\n\n              if (this.cancelled) {\n                return;\n              }\n\n              if (this._canvas) {\n                if (canvasInRendering.has(this._canvas)) {\n                  throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n                }\n\n                canvasInRendering.add(this._canvas);\n              }\n\n              if (this._pdfBug && ((_globalThis$StepperMa = globalThis.StepperManager) === null || _globalThis$StepperMa === void 0 ? void 0 : _globalThis$StepperMa.enabled)) {\n                this.stepper = globalThis.StepperManager.create(this._pageIndex);\n                this.stepper.init(this.operatorList);\n                this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n              }\n\n              const {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              } = this.params;\n              this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);\n              this.gfx.beginDrawing({\n                transform,\n                viewport,\n                transparency,\n                background\n              });\n              this.operatorListIdx = 0;\n              this.graphicsReady = true;\n\n              if (this.graphicsReadyCallback) {\n                this.graphicsReadyCallback();\n              }\n            }\n\n            cancel(error = null) {\n              this.running = false;\n              this.cancelled = true;\n\n              if (this.gfx) {\n                this.gfx.endDrawing();\n              }\n\n              if (this._canvas) {\n                canvasInRendering.delete(this._canvas);\n              }\n\n              this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n            }\n\n            operatorListChanged() {\n              if (!this.graphicsReady) {\n                if (!this.graphicsReadyCallback) {\n                  this.graphicsReadyCallback = this._continueBound;\n                }\n\n                return;\n              }\n\n              if (this.stepper) {\n                this.stepper.updateOperatorList(this.operatorList);\n              }\n\n              if (this.running) {\n                return;\n              }\n\n              this._continue();\n            }\n\n            _continue() {\n              this.running = true;\n\n              if (this.cancelled) {\n                return;\n              }\n\n              if (this.task.onContinue) {\n                this.task.onContinue(this._scheduleNextBound);\n              } else {\n                this._scheduleNext();\n              }\n            }\n\n            _scheduleNext() {\n              if (this._useRequestAnimationFrame) {\n                window.requestAnimationFrame(() => {\n                  this._nextBound().catch(this._cancelBound);\n                });\n              } else {\n                Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n              }\n            }\n\n            async _next() {\n              if (this.cancelled) {\n                return;\n              }\n\n              this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n              if (this.operatorListIdx === this.operatorList.argsArray.length) {\n                this.running = false;\n\n                if (this.operatorList.lastChunk) {\n                  this.gfx.endDrawing();\n\n                  if (this._canvas) {\n                    canvasInRendering.delete(this._canvas);\n                  }\n\n                  this.callback();\n                }\n              }\n            }\n\n          }\n\n          return InternalRenderTask;\n        }();\n\n        const version = '2.8.335';\n        exports.version = version;\n        const build = '228adbf67';\n        exports.build = build;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseFontLoader {\n          constructor({\n            docId,\n            onUnsupportedFeature,\n            ownerDocument = globalThis.document\n          }) {\n            if (this.constructor === BaseFontLoader) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n            }\n\n            this.docId = docId;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this._document = ownerDocument;\n            this.nativeFontFaces = [];\n            this.styleElement = null;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.push(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            let styleElement = this.styleElement;\n\n            if (!styleElement) {\n              styleElement = this.styleElement = this._document.createElement(\"style\");\n              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n            }\n\n            const styleSheet = styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            this.nativeFontFaces.forEach(nativeFontFace => {\n              this._document.fonts.delete(nativeFontFace);\n            });\n            this.nativeFontFaces.length = 0;\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  this._onUnsupportedFeature({\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                  });\n\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent([rule], [font], request);\n              });\n            }\n          }\n\n          _queueLoadingCallback(callback) {\n            (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n          }\n\n          get isFontLoadingAPISupported() {\n            var _this$_document;\n\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", !!((_this$_document = this._document) === null || _this$_document === void 0 ? void 0 : _this$_document.fonts));\n          }\n\n          get isSyncFontLoadingSupported() {\n            (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n          }\n\n          get _loadTestFont() {\n            (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n          }\n\n          _prepareFontLoadEvent(rules, fontsToLoad, request) {\n            (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n          }\n\n        }\n\n        let FontLoader;\n        exports.FontLoader = FontLoader;\n        {\n          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n            constructor(params) {\n              super(params);\n              this.loadingContext = {\n                requests: [],\n                nextRequestId: 0\n              };\n              this.loadTestFontId = 0;\n            }\n\n            get isSyncFontLoadingSupported() {\n              let supported = false;\n\n              if (typeof navigator === \"undefined\") {\n                supported = true;\n              } else {\n                const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n                if ((m === null || m === void 0 ? void 0 : m[1]) >= 14) {\n                  supported = true;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n\n            _queueLoadingCallback(callback) {\n              function completeRequest() {\n                (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                request.done = true;\n\n                while (context.requests.length > 0 && context.requests[0].done) {\n                  const otherRequest = context.requests.shift();\n                  setTimeout(otherRequest.callback, 0);\n                }\n              }\n\n              const context = this.loadingContext;\n              const request = {\n                id: `pdfjs-font-loading-${context.nextRequestId++}`,\n                done: false,\n                complete: completeRequest,\n                callback\n              };\n              context.requests.push(request);\n              return request;\n            }\n\n            get _loadTestFont() {\n              const getLoadTestFont = function () {\n                return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n              };\n\n              return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n            }\n\n            _prepareFontLoadEvent(rules, fonts, request) {\n              function int32(data, offset) {\n                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n              }\n\n              function spliceString(s, offset, remove, insert) {\n                const chunk1 = s.substring(0, offset);\n                const chunk2 = s.substring(offset + remove);\n                return chunk1 + insert + chunk2;\n              }\n\n              let i, ii;\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.width = 1;\n              canvas.height = 1;\n              const ctx = canvas.getContext(\"2d\");\n              let called = 0;\n\n              function isFontReady(name, callback) {\n                called++;\n\n                if (called > 30) {\n                  (0, _util.warn)(\"Load test font never loaded.\");\n                  callback();\n                  return;\n                }\n\n                ctx.font = \"30px \" + name;\n                ctx.fillText(\".\", 0, 20);\n                const imageData = ctx.getImageData(0, 0, 1, 1);\n\n                if (imageData.data[3] > 0) {\n                  callback();\n                  return;\n                }\n\n                setTimeout(isFontReady.bind(null, name, callback));\n              }\n\n              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n              let data = this._loadTestFont;\n              const COMMENT_OFFSET = 976;\n              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n              const CFF_CHECKSUM_OFFSET = 16;\n              const XXXX_VALUE = 0x58585858;\n              let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n              }\n\n              if (i < loadTestFontId.length) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n              }\n\n              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n              const url = `url(data:font/opentype;base64,${btoa(data)});`;\n              const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n              this.insertRule(rule);\n              const names = [];\n\n              for (i = 0, ii = fonts.length; i < ii; i++) {\n                names.push(fonts[i].loadedName);\n              }\n\n              names.push(loadTestFontId);\n\n              const div = this._document.createElement(\"div\");\n\n              div.style.visibility = \"hidden\";\n              div.style.width = div.style.height = \"10px\";\n              div.style.position = \"absolute\";\n              div.style.top = div.style.left = \"0px\";\n\n              for (i = 0, ii = names.length; i < ii; ++i) {\n                const span = this._document.createElement(\"span\");\n\n                span.textContent = \"Hi\";\n                span.style.fontFamily = names[i];\n                div.appendChild(span);\n              }\n\n              this._document.body.appendChild(div);\n\n              isFontReady(loadTestFontId, () => {\n                this._document.body.removeChild(div);\n\n                request.complete();\n              });\n            }\n\n          };\n        }\n\n        class FontFaceObject {\n          constructor(translatedData, {\n            isEvalSupported = true,\n            disableFontFace = false,\n            ignoreErrors = false,\n            onUnsupportedFeature,\n            fontRegistry = null\n          }) {\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this.fontRegistry = fontRegistry;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this);\n            }\n\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(new Uint8Array(this.data));\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            const rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this, url);\n            }\n\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds, current;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n              let args,\n                  js = \"\";\n\n              for (let i = 0, ii = cmds.length; i < ii; i++) {\n                current = cmds[i];\n\n                if (current.args !== undefined) {\n                  args = current.args.join(\",\");\n                } else {\n                  args = \"\";\n                }\n\n                js += \"c.\" + current.cmd + \"(\" + args + \");\\n\";\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", js);\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (let i = 0, ii = cmds.length; i < ii; i++) {\n                current = cmds[i];\n\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _util = __w_pdfjs_require__(2);\n\n        let NodeCanvasFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n          }\n\n        };\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n        let NodeCMapReaderFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\n        if (_is_node.isNodeJS) {\n          exports.NodeCanvasFactory = NodeCanvasFactory = class extends _display_utils.BaseCanvasFactory {\n            create(width, height) {\n              if (width <= 0 || height <= 0) {\n                throw new Error(\"Invalid canvas size\");\n              }\n\n              const Canvas = require(\"canvas\");\n\n              const canvas = Canvas.createCanvas(width, height);\n              return {\n                canvas,\n                context: canvas.getContext(\"2d\")\n              };\n            }\n\n          };\n          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _display_utils.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n              return new Promise((resolve, reject) => {\n                const fs = require(\"fs\");\n\n                fs.readFile(url, (error, data) => {\n                  if (error || !data) {\n                    reject(new Error(error));\n                    return;\n                  }\n\n                  resolve({\n                    cMapData: new Uint8Array(data),\n                    compressionType\n                  });\n                });\n              });\n            }\n\n          };\n        }\n        /***/\n\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationStorage = void 0;\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        class AnnotationStorage {\n          constructor() {\n            this._storage = new Map();\n            this._modified = false;\n            this.onSetModified = null;\n            this.onResetModified = null;\n          }\n\n          getValue(key, defaultValue) {\n            const obj = this._storage.get(key);\n\n            return obj !== undefined ? obj : defaultValue;\n          }\n\n          getOrCreateValue(key, defaultValue) {\n            (0, _display_utils.deprecated)(\"Use getValue instead.\");\n\n            if (this._storage.has(key)) {\n              return this._storage.get(key);\n            }\n\n            this._storage.set(key, defaultValue);\n\n            return defaultValue;\n          }\n\n          setValue(key, value) {\n            const obj = this._storage.get(key);\n\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              this._storage.set(key, value);\n\n              modified = true;\n            }\n\n            if (modified) {\n              this._setModified();\n            }\n          }\n\n          getAll() {\n            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;\n          }\n\n          get size() {\n            return this._storage.size;\n          }\n\n          _setModified() {\n            if (!this._modified) {\n              this._modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this._modified) {\n              this._modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get serializable() {\n            return this._storage.size > 0 ? this._storage : null;\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n        /***/\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.apiCompatibilityParams = void 0;\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        const compatibilityParams = Object.create(null);\n        {\n          (function checkFontFace() {\n            if (_is_node.isNodeJS) {\n              compatibilityParams.disableFontFace = true;\n            }\n          })();\n        }\n        const apiCompatibilityParams = Object.freeze(compatibilityParams);\n        exports.apiCompatibilityParams = apiCompatibilityParams;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _pattern_helper = __w_pdfjs_require__(11);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const COMPILE_TYPE3_GLYPHS = true;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        const LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n        function addContextCurrentTransform(ctx) {\n          if (!ctx.mozCurrentTransform) {\n            ctx._originalSave = ctx.save;\n            ctx._originalRestore = ctx.restore;\n            ctx._originalRotate = ctx.rotate;\n            ctx._originalScale = ctx.scale;\n            ctx._originalTranslate = ctx.translate;\n            ctx._originalTransform = ctx.transform;\n            ctx._originalSetTransform = ctx.setTransform;\n            ctx._originalResetTransform = ctx.resetTransform;\n            ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n            ctx._transformStack = [];\n\n            try {\n              const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), \"lineWidth\");\n              ctx._setLineWidth = desc.set;\n              ctx._getLineWidth = desc.get;\n              Object.defineProperty(ctx, \"lineWidth\", {\n                set: function setLineWidth(width) {\n                  this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n                },\n                get: function getLineWidth() {\n                  return this._getLineWidth();\n                }\n              });\n            } catch (_) {}\n\n            Object.defineProperty(ctx, \"mozCurrentTransform\", {\n              get: function getCurrentTransform() {\n                return this._transformMatrix;\n              }\n            });\n            Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n              get: function getCurrentTransformInverse() {\n                const m = this._transformMatrix;\n                const a = m[0],\n                      b = m[1],\n                      c = m[2],\n                      d = m[3],\n                      e = m[4],\n                      f = m[5];\n                const ad_bc = a * d - b * c;\n                const bc_ad = b * c - a * d;\n                return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n              }\n            });\n\n            ctx.save = function ctxSave() {\n              const old = this._transformMatrix;\n\n              this._transformStack.push(old);\n\n              this._transformMatrix = old.slice(0, 6);\n\n              this._originalSave();\n            };\n\n            ctx.restore = function ctxRestore() {\n              const prev = this._transformStack.pop();\n\n              if (prev) {\n                this._transformMatrix = prev;\n\n                this._originalRestore();\n              }\n            };\n\n            ctx.translate = function ctxTranslate(x, y) {\n              const m = this._transformMatrix;\n              m[4] = m[0] * x + m[2] * y + m[4];\n              m[5] = m[1] * x + m[3] * y + m[5];\n\n              this._originalTranslate(x, y);\n            };\n\n            ctx.scale = function ctxScale(x, y) {\n              const m = this._transformMatrix;\n              m[0] = m[0] * x;\n              m[1] = m[1] * x;\n              m[2] = m[2] * y;\n              m[3] = m[3] * y;\n\n              this._originalScale(x, y);\n            };\n\n            ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n              const m = this._transformMatrix;\n              this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n              ctx._originalTransform(a, b, c, d, e, f);\n            };\n\n            ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n              this._transformMatrix = [a, b, c, d, e, f];\n\n              ctx._originalSetTransform(a, b, c, d, e, f);\n            };\n\n            ctx.resetTransform = function ctxResetTransform() {\n              this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n              ctx._originalResetTransform();\n            };\n\n            ctx.rotate = function ctxRotate(angle) {\n              const cosValue = Math.cos(angle);\n              const sinValue = Math.sin(angle);\n              const m = this._transformMatrix;\n              this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n              this._originalRotate(angle);\n            };\n          }\n        }\n\n        const CachedCanvases = function CachedCanvasesClosure() {\n          function CachedCanvases(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          CachedCanvases.prototype = {\n            getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {\n              let canvasEntry;\n\n              if (this.cache[id] !== undefined) {\n                canvasEntry = this.cache[id];\n                this.canvasFactory.reset(canvasEntry, width, height);\n                canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n              } else {\n                canvasEntry = this.canvasFactory.create(width, height);\n                this.cache[id] = canvasEntry;\n              }\n\n              if (trackTransform) {\n                addContextCurrentTransform(canvasEntry.context);\n              }\n\n              return canvasEntry;\n            },\n\n            clear() {\n              for (const id in this.cache) {\n                const canvasEntry = this.cache[id];\n                this.canvasFactory.destroy(canvasEntry);\n                delete this.cache[id];\n              }\n            }\n\n          };\n          return CachedCanvases;\n        }();\n\n        function compileType3Glyph(imgData) {\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const width = imgData.width,\n                height = imgData.height,\n                width1 = width + 1;\n          let i, ii, j, j0;\n          const points = new Uint8Array(width1 * (height + 1));\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const lineSize = width + 7 & ~7,\n                data0 = imgData.data;\n          const data = new Uint8Array(lineSize * height);\n          let pos = 0;\n\n          for (i = 0, ii = data0.length; i < ii; i++) {\n            const elem = data0[i];\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const outlines = [];\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            const coords = [p % width1, i];\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              coords.push(p % width1);\n              coords.push(p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            outlines.push(coords);\n            --i;\n          }\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.beginPath();\n\n            for (let k = 0, kk = outlines.length; k < kk; k++) {\n              const o = outlines[k];\n              c.moveTo(o[0], o[1]);\n\n              for (let l = 2, ll = o.length; l < ll; l += 2) {\n                c.lineTo(o[l], o[l + 1]);\n              }\n            }\n\n            c.fill();\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        const CanvasExtraState = function CanvasExtraStateClosure() {\n          function CanvasExtraState() {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.resumeSMaskCtx = null;\n            this.transferMaps = null;\n          }\n\n          CanvasExtraState.prototype = {\n            clone: function CanvasExtraState_clone() {\n              return Object.create(this);\n            },\n            setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n          };\n          return CanvasExtraState;\n        }();\n\n        const CanvasGraphics = function CanvasGraphicsClosure() {\n          const EXECUTION_TIME = 15;\n          const EXECUTION_STEPS = 10;\n\n          function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {\n            this.ctx = canvasCtx;\n            this.current = new CanvasExtraState();\n            this.stateStack = [];\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.res = null;\n            this.xobjs = null;\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.canvasFactory = canvasFactory;\n            this.webGLContext = webGLContext;\n            this.imageLayer = imageLayer;\n            this.groupStack = [];\n            this.processingType3 = null;\n            this.baseTransform = null;\n            this.baseTransformStack = [];\n            this.groupLevel = 0;\n            this.smaskStack = [];\n            this.smaskCounter = 0;\n            this.tempSMask = null;\n            this.contentVisible = true;\n            this.markedContentStack = [];\n            this.optionalContentConfig = optionalContentConfig;\n            this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n\n            if (canvasCtx) {\n              addContextCurrentTransform(canvasCtx);\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          function putBinaryImageData(ctx, imgData, transferMaps = null) {\n            if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n              ctx.putImageData(imgData, 0, 0);\n              return;\n            }\n\n            const height = imgData.height,\n                  width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0,\n                destPos;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n            let i, j, thisChunkHeight, elemsInThisChunk;\n            let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n            if (transferMaps) {\n              switch (transferMaps.length) {\n                case 1:\n                  transferMapRed = transferMaps[0];\n                  transferMapGreen = transferMaps[0];\n                  transferMapBlue = transferMaps[0];\n                  transferMapGray = transferMaps[0];\n                  break;\n\n                case 4:\n                  transferMapRed = transferMaps[0];\n                  transferMapGreen = transferMaps[1];\n                  transferMapBlue = transferMaps[2];\n                  transferMapGray = transferMaps[3];\n                  break;\n              }\n            }\n\n            if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n              const srcLength = src.byteLength;\n              const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n              const dest32DataLength = dest32.length;\n              const fullSrcDiff = width + 7 >> 3;\n              let white = 0xffffffff;\n              let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n              if (transferMapGray) {\n                if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                  [white, black] = [black, white];\n                }\n              }\n\n              for (i = 0; i < totalChunks; i++) {\n                thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n                destPos = 0;\n\n                for (j = 0; j < thisChunkHeight; j++) {\n                  const srcDiff = srcLength - srcPos;\n                  let k = 0;\n                  const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                  const kEndUnrolled = kEnd & ~7;\n                  let mask = 0;\n                  let srcByte = 0;\n\n                  for (; k < kEndUnrolled; k += 8) {\n                    srcByte = src[srcPos++];\n                    dest32[destPos++] = srcByte & 128 ? white : black;\n                    dest32[destPos++] = srcByte & 64 ? white : black;\n                    dest32[destPos++] = srcByte & 32 ? white : black;\n                    dest32[destPos++] = srcByte & 16 ? white : black;\n                    dest32[destPos++] = srcByte & 8 ? white : black;\n                    dest32[destPos++] = srcByte & 4 ? white : black;\n                    dest32[destPos++] = srcByte & 2 ? white : black;\n                    dest32[destPos++] = srcByte & 1 ? white : black;\n                  }\n\n                  for (; k < kEnd; k++) {\n                    if (mask === 0) {\n                      srcByte = src[srcPos++];\n                      mask = 128;\n                    }\n\n                    dest32[destPos++] = srcByte & mask ? white : black;\n                    mask >>= 1;\n                  }\n                }\n\n                while (destPos < dest32DataLength) {\n                  dest32[destPos++] = 0;\n                }\n\n                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n              }\n            } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n              const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n              j = 0;\n              elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n              for (i = 0; i < fullChunks; i++) {\n                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n                srcPos += elemsInThisChunk;\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < elemsInThisChunk; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, j);\n                j += FULL_CHUNK_HEIGHT;\n              }\n\n              if (i < totalChunks) {\n                elemsInThisChunk = width * partialChunkHeight * 4;\n                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < elemsInThisChunk; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, j);\n              }\n            } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n              const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n              thisChunkHeight = FULL_CHUNK_HEIGHT;\n              elemsInThisChunk = width * thisChunkHeight;\n\n              for (i = 0; i < totalChunks; i++) {\n                if (i >= fullChunks) {\n                  thisChunkHeight = partialChunkHeight;\n                  elemsInThisChunk = width * thisChunkHeight;\n                }\n\n                destPos = 0;\n\n                for (j = elemsInThisChunk; j--;) {\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = 255;\n                }\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < destPos; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n              }\n            } else {\n              throw new Error(`bad image kind: ${imgData.kind}`);\n            }\n          }\n\n          function putBinaryImageMask(ctx, imgData) {\n            const height = imgData.height,\n                  width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n\n            for (let i = 0; i < totalChunks; i++) {\n              const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              let destPos = 3;\n\n              for (let j = 0; j < thisChunkHeight; j++) {\n                let elem,\n                    mask = 0;\n\n                for (let k = 0; k < width; k++) {\n                  if (!mask) {\n                    elem = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest[destPos] = elem & mask ? 0 : 255;\n                  destPos += 4;\n                  mask >>= 1;\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          }\n\n          function copyCtxState(sourceCtx, destCtx) {\n            const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n            for (let i = 0, ii = properties.length; i < ii; i++) {\n              const property = properties[i];\n\n              if (sourceCtx[property] !== undefined) {\n                destCtx[property] = sourceCtx[property];\n              }\n            }\n\n            if (sourceCtx.setLineDash !== undefined) {\n              destCtx.setLineDash(sourceCtx.getLineDash());\n              destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n            }\n          }\n\n          function resetCtxToDefault(ctx) {\n            ctx.strokeStyle = \"#000000\";\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRule = \"nonzero\";\n            ctx.globalAlpha = 1;\n            ctx.lineWidth = 1;\n            ctx.lineCap = \"butt\";\n            ctx.lineJoin = \"miter\";\n            ctx.miterLimit = 10;\n            ctx.globalCompositeOperation = \"source-over\";\n            ctx.font = \"10px sans-serif\";\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash([]);\n              ctx.lineDashOffset = 0;\n            }\n          }\n\n          function composeSMaskBackdrop(bytes, r0, g0, b0) {\n            const length = bytes.length;\n\n            for (let i = 3; i < length; i += 4) {\n              const alpha = bytes[i];\n\n              if (alpha === 0) {\n                bytes[i - 3] = r0;\n                bytes[i - 2] = g0;\n                bytes[i - 1] = b0;\n              } else if (alpha < 255) {\n                const alpha_ = 255 - alpha;\n                bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n                bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n                bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n              }\n            }\n          }\n\n          function composeSMaskAlpha(maskData, layerData, transferMap) {\n            const length = maskData.length;\n            const scale = 1 / 255;\n\n            for (let i = 3; i < length; i += 4) {\n              const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n              layerData[i] = layerData[i] * alpha * scale | 0;\n            }\n          }\n\n          function composeSMaskLuminosity(maskData, layerData, transferMap) {\n            const length = maskData.length;\n\n            for (let i = 3; i < length; i += 4) {\n              const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n              layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n            }\n          }\n\n          function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n            const hasBackdrop = !!backdrop;\n            const r0 = hasBackdrop ? backdrop[0] : 0;\n            const g0 = hasBackdrop ? backdrop[1] : 0;\n            const b0 = hasBackdrop ? backdrop[2] : 0;\n            let composeFn;\n\n            if (subtype === \"Luminosity\") {\n              composeFn = composeSMaskLuminosity;\n            } else {\n              composeFn = composeSMaskAlpha;\n            }\n\n            const PIXELS_TO_PROCESS = 1048576;\n            const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n            for (let row = 0; row < height; row += chunkSize) {\n              const chunkHeight = Math.min(chunkSize, height - row);\n              const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n              const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n              if (hasBackdrop) {\n                composeSMaskBackdrop(maskData.data, r0, g0, b0);\n              }\n\n              composeFn(maskData.data, layerData.data, transferMap);\n              maskCtx.putImageData(layerData, 0, row);\n            }\n          }\n\n          function composeSMask(ctx, smask, layerCtx, webGLContext) {\n            const mask = smask.canvas;\n            const maskCtx = smask.context;\n            ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n            const backdrop = smask.backdrop || null;\n\n            if (!smask.transferMap && webGLContext.isEnabled) {\n              const composed = webGLContext.composeSMask({\n                layer: layerCtx.canvas,\n                mask,\n                properties: {\n                  subtype: smask.subtype,\n                  backdrop\n                }\n              });\n              ctx.setTransform(1, 0, 0, 1, 0, 0);\n              ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n              return;\n            }\n\n            genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);\n            ctx.drawImage(mask, 0, 0);\n          }\n\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n          const NORMAL_CLIP = {};\n          const EO_CLIP = {};\n          CanvasGraphics.prototype = {\n            beginDrawing({\n              transform,\n              viewport,\n              transparency = false,\n              background = null\n            }) {\n              const width = this.ctx.canvas.width;\n              const height = this.ctx.canvas.height;\n              this.ctx.save();\n              this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n              this.ctx.fillRect(0, 0, width, height);\n              this.ctx.restore();\n\n              if (transparency) {\n                const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n                this.compositeCtx = this.ctx;\n                this.transparentCanvas = transparentCanvas.canvas;\n                this.ctx = transparentCanvas.context;\n                this.ctx.save();\n                this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n              }\n\n              this.ctx.save();\n              resetCtxToDefault(this.ctx);\n\n              if (transform) {\n                this.ctx.transform.apply(this.ctx, transform);\n              }\n\n              this.ctx.transform.apply(this.ctx, viewport.transform);\n              this.baseTransform = this.ctx.mozCurrentTransform.slice();\n              this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n              if (this.imageLayer) {\n                this.imageLayer.beginLayout();\n              }\n            },\n\n            executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              let i = executionStartIdx || 0;\n              const argsArrayLen = argsArray.length;\n\n              if (argsArrayLen === i) {\n                return i;\n              }\n\n              const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n              const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n              let steps = 0;\n              const commonObjs = this.commonObjs;\n              const objs = this.objs;\n              let fnId;\n\n              while (true) {\n                if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                  stepper.breakIt(i, continueCallback);\n                  return i;\n                }\n\n                fnId = fnArray[i];\n\n                if (fnId !== _util.OPS.dependency) {\n                  this[fnId].apply(this, argsArray[i]);\n                } else {\n                  for (const depObjId of argsArray[i]) {\n                    const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                    if (!objsPool.has(depObjId)) {\n                      objsPool.get(depObjId, continueCallback);\n                      return i;\n                    }\n                  }\n                }\n\n                i++;\n\n                if (i === argsArrayLen) {\n                  return i;\n                }\n\n                if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                  if (Date.now() > endTime) {\n                    continueCallback();\n                    return i;\n                  }\n\n                  steps = 0;\n                }\n              }\n            },\n            endDrawing: function CanvasGraphics_endDrawing() {\n              while (this.stateStack.length || this.current.activeSMask !== null) {\n                this.restore();\n              }\n\n              this.ctx.restore();\n\n              if (this.transparentCanvas) {\n                this.ctx = this.compositeCtx;\n                this.ctx.save();\n                this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                this.ctx.drawImage(this.transparentCanvas, 0, 0);\n                this.ctx.restore();\n                this.transparentCanvas = null;\n              }\n\n              this.cachedCanvases.clear();\n              this.webGLContext.clear();\n\n              if (this.imageLayer) {\n                this.imageLayer.endLayout();\n              }\n            },\n            setLineWidth: function CanvasGraphics_setLineWidth(width) {\n              this.current.lineWidth = width;\n              this.ctx.lineWidth = width;\n            },\n            setLineCap: function CanvasGraphics_setLineCap(style) {\n              this.ctx.lineCap = LINE_CAP_STYLES[style];\n            },\n            setLineJoin: function CanvasGraphics_setLineJoin(style) {\n              this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n            },\n            setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n              this.ctx.miterLimit = limit;\n            },\n            setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n              const ctx = this.ctx;\n\n              if (ctx.setLineDash !== undefined) {\n                ctx.setLineDash(dashArray);\n                ctx.lineDashOffset = dashPhase;\n              }\n            },\n\n            setRenderingIntent(intent) {},\n\n            setFlatness(flatness) {},\n\n            setGState: function CanvasGraphics_setGState(states) {\n              for (let i = 0, ii = states.length; i < ii; i++) {\n                const state = states[i];\n                const key = state[0];\n                const value = state[1];\n\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value[0], value[1]);\n                    break;\n\n                  case \"CA\":\n                    this.current.strokeAlpha = state[1];\n                    break;\n\n                  case \"ca\":\n                    this.current.fillAlpha = state[1];\n                    this.ctx.globalAlpha = state[1];\n                    break;\n\n                  case \"BM\":\n                    this.ctx.globalCompositeOperation = value;\n                    break;\n\n                  case \"SMask\":\n                    if (this.current.activeSMask) {\n                      if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                        this.suspendSMaskGroup();\n                      } else {\n                        this.endSMaskGroup();\n                      }\n                    }\n\n                    this.current.activeSMask = value ? this.tempSMask : null;\n\n                    if (this.current.activeSMask) {\n                      this.beginSMaskGroup();\n                    }\n\n                    this.tempSMask = null;\n                    break;\n\n                  case \"TR\":\n                    this.current.transferMaps = value;\n                }\n              }\n            },\n            beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n              const activeSMask = this.current.activeSMask;\n              const drawnWidth = activeSMask.canvas.width;\n              const drawnHeight = activeSMask.canvas.height;\n              const cacheId = \"smaskGroupAt\" + this.groupLevel;\n              const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n              const currentCtx = this.ctx;\n              const currentTransform = currentCtx.mozCurrentTransform;\n              this.ctx.save();\n              const groupCtx = scratchCanvas.context;\n              groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n              groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n              groupCtx.transform.apply(groupCtx, currentTransform);\n              activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n              copyCtxState(currentCtx, groupCtx);\n              this.ctx = groupCtx;\n              this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n            },\n            suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n              const groupCtx = this.ctx;\n              this.groupLevel--;\n              this.ctx = this.groupStack.pop();\n              composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n              this.ctx.restore();\n              this.ctx.save();\n              copyCtxState(groupCtx, this.ctx);\n              this.current.resumeSMaskCtx = groupCtx;\n\n              const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n              this.ctx.transform.apply(this.ctx, deltaTransform);\n              groupCtx.save();\n              groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n              groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n              groupCtx.restore();\n            },\n            resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {\n              const groupCtx = this.current.resumeSMaskCtx;\n              const currentCtx = this.ctx;\n              this.ctx = groupCtx;\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n            },\n            endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n              const groupCtx = this.ctx;\n              this.groupLevel--;\n              this.ctx = this.groupStack.pop();\n              composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n              this.ctx.restore();\n              copyCtxState(groupCtx, this.ctx);\n\n              const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n              this.ctx.transform.apply(this.ctx, deltaTransform);\n            },\n            save: function CanvasGraphics_save() {\n              this.ctx.save();\n              const old = this.current;\n              this.stateStack.push(old);\n              this.current = old.clone();\n              this.current.resumeSMaskCtx = null;\n            },\n            restore: function CanvasGraphics_restore() {\n              if (this.current.resumeSMaskCtx) {\n                this.resumeSMaskGroup();\n              }\n\n              if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n                this.endSMaskGroup();\n              }\n\n              if (this.stateStack.length !== 0) {\n                this.current = this.stateStack.pop();\n                this.ctx.restore();\n                this.pendingClip = null;\n                this._cachedGetSinglePixelWidth = null;\n              } else {\n                this.current.activeSMask = null;\n              }\n            },\n            transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n              this.ctx.transform(a, b, c, d, e, f);\n              this._cachedGetSinglePixelWidth = null;\n            },\n            constructPath: function CanvasGraphics_constructPath(ops, args) {\n              const ctx = this.ctx;\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n\n              for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n                switch (ops[i] | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    ctx.moveTo(x, y);\n\n                    if (width === 0 || height === 0) {\n                      ctx.lineTo(xw, yh);\n                    } else {\n                      ctx.lineTo(xw, y);\n                      ctx.lineTo(xw, yh);\n                      ctx.lineTo(x, yh);\n                    }\n\n                    ctx.closePath();\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    ctx.moveTo(x, y);\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    ctx.lineTo(x, y);\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    ctx.closePath();\n                    break;\n                }\n              }\n\n              current.setCurrentPoint(x, y);\n            },\n            closePath: function CanvasGraphics_closePath() {\n              this.ctx.closePath();\n            },\n            stroke: function CanvasGraphics_stroke(consumePath) {\n              consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n              const ctx = this.ctx;\n              const strokeColor = this.current.strokeColor;\n              ctx.globalAlpha = this.current.strokeAlpha;\n\n              if (this.contentVisible) {\n                if (typeof strokeColor === \"object\" && (strokeColor === null || strokeColor === void 0 ? void 0 : strokeColor.getPattern)) {\n                  ctx.save();\n                  const transform = ctx.mozCurrentTransform;\n\n                  const scale = _util.Util.singularValueDecompose2dScale(transform)[0];\n\n                  ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n                  const lineWidth = this.getSinglePixelWidth();\n                  const scaledLineWidth = this.current.lineWidth * scale;\n\n                  if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  } else {\n                    ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);\n                  }\n\n                  ctx.stroke();\n                  ctx.restore();\n                } else {\n                  const lineWidth = this.getSinglePixelWidth();\n\n                  if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n                    ctx.save();\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                    ctx.stroke();\n                    ctx.restore();\n                  } else {\n                    ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                    ctx.stroke();\n                  }\n                }\n              }\n\n              if (consumePath) {\n                this.consumePath();\n              }\n\n              ctx.globalAlpha = this.current.fillAlpha;\n            },\n            closeStroke: function CanvasGraphics_closeStroke() {\n              this.closePath();\n              this.stroke();\n            },\n            fill: function CanvasGraphics_fill(consumePath) {\n              consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n              const ctx = this.ctx;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n              let needRestore = false;\n\n              if (isPatternFill) {\n                ctx.save();\n\n                if (this.baseTransform) {\n                  ctx.setTransform.apply(ctx, this.baseTransform);\n                }\n\n                ctx.fillStyle = fillColor.getPattern(ctx, this);\n                needRestore = true;\n              }\n\n              if (this.contentVisible) {\n                if (this.pendingEOFill) {\n                  ctx.fill(\"evenodd\");\n                  this.pendingEOFill = false;\n                } else {\n                  ctx.fill();\n                }\n              }\n\n              if (needRestore) {\n                ctx.restore();\n              }\n\n              if (consumePath) {\n                this.consumePath();\n              }\n            },\n            eoFill: function CanvasGraphics_eoFill() {\n              this.pendingEOFill = true;\n              this.fill();\n            },\n            fillStroke: function CanvasGraphics_fillStroke() {\n              this.fill(false);\n              this.stroke(false);\n              this.consumePath();\n            },\n            eoFillStroke: function CanvasGraphics_eoFillStroke() {\n              this.pendingEOFill = true;\n              this.fillStroke();\n            },\n            closeFillStroke: function CanvasGraphics_closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            },\n            closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n              this.pendingEOFill = true;\n              this.closePath();\n              this.fillStroke();\n            },\n            endPath: function CanvasGraphics_endPath() {\n              this.consumePath();\n            },\n            clip: function CanvasGraphics_clip() {\n              this.pendingClip = NORMAL_CLIP;\n            },\n            eoClip: function CanvasGraphics_eoClip() {\n              this.pendingClip = EO_CLIP;\n            },\n            beginText: function CanvasGraphics_beginText() {\n              this.current.textMatrix = _util.IDENTITY_MATRIX;\n              this.current.textMatrixScale = 1;\n              this.current.x = this.current.lineX = 0;\n              this.current.y = this.current.lineY = 0;\n            },\n            endText: function CanvasGraphics_endText() {\n              const paths = this.pendingTextPaths;\n              const ctx = this.ctx;\n\n              if (paths === undefined) {\n                ctx.beginPath();\n                return;\n              }\n\n              ctx.save();\n              ctx.beginPath();\n\n              for (let i = 0; i < paths.length; i++) {\n                const path = paths[i];\n                ctx.setTransform.apply(ctx, path.transform);\n                ctx.translate(path.x, path.y);\n                path.addToPath(ctx, path.fontSize);\n              }\n\n              ctx.restore();\n              ctx.clip();\n              ctx.beginPath();\n              delete this.pendingTextPaths;\n            },\n            setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n              this.current.charSpacing = spacing;\n            },\n            setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n              this.current.wordSpacing = spacing;\n            },\n            setHScale: function CanvasGraphics_setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            },\n            setLeading: function CanvasGraphics_setLeading(leading) {\n              this.current.leading = -leading;\n            },\n            setFont: function CanvasGraphics_setFont(fontRefName, size) {\n              const fontObj = this.commonObjs.get(fontRefName);\n              const current = this.current;\n\n              if (!fontObj) {\n                throw new Error(`Can't find font for ${fontRefName}`);\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n              if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n                (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n              }\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              this.current.font = fontObj;\n              this.current.fontSize = size;\n\n              if (fontObj.isType3Font) {\n                return;\n              }\n\n              const name = fontObj.loadedName || \"sans-serif\";\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n              const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n              let browserFontSize = size;\n\n              if (size < MIN_FONT_SIZE) {\n                browserFontSize = MIN_FONT_SIZE;\n              } else if (size > MAX_FONT_SIZE) {\n                browserFontSize = MAX_FONT_SIZE;\n              }\n\n              this.current.fontSizeScale = size / browserFontSize;\n              this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n            },\n            setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n              this.current.textRenderingMode = mode;\n            },\n            setTextRise: function CanvasGraphics_setTextRise(rise) {\n              this.current.textRise = rise;\n            },\n            moveText: function CanvasGraphics_moveText(x, y) {\n              this.current.x = this.current.lineX += x;\n              this.current.y = this.current.lineY += y;\n            },\n            setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            },\n            setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n              this.current.textMatrix = [a, b, c, d, e, f];\n              this.current.textMatrixScale = Math.hypot(a, b);\n              this.current.x = this.current.lineX = 0;\n              this.current.y = this.current.lineY = 0;\n            },\n            nextLine: function CanvasGraphics_nextLine() {\n              this.moveText(0, this.current.leading);\n            },\n\n            paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n              const ctx = this.ctx;\n              const current = this.current;\n              const font = current.font;\n              const textRenderingMode = current.textRenderingMode;\n              const fontSize = current.fontSize / current.fontSizeScale;\n              const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n              const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n              const patternFill = current.patternFill && !font.missingFile;\n              let addToPath;\n\n              if (font.disableFontFace || isAddToPathSet || patternFill) {\n                addToPath = font.getPathGenerator(this.commonObjs, character);\n              }\n\n              if (font.disableFontFace || patternFill) {\n                ctx.save();\n                ctx.translate(x, y);\n                ctx.beginPath();\n                addToPath(ctx, fontSize);\n\n                if (patternTransform) {\n                  ctx.setTransform.apply(ctx, patternTransform);\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  ctx.fill();\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  if (resetLineWidthToOne) {\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  }\n\n                  ctx.stroke();\n                }\n\n                ctx.restore();\n              } else {\n                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  ctx.fillText(character, x, y);\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  if (resetLineWidthToOne) {\n                    ctx.save();\n                    ctx.moveTo(x, y);\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                    ctx.strokeText(character, 0, 0);\n                    ctx.restore();\n                  } else {\n                    ctx.strokeText(character, x, y);\n                  }\n                }\n              }\n\n              if (isAddToPathSet) {\n                const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n                paths.push({\n                  transform: ctx.mozCurrentTransform,\n                  x,\n                  y,\n                  fontSize,\n                  addToPath\n                });\n              }\n            },\n\n            get isFontSubpixelAAEnabled() {\n              const {\n                context: ctx\n              } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n              ctx.scale(1.5, 1);\n              ctx.fillText(\"I\", 0, 10);\n              const data = ctx.getImageData(0, 0, 10, 10).data;\n              let enabled = false;\n\n              for (let i = 3; i < data.length; i += 4) {\n                if (data[i] > 0 && data[i] < 255) {\n                  enabled = true;\n                  break;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n            },\n\n            showText: function CanvasGraphics_showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n\n              if (font.isType3Font) {\n                return this.showType3Text(glyphs);\n              }\n\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return undefined;\n              }\n\n              const ctx = this.ctx;\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const glyphsLength = glyphs.length;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n              ctx.save();\n              let patternTransform;\n\n              if (current.patternFill) {\n                ctx.save();\n                const pattern = current.fillColor.getPattern(ctx, this);\n                patternTransform = ctx.mozCurrentTransform;\n                ctx.restore();\n                ctx.fillStyle = pattern;\n              }\n\n              ctx.transform.apply(ctx, current.textMatrix);\n              ctx.translate(current.x, current.y + current.textRise);\n\n              if (fontDirection > 0) {\n                ctx.scale(textHScale, -1);\n              } else {\n                ctx.scale(textHScale, 1);\n              }\n\n              let lineWidth = current.lineWidth;\n              let resetLineWidthToOne = false;\n              const scale = current.textMatrixScale;\n\n              if (scale === 0 || lineWidth === 0) {\n                const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  this._cachedGetSinglePixelWidth = null;\n                  lineWidth = this.getSinglePixelWidth();\n                  resetLineWidthToOne = lineWidth < 0;\n                }\n              } else {\n                lineWidth /= scale;\n              }\n\n              if (fontSizeScale !== 1.0) {\n                ctx.scale(fontSizeScale, fontSizeScale);\n                lineWidth /= fontSizeScale;\n              }\n\n              ctx.lineWidth = lineWidth;\n              let x = 0,\n                  i;\n\n              for (i = 0; i < glyphsLength; ++i) {\n                const glyph = glyphs[i];\n\n                if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                let restoreNeeded = false;\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                const accent = glyph.accent;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (font.remeasure && width > 0) {\n                  const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                  if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                    const characterScaleX = width / measuredWidth;\n                    restoreNeeded = true;\n                    ctx.save();\n                    ctx.scale(characterScaleX, 1);\n                    scaledX /= characterScaleX;\n                  } else if (width !== measuredWidth) {\n                    scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                  }\n                }\n\n                if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                  if (simpleFillText && !accent) {\n                    ctx.fillText(character, scaledX, scaledY);\n                  } else {\n                    this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n                    if (accent) {\n                      const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                      const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                      this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n                    }\n                  }\n                }\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n\n                if (restoreNeeded) {\n                  ctx.restore();\n                }\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              ctx.restore();\n            },\n            showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n              const ctx = this.ctx;\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n              const fontDirection = current.fontDirection;\n              const spacingDir = font.vertical ? 1 : -1;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const textHScale = current.textHScale * fontDirection;\n              const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              const glyphsLength = glyphs.length;\n              const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n              let i, glyph, width, spacingLength;\n\n              if (isTextInvisible || fontSize === 0) {\n                return;\n              }\n\n              this._cachedGetSinglePixelWidth = null;\n              ctx.save();\n              ctx.transform.apply(ctx, current.textMatrix);\n              ctx.translate(current.x, current.y);\n              ctx.scale(textHScale, fontDirection);\n\n              for (i = 0; i < glyphsLength; ++i) {\n                glyph = glyphs[i];\n\n                if ((0, _util.isNum)(glyph)) {\n                  spacingLength = spacingDir * glyph * fontSize / 1000;\n                  this.ctx.translate(spacingLength, 0);\n                  current.x += spacingLength * textHScale;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n                if (!operatorList) {\n                  (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                  continue;\n                }\n\n                if (this.contentVisible) {\n                  this.processingType3 = glyph;\n                  this.save();\n                  ctx.scale(fontSize, fontSize);\n                  ctx.transform.apply(ctx, fontMatrix);\n                  this.executeOperatorList(operatorList);\n                  this.restore();\n                }\n\n                const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n                width = transformed[0] * fontSize + spacing;\n                ctx.translate(width, 0);\n                current.x += width * textHScale;\n              }\n\n              ctx.restore();\n              this.processingType3 = null;\n            },\n            setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},\n            setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n              this.ctx.rect(llx, lly, urx - llx, ury - lly);\n              this.clip();\n              this.endPath();\n            },\n            getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n              let pattern;\n\n              if (IR[0] === \"TilingPattern\") {\n                const color = IR[1];\n                const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n                const canvasGraphicsFactory = {\n                  createCanvasGraphics: ctx => {\n                    return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext);\n                  }\n                };\n                pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n              } else {\n                pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);\n              }\n\n              return pattern;\n            },\n            setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n              this.current.strokeColor = this.getColorN_Pattern(arguments);\n            },\n            setFillColorN: function CanvasGraphics_setFillColorN() {\n              this.current.fillColor = this.getColorN_Pattern(arguments);\n              this.current.patternFill = true;\n            },\n            setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n              const color = _util.Util.makeHexColor(r, g, b);\n\n              this.ctx.strokeStyle = color;\n              this.current.strokeColor = color;\n            },\n            setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n              const color = _util.Util.makeHexColor(r, g, b);\n\n              this.ctx.fillStyle = color;\n              this.current.fillColor = color;\n              this.current.patternFill = false;\n            },\n            shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              this.save();\n              const pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);\n              ctx.fillStyle = pattern.getPattern(ctx, this, true);\n              const inv = ctx.mozCurrentTransformInverse;\n\n              if (inv) {\n                const canvas = ctx.canvas;\n                const width = canvas.width;\n                const height = canvas.height;\n\n                const bl = _util.Util.applyTransform([0, 0], inv);\n\n                const br = _util.Util.applyTransform([0, height], inv);\n\n                const ul = _util.Util.applyTransform([width, 0], inv);\n\n                const ur = _util.Util.applyTransform([width, height], inv);\n\n                const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n                const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n                const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n                const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n                this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n              } else {\n                this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n              }\n\n              this.restore();\n            },\n            beginInlineImage: function CanvasGraphics_beginInlineImage() {\n              (0, _util.unreachable)(\"Should not call beginInlineImage\");\n            },\n            beginImageData: function CanvasGraphics_beginImageData() {\n              (0, _util.unreachable)(\"Should not call beginImageData\");\n            },\n            paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.save();\n              this.baseTransformStack.push(this.baseTransform);\n\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform.apply(this, matrix);\n              }\n\n              this.baseTransform = this.ctx.mozCurrentTransform;\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                this.ctx.rect(bbox[0], bbox[1], width, height);\n                this.clip();\n                this.endPath();\n              }\n            },\n            paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.restore();\n              this.baseTransform = this.baseTransformStack.pop();\n            },\n            beginGroup: function CanvasGraphics_beginGroup(group) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.save();\n              const currentCtx = this.ctx;\n\n              if (!group.isolated) {\n                (0, _util.info)(\"TODO: Support non-isolated groups.\");\n              }\n\n              if (group.knockout) {\n                (0, _util.warn)(\"Knockout groups not supported.\");\n              }\n\n              const currentTransform = currentCtx.mozCurrentTransform;\n\n              if (group.matrix) {\n                currentCtx.transform.apply(currentCtx, group.matrix);\n              }\n\n              if (!group.bbox) {\n                throw new Error(\"Bounding box is required.\");\n              }\n\n              let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n              const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n              bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n              const offsetX = Math.floor(bounds[0]);\n              const offsetY = Math.floor(bounds[1]);\n              let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n              let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n              let scaleX = 1,\n                  scaleY = 1;\n\n              if (drawnWidth > MAX_GROUP_SIZE) {\n                scaleX = drawnWidth / MAX_GROUP_SIZE;\n                drawnWidth = MAX_GROUP_SIZE;\n              }\n\n              if (drawnHeight > MAX_GROUP_SIZE) {\n                scaleY = drawnHeight / MAX_GROUP_SIZE;\n                drawnHeight = MAX_GROUP_SIZE;\n              }\n\n              let cacheId = \"groupAt\" + this.groupLevel;\n\n              if (group.smask) {\n                cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n              }\n\n              const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n              const groupCtx = scratchCanvas.context;\n              groupCtx.scale(1 / scaleX, 1 / scaleY);\n              groupCtx.translate(-offsetX, -offsetY);\n              groupCtx.transform.apply(groupCtx, currentTransform);\n\n              if (group.smask) {\n                this.smaskStack.push({\n                  canvas: scratchCanvas.canvas,\n                  context: groupCtx,\n                  offsetX,\n                  offsetY,\n                  scaleX,\n                  scaleY,\n                  subtype: group.smask.subtype,\n                  backdrop: group.smask.backdrop,\n                  transferMap: group.smask.transferMap || null,\n                  startTransformInverse: null\n                });\n              } else {\n                currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n                currentCtx.translate(offsetX, offsetY);\n                currentCtx.scale(scaleX, scaleY);\n              }\n\n              copyCtxState(currentCtx, groupCtx);\n              this.ctx = groupCtx;\n              this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n              this.current.activeSMask = null;\n            },\n            endGroup: function CanvasGraphics_endGroup(group) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.groupLevel--;\n              const groupCtx = this.ctx;\n              this.ctx = this.groupStack.pop();\n\n              if (this.ctx.imageSmoothingEnabled !== undefined) {\n                this.ctx.imageSmoothingEnabled = false;\n              } else {\n                this.ctx.mozImageSmoothingEnabled = false;\n              }\n\n              if (group.smask) {\n                this.tempSMask = this.smaskStack.pop();\n              } else {\n                this.ctx.drawImage(groupCtx.canvas, 0, 0);\n              }\n\n              this.restore();\n            },\n            beginAnnotations: function CanvasGraphics_beginAnnotations() {\n              this.save();\n\n              if (this.baseTransform) {\n                this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n              }\n            },\n            endAnnotations: function CanvasGraphics_endAnnotations() {\n              this.restore();\n            },\n            beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {\n              this.save();\n              resetCtxToDefault(this.ctx);\n              this.current = new CanvasExtraState();\n\n              if (Array.isArray(rect) && rect.length === 4) {\n                const width = rect[2] - rect[0];\n                const height = rect[3] - rect[1];\n                this.ctx.rect(rect[0], rect[1], width, height);\n                this.clip();\n                this.endPath();\n              }\n\n              this.transform.apply(this, transform);\n              this.transform.apply(this, matrix);\n            },\n            endAnnotation: function CanvasGraphics_endAnnotation() {\n              this.restore();\n            },\n            paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const width = img.width,\n                    height = img.height;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n              const glyph = this.processingType3;\n\n              if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n                if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                  glyph.compiled = compileType3Glyph({\n                    data: img.data,\n                    width,\n                    height\n                  });\n                } else {\n                  glyph.compiled = null;\n                }\n              }\n\n              if (glyph === null || glyph === void 0 ? void 0 : glyph.compiled) {\n                glyph.compiled(ctx);\n                return;\n              }\n\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, img);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              this.paintInlineImageXObject(maskCanvas.canvas);\n            },\n\n            paintImageMaskXObjectRepeat(imgData, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, imgData);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              const ctx = this.ctx;\n\n              for (let i = 0, ii = positions.length; i < ii; i += 2) {\n                ctx.save();\n                ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);\n                ctx.scale(1, -1);\n                ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n                ctx.restore();\n              }\n            },\n\n            paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n\n              for (let i = 0, ii = images.length; i < ii; i++) {\n                const image = images[i];\n                const width = image.width,\n                      height = image.height;\n                const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n                const maskCtx = maskCanvas.context;\n                maskCtx.save();\n                putBinaryImageMask(maskCtx, image);\n                maskCtx.globalCompositeOperation = \"source-in\";\n                maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n                maskCtx.fillRect(0, 0, width, height);\n                maskCtx.restore();\n                ctx.save();\n                ctx.transform.apply(ctx, image.transform);\n                ctx.scale(1, -1);\n                ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n                ctx.restore();\n              }\n            },\n            paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(\"Dependent image isn't ready yet\");\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            },\n            paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(\"Dependent image isn't ready yet\");\n                return;\n              }\n\n              const width = imgData.width;\n              const height = imgData.height;\n              const map = [];\n\n              for (let i = 0, ii = positions.length; i < ii; i += 2) {\n                map.push({\n                  transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                  x: 0,\n                  y: 0,\n                  w: width,\n                  h: height\n                });\n              }\n\n              this.paintInlineImageXObjectGroup(imgData, map);\n            },\n            paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const width = imgData.width;\n              const height = imgData.height;\n              const ctx = this.ctx;\n              this.save();\n              ctx.scale(1 / width, -1 / height);\n              const currentTransform = ctx.mozCurrentTransformInverse;\n              let widthScale = Math.max(Math.hypot(currentTransform[0], currentTransform[1]), 1);\n              let heightScale = Math.max(Math.hypot(currentTransform[2], currentTransform[3]), 1);\n              let imgToPaint, tmpCanvas, tmpCtx;\n\n              if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n                imgToPaint = imgData;\n              } else {\n                tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n                tmpCtx = tmpCanvas.context;\n                putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n                imgToPaint = tmpCanvas.canvas;\n              }\n\n              let paintWidth = width,\n                  paintHeight = height;\n              let tmpCanvasId = \"prescale1\";\n\n              while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n                let newWidth = paintWidth,\n                    newHeight = paintHeight;\n\n                if (widthScale > 2 && paintWidth > 1) {\n                  newWidth = Math.ceil(paintWidth / 2);\n                  widthScale /= paintWidth / newWidth;\n                }\n\n                if (heightScale > 2 && paintHeight > 1) {\n                  newHeight = Math.ceil(paintHeight / 2);\n                  heightScale /= paintHeight / newHeight;\n                }\n\n                tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n                tmpCtx = tmpCanvas.context;\n                tmpCtx.clearRect(0, 0, newWidth, newHeight);\n                tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n                imgToPaint = tmpCanvas.canvas;\n                paintWidth = newWidth;\n                paintHeight = newHeight;\n                tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n              }\n\n              ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);\n\n              if (this.imageLayer) {\n                const position = this.getCanvasPosition(0, -height);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: width / currentTransform[0],\n                  height: height / currentTransform[3]\n                });\n              }\n\n              this.restore();\n            },\n            paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const w = imgData.width;\n              const h = imgData.height;\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n              for (let i = 0, ii = map.length; i < ii; i++) {\n                const entry = map[i];\n                ctx.save();\n                ctx.transform.apply(ctx, entry.transform);\n                ctx.scale(1, -1);\n                ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n                if (this.imageLayer) {\n                  const position = this.getCanvasPosition(entry.x, entry.y);\n                  this.imageLayer.appendImage({\n                    imgData,\n                    left: position[0],\n                    top: position[1],\n                    width: w,\n                    height: h\n                  });\n                }\n\n                ctx.restore();\n              }\n            },\n            paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.ctx.fillRect(0, 0, 1, 1);\n            },\n            markPoint: function CanvasGraphics_markPoint(tag) {},\n            markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},\n            beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n              this.markedContentStack.push({\n                visible: true\n              });\n            },\n            beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {\n              if (tag === \"OC\") {\n                this.markedContentStack.push({\n                  visible: this.optionalContentConfig.isVisible(properties)\n                });\n              } else {\n                this.markedContentStack.push({\n                  visible: true\n                });\n              }\n\n              this.contentVisible = this.isContentVisible();\n            },\n            endMarkedContent: function CanvasGraphics_endMarkedContent() {\n              this.markedContentStack.pop();\n              this.contentVisible = this.isContentVisible();\n            },\n            beginCompat: function CanvasGraphics_beginCompat() {},\n            endCompat: function CanvasGraphics_endCompat() {},\n            consumePath: function CanvasGraphics_consumePath() {\n              const ctx = this.ctx;\n\n              if (this.pendingClip) {\n                if (this.pendingClip === EO_CLIP) {\n                  ctx.clip(\"evenodd\");\n                } else {\n                  ctx.clip();\n                }\n\n                this.pendingClip = null;\n              }\n\n              ctx.beginPath();\n            },\n\n            getSinglePixelWidth() {\n              if (this._cachedGetSinglePixelWidth === null) {\n                const m = this.ctx.mozCurrentTransform;\n                const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n                const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n                const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n                const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n                if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n                  this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n                } else if (absDet > Number.EPSILON) {\n                  this._cachedGetSinglePixelWidth = pixelHeight;\n                } else {\n                  this._cachedGetSinglePixelWidth = 1;\n                }\n              }\n\n              return this._cachedGetSinglePixelWidth;\n            },\n\n            getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n              const transform = this.ctx.mozCurrentTransform;\n              return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n            },\n            isContentVisible: function CanvasGraphics_isContentVisible() {\n              for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n                if (!this.markedContentStack[i].visible) {\n                  return false;\n                }\n              }\n\n              return true;\n            }\n          };\n\n          for (const op in _util.OPS) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n\n          return CanvasGraphics;\n        }();\n\n        exports.CanvasGraphics = CanvasGraphics;\n        /***/\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getShadingPatternFromIR = getShadingPatternFromIR;\n        exports.TilingPattern = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const ShadingIRs = {};\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox || typeof Path2D === \"undefined\") {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        ShadingIRs.RadialAxial = {\n          fromIR: function RadialAxial_fromIR(raw) {\n            const type = raw[1];\n            const bbox = raw[2];\n            const colorStops = raw[3];\n            const p0 = raw[4];\n            const p1 = raw[5];\n            const r0 = raw[6];\n            const r1 = raw[7];\n            return {\n              getPattern: function RadialAxial_getPattern(ctx) {\n                applyBoundingBox(ctx, bbox);\n                let grad;\n\n                if (type === \"axial\") {\n                  grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n                } else if (type === \"radial\") {\n                  grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n                }\n\n                for (let i = 0, ii = colorStops.length; i < ii; ++i) {\n                  const c = colorStops[i];\n                  grad.addColorStop(c[0], c[1]);\n                }\n\n                return grad;\n              }\n            };\n          }\n        };\n\n        const createMeshCanvas = function createMeshCanvasClosure() {\n          function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n            const coords = context.coords,\n                  colors = context.colors;\n            const bytes = data.data,\n                  rowSize = data.width * 4;\n            let tmp;\n\n            if (coords[p1 + 1] > coords[p2 + 1]) {\n              tmp = p1;\n              p1 = p2;\n              p2 = tmp;\n              tmp = c1;\n              c1 = c2;\n              c2 = tmp;\n            }\n\n            if (coords[p2 + 1] > coords[p3 + 1]) {\n              tmp = p2;\n              p2 = p3;\n              p3 = tmp;\n              tmp = c2;\n              c2 = c3;\n              c3 = tmp;\n            }\n\n            if (coords[p1 + 1] > coords[p2 + 1]) {\n              tmp = p1;\n              p1 = p2;\n              p2 = tmp;\n              tmp = c1;\n              c1 = c2;\n              c2 = tmp;\n            }\n\n            const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n            const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n            const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n            const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n            const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n            const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n            if (y1 >= y3) {\n              return;\n            }\n\n            const c1r = colors[c1],\n                  c1g = colors[c1 + 1],\n                  c1b = colors[c1 + 2];\n            const c2r = colors[c2],\n                  c2g = colors[c2 + 1],\n                  c2b = colors[c2 + 2];\n            const c3r = colors[c3],\n                  c3g = colors[c3 + 1],\n                  c3b = colors[c3 + 2];\n            const minY = Math.round(y1),\n                  maxY = Math.round(y3);\n            let xa, car, cag, cab;\n            let xb, cbr, cbg, cbb;\n\n            for (let y = minY; y <= maxY; y++) {\n              if (y < y2) {\n                let k;\n\n                if (y < y1) {\n                  k = 0;\n                } else if (y1 === y2) {\n                  k = 1;\n                } else {\n                  k = (y1 - y) / (y1 - y2);\n                }\n\n                xa = x1 - (x1 - x2) * k;\n                car = c1r - (c1r - c2r) * k;\n                cag = c1g - (c1g - c2g) * k;\n                cab = c1b - (c1b - c2b) * k;\n              } else {\n                let k;\n\n                if (y > y3) {\n                  k = 1;\n                } else if (y2 === y3) {\n                  k = 0;\n                } else {\n                  k = (y2 - y) / (y2 - y3);\n                }\n\n                xa = x2 - (x2 - x3) * k;\n                car = c2r - (c2r - c3r) * k;\n                cag = c2g - (c2g - c3g) * k;\n                cab = c2b - (c2b - c3b) * k;\n              }\n\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else if (y > y3) {\n                k = 1;\n              } else {\n                k = (y1 - y) / (y1 - y3);\n              }\n\n              xb = x1 - (x1 - x3) * k;\n              cbr = c1r - (c1r - c3r) * k;\n              cbg = c1g - (c1g - c3g) * k;\n              cbb = c1b - (c1b - c3b) * k;\n              const x1_ = Math.round(Math.min(xa, xb));\n              const x2_ = Math.round(Math.max(xa, xb));\n              let j = rowSize * y + x1_ * 4;\n\n              for (let x = x1_; x <= x2_; x++) {\n                k = (xa - x) / (xa - xb);\n\n                if (k < 0) {\n                  k = 0;\n                } else if (k > 1) {\n                  k = 1;\n                }\n\n                bytes[j++] = car - (car - cbr) * k | 0;\n                bytes[j++] = cag - (cag - cbg) * k | 0;\n                bytes[j++] = cab - (cab - cbb) * k | 0;\n                bytes[j++] = 255;\n              }\n            }\n          }\n\n          function drawFigure(data, figure, context) {\n            const ps = figure.coords;\n            const cs = figure.colors;\n            let i, ii;\n\n            switch (figure.type) {\n              case \"lattice\":\n                const verticesPerRow = figure.verticesPerRow;\n                const rows = Math.floor(ps.length / verticesPerRow) - 1;\n                const cols = verticesPerRow - 1;\n\n                for (i = 0; i < rows; i++) {\n                  let q = i * verticesPerRow;\n\n                  for (let j = 0; j < cols; j++, q++) {\n                    drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                    drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                  }\n                }\n\n                break;\n\n              case \"triangles\":\n                for (i = 0, ii = ps.length; i < ii; i += 3) {\n                  drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n                }\n\n                break;\n\n              default:\n                throw new Error(\"illegal figure\");\n            }\n          }\n\n          function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(bounds[0]);\n            const offsetY = Math.floor(bounds[1]);\n            const boundsWidth = Math.ceil(bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords,\n              colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            let canvas, tmpCanvas, i, ii;\n\n            if (webGLContext.isEnabled) {\n              canvas = webGLContext.drawFigures({\n                width,\n                height,\n                backgroundColor,\n                figures,\n                context\n              });\n              tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n              tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n              canvas = tmpCanvas.canvas;\n            } else {\n              tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n              const tmpCtx = tmpCanvas.context;\n              const data = tmpCtx.createImageData(width, height);\n\n              if (backgroundColor) {\n                const bytes = data.data;\n\n                for (i = 0, ii = bytes.length; i < ii; i += 4) {\n                  bytes[i] = backgroundColor[0];\n                  bytes[i + 1] = backgroundColor[1];\n                  bytes[i + 2] = backgroundColor[2];\n                  bytes[i + 3] = 255;\n                }\n              }\n\n              for (i = 0; i < figures.length; i++) {\n                drawFigure(data, figures[i], context);\n              }\n\n              tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n              canvas = tmpCanvas.canvas;\n            }\n\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          return createMeshCanvas;\n        }();\n\n        ShadingIRs.Mesh = {\n          fromIR: function Mesh_fromIR(raw) {\n            const coords = raw[2];\n            const colors = raw[3];\n            const figures = raw[4];\n            const bounds = raw[5];\n            const matrix = raw[6];\n            const bbox = raw[7];\n            const background = raw[8];\n            return {\n              getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n                applyBoundingBox(ctx, bbox);\n                let scale;\n\n                if (shadingFill) {\n                  scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n                } else {\n                  scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n                  if (matrix) {\n                    const matrixScale = _util.Util.singularValueDecompose2dScale(matrix);\n\n                    scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n                  }\n                }\n\n                const temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);\n\n                if (!shadingFill) {\n                  ctx.setTransform.apply(ctx, owner.baseTransform);\n\n                  if (matrix) {\n                    ctx.transform.apply(ctx, matrix);\n                  }\n                }\n\n                ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n                ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n                return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n              }\n            };\n          }\n        };\n        ShadingIRs.Dummy = {\n          fromIR: function Dummy_fromIR() {\n            return {\n              getPattern: function Dummy_fromIR_getPattern() {\n                return \"hotpink\";\n              }\n            };\n          }\n        };\n\n        function getShadingPatternFromIR(raw) {\n          const shadingIR = ShadingIRs[raw[0]];\n\n          if (!shadingIR) {\n            throw new Error(`Unknown IR type: ${raw[0]}`);\n          }\n\n          return shadingIR.fromIR(raw);\n        }\n\n        const TilingPattern = function TilingPatternClosure() {\n          const PaintType = {\n            COLORED: 1,\n            UNCOLORED: 2\n          };\n          const MAX_PATTERN_SIZE = 3000;\n\n          function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n            this.ctx = ctx;\n          }\n\n          TilingPattern.prototype = {\n            createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n              const operatorList = this.operatorList;\n              const bbox = this.bbox;\n              const xstep = this.xstep;\n              const ystep = this.ystep;\n              const paintType = this.paintType;\n              const tilingType = this.tilingType;\n              const color = this.color;\n              const canvasGraphicsFactory = this.canvasGraphicsFactory;\n              (0, _util.info)(\"TilingType: \" + tilingType);\n              const x0 = bbox[0],\n                    y0 = bbox[1],\n                    x1 = bbox[2],\n                    y1 = bbox[3];\n\n              const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n              const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n              const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n              const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n              const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n              const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n              const tmpCtx = tmpCanvas.context;\n              const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n              graphics.groupLevel = owner.groupLevel;\n              this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n              graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n              graphics.transform(1, 0, 0, 1, -x0, -y0);\n              this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n              graphics.executeOperatorList(operatorList);\n              this.ctx.transform(1, 0, 0, 1, x0, y0);\n              this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n              return tmpCanvas.canvas;\n            },\n            getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {\n              step = Math.abs(step);\n              const maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n              let size = Math.ceil(step * scale);\n\n              if (size >= maxSize) {\n                size = maxSize;\n              } else {\n                scale = size / step;\n              }\n\n              return {\n                scale,\n                size\n              };\n            },\n            clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n              if (Array.isArray(bbox) && bbox.length === 4) {\n                const bboxWidth = x1 - x0;\n                const bboxHeight = y1 - y0;\n                graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n                graphics.clip();\n                graphics.endPath();\n              }\n            },\n            setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {\n              const context = graphics.ctx,\n                    current = graphics.current;\n\n              switch (paintType) {\n                case PaintType.COLORED:\n                  const ctx = this.ctx;\n                  context.fillStyle = ctx.fillStyle;\n                  context.strokeStyle = ctx.strokeStyle;\n                  current.fillColor = ctx.fillStyle;\n                  current.strokeColor = ctx.strokeStyle;\n                  break;\n\n                case PaintType.UNCOLORED:\n                  const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                  context.fillStyle = cssColor;\n                  context.strokeStyle = cssColor;\n                  current.fillColor = cssColor;\n                  current.strokeColor = cssColor;\n                  break;\n\n                default:\n                  throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n              }\n            },\n            getPattern: function TilingPattern_getPattern(ctx, owner) {\n              ctx = this.ctx;\n              ctx.setTransform.apply(ctx, this.baseTransform);\n              ctx.transform.apply(ctx, this.matrix);\n              const temporaryPatternCanvas = this.createPatternCanvas(owner);\n              return ctx.createPattern(temporaryPatternCanvas, \"repeat\");\n            }\n          };\n          return TilingPattern;\n        }();\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (typeof reason !== \"object\" || reason === null) {\n            return reason;\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.postMessageTransfers = true;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this._processStreamMessage(data);\n\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this._createStreamSink(data);\n\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this._postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = (0, _util.createPromiseCapability)();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this._postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++;\n            const sourceName = this.sourceName;\n            const targetName = this.targetName;\n            const comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n\n                this._postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          _createStreamSink(data) {\n            const self = this;\n            const action = this.actionHandler[data.action];\n            const streamId = data.streamId;\n            const sourceName = this.sourceName;\n            const targetName = data.sourceName;\n            const comObj = this.comObj;\n            const streamSink = {\n              enqueue(chunk, size = 1, transfers) {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = (0, _util.createPromiseCapability)();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                self._postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: (0, _util.createPromiseCapability)(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          _processStreamMessage(data) {\n            const streamId = data.streamId;\n            const sourceName = this.sourceName;\n            const targetName = data.sourceName;\n            const comObj = this.comObj;\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].startCall.resolve();\n                } else {\n                  this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].pullCall.resolve();\n                } else {\n                  this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!this.streamSinks[streamId]) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n                  this.streamSinks[streamId].sinkCapability.resolve();\n                }\n\n                this.streamSinks[streamId].desiredSize = data.desiredSize;\n                const {\n                  onPull\n                } = this.streamSinks[data.streamId];\n                new Promise(function (resolve) {\n                  resolve(onPull && onPull());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n                if (this.streamControllers[streamId].isClosed) {\n                  break;\n                }\n\n                this.streamControllers[streamId].controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n                if (this.streamControllers[streamId].isClosed) {\n                  break;\n                }\n\n                this.streamControllers[streamId].isClosed = true;\n                this.streamControllers[streamId].controller.close();\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n                this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].cancelCall.resolve();\n                } else {\n                  this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.CANCEL:\n                if (!this.streamSinks[streamId]) {\n                  break;\n                }\n\n                const {\n                  onCancel\n                } = this.streamSinks[data.streamId];\n                new Promise(function (resolve) {\n                  resolve(onCancel && onCancel(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n                this.streamSinks[streamId].isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async _deleteStreamController(streamId) {\n            await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n              return capability && capability.promise;\n            }));\n            delete this.streamControllers[streamId];\n          }\n\n          _postMessage(message, transfers) {\n            if (transfers && this.postMessageTransfers) {\n              this.comObj.postMessage(message, transfers);\n            } else {\n              this.comObj.postMessage(message);\n            }\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class Metadata {\n          constructor({\n            parsedData,\n            rawData\n          }) {\n            this._metadataMap = parsedData;\n            this._data = rawData;\n          }\n\n          getRaw() {\n            return this._data;\n          }\n\n          get(name) {\n            return this._metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this._metadataMap);\n          }\n\n          has(name) {\n            return this._metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class OptionalContentGroup {\n          constructor(name, intent) {\n            this.visible = true;\n            this.name = name;\n            this.intent = intent;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n            this._order = null;\n            this._groups = new Map();\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this._order = data.order;\n\n            for (const group of data.groups) {\n              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this._groups) {\n                group.visible = false;\n              }\n            }\n\n            for (const on of data.on) {\n              this._groups.get(on).visible = true;\n            }\n\n            for (const off of data.off) {\n              this._groups.get(off).visible = false;\n            }\n          }\n\n          isVisible(group) {\n            if (group.type === \"OCG\") {\n              if (!this._groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this._groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                (0, _util.warn)(\"Visibility expression not supported yet.\");\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id, visible = true) {\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this._groups.get(id).visible = !!visible;\n          }\n\n          getOrder() {\n            if (!this._groups.size) {\n              return null;\n            }\n\n            if (this._order) {\n              return this._order.slice();\n            }\n\n            return Array.from(this._groups.keys());\n          }\n\n          getGroups() {\n            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;\n          }\n\n          getGroup(id) {\n            return this._groups.get(id) || null;\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        class PDFDataTransportStream {\n          constructor(params, pdfDataRangeTransport) {\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = params.progressiveDone || false;\n            this._contentDispositionFilename = params.contentDispositionFilename || null;\n            const initialData = params.initialData;\n\n            if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {\n              const buffer = new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !params.disableStream;\n            this._isRangeSupported = !params.disableRange;\n            this._contentLength = params.length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(args) {\n            const buffer = new Uint8Array(args.chunk).buffer;\n\n            if (args.begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== args.begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            var _this$_fullRequestRea;\n\n            return ((_this$_fullRequestRea = this._fullRequestReader) === null || _this$_fullRequestRea === void 0 ? void 0 : _this$_fullRequestRea._loaded) ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              const firstReader = this._rangeReaders[0];\n\n              if (firstReader === null || firstReader === void 0 ? void 0 : firstReader.onProgress) {\n                firstReader.onProgress({\n                  loaded: evt.loaded\n                });\n              }\n            } else {\n              const fullReader = this._fullRequestReader;\n\n              if (fullReader === null || fullReader === void 0 ? void 0 : fullReader.onProgress) {\n                fullReader.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            }\n          }\n\n          _onProgressiveDone() {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.progressiveDone();\n            }\n\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            const readers = this._rangeReaders.slice(0);\n\n            readers.forEach(function (rangeReader) {\n              rangeReader.cancel(reason);\n            });\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              this._requests.forEach(function (requestCapability) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              });\n\n              this._requests = [];\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.WebGLContext = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class WebGLContext {\n          constructor({\n            enable = false\n          }) {\n            this._enabled = enable === true;\n          }\n\n          get isEnabled() {\n            let enabled = this._enabled;\n\n            if (enabled) {\n              enabled = WebGLUtils.tryInitGL();\n            }\n\n            return (0, _util.shadow)(this, \"isEnabled\", enabled);\n          }\n\n          composeSMask({\n            layer,\n            mask,\n            properties\n          }) {\n            return WebGLUtils.composeSMask(layer, mask, properties);\n          }\n\n          drawFigures({\n            width,\n            height,\n            backgroundColor,\n            figures,\n            context\n          }) {\n            return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);\n          }\n\n          clear() {\n            WebGLUtils.cleanup();\n          }\n\n        }\n\n        exports.WebGLContext = WebGLContext;\n\n        const WebGLUtils = function WebGLUtilsClosure() {\n          function loadShader(gl, code, shaderType) {\n            const shader = gl.createShader(shaderType);\n            gl.shaderSource(shader, code);\n            gl.compileShader(shader);\n            const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n            if (!compiled) {\n              const errorMsg = gl.getShaderInfoLog(shader);\n              throw new Error(\"Error during shader compilation: \" + errorMsg);\n            }\n\n            return shader;\n          }\n\n          function createVertexShader(gl, code) {\n            return loadShader(gl, code, gl.VERTEX_SHADER);\n          }\n\n          function createFragmentShader(gl, code) {\n            return loadShader(gl, code, gl.FRAGMENT_SHADER);\n          }\n\n          function createProgram(gl, shaders) {\n            const program = gl.createProgram();\n\n            for (let i = 0, ii = shaders.length; i < ii; ++i) {\n              gl.attachShader(program, shaders[i]);\n            }\n\n            gl.linkProgram(program);\n            const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n            if (!linked) {\n              const errorMsg = gl.getProgramInfoLog(program);\n              throw new Error(\"Error during program linking: \" + errorMsg);\n            }\n\n            return program;\n          }\n\n          function createTexture(gl, image, textureId) {\n            gl.activeTexture(textureId);\n            const texture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n            return texture;\n          }\n\n          let currentGL, currentCanvas;\n\n          function generateGL() {\n            if (currentGL) {\n              return;\n            }\n\n            currentCanvas = document.createElement(\"canvas\");\n            currentGL = currentCanvas.getContext(\"webgl\", {\n              premultipliedalpha: false\n            });\n          }\n\n          const smaskVertexShaderCode = \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec2 a_texCoord;                                    \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_texCoord = a_texCoord;                                    \\\n  }                                                             \";\n          const smaskFragmentShaderCode = \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  uniform vec4 u_backdrop;                                      \\\n  uniform int u_subtype;                                        \\\n  uniform sampler2D u_image;                                    \\\n  uniform sampler2D u_mask;                                     \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n    vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n    if (u_backdrop.a > 0.0) {                                   \\\n      maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                      u_backdrop.rgb * (1.0 - maskColor.a);     \\\n    }                                                           \\\n    float lum;                                                  \\\n    if (u_subtype == 0) {                                       \\\n      lum = maskColor.a;                                        \\\n    } else {                                                    \\\n      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n            maskColor.b * 0.11;                                 \\\n    }                                                           \\\n    imageColor.a *= lum;                                        \\\n    imageColor.rgb *= imageColor.a;                             \\\n    gl_FragColor = imageColor;                                  \\\n  }                                                             \";\n          let smaskCache = null;\n\n          function initSmaskGL() {\n            generateGL();\n            const canvas = currentCanvas;\n            currentCanvas = null;\n            const gl = currentGL;\n            currentGL = null;\n            const vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n            const fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n            const program = createProgram(gl, [vertexShader, fragmentShader]);\n            gl.useProgram(program);\n            const cache = {};\n            cache.gl = gl;\n            cache.canvas = canvas;\n            cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n            cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n            cache.backdropLocation = gl.getUniformLocation(program, \"u_backdrop\");\n            cache.subtypeLocation = gl.getUniformLocation(program, \"u_subtype\");\n            const texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n            const texLayerLocation = gl.getUniformLocation(program, \"u_image\");\n            const texMaskLocation = gl.getUniformLocation(program, \"u_mask\");\n            const texCoordBuffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(texCoordLocation);\n            gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n            gl.uniform1i(texLayerLocation, 0);\n            gl.uniform1i(texMaskLocation, 1);\n            smaskCache = cache;\n          }\n\n          function composeSMask(layer, mask, properties) {\n            const width = layer.width,\n                  height = layer.height;\n\n            if (!smaskCache) {\n              initSmaskGL();\n            }\n\n            const cache = smaskCache,\n                  canvas = cache.canvas,\n                  gl = cache.gl;\n            canvas.width = width;\n            canvas.height = height;\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.uniform2f(cache.resolutionLocation, width, height);\n\n            if (properties.backdrop) {\n              gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);\n            } else {\n              gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n            }\n\n            gl.uniform1i(cache.subtypeLocation, properties.subtype === \"Luminosity\" ? 1 : 0);\n            const texture = createTexture(gl, layer, gl.TEXTURE0);\n            const maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n            const buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(cache.positionLocation);\n            gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n            gl.clearColor(0, 0, 0, 0);\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n            gl.flush();\n            gl.deleteTexture(texture);\n            gl.deleteTexture(maskTexture);\n            gl.deleteBuffer(buffer);\n            return canvas;\n          }\n\n          const figuresVertexShaderCode = \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec3 a_color;                                       \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n  uniform vec2 u_scale;                                         \\\n  uniform vec2 u_offset;                                        \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 position = (a_position + u_offset) * u_scale;          \\\n    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_color = vec4(a_color / 255.0, 1.0);                       \\\n  }                                                             \";\n          const figuresFragmentShaderCode = \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    gl_FragColor = v_color;                                     \\\n  }                                                             \";\n          let figuresCache = null;\n\n          function initFiguresGL() {\n            generateGL();\n            const canvas = currentCanvas;\n            currentCanvas = null;\n            const gl = currentGL;\n            currentGL = null;\n            const vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n            const fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n            const program = createProgram(gl, [vertexShader, fragmentShader]);\n            gl.useProgram(program);\n            const cache = {};\n            cache.gl = gl;\n            cache.canvas = canvas;\n            cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n            cache.scaleLocation = gl.getUniformLocation(program, \"u_scale\");\n            cache.offsetLocation = gl.getUniformLocation(program, \"u_offset\");\n            cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n            cache.colorLocation = gl.getAttribLocation(program, \"a_color\");\n            figuresCache = cache;\n          }\n\n          function drawFigures(width, height, backgroundColor, figures, context) {\n            if (!figuresCache) {\n              initFiguresGL();\n            }\n\n            const cache = figuresCache,\n                  canvas = cache.canvas,\n                  gl = cache.gl;\n            canvas.width = width;\n            canvas.height = height;\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.uniform2f(cache.resolutionLocation, width, height);\n            let count = 0;\n\n            for (let i = 0, ii = figures.length; i < ii; i++) {\n              switch (figures[i].type) {\n                case \"lattice\":\n                  const rows = figures[i].coords.length / figures[i].verticesPerRow | 0;\n                  count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n                  break;\n\n                case \"triangles\":\n                  count += figures[i].coords.length;\n                  break;\n              }\n            }\n\n            const coords = new Float32Array(count * 2);\n            const colors = new Uint8Array(count * 3);\n            const coordsMap = context.coords,\n                  colorsMap = context.colors;\n            let pIndex = 0,\n                cIndex = 0;\n\n            for (let i = 0, ii = figures.length; i < ii; i++) {\n              const figure = figures[i],\n                    ps = figure.coords,\n                    cs = figure.colors;\n\n              switch (figure.type) {\n                case \"lattice\":\n                  const cols = figure.verticesPerRow;\n                  const rows = ps.length / cols | 0;\n\n                  for (let row = 1; row < rows; row++) {\n                    let offset = row * cols + 1;\n\n                    for (let col = 1; col < cols; col++, offset++) {\n                      coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n                      coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n                      coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n                      coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n                      coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n                      coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n                      colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n                      colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n                      colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n                      colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n                      colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n                      colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n                      colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n                      colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n                      colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n                      coords[pIndex + 6] = coords[pIndex + 2];\n                      coords[pIndex + 7] = coords[pIndex + 3];\n                      coords[pIndex + 8] = coords[pIndex + 4];\n                      coords[pIndex + 9] = coords[pIndex + 5];\n                      coords[pIndex + 10] = coordsMap[ps[offset]];\n                      coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n                      colors[cIndex + 9] = colors[cIndex + 3];\n                      colors[cIndex + 10] = colors[cIndex + 4];\n                      colors[cIndex + 11] = colors[cIndex + 5];\n                      colors[cIndex + 12] = colors[cIndex + 6];\n                      colors[cIndex + 13] = colors[cIndex + 7];\n                      colors[cIndex + 14] = colors[cIndex + 8];\n                      colors[cIndex + 15] = colorsMap[cs[offset]];\n                      colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n                      colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n                      pIndex += 12;\n                      cIndex += 18;\n                    }\n                  }\n\n                  break;\n\n                case \"triangles\":\n                  for (let j = 0, jj = ps.length; j < jj; j++) {\n                    coords[pIndex] = coordsMap[ps[j]];\n                    coords[pIndex + 1] = coordsMap[ps[j] + 1];\n                    colors[cIndex] = colorsMap[cs[j]];\n                    colors[cIndex + 1] = colorsMap[cs[j] + 1];\n                    colors[cIndex + 2] = colorsMap[cs[j] + 2];\n                    pIndex += 2;\n                    cIndex += 3;\n                  }\n\n                  break;\n              }\n            }\n\n            if (backgroundColor) {\n              gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);\n            } else {\n              gl.clearColor(0, 0, 0, 0);\n            }\n\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            const coordsBuffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(cache.positionLocation);\n            gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n            const colorsBuffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n            gl.enableVertexAttribArray(cache.colorLocation);\n            gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);\n            gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n            gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n            gl.drawArrays(gl.TRIANGLES, 0, count);\n            gl.flush();\n            gl.deleteBuffer(coordsBuffer);\n            gl.deleteBuffer(colorsBuffer);\n            return canvas;\n          }\n\n          return {\n            tryInitGL() {\n              try {\n                generateGL();\n                return !!currentGL;\n              } catch (ex) {}\n\n              return false;\n            },\n\n            composeSMask,\n            drawFigures,\n\n            cleanup() {\n              var _smaskCache, _figuresCache;\n\n              if ((_smaskCache = smaskCache) === null || _smaskCache === void 0 ? void 0 : _smaskCache.canvas) {\n                smaskCache.canvas.width = 0;\n                smaskCache.canvas.height = 0;\n              }\n\n              if ((_figuresCache = figuresCache) === null || _figuresCache === void 0 ? void 0 : _figuresCache.canvas) {\n                figuresCache.canvas.width = 0;\n                figuresCache.canvas.height = 0;\n              }\n\n              smaskCache = null;\n              figuresCache = null;\n            }\n\n          };\n        }();\n        /***/\n\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationLayer = void 0;\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _annotation_storage = __w_pdfjs_require__(8);\n\n        var _scripting_utils = __w_pdfjs_require__(19);\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          constructor(parameters, {\n            isRenderable = false,\n            ignoreBorder = false,\n            createQuadrilaterals = false\n          } = {}) {\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.page = parameters.page;\n            this.viewport = parameters.viewport;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderInteractiveForms = parameters.renderInteractiveForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._mouseState = parameters.mouseState;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n            }\n          }\n\n          _createContainer(ignoreBorder = false) {\n            const data = this.data,\n                  page = this.page,\n                  viewport = this.viewport;\n            const container = document.createElement(\"section\");\n            let width = data.rect[2] - data.rect[0];\n            let height = data.rect[3] - data.rect[1];\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n\n              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n                width = width - 2 * data.borderStyle.width;\n                height = height - 2 * data.borderStyle.width;\n              }\n\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              if (data.color) {\n                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${rect[0]}px`;\n            container.style.top = `${rect[1]}px`;\n            container.style.width = `${width}px`;\n            container.style.height = `${height}px`;\n            return container;\n          }\n\n          _createQuadrilaterals(ignoreBorder = false) {\n            if (!this.data.quadPoints) {\n              return null;\n            }\n\n            const quadrilaterals = [];\n            const savedRect = this.data.rect;\n\n            for (const quadPoint of this.data.quadPoints) {\n              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n              quadrilaterals.push(this._createContainer(ignoreBorder));\n            }\n\n            this.data.rect = savedRect;\n            return quadrilaterals;\n          }\n\n          _createPopup(trigger, data) {\n            let container = this.container;\n\n            if (this.quadrilaterals) {\n              trigger = trigger || this.quadrilaterals;\n              container = this.quadrilaterals[0];\n            }\n\n            if (!trigger) {\n              trigger = document.createElement(\"div\");\n              trigger.style.height = container.style.height;\n              trigger.style.width = container.style.width;\n              container.appendChild(trigger);\n            }\n\n            const popupElement = new PopupElement({\n              container,\n              trigger,\n              color: data.color,\n              title: data.title,\n              modificationDate: data.modificationDate,\n              contents: data.contents,\n              hideWrapper: true\n            });\n            const popup = popupElement.render();\n            popup.style.left = container.style.width;\n            container.appendChild(popup);\n          }\n\n          _renderQuadrilaterals(className) {\n            this.quadrilaterals.forEach(quadrilateral => {\n              quadrilateral.className = className;\n            });\n            return this.quadrilaterals;\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n            super(parameters, {\n              isRenderable,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n\n            if (data.url) {\n              (0, _display_utils.addLinkAttributes)(link, {\n                url: data.url,\n                target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n                rel: linkService.externalLinkRel,\n                enabled: linkService.externalLinkEnabled\n              });\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n            } else if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n              this._bindJSAction(link, data);\n            } else {\n              this._bindLink(link, \"\");\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n                const linkElement = index === 0 ? link : link.cloneNode();\n                quadrilateral.appendChild(linkElement);\n                return quadrilateral;\n              });\n            }\n\n            this.container.className = \"linkAnnotation\";\n            this.container.appendChild(link);\n            return this.container;\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              link.className = \"internalLink\";\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            link.className = \"internalLink\";\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                var _this$linkService$eve;\n\n                (_this$linkService$eve = this.linkService.eventBus) === null || _this$linkService$eve === void 0 ? void 0 : _this$linkService$eve.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            link.className = \"internalLink\";\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            this.container.className = \"textAnnotation\";\n            const image = document.createElement(\"img\");\n            image.style.height = this.container.style.height;\n            image.style.width = this.container.style.width;\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.hasPopup) {\n              this._createPopup(image, this.data);\n            }\n\n            this.container.appendChild(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          _getKeyModifier(event) {\n            return navigator.platform.includes(\"Win\") && event.ctrlKey || navigator.platform.includes(\"Mac\") && event.metaKey;\n          }\n\n          _setEventListener(element, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                var _this$linkService$eve2;\n\n                (_this$linkService$eve2 = this.linkService.eventBus) === null || _this$linkService$eve2 === void 0 ? void 0 : _this$linkService$eve2.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                var _this$linkService$eve3;\n\n                (_this$linkService$eve3 = this.linkService.eventBus) === null || _this$linkService$eve3 === void 0 ? void 0 : _this$linkService$eve3.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: event.target.checked\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, names, getter) {\n            for (const [baseName, eventName] of names) {\n              var _this$data$actions;\n\n              if (eventName === \"Action\" || ((_this$data$actions = this.data.actions) === null || _this$data$actions === void 0 ? void 0 : _this$data$actions[eventName])) {\n                this._setEventListener(element, baseName, eventName, getter);\n              }\n            }\n          }\n\n          _setColor(event) {\n            const {\n              detail,\n              target\n            } = event;\n            const {\n              style\n            } = target;\n\n            for (const name of [\"bgColor\", \"fillColor\", \"fgColor\", \"textColor\", \"borderColor\", \"strokeColor\"]) {\n              let color = detail[name];\n\n              if (!color) {\n                continue;\n              }\n\n              color = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n\n              switch (name) {\n                case \"bgColor\":\n                case \"fillColor\":\n                  style.backgroundColor = color;\n                  break;\n\n                case \"fgColor\":\n                case \"textColor\":\n                  style.color = color;\n                  break;\n\n                case \"borderColor\":\n                case \"strokeColor\":\n                  style.borderColor = color;\n                  break;\n              }\n            }\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.className = \"textWidgetAnnotation\";\n            let element = null;\n\n            if (this.renderInteractiveForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue,\n                valueAsString: this.data.fieldValue\n              });\n              const textContent = storedData.valueAsString || storedData.value || \"\";\n              const elementData = {\n                userValue: null,\n                formattedValue: null,\n                beforeInputSelectionRange: null,\n                beforeInputValue: null\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = textContent;\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", textContent);\n              }\n\n              elementData.userValue = textContent;\n              element.setAttribute(\"id\", id);\n              element.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n              });\n\n              let blurListener = event => {\n                if (elementData.formattedValue) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                event.target.setSelectionRange(0, 0);\n                elementData.beforeInputSelectionRange = null;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                var _this$data$actions2;\n\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.userValue) {\n                    event.target.value = elementData.userValue;\n                  }\n                });\n                element.addEventListener(\"updatefromsandbox\", event => {\n                  const {\n                    detail\n                  } = event;\n                  const actions = {\n                    value() {\n                      elementData.userValue = detail.value || \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n\n                      if (!elementData.formattedValue) {\n                        event.target.value = elementData.userValue;\n                      }\n                    },\n\n                    valueAsString() {\n                      elementData.formattedValue = detail.valueAsString || \"\";\n\n                      if (event.target !== document.activeElement) {\n                        event.target.value = elementData.formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue: elementData.formattedValue\n                      });\n                    },\n\n                    focus() {\n                      setTimeout(() => event.target.focus({\n                        preventScroll: false\n                      }), 0);\n                    },\n\n                    userName() {\n                      event.target.title = detail.userName;\n                    },\n\n                    hidden() {\n                      event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                      storage.setValue(id, {\n                        hidden: detail.hidden\n                      });\n                    },\n\n                    editable() {\n                      event.target.disabled = !detail.editable;\n                    },\n\n                    selRange() {\n                      const [selStart, selEnd] = detail.selRange;\n\n                      if (selStart >= 0 && selEnd < event.target.value.length) {\n                        event.target.setSelectionRange(selStart, selEnd);\n                      }\n                    }\n\n                  };\n                  Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n\n                  this._setColor(event);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  var _this$linkService$eve4;\n\n                  elementData.beforeInputValue = event.target.value;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\") {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  elementData.userValue = event.target.value;\n                  (_this$linkService$eve4 = this.linkService.eventBus) === null || _this$linkService$eve4 === void 0 ? void 0 : _this$linkService$eve4.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value: event.target.value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (this._mouseState.isDown) {\n                    var _this$linkService$eve5;\n\n                    elementData.userValue = event.target.value;\n                    (_this$linkService$eve5 = this.linkService.eventBus) === null || _this$linkService$eve5 === void 0 ? void 0 : _this$linkService$eve5.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: event.target.value,\n                        willCommit: true,\n                        commitKey: 1,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n                element.addEventListener(\"mousedown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  elementData.beforeInputSelectionRange = null;\n                });\n                element.addEventListener(\"keyup\", event => {\n                  if (event.target.selectionStart === event.target.selectionEnd) {\n                    elementData.beforeInputSelectionRange = null;\n                  }\n                });\n                element.addEventListener(\"select\", event => {\n                  elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n                });\n\n                if ((_this$data$actions2 = this.data.actions) === null || _this$data$actions2 === void 0 ? void 0 : _this$data$actions2.Keystroke) {\n                  element.addEventListener(\"input\", event => {\n                    var _this$linkService$eve6;\n\n                    let selStart = -1;\n                    let selEnd = -1;\n\n                    if (elementData.beforeInputSelectionRange) {\n                      [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                    }\n\n                    (_this$linkService$eve6 = this.linkService.eventBus) === null || _this$linkService$eve6 === void 0 ? void 0 : _this$linkService$eve6.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: elementData.beforeInputValue,\n                        change: event.data,\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n\n              if (this.data.maxLen !== null) {\n                element.maxLength = this.data.maxLen;\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / this.data.maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontSize,\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const style = element.style;\n\n            if (fontSize) {\n              style.fontSize = `${fontSize}px`;\n            }\n\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            const value = storage.getValue(id, {\n              value: data.fieldValue && (data.exportValue && data.exportValue === data.fieldValue || !data.exportValue && data.fieldValue !== \"Off\")\n            }).value;\n            this.container.className = \"buttonWidgetAnnotation checkBox\";\n            const element = document.createElement(\"input\");\n            element.disabled = data.readOnly;\n            element.type = \"checkbox\";\n            element.name = this.data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.addEventListener(\"change\", function (event) {\n              const name = event.target.name;\n\n              for (const checkbox of document.getElementsByName(name)) {\n                if (checkbox !== event.target) {\n                  checkbox.checked = false;\n                  storage.setValue(checkbox.parentNode.getAttribute(\"data-annotation-id\"), {\n                    value: false\n                  });\n                }\n              }\n\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", event => {\n                const {\n                  detail\n                } = event;\n                const actions = {\n                  value() {\n                    event.target.checked = detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  },\n\n                  focus() {\n                    setTimeout(() => event.target.focus({\n                      preventScroll: false\n                    }), 0);\n                  },\n\n                  hidden() {\n                    event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                    storage.setValue(id, {\n                      hidden: detail.hidden\n                    });\n                  },\n\n                  editable() {\n                    event.target.disabled = !detail.editable;\n                  }\n\n                };\n                Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n\n                this._setColor(event);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            this.container.className = \"buttonWidgetAnnotation radioButton\";\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            const value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n            const element = document.createElement(\"input\");\n            element.disabled = data.readOnly;\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.addEventListener(\"change\", function (event) {\n              const {\n                target\n              } = event;\n\n              for (const radio of document.getElementsByName(target.name)) {\n                if (radio !== target) {\n                  storage.setValue(radio.getAttribute(\"id\"), {\n                    value: false\n                  });\n                }\n              }\n\n              storage.setValue(id, {\n                value: target.checked\n              });\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", event => {\n                const {\n                  detail\n                } = event;\n                const actions = {\n                  value() {\n                    const checked = pdfButtonValue === detail.value;\n\n                    for (const radio of document.getElementsByName(event.target.name)) {\n                      const radioId = radio.getAttribute(\"id\");\n                      radio.checked = radioId === id && checked;\n                      storage.setValue(radioId, {\n                        value: radio.checked\n                      });\n                    }\n                  },\n\n                  focus() {\n                    setTimeout(() => event.target.focus({\n                      preventScroll: false\n                    }), 0);\n                  },\n\n                  hidden() {\n                    event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                    storage.setValue(id, {\n                      hidden: detail.hidden\n                    });\n                  },\n\n                  editable() {\n                    event.target.disabled = !detail.editable;\n                  }\n\n                };\n                Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n\n                this._setColor(event);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          render() {\n            const container = super.render();\n            container.className = \"buttonWidgetAnnotation pushButton\";\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            this.container.className = \"choiceWidgetAnnotation\";\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            storage.getValue(id, {\n              value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n            });\n            const selectElement = document.createElement(\"select\");\n            selectElement.disabled = this.data.readOnly;\n            selectElement.name = this.data.fieldName;\n            selectElement.setAttribute(\"id\", id);\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (this.data.fieldValue.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n              }\n\n              selectElement.appendChild(optionElement);\n            }\n\n            const getValue = (event, isExport) => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const options = event.target.options;\n\n              if (!event.target.multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", event => {\n                const {\n                  detail\n                } = event;\n                const actions = {\n                  value() {\n                    const options = selectElement.options;\n                    const value = detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n                    Array.prototype.forEach.call(options, option => {\n                      option.selected = values.has(option.value);\n                    });\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  multipleSelection() {\n                    selectElement.multiple = true;\n                  },\n\n                  remove() {\n                    const options = selectElement.options;\n                    const index = detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  clear() {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                  },\n\n                  insert() {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = detail.insert;\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n                    selectElement.insertBefore(optionElement, selectElement.children[index]);\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  items() {\n                    const {\n                      items\n                    } = detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.appendChild(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  indices() {\n                    const indices = new Set(detail.indices);\n                    const options = event.target.options;\n                    Array.prototype.forEach.call(options, (option, i) => {\n                      option.selected = indices.has(i);\n                    });\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  focus() {\n                    setTimeout(() => event.target.focus({\n                      preventScroll: false\n                    }), 0);\n                  },\n\n                  hidden() {\n                    event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                    storage.setValue(id, {\n                      hidden: detail.hidden\n                    });\n                  },\n\n                  editable() {\n                    event.target.disabled = !detail.editable;\n                  }\n\n                };\n                Object.keys(detail).filter(name => name in actions).forEach(name => actions[name]());\n\n                this._setColor(event);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                var _this$linkService$eve7;\n\n                const exportValue = getValue(event, true);\n                const value = getValue(event, false);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                (_this$linkService$eve7 = this.linkService.eventBus) === null || _this$linkService$eve7 === void 0 ? void 0 : _this$linkService$eve7.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    changeEx: exportValue,\n                    willCommit: true,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], event => event.target.checked);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(event)\n                });\n              });\n            }\n\n            this.container.appendChild(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n            this.container.className = \"popupAnnotation\";\n\n            if (IGNORE_TYPES.includes(this.data.parentType)) {\n              return this.container;\n            }\n\n            const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n            const parentElements = this.layer.querySelectorAll(selector);\n\n            if (parentElements.length === 0) {\n              return this.container;\n            }\n\n            const popup = new PopupElement({\n              container: this.container,\n              trigger: Array.from(parentElements),\n              color: this.data.color,\n              title: this.data.title,\n              modificationDate: this.data.modificationDate,\n              contents: this.data.contents\n            });\n            const page = this.page;\n\n            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n            const popupTop = rect[1];\n            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n            this.container.style.left = `${popupLeft}px`;\n            this.container.style.top = `${popupTop}px`;\n            this.container.appendChild(popup.render());\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          constructor(parameters) {\n            this.container = parameters.container;\n            this.trigger = parameters.trigger;\n            this.color = parameters.color;\n            this.title = parameters.title;\n            this.modificationDate = parameters.modificationDate;\n            this.contents = parameters.contents;\n            this.hideWrapper = parameters.hideWrapper || false;\n            this.pinned = false;\n          }\n\n          render() {\n            const BACKGROUND_ENLIGHT = 0.7;\n            const wrapper = document.createElement(\"div\");\n            wrapper.className = \"popupWrapper\";\n            this.hideElement = this.hideWrapper ? wrapper : this.container;\n            this.hideElement.hidden = true;\n            const popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n            const color = this.color;\n\n            if (color) {\n              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n            }\n\n            const title = document.createElement(\"h1\");\n            title.textContent = this.title;\n            popup.appendChild(title);\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n            if (dateObject) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.textContent = \"{{date}}, {{time}}\";\n              modificationDate.dataset.l10nId = \"annotation_date_string\";\n              modificationDate.dataset.l10nArgs = JSON.stringify({\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n              popup.appendChild(modificationDate);\n            }\n\n            const contents = this._formatContents(this.contents);\n\n            popup.appendChild(contents);\n\n            if (!Array.isArray(this.trigger)) {\n              this.trigger = [this.trigger];\n            }\n\n            this.trigger.forEach(element => {\n              element.addEventListener(\"click\", this._toggle.bind(this));\n              element.addEventListener(\"mouseover\", this._show.bind(this, false));\n              element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n            });\n            popup.addEventListener(\"click\", this._hide.bind(this, true));\n            wrapper.appendChild(popup);\n            return wrapper;\n          }\n\n          _formatContents(contents) {\n            const p = document.createElement(\"p\");\n            const lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.appendChild(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.appendChild(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          _toggle() {\n            if (this.pinned) {\n              this._hide(true);\n            } else {\n              this._show(true);\n            }\n          }\n\n          _show(pin = false) {\n            if (pin) {\n              this.pinned = true;\n            }\n\n            if (this.hideElement.hidden) {\n              this.hideElement.hidden = false;\n              this.container.style.zIndex += 1;\n            }\n          }\n\n          _hide(unpin = true) {\n            if (unpin) {\n              this.pinned = false;\n            }\n\n            if (!this.hideElement.hidden && !this.pinned) {\n              this.hideElement.hidden = true;\n              this.container.style.zIndex -= 1;\n            }\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"freeTextAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class LineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"lineAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            svg.appendChild(line);\n            this.container.append(svg);\n\n            this._createPopup(line, data);\n\n            return this.container;\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"squareAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"none\");\n            svg.appendChild(square);\n            this.container.append(svg);\n\n            this._createPopup(square, data);\n\n            return this.container;\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"circleAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"none\");\n            svg.appendChild(circle);\n            this.container.append(svg);\n\n            this._createPopup(circle, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"none\");\n            svg.appendChild(polyline);\n            this.container.append(svg);\n\n            this._createPopup(polyline, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"caretAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"none\");\n\n              this._createPopup(polyline, data);\n\n              svg.appendChild(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n        }\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"highlightAnnotation\");\n            }\n\n            this.container.className = \"highlightAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"underlineAnnotation\");\n            }\n\n            this.container.className = \"underlineAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"squigglyAnnotation\");\n            }\n\n            this.container.className = \"squigglyAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n            }\n\n            this.container.className = \"strikeoutAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"stampAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            var _this$linkService$eve8;\n\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n            this.content = content;\n            (_this$linkService$eve8 = this.linkService.eventBus) === null || _this$linkService$eve8 === void 0 ? void 0 : _this$linkService$eve8.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.className = \"fileAttachmentAnnotation\";\n            const trigger = document.createElement(\"div\");\n            trigger.style.height = this.container.style.height;\n            trigger.style.width = this.container.style.width;\n            trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n            if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n              this._createPopup(trigger, this.data);\n            }\n\n            this.container.appendChild(trigger);\n            return this.container;\n          }\n\n          _download() {\n            var _this$downloadManager;\n\n            (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          static render(parameters) {\n            const sortedAnnotations = [],\n                  popupAnnotations = [];\n\n            for (const data of parameters.annotations) {\n              if (!data) {\n                continue;\n              }\n\n              if (data.annotationType === _util.AnnotationType.POPUP) {\n                popupAnnotations.push(data);\n                continue;\n              }\n\n              sortedAnnotations.push(data);\n            }\n\n            if (popupAnnotations.length) {\n              sortedAnnotations.push(...popupAnnotations);\n            }\n\n            for (const data of sortedAnnotations) {\n              const element = AnnotationElementFactory.create({\n                data,\n                layer: parameters.div,\n                page: parameters.page,\n                viewport: parameters.viewport,\n                linkService: parameters.linkService,\n                downloadManager: parameters.downloadManager,\n                imageResourcesPath: parameters.imageResourcesPath || \"\",\n                renderInteractiveForms: parameters.renderInteractiveForms !== false,\n                svgFactory: new _display_utils.DOMSVGFactory(),\n                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n                enableScripting: parameters.enableScripting,\n                hasJSActions: parameters.hasJSActions,\n                mouseState: parameters.mouseState || {\n                  isDown: false\n                }\n              });\n\n              if (element.isRenderable) {\n                const rendered = element.render();\n\n                if (data.hidden) {\n                  rendered.style.visibility = \"hidden\";\n                }\n\n                if (Array.isArray(rendered)) {\n                  for (const renderedElement of rendered) {\n                    parameters.div.appendChild(renderedElement);\n                  }\n                } else {\n                  if (element instanceof PopupAnnotationElement) {\n                    parameters.div.prepend(rendered);\n                  } else {\n                    parameters.div.appendChild(rendered);\n                  }\n                }\n              }\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n            for (const data of parameters.annotations) {\n              const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n              if (elements) {\n                elements.forEach(element => {\n                  element.style.transform = transform;\n                });\n              }\n            }\n\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        class ColorConverters {\n          static CMYK_G([c, y, m, k]) {\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK([g]) {\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB([g]) {\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_HTML([g]) {\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G([r, g, b]) {\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_HTML([r, g, b]) {\n            const R = makeColorComp(r);\n            const G = makeColorComp(g);\n            const B = makeColorComp(b);\n            return `#${R}${G}${B}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static CMYK_RGB([c, y, m, k]) {\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_HTML(components) {\n            return this.RGB_HTML(this.CMYK_RGB(components));\n          }\n\n          static RGB_CMYK([r, g, b]) {\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.renderTextLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const renderTextLayer = function renderTextLayerClosure() {\n          const MAX_TEXT_DIVS_TO_RENDER = 100000;\n          const DEFAULT_FONT_SIZE = 30;\n          const DEFAULT_FONT_ASCENT = 0.8;\n          const ascentCache = new Map();\n          const NonWhitespaceRegexp = /\\S/;\n\n          function isAllWhitespace(str) {\n            return !NonWhitespaceRegexp.test(str);\n          }\n\n          function getAscent(fontFamily, ctx) {\n            const cachedAscent = ascentCache.get(fontFamily);\n\n            if (cachedAscent) {\n              return cachedAscent;\n            }\n\n            ctx.save();\n            ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n            const metrics = ctx.measureText(\"\");\n            let ascent = metrics.fontBoundingBoxAscent;\n            let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n            if (ascent) {\n              ctx.restore();\n              const ratio = ascent / (ascent + descent);\n              ascentCache.set(fontFamily, ratio);\n              return ratio;\n            }\n\n            ctx.strokeStyle = \"red\";\n            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n            ctx.strokeText(\"g\", 0, 0);\n            let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n            descent = 0;\n\n            for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n              if (pixels[i] > 0) {\n                descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n                break;\n              }\n            }\n\n            ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n            ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n            pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n            ascent = 0;\n\n            for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n              if (pixels[i] > 0) {\n                ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n                break;\n              }\n            }\n\n            ctx.restore();\n\n            if (ascent) {\n              const ratio = ascent / (ascent + descent);\n              ascentCache.set(fontFamily, ratio);\n              return ratio;\n            }\n\n            ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n            return DEFAULT_FONT_ASCENT;\n          }\n\n          function appendText(task, geom, styles, ctx) {\n            const textDiv = document.createElement(\"span\");\n            const textDivProperties = {\n              angle: 0,\n              canvasWidth: 0,\n              isWhitespace: false,\n              originalTransform: null,\n              paddingBottom: 0,\n              paddingLeft: 0,\n              paddingRight: 0,\n              paddingTop: 0,\n              scale: 1\n            };\n\n            task._textDivs.push(textDiv);\n\n            if (isAllWhitespace(geom.str)) {\n              textDivProperties.isWhitespace = true;\n\n              task._textDivProperties.set(textDiv, textDivProperties);\n\n              return;\n            }\n\n            const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n            let angle = Math.atan2(tx[1], tx[0]);\n            const style = styles[geom.fontName];\n\n            if (style.vertical) {\n              angle += Math.PI / 2;\n            }\n\n            const fontHeight = Math.hypot(tx[2], tx[3]);\n            const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n            let left, top;\n\n            if (angle === 0) {\n              left = tx[4];\n              top = tx[5] - fontAscent;\n            } else {\n              left = tx[4] + fontAscent * Math.sin(angle);\n              top = tx[5] - fontAscent * Math.cos(angle);\n            }\n\n            textDiv.style.left = `${left}px`;\n            textDiv.style.top = `${top}px`;\n            textDiv.style.fontSize = `${fontHeight}px`;\n            textDiv.style.fontFamily = style.fontFamily;\n            textDiv.textContent = geom.str;\n            textDiv.dir = geom.dir;\n\n            if (task._fontInspectorEnabled) {\n              textDiv.dataset.fontName = geom.fontName;\n            }\n\n            if (angle !== 0) {\n              textDivProperties.angle = angle * (180 / Math.PI);\n            }\n\n            let shouldScaleText = false;\n\n            if (geom.str.length > 1) {\n              shouldScaleText = true;\n            } else if (geom.transform[0] !== geom.transform[3]) {\n              const absScaleX = Math.abs(geom.transform[0]),\n                    absScaleY = Math.abs(geom.transform[3]);\n\n              if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n                shouldScaleText = true;\n              }\n            }\n\n            if (shouldScaleText) {\n              if (style.vertical) {\n                textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n              } else {\n                textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n              }\n            }\n\n            task._textDivProperties.set(textDiv, textDivProperties);\n\n            if (task._textContentStream) {\n              task._layoutText(textDiv);\n            }\n\n            if (task._enhanceTextSelection) {\n              let angleCos = 1,\n                  angleSin = 0;\n\n              if (angle !== 0) {\n                angleCos = Math.cos(angle);\n                angleSin = Math.sin(angle);\n              }\n\n              const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n              const divHeight = fontHeight;\n              let m, b;\n\n              if (angle !== 0) {\n                m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n                b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n              } else {\n                b = [left, top, left + divWidth, top + divHeight];\n              }\n\n              task._bounds.push({\n                left: b[0],\n                top: b[1],\n                right: b[2],\n                bottom: b[3],\n                div: textDiv,\n                size: [divWidth, divHeight],\n                m\n              });\n            }\n          }\n\n          function render(task) {\n            if (task._canceled) {\n              return;\n            }\n\n            const textDivs = task._textDivs;\n            const capability = task._capability;\n            const textDivsLength = textDivs.length;\n\n            if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n              task._renderingDone = true;\n              capability.resolve();\n              return;\n            }\n\n            if (!task._textContentStream) {\n              for (let i = 0; i < textDivsLength; i++) {\n                task._layoutText(textDivs[i]);\n              }\n            }\n\n            task._renderingDone = true;\n            capability.resolve();\n          }\n\n          function findPositiveMin(ts, offset, count) {\n            let result = 0;\n\n            for (let i = 0; i < count; i++) {\n              const t = ts[offset++];\n\n              if (t > 0) {\n                result = result ? Math.min(t, result) : t;\n              }\n            }\n\n            return result;\n          }\n\n          function expand(task) {\n            const bounds = task._bounds;\n            const viewport = task._viewport;\n            const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n            for (let i = 0; i < expanded.length; i++) {\n              const div = bounds[i].div;\n\n              const divProperties = task._textDivProperties.get(div);\n\n              if (divProperties.angle === 0) {\n                divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n                divProperties.paddingTop = bounds[i].top - expanded[i].top;\n                divProperties.paddingRight = expanded[i].right - bounds[i].right;\n                divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n                task._textDivProperties.set(div, divProperties);\n\n                continue;\n              }\n\n              const e = expanded[i],\n                    b = bounds[i];\n              const m = b.m,\n                    c = m[0],\n                    s = m[1];\n              const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n              const ts = new Float64Array(64);\n              points.forEach(function (p, j) {\n                const t = _util.Util.applyTransform(p, m);\n\n                ts[j + 0] = c && (e.left - t[0]) / c;\n                ts[j + 4] = s && (e.top - t[1]) / s;\n                ts[j + 8] = c && (e.right - t[0]) / c;\n                ts[j + 12] = s && (e.bottom - t[1]) / s;\n                ts[j + 16] = s && (e.left - t[0]) / -s;\n                ts[j + 20] = c && (e.top - t[1]) / c;\n                ts[j + 24] = s && (e.right - t[0]) / -s;\n                ts[j + 28] = c && (e.bottom - t[1]) / c;\n                ts[j + 32] = c && (e.left - t[0]) / -c;\n                ts[j + 36] = s && (e.top - t[1]) / -s;\n                ts[j + 40] = c && (e.right - t[0]) / -c;\n                ts[j + 44] = s && (e.bottom - t[1]) / -s;\n                ts[j + 48] = s && (e.left - t[0]) / s;\n                ts[j + 52] = c && (e.top - t[1]) / -c;\n                ts[j + 56] = s && (e.right - t[0]) / s;\n                ts[j + 60] = c && (e.bottom - t[1]) / -c;\n              });\n              const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n              divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n              divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n              divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n              divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n              task._textDivProperties.set(div, divProperties);\n            }\n          }\n\n          function expandBounds(width, height, boxes) {\n            const bounds = boxes.map(function (box, i) {\n              return {\n                x1: box.left,\n                y1: box.top,\n                x2: box.right,\n                y2: box.bottom,\n                index: i,\n                x1New: undefined,\n                x2New: undefined\n              };\n            });\n            expandBoundsLTR(width, bounds);\n            const expanded = new Array(boxes.length);\n            bounds.forEach(function (b) {\n              const i = b.index;\n              expanded[i] = {\n                left: b.x1New,\n                top: 0,\n                right: b.x2New,\n                bottom: 0\n              };\n            });\n            boxes.map(function (box, i) {\n              const e = expanded[i],\n                    b = bounds[i];\n              b.x1 = box.top;\n              b.y1 = width - e.right;\n              b.x2 = box.bottom;\n              b.y2 = width - e.left;\n              b.index = i;\n              b.x1New = undefined;\n              b.x2New = undefined;\n            });\n            expandBoundsLTR(height, bounds);\n            bounds.forEach(function (b) {\n              const i = b.index;\n              expanded[i].top = b.x1New;\n              expanded[i].bottom = b.x2New;\n            });\n            return expanded;\n          }\n\n          function expandBoundsLTR(width, bounds) {\n            bounds.sort(function (a, b) {\n              return a.x1 - b.x1 || a.index - b.index;\n            });\n            const fakeBoundary = {\n              x1: -Infinity,\n              y1: -Infinity,\n              x2: 0,\n              y2: Infinity,\n              index: -1,\n              x1New: 0,\n              x2New: 0\n            };\n            const horizon = [{\n              start: -Infinity,\n              end: Infinity,\n              boundary: fakeBoundary\n            }];\n            bounds.forEach(function (boundary) {\n              let i = 0;\n\n              while (i < horizon.length && horizon[i].end <= boundary.y1) {\n                i++;\n              }\n\n              let j = horizon.length - 1;\n\n              while (j >= 0 && horizon[j].start >= boundary.y2) {\n                j--;\n              }\n\n              let horizonPart, affectedBoundary;\n              let q,\n                  k,\n                  maxXNew = -Infinity;\n\n              for (q = i; q <= j; q++) {\n                horizonPart = horizon[q];\n                affectedBoundary = horizonPart.boundary;\n                let xNew;\n\n                if (affectedBoundary.x2 > boundary.x1) {\n                  xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n                } else if (affectedBoundary.x2New === undefined) {\n                  xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n                } else {\n                  xNew = affectedBoundary.x2New;\n                }\n\n                if (xNew > maxXNew) {\n                  maxXNew = xNew;\n                }\n              }\n\n              boundary.x1New = maxXNew;\n\n              for (q = i; q <= j; q++) {\n                horizonPart = horizon[q];\n                affectedBoundary = horizonPart.boundary;\n\n                if (affectedBoundary.x2New === undefined) {\n                  if (affectedBoundary.x2 > boundary.x1) {\n                    if (affectedBoundary.index > boundary.index) {\n                      affectedBoundary.x2New = affectedBoundary.x2;\n                    }\n                  } else {\n                    affectedBoundary.x2New = maxXNew;\n                  }\n                } else if (affectedBoundary.x2New > maxXNew) {\n                  affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n                }\n              }\n\n              const changedHorizon = [];\n              let lastBoundary = null;\n\n              for (q = i; q <= j; q++) {\n                horizonPart = horizon[q];\n                affectedBoundary = horizonPart.boundary;\n                const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n                if (lastBoundary === useBoundary) {\n                  changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n                } else {\n                  changedHorizon.push({\n                    start: horizonPart.start,\n                    end: horizonPart.end,\n                    boundary: useBoundary\n                  });\n                  lastBoundary = useBoundary;\n                }\n              }\n\n              if (horizon[i].start < boundary.y1) {\n                changedHorizon[0].start = boundary.y1;\n                changedHorizon.unshift({\n                  start: horizon[i].start,\n                  end: boundary.y1,\n                  boundary: horizon[i].boundary\n                });\n              }\n\n              if (boundary.y2 < horizon[j].end) {\n                changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n                changedHorizon.push({\n                  start: boundary.y2,\n                  end: horizon[j].end,\n                  boundary: horizon[j].boundary\n                });\n              }\n\n              for (q = i; q <= j; q++) {\n                horizonPart = horizon[q];\n                affectedBoundary = horizonPart.boundary;\n\n                if (affectedBoundary.x2New !== undefined) {\n                  continue;\n                }\n\n                let used = false;\n\n                for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                  used = horizon[k].boundary === affectedBoundary;\n                }\n\n                for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                  used = horizon[k].boundary === affectedBoundary;\n                }\n\n                for (k = 0; !used && k < changedHorizon.length; k++) {\n                  used = changedHorizon[k].boundary === affectedBoundary;\n                }\n\n                if (!used) {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              }\n\n              Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n            });\n            horizon.forEach(function (horizonPart) {\n              const affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n              }\n            });\n          }\n\n          function TextLayerRenderTask({\n            textContent,\n            textContentStream,\n            container,\n            viewport,\n            textDivs,\n            textContentItemsStr,\n            enhanceTextSelection\n          }) {\n            var _globalThis$FontInspe2;\n\n            this._textContent = textContent;\n            this._textContentStream = textContentStream;\n            this._container = container;\n            this._document = container.ownerDocument;\n            this._viewport = viewport;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._enhanceTextSelection = !!enhanceTextSelection;\n            this._fontInspectorEnabled = !!((_globalThis$FontInspe2 = globalThis.FontInspector) === null || _globalThis$FontInspe2 === void 0 ? void 0 : _globalThis$FontInspe2.enabled);\n            this._reader = null;\n            this._layoutTextLastFontSize = null;\n            this._layoutTextLastFontFamily = null;\n            this._layoutTextCtx = null;\n            this._textDivProperties = new WeakMap();\n            this._renderingDone = false;\n            this._canceled = false;\n            this._capability = (0, _util.createPromiseCapability)();\n            this._renderTimer = null;\n            this._bounds = [];\n\n            this._capability.promise.finally(() => {\n              if (this._layoutTextCtx) {\n                this._layoutTextCtx.canvas.width = 0;\n                this._layoutTextCtx.canvas.height = 0;\n                this._layoutTextCtx = null;\n              }\n            }).catch(() => {});\n          }\n\n          TextLayerRenderTask.prototype = {\n            get promise() {\n              return this._capability.promise;\n            },\n\n            cancel: function TextLayer_cancel() {\n              this._canceled = true;\n\n              if (this._reader) {\n                this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"));\n\n                this._reader = null;\n              }\n\n              if (this._renderTimer !== null) {\n                clearTimeout(this._renderTimer);\n                this._renderTimer = null;\n              }\n\n              this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n            },\n\n            _processItems(items, styleCache) {\n              for (let i = 0, len = items.length; i < len; i++) {\n                this._textContentItemsStr.push(items[i].str);\n\n                appendText(this, items[i], styleCache, this._layoutTextCtx);\n              }\n            },\n\n            _layoutText(textDiv) {\n              const textDivProperties = this._textDivProperties.get(textDiv);\n\n              if (textDivProperties.isWhitespace) {\n                return;\n              }\n\n              let transform = \"\";\n\n              if (textDivProperties.canvasWidth !== 0) {\n                const {\n                  fontSize,\n                  fontFamily\n                } = textDiv.style;\n\n                if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                  this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                  this._layoutTextLastFontSize = fontSize;\n                  this._layoutTextLastFontFamily = fontFamily;\n                }\n\n                const {\n                  width\n                } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n                if (width > 0) {\n                  textDivProperties.scale = textDivProperties.canvasWidth / width;\n                  transform = `scaleX(${textDivProperties.scale})`;\n                }\n              }\n\n              if (textDivProperties.angle !== 0) {\n                transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n              }\n\n              if (transform.length > 0) {\n                if (this._enhanceTextSelection) {\n                  textDivProperties.originalTransform = transform;\n                }\n\n                textDiv.style.transform = transform;\n              }\n\n              this._textDivProperties.set(textDiv, textDivProperties);\n\n              this._container.appendChild(textDiv);\n            },\n\n            _render: function TextLayer_render(timeout) {\n              const capability = (0, _util.createPromiseCapability)();\n              let styleCache = Object.create(null);\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n              canvas.mozOpaque = true;\n              this._layoutTextCtx = canvas.getContext(\"2d\", {\n                alpha: false\n              });\n\n              if (this._textContent) {\n                const textItems = this._textContent.items;\n                const textStyles = this._textContent.styles;\n\n                this._processItems(textItems, textStyles);\n\n                capability.resolve();\n              } else if (this._textContentStream) {\n                const pump = () => {\n                  this._reader.read().then(({\n                    value,\n                    done\n                  }) => {\n                    if (done) {\n                      capability.resolve();\n                      return;\n                    }\n\n                    Object.assign(styleCache, value.styles);\n\n                    this._processItems(value.items, styleCache);\n\n                    pump();\n                  }, capability.reject);\n                };\n\n                this._reader = this._textContentStream.getReader();\n                pump();\n              } else {\n                throw new Error('Neither \"textContent\" nor \"textContentStream\"' + \" parameters specified.\");\n              }\n\n              capability.promise.then(() => {\n                styleCache = null;\n\n                if (!timeout) {\n                  render(this);\n                } else {\n                  this._renderTimer = setTimeout(() => {\n                    render(this);\n                    this._renderTimer = null;\n                  }, timeout);\n                }\n              }, this._capability.reject);\n            },\n            expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n              if (!this._enhanceTextSelection || !this._renderingDone) {\n                return;\n              }\n\n              if (this._bounds !== null) {\n                expand(this);\n                this._bounds = null;\n              }\n\n              const transformBuf = [],\n                    paddingBuf = [];\n\n              for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n                const div = this._textDivs[i];\n\n                const divProps = this._textDivProperties.get(div);\n\n                if (divProps.isWhitespace) {\n                  continue;\n                }\n\n                if (expandDivs) {\n                  transformBuf.length = 0;\n                  paddingBuf.length = 0;\n\n                  if (divProps.originalTransform) {\n                    transformBuf.push(divProps.originalTransform);\n                  }\n\n                  if (divProps.paddingTop > 0) {\n                    paddingBuf.push(`${divProps.paddingTop}px`);\n                    transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                  } else {\n                    paddingBuf.push(0);\n                  }\n\n                  if (divProps.paddingRight > 0) {\n                    paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                  } else {\n                    paddingBuf.push(0);\n                  }\n\n                  if (divProps.paddingBottom > 0) {\n                    paddingBuf.push(`${divProps.paddingBottom}px`);\n                  } else {\n                    paddingBuf.push(0);\n                  }\n\n                  if (divProps.paddingLeft > 0) {\n                    paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                    transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                  } else {\n                    paddingBuf.push(0);\n                  }\n\n                  div.style.padding = paddingBuf.join(\" \");\n\n                  if (transformBuf.length) {\n                    div.style.transform = transformBuf.join(\" \");\n                  }\n                } else {\n                  div.style.padding = null;\n                  div.style.transform = divProps.originalTransform;\n                }\n              }\n            }\n          };\n\n          function renderTextLayer(renderParameters) {\n            const task = new TextLayerRenderTask({\n              textContent: renderParameters.textContent,\n              textContentStream: renderParameters.textContentStream,\n              container: renderParameters.container,\n              viewport: renderParameters.viewport,\n              textDivs: renderParameters.textDivs,\n              textContentItemsStr: renderParameters.textContentItemsStr,\n              enhanceTextSelection: renderParameters.enhanceTextSelection\n            });\n\n            task._render(renderParameters.timeout);\n\n            return task;\n          }\n\n          return renderTextLayer;\n        }();\n\n        exports.renderTextLayer = renderTextLayer;\n        /***/\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        let SVGGraphics = function () {\n          throw new Error(\"Not implemented: SVGGraphics\");\n        };\n\n        exports.SVGGraphics = SVGGraphics;\n        {\n          const SVG_DEFAULTS = {\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            fillColor: \"#000000\"\n          };\n          const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n          const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n          const convertImgDataToPng = function () {\n            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n            const CHUNK_WRAPPER_SIZE = 12;\n            const crcTable = new Int32Array(256);\n\n            for (let i = 0; i < 256; i++) {\n              let c = i;\n\n              for (let h = 0; h < 8; h++) {\n                if (c & 1) {\n                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n                } else {\n                  c = c >> 1 & 0x7fffffff;\n                }\n              }\n\n              crcTable[i] = c;\n            }\n\n            function crc32(data, start, end) {\n              let crc = -1;\n\n              for (let i = start; i < end; i++) {\n                const a = (crc ^ data[i]) & 0xff;\n                const b = crcTable[a];\n                crc = crc >>> 8 ^ b;\n              }\n\n              return crc ^ -1;\n            }\n\n            function writePngChunk(type, body, data, offset) {\n              let p = offset;\n              const len = body.length;\n              data[p] = len >> 24 & 0xff;\n              data[p + 1] = len >> 16 & 0xff;\n              data[p + 2] = len >> 8 & 0xff;\n              data[p + 3] = len & 0xff;\n              p += 4;\n              data[p] = type.charCodeAt(0) & 0xff;\n              data[p + 1] = type.charCodeAt(1) & 0xff;\n              data[p + 2] = type.charCodeAt(2) & 0xff;\n              data[p + 3] = type.charCodeAt(3) & 0xff;\n              p += 4;\n              data.set(body, p);\n              p += body.length;\n              const crc = crc32(data, offset + 4, p);\n              data[p] = crc >> 24 & 0xff;\n              data[p + 1] = crc >> 16 & 0xff;\n              data[p + 2] = crc >> 8 & 0xff;\n              data[p + 3] = crc & 0xff;\n            }\n\n            function adler32(data, start, end) {\n              let a = 1;\n              let b = 0;\n\n              for (let i = start; i < end; ++i) {\n                a = (a + (data[i] & 0xff)) % 65521;\n                b = (b + a) % 65521;\n              }\n\n              return b << 16 | a;\n            }\n\n            function deflateSync(literals) {\n              if (!_is_node.isNodeJS) {\n                return deflateSyncUncompressed(literals);\n              }\n\n              try {\n                let input;\n\n                if (parseInt(process.versions.node) >= 8) {\n                  input = literals;\n                } else {\n                  input = Buffer.from(literals);\n                }\n\n                const output = require(\"zlib\").deflateSync(input, {\n                  level: 9\n                });\n\n                return output instanceof Uint8Array ? output : new Uint8Array(output);\n              } catch (e) {\n                (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n              }\n\n              return deflateSyncUncompressed(literals);\n            }\n\n            function deflateSyncUncompressed(literals) {\n              let len = literals.length;\n              const maxBlockLength = 0xffff;\n              const deflateBlocks = Math.ceil(len / maxBlockLength);\n              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n              let pi = 0;\n              idat[pi++] = 0x78;\n              idat[pi++] = 0x9c;\n              let pos = 0;\n\n              while (len > maxBlockLength) {\n                idat[pi++] = 0x00;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0x00;\n                idat[pi++] = 0x00;\n                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n                pi += maxBlockLength;\n                pos += maxBlockLength;\n                len -= maxBlockLength;\n              }\n\n              idat[pi++] = 0x01;\n              idat[pi++] = len & 0xff;\n              idat[pi++] = len >> 8 & 0xff;\n              idat[pi++] = ~len & 0xffff & 0xff;\n              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n              idat.set(literals.subarray(pos), pi);\n              pi += literals.length - pos;\n              const adler = adler32(literals, 0, literals.length);\n              idat[pi++] = adler >> 24 & 0xff;\n              idat[pi++] = adler >> 16 & 0xff;\n              idat[pi++] = adler >> 8 & 0xff;\n              idat[pi++] = adler & 0xff;\n              return idat;\n            }\n\n            function encode(imgData, kind, forceDataSchema, isMask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              let bitDepth, colorType, lineSize;\n              const bytes = imgData.data;\n\n              switch (kind) {\n                case _util.ImageKind.GRAYSCALE_1BPP:\n                  colorType = 0;\n                  bitDepth = 1;\n                  lineSize = width + 7 >> 3;\n                  break;\n\n                case _util.ImageKind.RGB_24BPP:\n                  colorType = 2;\n                  bitDepth = 8;\n                  lineSize = width * 3;\n                  break;\n\n                case _util.ImageKind.RGBA_32BPP:\n                  colorType = 6;\n                  bitDepth = 8;\n                  lineSize = width * 4;\n                  break;\n\n                default:\n                  throw new Error(\"invalid format\");\n              }\n\n              const literals = new Uint8Array((1 + lineSize) * height);\n              let offsetLiterals = 0,\n                  offsetBytes = 0;\n\n              for (let y = 0; y < height; ++y) {\n                literals[offsetLiterals++] = 0;\n                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n                offsetBytes += lineSize;\n                offsetLiterals += lineSize;\n              }\n\n              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n                offsetLiterals = 0;\n\n                for (let y = 0; y < height; y++) {\n                  offsetLiterals++;\n\n                  for (let i = 0; i < lineSize; i++) {\n                    literals[offsetLiterals++] ^= 0xff;\n                  }\n                }\n              }\n\n              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n              const idat = deflateSync(literals);\n              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n              const data = new Uint8Array(pngLength);\n              let offset = 0;\n              data.set(PNG_HEADER, offset);\n              offset += PNG_HEADER.length;\n              writePngChunk(\"IHDR\", ihdr, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n              writePngChunk(\"IDATA\", idat, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + idat.length;\n              writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n              return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n            }\n\n            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n              return encode(imgData, kind, forceDataSchema, isMask);\n            };\n          }();\n\n          class SVGExtraState {\n            constructor() {\n              this.fontSizeScale = 1;\n              this.fontWeight = SVG_DEFAULTS.fontWeight;\n              this.fontSize = 0;\n              this.textMatrix = _util.IDENTITY_MATRIX;\n              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n              this.leading = 0;\n              this.textRenderingMode = _util.TextRenderingMode.FILL;\n              this.textMatrixScale = 1;\n              this.x = 0;\n              this.y = 0;\n              this.lineX = 0;\n              this.lineY = 0;\n              this.charSpacing = 0;\n              this.wordSpacing = 0;\n              this.textHScale = 1;\n              this.textRise = 0;\n              this.fillColor = SVG_DEFAULTS.fillColor;\n              this.strokeColor = \"#000000\";\n              this.fillAlpha = 1;\n              this.strokeAlpha = 1;\n              this.lineWidth = 1;\n              this.lineJoin = \"\";\n              this.lineCap = \"\";\n              this.miterLimit = 0;\n              this.dashArray = [];\n              this.dashPhase = 0;\n              this.dependencies = [];\n              this.activeClipUrl = null;\n              this.clipGroup = null;\n              this.maskId = \"\";\n            }\n\n            clone() {\n              return Object.create(this);\n            }\n\n            setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n\n          }\n\n          function opListToTree(opList) {\n            let opTree = [];\n            const tmp = [];\n\n            for (const opListElement of opList) {\n              if (opListElement.fn === \"save\") {\n                opTree.push({\n                  fnId: 92,\n                  fn: \"group\",\n                  items: []\n                });\n                tmp.push(opTree);\n                opTree = opTree[opTree.length - 1].items;\n                continue;\n              }\n\n              if (opListElement.fn === \"restore\") {\n                opTree = tmp.pop();\n              } else {\n                opTree.push(opListElement);\n              }\n            }\n\n            return opTree;\n          }\n\n          function pf(value) {\n            if (Number.isInteger(value)) {\n              return value.toString();\n            }\n\n            const s = value.toFixed(10);\n            let i = s.length - 1;\n\n            if (s[i] !== \"0\") {\n              return s;\n            }\n\n            do {\n              i--;\n            } while (s[i] === \"0\");\n\n            return s.substring(0, s[i] === \".\" ? i : i + 1);\n          }\n\n          function pm(m) {\n            if (m[4] === 0 && m[5] === 0) {\n              if (m[1] === 0 && m[2] === 0) {\n                if (m[0] === 1 && m[3] === 1) {\n                  return \"\";\n                }\n\n                return `scale(${pf(m[0])} ${pf(m[3])})`;\n              }\n\n              if (m[0] === m[3] && m[1] === -m[2]) {\n                const a = Math.acos(m[0]) * 180 / Math.PI;\n                return `rotate(${pf(a)})`;\n              }\n            } else {\n              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n                return `translate(${pf(m[4])} ${pf(m[5])})`;\n              }\n            }\n\n            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n          }\n\n          let clipCount = 0;\n          let maskCount = 0;\n          let shadingCount = 0;\n          exports.SVGGraphics = SVGGraphics = class SVGGraphics {\n            constructor(commonObjs, objs, forceDataSchema = false) {\n              this.svgFactory = new _display_utils.DOMSVGFactory();\n              this.current = new SVGExtraState();\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.transformStack = [];\n              this.extraStack = [];\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.embedFonts = false;\n              this.embeddedFonts = Object.create(null);\n              this.cssStyle = null;\n              this.forceDataSchema = !!forceDataSchema;\n              this._operatorIdMapping = [];\n\n              for (const op in _util.OPS) {\n                this._operatorIdMapping[_util.OPS[op]] = op;\n              }\n            }\n\n            save() {\n              this.transformStack.push(this.transformMatrix);\n              const old = this.current;\n              this.extraStack.push(old);\n              this.current = old.clone();\n            }\n\n            restore() {\n              this.transformMatrix = this.transformStack.pop();\n              this.current = this.extraStack.pop();\n              this.pendingClip = null;\n              this.tgrp = null;\n            }\n\n            group(items) {\n              this.save();\n              this.executeOpTree(items);\n              this.restore();\n            }\n\n            loadDependencies(operatorList) {\n              const fnArray = operatorList.fnArray;\n              const argsArray = operatorList.argsArray;\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                if (fnArray[i] !== _util.OPS.dependency) {\n                  continue;\n                }\n\n                for (const obj of argsArray[i]) {\n                  const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                  const promise = new Promise(resolve => {\n                    objsPool.get(obj, resolve);\n                  });\n                  this.current.dependencies.push(promise);\n                }\n              }\n\n              return Promise.all(this.current.dependencies);\n            }\n\n            transform(a, b, c, d, e, f) {\n              const transformMatrix = [a, b, c, d, e, f];\n              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n              this.tgrp = null;\n            }\n\n            getSVG(operatorList, viewport) {\n              this.viewport = viewport;\n\n              const svgElement = this._initialize(viewport);\n\n              return this.loadDependencies(operatorList).then(() => {\n                this.transformMatrix = _util.IDENTITY_MATRIX;\n                this.executeOpTree(this.convertOpList(operatorList));\n                return svgElement;\n              });\n            }\n\n            convertOpList(operatorList) {\n              const operatorIdMapping = this._operatorIdMapping;\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              const opList = [];\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                const fnId = fnArray[i];\n                opList.push({\n                  fnId,\n                  fn: operatorIdMapping[fnId],\n                  args: argsArray[i]\n                });\n              }\n\n              return opListToTree(opList);\n            }\n\n            executeOpTree(opTree) {\n              for (const opTreeElement of opTree) {\n                const fn = opTreeElement.fn;\n                const fnId = opTreeElement.fnId;\n                const args = opTreeElement.args;\n\n                switch (fnId | 0) {\n                  case _util.OPS.beginText:\n                    this.beginText();\n                    break;\n\n                  case _util.OPS.dependency:\n                    break;\n\n                  case _util.OPS.setLeading:\n                    this.setLeading(args);\n                    break;\n\n                  case _util.OPS.setLeadingMoveText:\n                    this.setLeadingMoveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setFont:\n                    this.setFont(args);\n                    break;\n\n                  case _util.OPS.showText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.showSpacedText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.endText:\n                    this.endText();\n                    break;\n\n                  case _util.OPS.moveText:\n                    this.moveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setCharSpacing:\n                    this.setCharSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setWordSpacing:\n                    this.setWordSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setHScale:\n                    this.setHScale(args[0]);\n                    break;\n\n                  case _util.OPS.setTextMatrix:\n                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.setTextRise:\n                    this.setTextRise(args[0]);\n                    break;\n\n                  case _util.OPS.setTextRenderingMode:\n                    this.setTextRenderingMode(args[0]);\n                    break;\n\n                  case _util.OPS.setLineWidth:\n                    this.setLineWidth(args[0]);\n                    break;\n\n                  case _util.OPS.setLineJoin:\n                    this.setLineJoin(args[0]);\n                    break;\n\n                  case _util.OPS.setLineCap:\n                    this.setLineCap(args[0]);\n                    break;\n\n                  case _util.OPS.setMiterLimit:\n                    this.setMiterLimit(args[0]);\n                    break;\n\n                  case _util.OPS.setFillRGBColor:\n                    this.setFillRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeRGBColor:\n                    this.setStrokeRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeColorN:\n                    this.setStrokeColorN(args);\n                    break;\n\n                  case _util.OPS.setFillColorN:\n                    this.setFillColorN(args);\n                    break;\n\n                  case _util.OPS.shadingFill:\n                    this.shadingFill(args[0]);\n                    break;\n\n                  case _util.OPS.setDash:\n                    this.setDash(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setRenderingIntent:\n                    this.setRenderingIntent(args[0]);\n                    break;\n\n                  case _util.OPS.setFlatness:\n                    this.setFlatness(args[0]);\n                    break;\n\n                  case _util.OPS.setGState:\n                    this.setGState(args[0]);\n                    break;\n\n                  case _util.OPS.fill:\n                    this.fill();\n                    break;\n\n                  case _util.OPS.eoFill:\n                    this.eoFill();\n                    break;\n\n                  case _util.OPS.stroke:\n                    this.stroke();\n                    break;\n\n                  case _util.OPS.fillStroke:\n                    this.fillStroke();\n                    break;\n\n                  case _util.OPS.eoFillStroke:\n                    this.eoFillStroke();\n                    break;\n\n                  case _util.OPS.clip:\n                    this.clip(\"nonzero\");\n                    break;\n\n                  case _util.OPS.eoClip:\n                    this.clip(\"evenodd\");\n                    break;\n\n                  case _util.OPS.paintSolidColorImageMask:\n                    this.paintSolidColorImageMask();\n                    break;\n\n                  case _util.OPS.paintImageXObject:\n                    this.paintImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintInlineImageXObject:\n                    this.paintInlineImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintImageMaskXObject:\n                    this.paintImageMaskXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectBegin:\n                    this.paintFormXObjectBegin(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectEnd:\n                    this.paintFormXObjectEnd();\n                    break;\n\n                  case _util.OPS.closePath:\n                    this.closePath();\n                    break;\n\n                  case _util.OPS.closeStroke:\n                    this.closeStroke();\n                    break;\n\n                  case _util.OPS.closeFillStroke:\n                    this.closeFillStroke();\n                    break;\n\n                  case _util.OPS.closeEOFillStroke:\n                    this.closeEOFillStroke();\n                    break;\n\n                  case _util.OPS.nextLine:\n                    this.nextLine();\n                    break;\n\n                  case _util.OPS.transform:\n                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.constructPath:\n                    this.constructPath(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.endPath:\n                    this.endPath();\n                    break;\n\n                  case 92:\n                    this.group(opTreeElement.items);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented operator ${fn}`);\n                    break;\n                }\n              }\n            }\n\n            setWordSpacing(wordSpacing) {\n              this.current.wordSpacing = wordSpacing;\n            }\n\n            setCharSpacing(charSpacing) {\n              this.current.charSpacing = charSpacing;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              const current = this.current;\n              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n              current.textMatrixScale = Math.hypot(a, b);\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtElement.appendChild(current.tspan);\n            }\n\n            beginText() {\n              const current = this.current;\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.textMatrix = _util.IDENTITY_MATRIX;\n              current.lineMatrix = _util.IDENTITY_MATRIX;\n              current.textMatrixScale = 1;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            moveText(x, y) {\n              const current = this.current;\n              current.x = current.lineX += x;\n              current.y = current.lineY += y;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return;\n              }\n\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              let x = 0;\n\n              for (const glyph of glyphs) {\n                if (glyph === null) {\n                  x += fontDirection * wordSpacing;\n                  continue;\n                } else if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  let vx;\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                  vx = -vx * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (glyph.isInFont || font.missingFile) {\n                  current.xcoords.push(current.x + scaledX);\n\n                  if (vertical) {\n                    current.ycoords.push(-current.y + scaledY);\n                  }\n\n                  current.tspan.textContent += character;\n                } else {}\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n              }\n\n              current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n              if (vertical) {\n                current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n              } else {\n                current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n                current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n              }\n\n              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n                current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n              }\n\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                  current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n                }\n\n                if (current.fillAlpha < 1) {\n                  current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                }\n              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n                current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n              } else {\n                current.tspan.setAttributeNS(null, \"fill\", \"none\");\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n                this._setStrokeAttributes(current.tspan, lineWidthScale);\n              }\n\n              let textMatrix = current.textMatrix;\n\n              if (current.textRise !== 0) {\n                textMatrix = textMatrix.slice();\n                textMatrix[5] += current.textRise;\n              }\n\n              current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n              current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n              current.txtElement.appendChild(current.tspan);\n              current.txtgrp.appendChild(current.txtElement);\n\n              this._ensureTransformGroup().appendChild(current.txtElement);\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            addFontStyle(fontObj) {\n              if (!fontObj.data) {\n                throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n              }\n\n              if (!this.cssStyle) {\n                this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                this.defs.appendChild(this.cssStyle);\n              }\n\n              const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n              this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n            }\n\n            setFont(details) {\n              const current = this.current;\n              const fontObj = this.commonObjs.get(details[0]);\n              let size = details[1];\n              current.font = fontObj;\n\n              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n                this.addFontStyle(fontObj);\n                this.embeddedFonts[fontObj.loadedName] = fontObj;\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              current.fontSize = size;\n              current.fontFamily = fontObj.loadedName;\n              current.fontWeight = bold;\n              current.fontStyle = italic;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            endText() {\n              var _current$txtElement;\n\n              const current = this.current;\n\n              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && ((_current$txtElement = current.txtElement) === null || _current$txtElement === void 0 ? void 0 : _current$txtElement.hasChildNodes())) {\n                current.element = current.txtElement;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            setLineWidth(width) {\n              if (width > 0) {\n                this.current.lineWidth = width;\n              }\n            }\n\n            setLineCap(style) {\n              this.current.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.current.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.current.miterLimit = limit;\n            }\n\n            setStrokeAlpha(strokeAlpha) {\n              this.current.strokeAlpha = strokeAlpha;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n            }\n\n            setFillAlpha(fillAlpha) {\n              this.current.fillAlpha = fillAlpha;\n            }\n\n            setFillRGBColor(r, g, b) {\n              this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n              this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              this.current.xcoords = [];\n              this.current.ycoords = [];\n            }\n\n            setStrokeColorN(args) {\n              this.current.strokeColor = this._makeColorN_Pattern(args);\n            }\n\n            setFillColorN(args) {\n              this.current.fillColor = this._makeColorN_Pattern(args);\n            }\n\n            shadingFill(args) {\n              const width = this.viewport.width;\n              const height = this.viewport.height;\n\n              const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", x0);\n              rect.setAttributeNS(null, \"y\", y0);\n              rect.setAttributeNS(null, \"width\", x1 - x0);\n              rect.setAttributeNS(null, \"height\", y1 - y0);\n              rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n              if (this.current.fillAlpha < 1) {\n                rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n              }\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            _makeColorN_Pattern(args) {\n              if (args[0] === \"TilingPattern\") {\n                return this._makeTilingPattern(args);\n              }\n\n              return this._makeShadingPattern(args);\n            }\n\n            _makeTilingPattern(args) {\n              const color = args[1];\n              const operatorList = args[2];\n              const matrix = args[3] || _util.IDENTITY_MATRIX;\n              const [x0, y0, x1, y1] = args[4];\n              const xstep = args[5];\n              const ystep = args[6];\n              const paintType = args[7];\n              const tilingId = `shading${shadingCount++}`;\n\n              const [tx0, ty0] = _util.Util.applyTransform([x0, y0], matrix);\n\n              const [tx1, ty1] = _util.Util.applyTransform([x1, y1], matrix);\n\n              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n              const txstep = xstep * xscale;\n              const tystep = ystep * yscale;\n              const tiling = this.svgFactory.createElement(\"svg:pattern\");\n              tiling.setAttributeNS(null, \"id\", tilingId);\n              tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n              tiling.setAttributeNS(null, \"width\", txstep);\n              tiling.setAttributeNS(null, \"height\", tystep);\n              tiling.setAttributeNS(null, \"x\", `${tx0}`);\n              tiling.setAttributeNS(null, \"y\", `${ty0}`);\n              const svg = this.svg;\n              const transformMatrix = this.transformMatrix;\n              const fillColor = this.current.fillColor;\n              const strokeColor = this.current.strokeColor;\n              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n              this.svg = bbox;\n              this.transformMatrix = matrix;\n\n              if (paintType === 2) {\n                const cssColor = _util.Util.makeHexColor(...color);\n\n                this.current.fillColor = cssColor;\n                this.current.strokeColor = cssColor;\n              }\n\n              this.executeOpTree(this.convertOpList(operatorList));\n              this.svg = svg;\n              this.transformMatrix = transformMatrix;\n              this.current.fillColor = fillColor;\n              this.current.strokeColor = strokeColor;\n              tiling.appendChild(bbox.childNodes[0]);\n              this.defs.appendChild(tiling);\n              return `url(#${tilingId})`;\n            }\n\n            _makeShadingPattern(args) {\n              switch (args[0]) {\n                case \"RadialAxial\":\n                  const shadingId = `shading${shadingCount++}`;\n                  const colorStops = args[3];\n                  let gradient;\n\n                  switch (args[1]) {\n                    case \"axial\":\n                      const point0 = args[4];\n                      const point1 = args[5];\n                      gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"x1\", point0[0]);\n                      gradient.setAttributeNS(null, \"y1\", point0[1]);\n                      gradient.setAttributeNS(null, \"x2\", point1[0]);\n                      gradient.setAttributeNS(null, \"y2\", point1[1]);\n                      break;\n\n                    case \"radial\":\n                      const focalPoint = args[4];\n                      const circlePoint = args[5];\n                      const focalRadius = args[6];\n                      const circleRadius = args[7];\n                      gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                      gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                      gradient.setAttributeNS(null, \"r\", circleRadius);\n                      gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                      gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                      gradient.setAttributeNS(null, \"fr\", focalRadius);\n                      break;\n\n                    default:\n                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                  }\n\n                  for (const colorStop of colorStops) {\n                    const stop = this.svgFactory.createElement(\"svg:stop\");\n                    stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                    stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                    gradient.appendChild(stop);\n                  }\n\n                  this.defs.appendChild(gradient);\n                  return `url(#${shadingId})`;\n\n                case \"Mesh\":\n                  (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                  return null;\n\n                case \"Dummy\":\n                  return \"hotpink\";\n\n                default:\n                  throw new Error(`Unknown IR type: ${args[0]}`);\n              }\n            }\n\n            setDash(dashArray, dashPhase) {\n              this.current.dashArray = dashArray;\n              this.current.dashPhase = dashPhase;\n            }\n\n            constructPath(ops, args) {\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n              let d = [];\n              let j = 0;\n\n              for (const op of ops) {\n                switch (op | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"M\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"L\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    d.push(\"Z\");\n                    break;\n                }\n              }\n\n              d = d.join(\" \");\n\n              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n                d = current.path.getAttributeNS(null, \"d\") + d;\n              } else {\n                current.path = this.svgFactory.createElement(\"svg:path\");\n\n                this._ensureTransformGroup().appendChild(current.path);\n              }\n\n              current.path.setAttributeNS(null, \"d\", d);\n              current.path.setAttributeNS(null, \"fill\", \"none\");\n              current.element = current.path;\n              current.setCurrentPoint(x, y);\n            }\n\n            endPath() {\n              const current = this.current;\n              current.path = null;\n\n              if (!this.pendingClip) {\n                return;\n              }\n\n              if (!current.element) {\n                this.pendingClip = null;\n                return;\n              }\n\n              const clipId = `clippath${clipCount++}`;\n              const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n              clipPath.setAttributeNS(null, \"id\", clipId);\n              clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n              const clipElement = current.element.cloneNode(true);\n\n              if (this.pendingClip === \"evenodd\") {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n              } else {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n              }\n\n              this.pendingClip = null;\n              clipPath.appendChild(clipElement);\n              this.defs.appendChild(clipPath);\n\n              if (current.activeClipUrl) {\n                current.clipGroup = null;\n                this.extraStack.forEach(function (prev) {\n                  prev.clipGroup = null;\n                });\n                clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n              }\n\n              current.activeClipUrl = `url(#${clipId})`;\n              this.tgrp = null;\n            }\n\n            clip(type) {\n              this.pendingClip = type;\n            }\n\n            closePath() {\n              const current = this.current;\n\n              if (current.path) {\n                const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n                current.path.setAttributeNS(null, \"d\", d);\n              }\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setTextRise(textRise) {\n              this.current.textRise = textRise;\n            }\n\n            setTextRenderingMode(textRenderingMode) {\n              this.current.textRenderingMode = textRenderingMode;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (const [key, value] of states) {\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value);\n                    break;\n\n                  case \"CA\":\n                    this.setStrokeAlpha(value);\n                    break;\n\n                  case \"ca\":\n                    this.setFillAlpha(value);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                    break;\n                }\n              }\n            }\n\n            fill() {\n              const current = this.current;\n\n              if (current.element) {\n                current.element.setAttributeNS(null, \"fill\", current.fillColor);\n                current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                this.endPath();\n              }\n            }\n\n            stroke() {\n              const current = this.current;\n\n              if (current.element) {\n                this._setStrokeAttributes(current.element);\n\n                current.element.setAttributeNS(null, \"fill\", \"none\");\n                this.endPath();\n              }\n            }\n\n            _setStrokeAttributes(element, lineWidthScale = 1) {\n              const current = this.current;\n              let dashArray = current.dashArray;\n\n              if (lineWidthScale !== 1 && dashArray.length > 0) {\n                dashArray = dashArray.map(function (value) {\n                  return lineWidthScale * value;\n                });\n              }\n\n              element.setAttributeNS(null, \"stroke\", current.strokeColor);\n              element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n              element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n              element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n              element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n              element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n              element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n              element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n            }\n\n            eoFill() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fill();\n            }\n\n            fillStroke() {\n              this.stroke();\n              this.fill();\n            }\n\n            eoFillStroke() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fillStroke();\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.closePath();\n              this.eoFillStroke();\n            }\n\n            paintSolidColorImageMask() {\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", \"1px\");\n              rect.setAttributeNS(null, \"height\", \"1px\");\n              rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            paintImageXObject(objId) {\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintInlineImageXObject(imgData, mask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", \"0\");\n              cliprect.setAttributeNS(null, \"y\", \"0\");\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              const imgEl = this.svgFactory.createElement(\"svg:image\");\n              imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n              imgEl.setAttributeNS(null, \"x\", \"0\");\n              imgEl.setAttributeNS(null, \"y\", pf(-height));\n              imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n              imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n              imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n              if (mask) {\n                mask.appendChild(imgEl);\n              } else {\n                this._ensureTransformGroup().appendChild(imgEl);\n              }\n            }\n\n            paintImageMaskXObject(imgData) {\n              const current = this.current;\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = current.fillColor;\n              current.maskId = `mask${maskCount++}`;\n              const mask = this.svgFactory.createElement(\"svg:mask\");\n              mask.setAttributeNS(null, \"id\", current.maskId);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", pf(width));\n              rect.setAttributeNS(null, \"height\", pf(height));\n              rect.setAttributeNS(null, \"fill\", fillColor);\n              rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n              this.defs.appendChild(mask);\n\n              this._ensureTransformGroup().appendChild(rect);\n\n              this.paintInlineImageXObject(imgData, mask);\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n              }\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                const cliprect = this.svgFactory.createElement(\"svg:rect\");\n                cliprect.setAttributeNS(null, \"x\", bbox[0]);\n                cliprect.setAttributeNS(null, \"y\", bbox[1]);\n                cliprect.setAttributeNS(null, \"width\", pf(width));\n                cliprect.setAttributeNS(null, \"height\", pf(height));\n                this.current.element = cliprect;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {}\n\n            _initialize(viewport) {\n              const svg = this.svgFactory.create(viewport.width, viewport.height);\n              const definitions = this.svgFactory.createElement(\"svg:defs\");\n              svg.appendChild(definitions);\n              this.defs = definitions;\n              const rootGroup = this.svgFactory.createElement(\"svg:g\");\n              rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n              svg.appendChild(rootGroup);\n              this.svg = rootGroup;\n              return svg;\n            }\n\n            _ensureClipGroup() {\n              if (!this.current.clipGroup) {\n                const clipGroup = this.svgFactory.createElement(\"svg:g\");\n                clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                this.svg.appendChild(clipGroup);\n                this.current.clipGroup = clipGroup;\n              }\n\n              return this.current.clipGroup;\n            }\n\n            _ensureTransformGroup() {\n              if (!this.tgrp) {\n                this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n                if (this.current.activeClipUrl) {\n                  this._ensureClipGroup().appendChild(this.tgrp);\n                } else {\n                  this.svg.appendChild(this.tgrp);\n                }\n              }\n\n              return this.tgrp;\n            }\n\n          };\n        }\n        /***/\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        class XfaLayer {\n          static setAttributes(html, attrs) {\n            for (const [key, value] of Object.entries(attrs)) {\n              if (value === null || value === undefined) {\n                continue;\n              }\n\n              if (key !== \"style\") {\n                html.setAttribute(key, value);\n              } else {\n                Object.assign(html.style, value);\n              }\n            }\n          }\n\n          static render(parameters) {\n            const root = parameters.xfa;\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              XfaLayer.setAttributes(rootHtml, root.attributes);\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.appendChild(rootHtml);\n            const coeffs = parameters.viewport.transform.join(\",\");\n            rootDiv.style.transform = `matrix(${coeffs})`;\n            rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack[stack.length - 1];\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack[stack.length - 1][1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                html.appendChild(document.createTextNode(child.value));\n                continue;\n              }\n\n              const childHtml = document.createElement(name);\n              html.appendChild(childHtml);\n\n              if (child.attributes) {\n                XfaLayer.setAttributes(childHtml, child.attributes);\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                childHtml.appendChild(document.createTextNode(child.value));\n              }\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        const fs = require(\"fs\");\n\n        const http = require(\"http\");\n\n        const https = require(\"https\");\n\n        const url = require(\"url\");\n\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            var _this$_fullRequestRea2;\n\n            return ((_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            const readers = this._rangeRequestReaders.slice(0);\n\n            readers.forEach(function (reader) {\n              reader.cancel(reason);\n            });\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._headersCapability = (0, _util.createPromiseCapability)();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _content_disposition = __w_pdfjs_require__(25);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        function validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp,\n          rangeChunkSize,\n          disableRange\n        }) {\n          (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch (ex) {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const bytes = Array.from(value, function (ch) {\n                  return ch.charCodeAt(0) & 0xff;\n                });\n                value = decoder.decode(new Uint8Array(bytes));\n                needsEncodingFixup = false;\n              } catch (e) {\n                if (/^utf-?8$/i.test(encoding)) {\n                  try {\n                    value = decodeURIComponent(escape(value));\n                    needsEncodingFixup = false;\n                  } catch (err) {}\n                }\n              }\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replace(/_/g, \" \");\n                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch (e) {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          const array = (0, _util.stringToBytes)(data);\n          return array.buffer;\n        }\n\n        class NetworkManager {\n          constructor(url, args) {\n            this.url = url;\n            args = args || {};\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || {};\n            this.withCredentials = args.withCredentials || false;\n\n            this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n              return new XMLHttpRequest();\n            };\n\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = this.getXhr();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            if (pendingRequest.onProgress) {\n              pendingRequest.onProgress(evt);\n            }\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              if (pendingRequest.onError) {\n                pendingRequest.onError(xhr.status);\n              }\n\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              if (pendingRequest.onError) {\n                pendingRequest.onError(xhr.status);\n              }\n\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else if (pendingRequest.onError) {\n              pendingRequest.onError(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            const readers = this._rangeRequestReaders.slice(0);\n\n            readers.forEach(function (reader) {\n              reader.cancel(reason);\n            });\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(args) {\n            if (args) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: args.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(args.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n          }\n\n          _onError(status) {\n            const url = this._url;\n            const exception = (0, _network_utils.createResponseStatusError)(status, url);\n            this._storedError = exception;\n\n            this._headersReceivedCapability.reject(exception);\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.reject(exception);\n            });\n\n            this._requests = [];\n            this._cachedChunks = [];\n          }\n\n          _onProgress(data) {\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: data.loaded,\n                total: data.lengthComputable ? data.total : this._contentLength\n              });\n            }\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            if (this.onClosed) {\n              this.onClosed(this);\n            }\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n\n            this._close();\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported && this.onProgress) {\n              this.onProgress({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._requests.forEach(function (requestCapability) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            });\n\n            this._requests = [];\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 27 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (typeof value === \"undefined\") {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            var _this$_fullRequestRea3;\n\n            return ((_this$_fullRequestRea3 = this._fullRequestReader) === null || _this$_fullRequestRea3 === void 0 ? void 0 : _this$_fullRequestRea3._loaded) ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            const readers = this._rangeRequestReaders.slice(0);\n\n            readers.forEach(function (reader) {\n              reader.cancel(reason);\n            });\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._isStreamingSupported = !source.disableStream;\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(reason => {\n              if ((reason === null || reason === void 0 ? void 0 : reason.name) === \"AbortError\") {\n                return;\n              }\n\n              throw reason;\n            });\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n        /***/\n\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"addLinkAttributes\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.addLinkAttributes;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"LinkTarget\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.LinkTarget;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"LoopbackPort\", {\n          enumerable: true,\n          get: function () {\n            return _api.LoopbackPort;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"createObjectURL\", {\n          enumerable: true,\n          get: function () {\n            return _util.createObjectURL;\n          }\n        });\n        Object.defineProperty(exports, \"createPromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.createPromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"removeNullCharacters\", {\n          enumerable: true,\n          get: function () {\n            return _util.removeNullCharacters;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", {\n          enumerable: true,\n          get: function () {\n            return _util.UNSUPPORTED_FEATURES;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"apiCompatibilityParams\", {\n          enumerable: true,\n          get: function () {\n            return _api_compatibility.apiCompatibilityParams;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _svg.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _api = __w_pdfjs_require__(5);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _annotation_layer = __w_pdfjs_require__(18);\n\n        var _api_compatibility = __w_pdfjs_require__(9);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _text_layer = __w_pdfjs_require__(20);\n\n        var _svg = __w_pdfjs_require__(21);\n\n        var _xfa_layer = __w_pdfjs_require__(22);\n\n        const pdfjsVersion = '2.8.335';\n        const pdfjsBuild = '228adbf67';\n        {\n          const {\n            isNodeJS\n          } = __w_pdfjs_require__(4);\n\n          if (isNodeJS) {\n            const PDFNodeStream = __w_pdfjs_require__(23).PDFNodeStream;\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              return new PDFNodeStream(params);\n            });\n          } else {\n            const PDFNetworkStream = __w_pdfjs_require__(26).PDFNetworkStream;\n\n            let PDFFetchStream;\n\n            if ((0, _display_utils.isFetchSupported)()) {\n              PDFFetchStream = __w_pdfjs_require__(27).PDFFetchStream;\n            }\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {\n                return new PDFFetchStream(params);\n              }\n\n              return new PDFNetworkStream(params);\n            });\n          }\n        }\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/shared/compatibility.js","webpack://pdfjs-dist/build/pdf/src/shared/is_node.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/api_compatibility.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/webgl.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"names":["DEFAULT_LINK_REL","SVG_NS","constructor","unreachable","create","reset","canvasAndContext","width","height","destroy","ownerDocument","globalThis","canvas","context","baseUrl","isCompressed","fetch","url","compressionType","CMapCompressionType","reason","_fetchData","isFetchSupported","isValidFetchUrl","document","response","cMapData","stringToBytes","request","XMLHttpRequest","resolve","reject","assert","svg","createElement","offsetX","offsetY","dontFlip","centerX","viewBox","centerY","rotation","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","Math","offsetCanvasY","clone","scale","convertToViewportPoint","convertToViewportRectangle","topLeft","rect","bottomRight","convertToPdfPoint","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","enabled","urlNullRemoved","removeNullCharacters","link","targetStr","ii","i","anchor","query","end","defaultFilename","isDataScheme","warn","reURI","reFilename","splitURI","suggestedFilename","decodeURIComponent","Object","time","name","Date","timeEnd","start","toString","outBuf","longest","duration","Response","protocol","removeScriptElement","script","console","toDateObject","isString","pdfDateStringRegex","matches","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","PermissionFlag","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontGetPath","errorMarkedContent","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","base","other","absoluteUrl","_isValidProtocol","enumerable","configurable","writable","BaseException","NullCharactersRegExp","str","bytes","length","MAX_ARGUMENT_COUNT","String","strBuf","chunkEnd","chunk","arr","resultLength","arrayByteLength","pos","data","item","itemLength","value","obj","buffer8","view32","IsLittleEndianCached","shadow","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","n","makeHexColor","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","r","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","b","c","first","sx","sy","normalizeRect","intersect","orderedX","rect1","rect2","orderedY","result","PDFStringTranslateTable","code","match","buf","char","escape","unescape","encodeURIComponent","arr1","arr2","date","buffer","capability","isSettled","get","contentType","forceDataSchema","URL","type","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","DefaultCMapReaderFactory","createPDFNetworkStream","task","src","source","isArrayBuffer","range","params","rangeTransport","worker","window","isNaN","apiCompatibilityParams","setVerbosityLevel","workerParams","port","GlobalWorkerOptions","PDFWorker","docId","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","initialData","progressiveDone","contentDispositionFilename","disableRange","disableStream","httpHeaders","withCredentials","rangeChunkSize","messageHandler","transport","Promise","pdfDataRangeTransport","apiVersion","password","disableAutoFetch","maxImageSize","disableFontFace","postMessageTransfers","docBaseUrl","ignoreErrors","fontExtraProperties","enableXfa","PDFDocumentLoadingTask","nextDocumentId","promise","transportDestroyed","addRangeListener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","listener","onDataProgress","onDataProgressiveRead","onDataProgressiveDone","transportReady","requestDataRange","abort","annotationStorage","numPages","fingerprint","isPureXfa","getPage","getPageIndex","getDestinations","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","getDownloadInfo","getStats","cleanup","keepLoadedFonts","loadingParams","loadingTask","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pdfBug","pageNumber","rotate","ref","userUnit","view","getViewport","getAnnotations","intent","getXfa","render","enableWebGL","renderInteractiveForms","imageLayer","canvasFactory","background","optionalContentConfigPromise","renderingIntent","intentState","clearTimeout","canvasFactoryInstance","webGLContext","enable","fnArray","argsArray","lastChunk","pageIndex","complete","error","internalRenderTask","callback","objs","commonObjs","operatorList","useRequestAnimationFrame","renderTask","getOperatorList","opListTask","streamTextContent","normalizeWhitespace","disableCombineTextItems","TEXT_CONTENT_CHUNK_SIZE","combineTextItems","highWaterMark","size","textContent","getTextContent","readableStream","reader","pump","items","styles","_destroy","waitOn","force","resetStats","_tryCleanup","renderTasks","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","args","_abortOperatorList","curIntentState","stats","postMessage","cloned","transfers","cloneValue","desc","event","addEventListener","removeEventListener","terminate","pdfWorkerPorts","isWorkerDisabled","nextFakeWorkerId","fallbackWorkerSrc","pdfjsFilePath","deprecated","mainWorkerMessageHandler","fakeWorkerCapability","loader","getMainThreadWorkerMessageHandler","eval","getWorkerSrc","loadScript","wrapper","_initializeFromPort","_initialize","workerSrc","isSameOrigin","createCDNWrapper","terminateEarly","onWorkerError","sendTest","testObj","info","_setupFakeWorker","setupFakeWorkerGlobal","WorkerMessageHandler","id","workerHandler","fromPort","onUnsupportedFeature","loadingTaskSettled","page","terminated","annotationStorageResetModified","pdfDocument","setupMessageHandler","evt","loaded","total","sink","readyReason","headersCapability","fullReader","isStreamingSupported","isRangeSupported","contentLength","rangeReader","pdfInfo","ex","msg","exception","updatePassword","exportedError","exportedData","fontRegistry","registerFont","pageProxy","MAX_IMAGE_SIZE_TO_STORE","imageData","fetched","builtInCMap","_onUnsupportedFeature","pageInfo","filename","getDocJSActions","getPageJSActions","getPageXfa","results","metadata","startCleanup","cleanupSuccessful","_ensureObj","resolved","has","clear","cancel","InternalRenderTask","canvasInRendering","completed","initializeGraphics","transparency","operatorListChanged","_continue","_scheduleNext","_next","version","build","addNativeFontFace","insertRule","styleElement","styleSheet","nativeFontFace","bind","featureId","rule","_queueLoadingCallback","isFontLoadingAPISupported","isSyncFontLoadingSupported","_loadTestFont","_prepareFontLoadEvent","FontLoader","requests","nextRequestId","supported","navigator","otherRequest","setTimeout","done","getLoadTestFont","atob","offset","chunk1","s","chunk2","ctx","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","string32","btoa","names","fonts","div","span","translatedData","createNativeFontFace","createFontFaceRule","bytesToString","getPathGenerator","cmds","js","current","NodeCanvasFactory","NodeCMapReaderFactory","Canvas","__non_webpack_require__","fs","getValue","getOrCreateValue","setValue","modified","getAll","objectFromMap","_setModified","resetModified","serializable","compatibilityParams","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","COMPILE_TYPE3_GLYPHS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","LINEWIDTH_SCALE_FACTOR","set","e","f","ad_bc","bc_ad","old","prev","cosValue","sinValue","CachedCanvases","getCanvas","canvasEntry","addContextCurrentTransform","POINT_TO_PROCESS_LIMIT","imgData","width1","points","POINT_TYPES","lineSize","data0","elem","mask","count","j","j0","sum","steps","outlines","coords","p0","step","pp","drawOutline","k","kk","o","l","ll","CanvasExtraState","setCurrentPoint","CanvasGraphics","EXECUTION_TIME","EXECUTION_STEPS","transferMaps","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","dest","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","destPos","srcDiff","kEnd","kEndUnrolled","srcByte","hasTransferMaps","elemsInThisChunk","properties","property","sourceCtx","destCtx","alpha","alpha_","r0","g0","b0","maskData","transferMap","layerData","y","hasBackdrop","backdrop","subtype","composeFn","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerCtx","composeSMaskBackdrop","composed","layer","genericComposeSMask","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","beginDrawing","transparentCanvas","resetCtxToDefault","viewport","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","stepper","fnId","objsPool","depObjId","continueCallback","endDrawing","states","state","key","beginSMaskGroup","activeSMask","drawnWidth","drawnHeight","cacheId","scratchCanvas","currentCtx","currentTransform","groupCtx","copyCtxState","suspendSMaskGroup","composeSMask","deltaTransform","resumeSMaskGroup","endSMaskGroup","x","ops","xw","yh","consumePath","strokeColor","lineWidth","scaledLineWidth","fillColor","isPatternFill","needRestore","paths","path","fontObj","bold","italic","typeface","browserFontSize","paintChar","textRenderingMode","fontSize","fillStrokeMode","isAddToPathSet","patternFill","addToPath","fontSizeScale","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","glyphs","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","patternTransform","resetLineWidthToOne","glyph","isNum","restoreNeeded","spacing","character","accent","vmetric","vx","vy","scaledX","scaledY","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","transformed","urx","ury","getColorN_Pattern","IR","color","baseTransform","canvasGraphicsFactory","createCanvasGraphics","getShadingPatternFromIR","inv","bl","br","ul","ur","x0","y0","x1","y1","matrix","bbox","group","bounds","canvasBounds","scaleX","scaleY","startTransformInverse","img","maskCanvas","putBinaryImageMask","skewX","skewY","positions","images","image","objId","map","w","h","widthScale","heightScale","imgToPaint","tmpCanvas","tmpCtx","putBinaryImageData","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","position","left","top","entry","visible","tag","getSinglePixelWidth","absDet","sqNorm1","sqNorm2","pixelHeight","getCanvasPosition","isContentVisible","ShadingIRs","region","fromIR","raw","colorStops","r1","getPattern","applyBoundingBox","grad","createMeshCanvas","colors","rowSize","tmp","c1","c2","c3","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinesScale","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","figures","drawFigure","owner","matrixScale","temporaryPatternCanvas","shadingIR","TilingPattern","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","curMatrixScale","combinedScale","dimx","dimy","graphics","getSizeAndScale","maxSize","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","callbackId","wrapReason","action","cbSourceName","cbTargetName","comObj","sourceName","targetName","on","ah","send","sendWithPromise","sendWithStream","streamId","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","stream","cancelCapability","_createStreamSink","self","streamSink","enqueue","lastDesiredSize","close","sinkCapability","onPull","onCancel","isCancelled","ready","success","_processStreamMessage","_deleteStreamController","_postMessage","getRaw","isVisible","setVisibility","getOrder","getGroups","getGroup","_onReceiveData","found","_progressiveDataLength","_onProgress","firstReader","_onProgressiveDone","_removeRangeReader","getFullReader","queuedChunks","getRangeReader","cancelAllRequests","readers","isPdfFile","_enqueue","requestCapability","headersReady","read","requestsCapability","isEnabled","WebGLUtils","drawFigures","shader","gl","compiled","errorMsg","loadShader","program","shaders","linked","texture","currentCanvas","currentGL","premultipliedalpha","smaskVertexShaderCode","smaskFragmentShaderCode","smaskCache","generateGL","vertexShader","createVertexShader","fragmentShader","createFragmentShader","cache","texCoordLocation","texLayerLocation","texMaskLocation","texCoordBuffer","initSmaskGL","createTexture","maskTexture","figuresVertexShaderCode","figuresFragmentShaderCode","figuresCache","initFiguresGL","coordsMap","colorsMap","pIndex","cIndex","col","jj","coordsBuffer","colorsBuffer","tryInitGL","parameters","fieldType","isRenderable","ignoreBorder","createQuadrilaterals","_createContainer","container","horizontalRadius","verticalRadius","radius","_createQuadrilaterals","quadrilaterals","savedRect","quadPoint","_createPopup","trigger","popupElement","title","modificationDate","contents","hideWrapper","popup","_renderQuadrilaterals","quadrilateral","addLinkAttributes","target","linkService","rel","linkElement","index","_bindLink","destination","_bindNamedAction","_bindJSAction","jsName","detail","JSON","_getKeyModifier","_setEventListener","baseName","element","valueGetter","shift","modifier","_setEventListeners","eventName","_setColor","ColorConverters","style","storage","storedData","valueAsString","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","blurListener","actions","focus","preventScroll","userName","hidden","editable","selRange","selStart","selEnd","commitKey","willCommit","_blurListener","change","fieldWidth","combWidth","_setTextStyle","TEXT_ALIGNMENT","fontColor","checkbox","radio","pdfButtonValue","checked","radioId","selectElement","optionElement","option","isExport","options","getItems","displayValue","exportValue","values","multipleSelection","remove","insert","indices","changeEx","keyDown","IGNORE_TYPES","selector","parentElements","popupLeft","popupTop","BACKGROUND_ENLIGHT","g","dateObject","PDFDateString","_formatContents","lines","line","_toggle","_show","pin","_hide","unpin","borderWidth","square","circle","coordinate","polyline","getFilenameFromUrl","stringToPDFString","_download","sortedAnnotations","popupAnnotations","downloadManager","imageResourcesPath","svgFactory","enableScripting","mouseState","isDown","rendered","update","elements","CMYK_G","G_CMYK","G_RGB","G_HTML","G","makeColorComp","RGB_G","RGB_HTML","R","B","T_HTML","CMYK_RGB","CMYK_HTML","RGB_CMYK","renderTextLayer","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","NonWhitespaceRegexp","cachedAscent","metrics","ascent","descent","ratio","pixels","textDiv","textDivProperties","angle","canvasWidth","isWhitespace","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","isAllWhitespace","geom","tx","fontHeight","fontAscent","getAscent","shouldScaleText","absScaleX","absScaleY","angleCos","angleSin","divWidth","divHeight","right","bottom","textDivs","textDivsLength","t","ts","expanded","expandBounds","divProperties","boxScale","findPositiveMin","box","x1New","x2New","expandBoundsLTR","boxes","fakeBoundary","horizon","boundary","maxXNew","horizonPart","affectedBoundary","xNew","changedHorizon","lastBoundary","useBoundary","used","textContentItemsStr","TextLayerRenderTask","_processItems","len","appendText","_layoutText","fontFamily","_render","styleCache","textItems","textStyles","expandTextDivs","expand","transformBuf","paddingBuf","divProps","renderParameters","textContentStream","enhanceTextSelection","SVGGraphics","SVG_DEFAULTS","fontStyle","fontWeight","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","body","crc32","deflateSyncUncompressed","input","Buffer","output","level","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","kind","ihdr","deflateSync","pngLength","writePngChunk","createObjectURL","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","loadDependencies","transformMatrix","getSVG","svgElement","convertOpList","operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","lineWidthScale","textMatrix","pm","addFontStyle","details","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","tystep","tiling","tx1","ty1","_makeShadingPattern","shadingId","point0","point1","gradient","focalPoint","circlePoint","focalRadius","circleRadius","stop","colorStop","op","clipId","clipPath","clipElement","_setStrokeAttributes","dashArray","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","setAttributes","html","root","rootHtml","XfaLayer","stack","rootDiv","coeffs","parent","child","childHtml","http","https","fileUriRegex","parsedUrl","parseUrl","_error","_setReadableStream","auth","host","method","handleResponse","getResponseHeader","isHttp","suggestedLength","extractFilenameFromHeader","createRequestOptions","stat","returnValues","allowRangeRequests","contentEncoding","contentDisposition","getFilenameFromContentDispositionHeader","status","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","decoder","fatal","ch","textdecode","iter","parts","part","quotindex","encodingend","extvalue","encoding","langvalue","text","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","array","requestRange","listeners","requestFull","xhrId","pendingRequest","onProgress","onStateChange","xhrStatus","ok_response_on_range_request","getArrayBuffer","rangeHeader","begin","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","onHeadersReceived","onDone","onError","manager","_onHeadersReceived","fullRequestXhrId","fullRequestXhr","_onDone","_onError","createResponseStatusError","_close","signal","abortController","mode","credentials","redirect","headers","createHeaders","createFetchOptions","validateResponseStatus","pdfjsVersion","pdfjsBuild","require","PDFNodeStream","setPDFNetworkStreamFactory","PDFNetworkStream","PDFFetchStream"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,CAAA,SAAA,gCAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AACA,MAAA,OAAA,OAAA,KAAA,QAAA,IAAA,OAAA,MAAA,KAAA,QAAA,EACA,MAAA,CAAA,OAAA,GAAA,OAAA,EAAA,CADA,KAEA,IAAA,OAAA,MAAA,KAAA,UAAA,IAAA,MAAA,CAAA,GAAA,EACA,MAAA,CAAA,sBAAA,EAAA,EAAA,EAAA,OAAA,CAAA,CADA,KAEA,IAAA,OAAA,OAAA,KAAA,QAAA,EACA,OAAA,CAAA,sBAAA,CAAA,GAAA,OAAA,EAAA,CADA,KAGA,IAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,CAAA,QAAA,GAAA,OAAA,EAAA;AACC,CATD,EASC,IATD,EASC,YAAA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAYA,cAAMA,gBAAAA,GA3BN,8BA2BA;;AACA,cAAMC,MAAAA,GA5BN,4BA4BA;;AAEA,cAAA,iBAAA,CAAwB;AACtBC,UAAAA,WAAAA,GAAc;AACZ,gBAAI,KAAA,WAAA,KAAJ,iBAAA,EAA4C;AAC1CC,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD0C,sCAC1CA;AAFU;AADQ;;AAOtBC,UAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpBD,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADoB,kCACpBA;AARoB;;AAWtBE,UAAAA,KAAAA,CAAAA,gBAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAuC;AACrC,gBAAI,CAACC,gBAAAA,CAAL,MAAA,EAA8B;AAC5B,oBAAM,IAAA,KAAA,CADsB,yBACtB,CAAN;AAFmC;;AAIrC,gBAAIC,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,oBAAM,IAAA,KAAA,CADuB,qBACvB,CAAN;AALmC;;AAOrCF,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAPqC,KAOrCA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GARqC,MAQrCA;AAnBoB;;AAsBtBG,UAAAA,OAAAA,CAAAA,gBAAAA,EAA0B;AACxB,gBAAI,CAACH,gBAAAA,CAAL,MAAA,EAA8B;AAC5B,oBAAM,IAAA,KAAA,CADsB,yBACtB,CAAN;AAFsB;;AAMxBA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GANwB,CAMxBA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAPwB,CAOxBA;AACAA,YAAAA,gBAAAA,CAAAA,MAAAA,GARwB,IAQxBA;AACAA,YAAAA,gBAAAA,CAAAA,OAAAA,GATwB,IASxBA;AA/BoB;;AAAA;;;;AAmCxB,cAAA,gBAAA,SAAA,iBAAA,CAAiD;AAC/CJ,UAAAA,WAAAA,CAAY;AAAEQ,YAAAA,aAAAA,GAAgBC,UAAAA,CAAlB;AAAA,cAAZT,EAAAA,EAA0D;AAAA;AAExD,iBAAA,SAAA,GAFwD,aAExD;AAH6C;;AAM/CE,UAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpB,gBAAIG,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,oBAAM,IAAA,KAAA,CADuB,qBACvB,CAAN;AAFkB;;AAIpB,kBAAMI,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CAJK,QAIL,CAAf;;AACA,kBAAMC,OAAAA,GAAUD,MAAAA,CAAAA,UAAAA,CALI,IAKJA,CAAhB;AACAA,YAAAA,MAAAA,CAAAA,KAAAA,GANoB,KAMpBA;AACAA,YAAAA,MAAAA,CAAAA,MAAAA,GAPoB,MAOpBA;AACA,mBAAO;AAAA,cAAA,MAAA;AAAA,cAAA;AAAA,aAAP;AAd6C;;AAAA;;;;AAqBjD,cAAA,qBAAA,CAA4B;AAC1BV,UAAAA,WAAAA,CAAY;AAAEY,YAAAA,OAAAA,GAAF,IAAA;AAAkBC,YAAAA,YAAAA,GAA9Bb;AAAY,WAAZA,EAAsD;AACpD,gBAAI,KAAA,WAAA,KAAJ,qBAAA,EAAgD;AAC9CC,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD8C,0CAC9CA;AAFkD;;AAIpD,iBAAA,OAAA,GAJoD,OAIpD;AACA,iBAAA,YAAA,GALoD,YAKpD;AANwB;;AAS1B,gBAAMa,KAAN,CAAY;AAAZ,YAAA;AAAY,WAAZ,EAAsB;AACpB,gBAAI,CAAC,KAAL,OAAA,EAAmB;AACjB,oBAAM,IAAA,KAAA,CACJ,iEAFe,6DACX,CAAN;AAFkB;;AAOpB,gBAAI,CAAJ,IAAA,EAAW;AACT,oBAAM,IAAA,KAAA,CADG,8BACH,CAAN;AARkB;;AAUpB,kBAAMC,GAAAA,GAAM,KAAA,OAAA,GAAA,IAAA,IAAuB,KAAA,YAAA,GAAA,QAAA,GAVf,EAUR,CAAZ;AACA,kBAAMC,eAAAA,GAAkB,KAAA,YAAA,GACpBC,KAAAA,CAAAA,mBAAAA,CADoB,MAAA,GAEpBA,KAAAA,CAAAA,mBAAAA,CAbgB,IAWpB;AAIA,mBAAO,KAAA,UAAA,CAAA,GAAA,EAAA,eAAA,EAAA,KAAA,CAA4CC,MAAAA,IAAU;AAC3D,oBAAM,IAAA,KAAA,CACJ,kBAAkB,KAAA,YAAA,GAAA,SAAA,GAAlB,EAAA,YAFyD,GAAA,EACrD,CAAN;AADF,aAAO,CAAP;AAxBwB;;AAkC1BC,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/BlB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD+B,sCAC/BA;AAnCwB;;AAAA;;;;AAuC5B,cAAA,oBAAA,SAAA,qBAAA,CAAyD;AACvDkB,UAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/B,gBAEGC,gBAAAA,MAAsBC,eAAAA,CAAAA,GAAAA,EAAqBC,QAAAA,CAF9C,OAEyBD,CAFzB,EAGE;AACA,qBAAO,KAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAgB,MAAA,QAAA,IAAkB;AACvC,oBAAI,CAACE,QAAAA,CAAL,EAAA,EAAkB;AAChB,wBAAM,IAAA,KAAA,CAAUA,QAAAA,CADA,UACV,CAAN;AAFqC;;AAIvC,oBAJuC,QAIvC;;AACA,oBAAI,KAAJ,YAAA,EAAuB;AACrBC,kBAAAA,QAAAA,GAAW,IAAA,UAAA,CAAe,MAAMD,QAAAA,CADX,WACWA,EAArB,CAAXC;AADF,iBAAA,MAEO;AACLA,kBAAAA,QAAAA,GAAWC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,MAAMF,QAAAA,CAD1B,IAC0BA,EAApBE,CAAXD;AARqC;;AAUvC,uBAAO;AAAA,kBAAA,QAAA;AAAA,kBAAA;AAAA,iBAAP;AAVF,eAAO,CAAP;AAL6B;;AAoB/B,mBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,oBAAME,OAAAA,GAAU,IADsB,cACtB,EAAhB;AACAA,cAAAA,OAAAA,CAAAA,IAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAFsC,IAEtCA;;AAEA,kBAAI,KAAJ,YAAA,EAAuB;AACrBA,gBAAAA,OAAAA,CAAAA,YAAAA,GADqB,aACrBA;AALoC;;AAOtCA,cAAAA,OAAAA,CAAAA,kBAAAA,GAA6B,MAAM;AACjC,oBAAIA,OAAAA,CAAAA,UAAAA,KAAuBC,cAAAA,CAA3B,IAAA,EAAgD;AAAA;AADf;;AAIjC,oBAAID,OAAAA,CAAAA,MAAAA,KAAAA,GAAAA,IAA0BA,OAAAA,CAAAA,MAAAA,KAA9B,CAAA,EAAoD;AAClD,sBADkD,QAClD;;AACA,sBAAI,KAAA,YAAA,IAAqBA,OAAAA,CAAzB,QAAA,EAA2C;AACzCF,oBAAAA,QAAAA,GAAW,IAAA,UAAA,CAAeE,OAAAA,CADe,QAC9B,CAAXF;AADF,mBAAA,MAEO,IAAI,CAAC,KAAD,YAAA,IAAsBE,OAAAA,CAA1B,YAAA,EAAgD;AACrDF,oBAAAA,QAAAA,GAAWC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAcC,OAAAA,CAD4B,YAC1CD,CAAXD;AALgD;;AAOlD,sBAAA,QAAA,EAAc;AACZI,oBAAAA,OAAAA,CAAQ;AAAA,sBAAA,QAAA;AAAA,sBAAA;AAAA,qBAARA,CAAAA;AADY;AAPoC;AAJnB;;AAgBjCC,gBAAAA,MAAAA,CAAO,IAAA,KAAA,CAAUH,OAAAA,CAhBgB,UAgB1B,CAAPG,CAAAA;AAhBFH,eAAAA;;AAmBAA,cAAAA,OAAAA,CAAAA,IAAAA,CA1BsC,IA0BtCA;AA1BF,aAAO,CAAP;AArBqD;;AAAA;;;;AAoDzD,cAAA,aAAA,CAAoB;AAClBxB,UAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpB4B,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAOzB,KAAAA,GAAAA,CAAAA,IAAaC,MAAAA,GAApBwB,CAAAA,EADoB,wBACpBA;AAEA,kBAAMC,GAAAA,GAAMT,QAAAA,CAAAA,eAAAA,CAAAA,MAAAA,EAHQ,SAGRA,CAAZ;AACAS,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAJoB,KAIpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA0B1B,KAAAA,GALN,IAKpB0B;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAA2BzB,MAAAA,GANP,IAMpByB;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,qBAAAA,EAPoB,MAOpBA;AACAA,YAAAA,GAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAA4B,SAAA,KAAA,GAAA,GAAA,GARR,MAQpBA;AAEA,mBAVoB,GAUpB;AAXgB;;AAclBC,UAAAA,aAAAA,CAAAA,IAAAA,EAAoB;AAClBF,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO,OAAA,IAAA,KAAPA,QAAAA,EADkB,0BAClBA;AAEA,mBAAOR,QAAAA,CAAAA,eAAAA,CAAAA,MAAAA,EAHW,IAGXA,CAAP;AAjBgB;;AAAA;;;;AAoDpB,cAAA,YAAA,CAAmB;AAIjBtB,UAAAA,WAAAA,CAAY;AAAA,YAAA,OAAA;AAAA,YAAA,KAAA;AAAA,YAAA,QAAA;AAIViC,YAAAA,OAAAA,GAJU,CAAA;AAKVC,YAAAA,OAAAA,GALU,CAAA;AAMVC,YAAAA,QAAAA,GANFnC;AAAY,WAAZA,EAOG;AACD,iBAAA,OAAA,GADC,OACD;AACA,iBAAA,KAAA,GAFC,KAED;AACA,iBAAA,QAAA,GAHC,QAGD;AACA,iBAAA,OAAA,GAJC,OAID;AACA,iBAAA,OAAA,GALC,OAKD;AAIA,kBAAMoC,OAAAA,GAAW,CAAA,OAAA,CAAA,CAAA,CAAA,GAAaC,OAAAA,CAAd,CAAcA,CAAb,IAThB,CASD;AACA,kBAAMC,OAAAA,GAAW,CAAA,OAAA,CAAA,CAAA,CAAA,GAAaD,OAAAA,CAAd,CAAcA,CAAb,IAVhB,CAUD;AACA,gBAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAXC,OAWD;AAEAE,YAAAA,QAAAA,IAbC,GAaDA;;AACA,gBAAIA,QAAAA,GAAJ,CAAA,EAAkB;AAChBA,cAAAA,QAAAA,IADgB,GAChBA;AAfD;;AAiBD,oBAAA,QAAA;AACE,mBAAA,GAAA;AACEC,gBAAAA,OAAAA,GAAU,CADZ,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AALJ;;AAOE,mBAAA,EAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AAXJ;;AAaE,mBAAA,GAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAAU,CAFZ,CAEEA;AACAC,gBAAAA,OAAAA,GAAU,CAHZ,CAGEA;AACAC,gBAAAA,OAAAA,GAJF,CAIEA;AAjBJ;;AAmBE,mBAAA,CAAA;AACEH,gBAAAA,OAAAA,GADF,CACEA;AACAC,gBAAAA,OAAAA,GAFF,CAEEA;AACAC,gBAAAA,OAAAA,GAHF,CAGEA;AACAC,gBAAAA,OAAAA,GAAU,CAJZ,CAIEA;AAvBJ;;AAyBE;AACE,sBAAM,IAAA,KAAA,CA1BV,mEA0BU,CAAN;AA1BJ;;AA+BA,gBAAA,QAAA,EAAc;AACZD,cAAAA,OAAAA,GAAU,CADE,OACZA;AACAC,cAAAA,OAAAA,GAAU,CAFE,OAEZA;AAlDD;;AAqDD,gBAAA,aAAA,EArDC,aAqDD;AACA,gBAAA,KAAA,EAtDC,MAsDD;;AACA,gBAAIH,OAAAA,KAAJ,CAAA,EAAmB;AACjBI,cAAAA,aAAAA,GAAgBC,IAAAA,CAAAA,GAAAA,CAASP,OAAAA,GAAUD,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GADC,OACjBD;AACAE,cAAAA,aAAAA,GAAgBD,IAAAA,CAAAA,GAAAA,CAAST,OAAAA,GAAUC,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GAFC,OAEjBC;AACAzC,cAAAA,KAAAA,GAAQwC,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAHS,KAGjBxC;AACAC,cAAAA,MAAAA,GAASuC,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAJQ,KAIjBvC;AAJF,aAAA,MAKO;AACLsC,cAAAA,aAAAA,GAAgBC,IAAAA,CAAAA,GAAAA,CAAST,OAAAA,GAAUC,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GADX,OACLD;AACAE,cAAAA,aAAAA,GAAgBD,IAAAA,CAAAA,GAAAA,CAASP,OAAAA,GAAUD,OAAAA,CAAnBQ,CAAmBR,CAAnBQ,IAAAA,KAAAA,GAFX,OAELC;AACAzC,cAAAA,KAAAA,GAAQwC,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAHH,KAGLxC;AACAC,cAAAA,MAAAA,GAASuC,IAAAA,CAAAA,GAAAA,CAASR,OAAAA,CAAAA,CAAAA,CAAAA,GAAaA,OAAAA,CAAtBQ,CAAsBR,CAAtBQ,IAJJ,KAILvC;AAhED;;AAqED,iBAAA,SAAA,GAAiB,CACfkC,OAAAA,GADe,KAAA,EAEfC,OAAAA,GAFe,KAAA,EAGfC,OAAAA,GAHe,KAAA,EAIfC,OAAAA,GAJe,KAAA,EAKfC,aAAAA,GAAgBJ,OAAAA,GAAAA,KAAAA,GAAhBI,OAAAA,GAA4CF,OAAAA,GAAAA,KAAAA,GAL7B,OAAA,EAMfI,aAAAA,GAAgBL,OAAAA,GAAAA,KAAAA,GAAhBK,OAAAA,GAA4CH,OAAAA,GAAAA,KAAAA,GAN9C,OAAiB,CAAjB;AASA,iBAAA,KAAA,GA9EC,KA8ED;AACA,iBAAA,MAAA,GA/EC,MA+ED;AA1Fe;;AAkGjBI,UAAAA,KAAAA,CAAM;AACJC,YAAAA,KAAAA,GAAQ,KADJ,KAAA;AAEJT,YAAAA,QAAAA,GAAW,KAFP,QAAA;AAGJN,YAAAA,OAAAA,GAAU,KAHN,OAAA;AAIJC,YAAAA,OAAAA,GAAU,KAJN,OAAA;AAKJC,YAAAA,QAAAA,GALI;AAAA,cAANY,EAAAA,EAMQ;AACN,mBAAO,IAAA,YAAA,CAAiB;AACtBV,cAAAA,OAAAA,EAAS,KAAA,OAAA,CADa,KACb,EADa;AAAA,cAAA,KAAA;AAAA,cAAA,QAAA;AAAA,cAAA,OAAA;AAAA,cAAA,OAAA;AAAA,cAAA;AAAA,aAAjB,CAAP;AAzGe;;AA6HjBY,UAAAA,sBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAA6B;AAC3B,mBAAO,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EAA4B,KADR,SACpB,CAAP;AA9He;;AAwIjBC,UAAAA,0BAAAA,CAAAA,IAAAA,EAAiC;AAC/B,kBAAMC,OAAAA,GAAU,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACC,IAAAA,CAAD,CAACA,CAAD,EAAUA,IAAAA,CAA9B,CAA8BA,CAAV,CAApB,EAAwC,KADzB,SACf,CAAhB;;AACA,kBAAMC,WAAAA,GAAc,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACD,IAAAA,CAAD,CAACA,CAAD,EAAUA,IAAAA,CAA9B,CAA8BA,CAAV,CAApB,EAAwC,KAF7B,SAEX,CAApB;;AACA,mBAAO,CAACD,OAAAA,CAAD,CAACA,CAAD,EAAaA,OAAAA,CAAb,CAAaA,CAAb,EAAyBE,WAAAA,CAAzB,CAAyBA,CAAzB,EAAyCA,WAAAA,CAAhD,CAAgDA,CAAzC,CAAP;AA3Ie;;AAuJjBC,UAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAwB;AACtB,mBAAO,KAAA,CAAA,IAAA,CAAA,qBAAA,CAA2B,CAAA,CAAA,EAA3B,CAA2B,CAA3B,EAAmC,KADpB,SACf,CAAP;AAxJe;;AAAA;;;;AA4JnB,cAAA,2BAAA,SAAA,KAAA,CAAA,aAAA,CAAwD;AACtDtD,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAuB;AACrB,kBADqB,GACrB;AACA,iBAAA,IAAA,GAFqB,IAErB;AAHoD;;AAAA;;;AAOxD,cAAMuD,UAAAA,GAAa;AACjBC,UAAAA,IAAAA,EADiB,CAAA;AAEjBC,UAAAA,IAAAA,EAFiB,CAAA;AAGjBC,UAAAA,KAAAA,EAHiB,CAAA;AAIjBC,UAAAA,MAAAA,EAJiB,CAAA;AAKjBC,UAAAA,GAAAA,EALiB;AAAA,SAAnB;;;AAyBA,iBAAA,iBAAA,CAAA,IAAA,EAAiC;AAAA,UAAA,GAAA;AAAA,UAAA,MAAA;AAAA,UAAA,GAAA;AAAoBC,UAAAA,OAAAA,GAApB;AAAA,YAAjC,EAAA,EAA4E;AAC1E/B,WAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEf,GAAAA,IAAO,OAAA,GAAA,KADTe,QAAAA,EAD0E,2DAC1EA;AAKA,gBAAMgC,cAAAA,GAAiBC,CAAAA,GAAAA,KAAAA,CAAAA,oBAAAA,EANmD,GAMnDA,CAAvB;;AACA,cAAA,OAAA,EAAa;AACXC,YAAAA,IAAAA,CAAAA,IAAAA,GAAYA,IAAAA,CAAAA,KAAAA,GADD,cACXA;AADF,WAAA,MAEO;AACLA,YAAAA,IAAAA,CAAAA,IAAAA,GADK,EACLA;AACAA,YAAAA,IAAAA,CAAAA,KAAAA,GAAa,aAFR,cAAA,EAELA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,qBADmB,KACnB;AADFA,aAAAA;AAZwE;;AAiB1E,cAAIC,SAAAA,GAjBsE,EAiB1E;;AACA,kBAAA,MAAA;AACE,iBAAKV,UAAAA,CAAL,IAAA;AADF;;AAGE,iBAAKA,UAAAA,CAAL,IAAA;AACEU,cAAAA,SAAAA,GADF,OACEA;AAJJ;;AAME,iBAAKV,UAAAA,CAAL,KAAA;AACEU,cAAAA,SAAAA,GADF,QACEA;AAPJ;;AASE,iBAAKV,UAAAA,CAAL,MAAA;AACEU,cAAAA,SAAAA,GADF,SACEA;AAVJ;;AAYE,iBAAKV,UAAAA,CAAL,GAAA;AACEU,cAAAA,SAAAA,GADF,MACEA;AAbJ;AAAA;;AAgBAD,UAAAA,IAAAA,CAAAA,MAAAA,GAlC0E,SAkC1EA;AAEAA,UAAAA,IAAAA,CAAAA,GAAAA,GAAW,OAAA,GAAA,KAAA,QAAA,GAAA,GAAA,GApC+D,gBAoC1EA;AArcF;;AAwcA,iBAAA,YAAA,CAAA,GAAA,EAA2B;AACzB,gBAAME,EAAAA,GAAKnD,GAAAA,CADc,MACzB;AACA,cAAIoD,CAAAA,GAFqB,CAEzB;;AACA,iBAAOA,CAAAA,GAAAA,EAAAA,IAAUpD,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,OAAjB,EAAA,EAAuC;AACrCoD,YAAAA,CADqC;AAHd;;AAMzB,iBAAOpD,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAiBoD,CAAAA,GAAjBpD,CAAAA,EAAAA,WAAAA,OANkB,OAMzB;AA9cF;;AAidA,iBAAA,SAAA,CAAA,QAAA,EAA6B;AAC3B,iBAAO,OAAA,QAAA,KAAA,QAAA,IAAgC,UAAA,IAAA,CADZ,QACY,CAAvC;AAldF;;AA0dA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,gBAAMqD,MAAAA,GAASrD,GAAAA,CAAAA,OAAAA,CADgB,GAChBA,CAAf;AACA,gBAAMsD,KAAAA,GAAQtD,GAAAA,CAAAA,OAAAA,CAFiB,GAEjBA,CAAd;AACA,gBAAMuD,GAAAA,GAAMzB,IAAAA,CAAAA,GAAAA,CACVuB,MAAAA,GAAAA,CAAAA,GAAAA,MAAAA,GAAsBrD,GAAAA,CADZ8B,MAAAA,EAEVwB,KAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAAoBtD,GAAAA,CALS,MAGnB8B,CAAZ;AAIA,iBAAO9B,GAAAA,CAAAA,SAAAA,CAAcA,GAAAA,CAAAA,WAAAA,CAAAA,GAAAA,EAAAA,GAAAA,IAAdA,CAAAA,EAPwB,GAOxBA,CAAP;AAjeF;;AA2eA,iBAAA,qBAAA,CAAA,GAAA,EAAoCwD,eAAAA,GAApC,cAAA,EAAsE;AACpE,cAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,mBAD2B,eAC3B;AAFkE;;AAIpE,cAAIC,YAAAA,CAAJ,GAAIA,CAAJ,EAAuB;AACrBC,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADqB,oEACrBA;AACA,mBAFqB,eAErB;AANkE;;AAQpE,gBAAMC,KAAAA,GAR8D,qDAQpE;AAGA,gBAAMC,UAAAA,GAX8D,+BAWpE;AACA,gBAAMC,QAAAA,GAAWF,KAAAA,CAAAA,IAAAA,CAZmD,GAYnDA,CAAjB;AACA,cAAIG,iBAAAA,GACFF,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CAAhBD,CAAgBC,CAAhBD,KACAA,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CADhBD,CACgBC,CAAhBD,CADAA,IAEAA,UAAAA,CAAAA,IAAAA,CAAgBC,QAAAA,CAhBkD,CAgBlDA,CAAhBD,CAHF;;AAIA,cAAA,iBAAA,EAAuB;AACrBE,YAAAA,iBAAAA,GAAoBA,iBAAAA,CADC,CACDA,CAApBA;;AACA,gBAAIA,iBAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAAqC;AAEnC,kBAAI;AACFA,gBAAAA,iBAAAA,GAAoBF,UAAAA,CAAAA,IAAAA,CAClBG,kBAAAA,CADkBH,iBAClBG,CADkBH,EADlB,CACkBA,CAApBE;AADF,eAAA,CAIE,OAAA,EAAA,EANiC,CAAA;AAFhB;AAjB6C;;AAgCpE,iBAAOA,iBAAAA,IAhC6D,eAgCpE;AA3gBF;;AA8gBA,cAAA,SAAA,CAAgB;AACd7E,UAAAA,WAAAA,GAAc;AACZ,iBAAA,OAAA,GAAe+E,MAAAA,CAAAA,MAAAA,CADH,IACGA,CAAf;AACA,iBAAA,KAAA,GAFY,EAEZ;AAHY;;AAMdC,UAAAA,IAAAA,CAAAA,IAAAA,EAAW;AACT,gBAAIC,IAAAA,IAAQ,KAAZ,OAAA,EAA0B;AACxBR,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,gCADmB,IAAA,EACxBA;AAFO;;AAIT,iBAAA,OAAA,CAAA,IAAA,IAAqBS,IAAAA,CAJZ,GAIYA,EAArB;AAVY;;AAadC,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,gBAAI,EAAE,IAAA,IAAQ,KAAd,OAAI,CAAJ,EAA6B;AAC3BV,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADsB,IAAA,EAC3BA;AAFU;;AAIZ,iBAAA,KAAA,CAAA,IAAA,CAAgB;AAAA,cAAA,IAAA;AAEdW,cAAAA,KAAAA,EAAO,KAAA,OAAA,CAFO,IAEP,CAFO;AAGdd,cAAAA,GAAAA,EAAKY,IAAAA,CAHS,GAGTA;AAHS,aAAhB;AAMA,mBAAO,KAAA,OAAA,CAVK,IAUL,CAAP;AAvBY;;AA0BdG,UAAAA,QAAAA,GAAW;AAET,kBAAMC,MAAAA,GAFG,EAET;AACA,gBAAIC,OAAAA,GAHK,CAGT;;AACA,iBAAA,MAAA,IAAA,IAAmB,KAAnB,KAAA,EAA+B;AAC7B,oBAAMN,IAAAA,GAAOD,IAAAA,CADgB,IAC7B;;AACA,kBAAIC,IAAAA,CAAAA,MAAAA,GAAJ,OAAA,EAA2B;AACzBM,gBAAAA,OAAAA,GAAUN,IAAAA,CADe,MACzBM;AAH2B;AAJtB;;AAUT,iBAAA,MAAA,IAAA,IAAmB,KAAnB,KAAA,EAA+B;AAC7B,oBAAMC,QAAAA,GAAWR,IAAAA,CAAAA,GAAAA,GAAWA,IAAAA,CADC,KAC7B;AACAM,cAAAA,MAAAA,CAAAA,IAAAA,CAAY,GAAGN,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAH,OAAGA,CAAH,IAFiB,QAAA,MAE7BM;AAZO;;AAcT,mBAAOA,MAAAA,CAAAA,IAAAA,CAdE,EAcFA,CAAP;AAxCY;;AAAA;;;;AA4ChB,iBAAA,gBAAA,GAA4B;AAC1B,iBACE,OAAA,KAAA,KAAA,WAAA,IACA,OAAA,QAAA,KADA,WAAA,IAEA,UAAUG,QAAAA,CAFV,SAAA,IAGA,OAAA,cAAA,KALwB,WAC1B;AA3jBF;;AAmkBA,iBAAA,eAAA,CAAA,GAAA,EAAA,OAAA,EAAuC;AACrC,cAAI;AACF,kBAAM;AAAA,cAAA;AAAA,gBAAe7E,OAAAA,GAAU,IAAA,GAAA,CAAA,GAAA,EAAVA,OAAU,CAAVA,GAAkC,IAAA,GAAA,CADrD,GACqD,CAAvD;AAEA,mBAAO8E,QAAAA,KAAAA,OAAAA,IAAwBA,QAAAA,KAH7B,QAGF;AAHF,WAAA,CAIE,OAAA,EAAA,EAAW;AACX,mBADW,KACX;AANmC;AAnkBvC;;AAklBA,iBAAA,UAAA,CAAA,GAAA,EAAyBC,mBAAAA,GAAzB,KAAA,EAAsD;AACpD,iBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,kBAAMC,MAAAA,GAAStE,QAAAA,CAAAA,aAAAA,CADuB,QACvBA,CAAf;AACAsE,YAAAA,MAAAA,CAAAA,GAAAA,GAFsC,GAEtCA;;AAEAA,YAAAA,MAAAA,CAAAA,MAAAA,GAAgB,UAAA,GAAA,EAAe;AAC7B,kBAAA,mBAAA,EAAyB;AACvBA,gBAAAA,MAAAA,CADuB,MACvBA;AAF2B;;AAI7BhE,cAAAA,OAAAA,CAJ6B,GAI7BA,CAAAA;AAJFgE,aAAAA;;AAMAA,YAAAA,MAAAA,CAAAA,OAAAA,GAAiB,YAAY;AAC3B/D,cAAAA,MAAAA,CAAO,IAAA,KAAA,CAAU,0BAA0B+D,MAAAA,CADhB,GAAA,EACpB,CAAP/D,CAAAA;AADF+D,aAAAA;;AAGC,aAAA,QAAA,CAAA,IAAA,IAAiBtE,QAAAA,CAAlB,eAAC,EAAD,WAAC,CAbqC,MAarC;AAbH,WAAO,CAAP;AAnlBF;;AAqmBA,iBAAA,UAAA,CAAA,OAAA,EAA6B;AAC3BuE,UAAAA,OAAAA,CAAAA,GAAAA,CAAY,2BADe,OAC3BA;AAtmBF;;AAymBA,YAzmBA,kBAymBA;;AAEA,cAAA,aAAA,CAAoB;AAiBlB,iBAAOC,YAAP,CAAA,KAAA,EAA2B;AACzB,gBAAI,CAAA,KAAA,IAAU,CAACC,CAAAA,GAAAA,KAAAA,CAAAA,QAAAA,EAAf,KAAeA,CAAf,EAAgC;AAC9B,qBAD8B,IAC9B;AAFuB;;AAMzB,gBAAI,CAAJ,kBAAA,EAAyB;AACvBC,cAAAA,kBAAAA,GAAqB,IAAA,MAAA,CACnB,QAAA,UAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,WAAA,GAAA,YAAA,GAAA,WAAA,GAAA,IAAA,GAAA,WAAA,GAFqB,IACF,CAArBA;AAPuB;;AA0BzB,kBAAMC,OAAAA,GAAUD,kBAAAA,CAAAA,IAAAA,CA1BS,KA0BTA,CAAhB;;AACA,gBAAI,CAAJ,OAAA,EAAc;AACZ,qBADY,IACZ;AA5BuB;;AAiCzB,kBAAME,IAAAA,GAAOC,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAjCY,EAiCZA,CAAb;AACA,gBAAIC,KAAAA,GAAQD,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAlCa,EAkCbA,CAAZ;AACAC,YAAAA,KAAAA,GAAQA,KAAAA,IAAAA,CAAAA,IAAcA,KAAAA,IAAdA,EAAAA,GAA4BA,KAAAA,GAA5BA,CAAAA,GAnCiB,CAmCzBA;AACA,gBAAIC,GAAAA,GAAMF,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EApCe,EAoCfA,CAAV;AACAE,YAAAA,GAAAA,GAAMA,GAAAA,IAAAA,CAAAA,IAAYA,GAAAA,IAAZA,EAAAA,GAAAA,GAAAA,GArCmB,CAqCzBA;AACA,gBAAIC,IAAAA,GAAOH,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAtCc,EAsCdA,CAAX;AACAG,YAAAA,IAAAA,GAAOA,IAAAA,IAAAA,CAAAA,IAAaA,IAAAA,IAAbA,EAAAA,GAAAA,IAAAA,GAvCkB,CAuCzBA;AACA,gBAAIC,MAAAA,GAASJ,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAxCY,EAwCZA,CAAb;AACAI,YAAAA,MAAAA,GAASA,MAAAA,IAAAA,CAAAA,IAAeA,MAAAA,IAAfA,EAAAA,GAAAA,MAAAA,GAzCgB,CAyCzBA;AACA,gBAAIC,MAAAA,GAASL,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EA1CY,EA0CZA,CAAb;AACAK,YAAAA,MAAAA,GAASA,MAAAA,IAAAA,CAAAA,IAAeA,MAAAA,IAAfA,EAAAA,GAAAA,MAAAA,GA3CgB,CA2CzBA;AACA,kBAAMC,qBAAAA,GAAwBR,OAAAA,CAAAA,CAAAA,CAAAA,IA5CL,GA4CzB;AACA,gBAAIS,UAAAA,GAAaP,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EA7CQ,EA6CRA,CAAjB;AACAO,YAAAA,UAAAA,GAAaA,UAAAA,IAAAA,CAAAA,IAAmBA,UAAAA,IAAnBA,EAAAA,GAAAA,UAAAA,GA9CY,CA8CzBA;AACA,gBAAIC,YAAAA,GAAeR,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EAAAA,EAAAA,CAAAA,IA/CM,CA+CzB;AACAQ,YAAAA,YAAAA,GAAeA,YAAAA,IAAAA,CAAAA,IAAqBA,YAAAA,IAArBA,EAAAA,GAAAA,YAAAA,GAhDU,CAgDzBA;;AAMA,gBAAIF,qBAAAA,KAAJ,GAAA,EAAmC;AACjCH,cAAAA,IAAAA,IADiC,UACjCA;AACAC,cAAAA,MAAAA,IAFiC,YAEjCA;AAFF,aAAA,MAGO,IAAIE,qBAAAA,KAAJ,GAAA,EAAmC;AACxCH,cAAAA,IAAAA,IADwC,UACxCA;AACAC,cAAAA,MAAAA,IAFwC,YAExCA;AA3DuB;;AA8DzB,mBAAO,IAAA,IAAA,CAASrB,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,MAAAA,EA9DS,MA8DTA,CAAT,CAAP;AA/EgB;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3mBpB,QAAA,mBAAA,CAAA,CAAA,CAAA;;AAiBA,cAAM0B,eAAAA,GAAkB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AACA,cAAMC,oBAAAA,GAAuB,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAA7B,CAA6B,CAA7B;;AAGA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,KAAAA,EADqB,IAAA;AAErBC,UAAAA,eAAAA,EAFqB,IAAA;AAGrBC,UAAAA,IAAAA,EAHqB,IAAA;AAIrBC,UAAAA,kBAAAA,EAJqB,IAAA;AAKrBC,UAAAA,sBAAAA,EALqB,KAAA;AAMrBC,UAAAA,sBAAAA,EANqB,KAAA;AAOrBC,UAAAA,QAAAA,EAPqB,KAAA;AAQrBC,UAAAA,kBAAAA,EARqB;AAAA,SAAvB;;AAWA,cAAMC,iBAAAA,GAAoB;AACxBC,UAAAA,IAAAA,EADwB,CAAA;AAExBC,UAAAA,MAAAA,EAFwB,CAAA;AAGxBC,UAAAA,WAAAA,EAHwB,CAAA;AAIxBC,UAAAA,SAAAA,EAJwB,CAAA;AAKxBC,UAAAA,gBAAAA,EALwB,CAAA;AAMxBC,UAAAA,kBAAAA,EANwB,CAAA;AAOxBC,UAAAA,uBAAAA,EAPwB,CAAA;AAQxBC,UAAAA,WAAAA,EARwB,CAAA;AASxBC,UAAAA,gBAAAA,EATwB,CAAA;AAUxBC,UAAAA,gBAAAA,EAVwB;AAAA,SAA1B;;AAaA,cAAMC,SAAAA,GAAY;AAChBC,UAAAA,cAAAA,EADgB,CAAA;AAEhBC,UAAAA,SAAAA,EAFgB,CAAA;AAGhBC,UAAAA,UAAAA,EAHgB;AAAA,SAAlB;;AAMA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,IAAAA,EADqB,CAAA;AAErBC,UAAAA,IAAAA,EAFqB,CAAA;AAGrBC,UAAAA,QAAAA,EAHqB,CAAA;AAIrBC,UAAAA,IAAAA,EAJqB,CAAA;AAKrBC,UAAAA,MAAAA,EALqB,CAAA;AAMrBC,UAAAA,MAAAA,EANqB,CAAA;AAOrBC,UAAAA,OAAAA,EAPqB,CAAA;AAQrBC,UAAAA,QAAAA,EARqB,CAAA;AASrBC,UAAAA,SAAAA,EATqB,CAAA;AAUrBC,UAAAA,SAAAA,EAVqB,EAAA;AAWrBC,UAAAA,QAAAA,EAXqB,EAAA;AAYrBC,UAAAA,SAAAA,EAZqB,EAAA;AAarBC,UAAAA,KAAAA,EAbqB,EAAA;AAcrBC,UAAAA,KAAAA,EAdqB,EAAA;AAerBC,UAAAA,GAAAA,EAfqB,EAAA;AAgBrBC,UAAAA,KAAAA,EAhBqB,EAAA;AAiBrBC,UAAAA,cAAAA,EAjBqB,EAAA;AAkBrBC,UAAAA,KAAAA,EAlBqB,EAAA;AAmBrBC,UAAAA,KAAAA,EAnBqB,EAAA;AAoBrBC,UAAAA,MAAAA,EApBqB,EAAA;AAqBrBC,UAAAA,MAAAA,EArBqB,EAAA;AAsBrBC,UAAAA,WAAAA,EAtBqB,EAAA;AAuBrBC,UAAAA,OAAAA,EAvBqB,EAAA;AAwBrBC,UAAAA,SAAAA,EAxBqB,EAAA;AAyBrBC,UAAAA,MAAAA,EAzBqB,EAAA;AA0BrBC,UAAAA,MAAAA,EA1BqB;AAAA,SAAvB;;AA6BA,cAAMC,wBAAAA,GAA2B;AAC/BC,UAAAA,MAAAA,EAD+B,QAAA;AAE/BC,UAAAA,MAAAA,EAF+B;AAAA,SAAjC;;AAKA,cAAMC,qBAAAA,GAAwB;AAC5BF,UAAAA,MAAAA,EAD4B,QAAA;AAE5BG,UAAAA,QAAAA,EAF4B;AAAA,SAA9B;;AAKA,cAAMC,qBAAAA,GAAwB;AAC5BC,UAAAA,QAAAA,EAD4B,UAAA;AAE5BC,UAAAA,QAAAA,EAF4B,UAAA;AAG5BC,UAAAA,SAAAA,EAH4B,WAAA;AAI5BC,UAAAA,SAAAA,EAJ4B,WAAA;AAK5BlH,UAAAA,IAAAA,EAL4B;AAAA,SAA9B;;AAQA,cAAMmH,mBAAAA,GAAsB;AAC1BC,UAAAA,KAAAA,EAD0B,OAAA;AAE1BC,UAAAA,KAAAA,EAF0B;AAAA,SAA5B;;AAKA,cAAMC,cAAAA,GAAiB;AACrBnD,UAAAA,SAAAA,EADqB,IAAA;AAErBoD,UAAAA,MAAAA,EAFqB,IAAA;AAGrBhE,UAAAA,KAAAA,EAHqB,IAAA;AAIrBiE,UAAAA,MAAAA,EAJqB,IAAA;AAKrBC,UAAAA,QAAAA,EALqB,IAAA;AAMrBC,UAAAA,MAAAA,EANqB,IAAA;AAOrBC,UAAAA,QAAAA,EAPqB,IAAA;AAQrBC,UAAAA,MAAAA,EARqB,IAAA;AASrBC,UAAAA,YAAAA,EATqB,KAAA;AAUrBC,UAAAA,cAAAA,EAVqB;AAAA,SAAvB;;AAaA,cAAMC,mBAAAA,GAAsB;AAC1BJ,UAAAA,QAAAA,EAD0B,SAAA;AAE1BK,UAAAA,QAAAA,EAF0B,SAAA;AAG1BC,UAAAA,QAAAA,EAH0B,SAAA;AAI1BC,UAAAA,SAAAA,EAJ0B,SAAA;AAK1BC,UAAAA,QAAAA,EAL0B,SAAA;AAM1BC,UAAAA,aAAAA,EAN0B,SAAA;AAO1BC,UAAAA,KAAAA,EAP0B,SAAA;AAQ1BC,UAAAA,UAAAA,EAR0B,SAAA;AAS1BC,UAAAA,KAAAA,EAT0B,SAAA;AAU1BC,UAAAA,IAAAA,EAV0B,SAAA;AAW1BC,UAAAA,IAAAA,EAX0B,SAAA;AAY1BC,UAAAA,UAAAA,EAZ0B,SAAA;AAa1BC,UAAAA,WAAAA,EAb0B,SAAA;AAc1BC,UAAAA,eAAAA,EAd0B,SAAA;AAe1BC,UAAAA,WAAAA,EAf0B,SAAA;AAgB1BC,UAAAA,IAAAA,EAhB0B,SAAA;AAiB1BC,UAAAA,QAAAA,EAjB0B,SAAA;AAkB1BC,UAAAA,cAAAA,EAlB0B,SAAA;AAmB1BC,UAAAA,iBAAAA,EAnB0B;AAAA,SAA5B;;AAsBA,cAAMC,yBAAAA,GAA4B;AAChCC,UAAAA,KAAAA,EADgC,CAAA;AAEhCC,UAAAA,MAAAA,EAFgC,CAAA;AAGhCC,UAAAA,OAAAA,EAHgC,CAAA;AAIhCC,UAAAA,KAAAA,EAJgC,CAAA;AAKhC9D,UAAAA,SAAAA,EALgC;AAAA,SAAlC;;AAQA,cAAM+D,yBAAAA,GAA4B;AAChCC,UAAAA,CAAAA,EADgC,aAAA;AAEhCC,UAAAA,CAAAA,EAFgC,YAAA;AAGhCC,UAAAA,CAAAA,EAHgC,YAAA;AAIhCC,UAAAA,CAAAA,EAJgC,UAAA;AAKhCC,UAAAA,EAAAA,EALgC,OAAA;AAMhCC,UAAAA,EAAAA,EANgC,MAAA;AAOhCC,UAAAA,EAAAA,EAPgC,UAAA;AAQhCC,UAAAA,EAAAA,EARgC,WAAA;AAShCC,UAAAA,EAAAA,EATgC,aAAA;AAUhCC,UAAAA,EAAAA,EAVgC,eAAA;AAWhCC,UAAAA,CAAAA,EAXgC,WAAA;AAYhCC,UAAAA,CAAAA,EAZgC,QAAA;AAahCC,UAAAA,CAAAA,EAbgC,UAAA;AAchCC,UAAAA,CAAAA,EAdgC;AAAA,SAAlC;;AAiBA,cAAMC,uBAAAA,GAA0B;AAC9BC,UAAAA,EAAAA,EAD8B,WAAA;AAE9BC,UAAAA,EAAAA,EAF8B,UAAA;AAG9BC,UAAAA,EAAAA,EAH8B,SAAA;AAI9BC,UAAAA,EAAAA,EAJ8B,WAAA;AAK9BC,UAAAA,EAAAA,EAL8B;AAAA,SAAhC;;AAQA,cAAMC,mBAAAA,GAAsB;AAC1BC,UAAAA,CAAAA,EAD0B,UAAA;AAE1BR,UAAAA,CAAAA,EAF0B;AAAA,SAA5B;;AAKA,cAAMS,UAAAA,GAAa;AACjBC,UAAAA,OAAAA,EADiB,SAAA;AAEjBC,UAAAA,KAAAA,EAFiB,OAAA;AAGjBC,UAAAA,GAAAA,EAHiB,KAAA;AAIjBC,UAAAA,GAAAA,EAJiB,KAAA;AAKjBC,UAAAA,GAAAA,EALiB,KAAA;AAMjBC,UAAAA,IAAAA,EANiB,MAAA;AAOjBC,UAAAA,GAAAA,EAPiB,KAAA;AAQjBC,UAAAA,GAAAA,EARiB,KAAA;AASjBC,UAAAA,GAAAA,EATiB,KAAA;AAUjBC,UAAAA,GAAAA,EAViB;AAAA,SAAnB;;AAaA,cAAMC,QAAAA,GAAW;AACfV,UAAAA,OAAAA,EADe,SAAA;AAEfW,UAAAA,KAAAA,EAFe,OAAA;AAGfC,UAAAA,MAAAA,EAHe,QAAA;AAIfC,UAAAA,YAAAA,EAJe,cAAA;AAKfC,UAAAA,aAAAA,EALe,eAAA;AAMfC,UAAAA,QAAAA,EANe,UAAA;AAOfC,UAAAA,YAAAA,EAPe,cAAA;AAQfC,UAAAA,KAAAA,EARe,OAAA;AASfC,UAAAA,QAAAA,EATe,UAAA;AAUfC,UAAAA,KAAAA,EAVe,OAAA;AAWfC,UAAAA,OAAAA,EAXe;AAAA,SAAjB;;AAcA,cAAMC,cAAAA,GAAiB;AACrBC,UAAAA,MAAAA,EADqB,CAAA;AAErBC,UAAAA,QAAAA,EAFqB,CAAA;AAGrBC,UAAAA,KAAAA,EAHqB;AAAA,SAAvB;;AAMA,cAAM9O,mBAAAA,GAAsB;AAC1BuC,UAAAA,IAAAA,EAD0B,CAAA;AAE1BwM,UAAAA,MAAAA,EAF0B,CAAA;AAG1BC,UAAAA,MAAAA,EAH0B;AAAA,SAA5B;;AAOA,cAAMC,GAAAA,GAAM;AAGVC,UAAAA,UAAAA,EAHU,CAAA;AAIVC,UAAAA,YAAAA,EAJU,CAAA;AAKVC,UAAAA,UAAAA,EALU,CAAA;AAMVC,UAAAA,WAAAA,EANU,CAAA;AAOVC,UAAAA,aAAAA,EAPU,CAAA;AAQVC,UAAAA,OAAAA,EARU,CAAA;AASVC,UAAAA,kBAAAA,EATU,CAAA;AAUVC,UAAAA,WAAAA,EAVU,CAAA;AAWVC,UAAAA,SAAAA,EAXU,CAAA;AAYVC,UAAAA,IAAAA,EAZU,EAAA;AAaVC,UAAAA,OAAAA,EAbU,EAAA;AAcVC,UAAAA,SAAAA,EAdU,EAAA;AAeVC,UAAAA,MAAAA,EAfU,EAAA;AAgBVC,UAAAA,MAAAA,EAhBU,EAAA;AAiBVC,UAAAA,OAAAA,EAjBU,EAAA;AAkBVC,UAAAA,QAAAA,EAlBU,EAAA;AAmBVC,UAAAA,QAAAA,EAnBU,EAAA;AAoBVC,UAAAA,SAAAA,EApBU,EAAA;AAqBVC,UAAAA,SAAAA,EArBU,EAAA;AAsBVC,UAAAA,MAAAA,EAtBU,EAAA;AAuBVC,UAAAA,WAAAA,EAvBU,EAAA;AAwBVC,UAAAA,IAAAA,EAxBU,EAAA;AAyBVC,UAAAA,MAAAA,EAzBU,EAAA;AA0BVC,UAAAA,UAAAA,EA1BU,EAAA;AA2BVC,UAAAA,YAAAA,EA3BU,EAAA;AA4BVC,UAAAA,eAAAA,EA5BU,EAAA;AA6BVC,UAAAA,iBAAAA,EA7BU,EAAA;AA8BVC,UAAAA,OAAAA,EA9BU,EAAA;AA+BVC,UAAAA,IAAAA,EA/BU,EAAA;AAgCVC,UAAAA,MAAAA,EAhCU,EAAA;AAiCVC,UAAAA,SAAAA,EAjCU,EAAA;AAkCVC,UAAAA,OAAAA,EAlCU,EAAA;AAmCVC,UAAAA,cAAAA,EAnCU,EAAA;AAoCVC,UAAAA,cAAAA,EApCU,EAAA;AAqCVC,UAAAA,SAAAA,EArCU,EAAA;AAsCVC,UAAAA,UAAAA,EAtCU,EAAA;AAuCVC,UAAAA,OAAAA,EAvCU,EAAA;AAwCVC,UAAAA,oBAAAA,EAxCU,EAAA;AAyCVC,UAAAA,WAAAA,EAzCU,EAAA;AA0CVC,UAAAA,QAAAA,EA1CU,EAAA;AA2CVC,UAAAA,kBAAAA,EA3CU,EAAA;AA4CVC,UAAAA,aAAAA,EA5CU,EAAA;AA6CVC,UAAAA,QAAAA,EA7CU,EAAA;AA8CVC,UAAAA,QAAAA,EA9CU,EAAA;AA+CVC,UAAAA,cAAAA,EA/CU,EAAA;AAgDVC,UAAAA,gBAAAA,EAhDU,EAAA;AAiDVC,UAAAA,0BAAAA,EAjDU,EAAA;AAkDVC,UAAAA,YAAAA,EAlDU,EAAA;AAmDVC,UAAAA,qBAAAA,EAnDU,EAAA;AAoDVC,UAAAA,mBAAAA,EApDU,EAAA;AAqDVC,UAAAA,iBAAAA,EArDU,EAAA;AAsDVC,UAAAA,cAAAA,EAtDU,EAAA;AAuDVC,UAAAA,eAAAA,EAvDU,EAAA;AAwDVC,UAAAA,YAAAA,EAxDU,EAAA;AAyDVC,UAAAA,aAAAA,EAzDU,EAAA;AA0DVC,UAAAA,aAAAA,EA1DU,EAAA;AA2DVC,UAAAA,WAAAA,EA3DU,EAAA;AA4DVC,UAAAA,iBAAAA,EA5DU,EAAA;AA6DVC,UAAAA,eAAAA,EA7DU,EAAA;AA8DVC,UAAAA,kBAAAA,EA9DU,EAAA;AA+DVC,UAAAA,gBAAAA,EA/DU,EAAA;AAgEVC,UAAAA,WAAAA,EAhEU,EAAA;AAiEVC,UAAAA,gBAAAA,EAjEU,EAAA;AAkEVC,UAAAA,cAAAA,EAlEU,EAAA;AAmEVC,UAAAA,cAAAA,EAnEU,EAAA;AAoEVC,UAAAA,YAAAA,EApEU,EAAA;AAqEVC,UAAAA,SAAAA,EArEU,EAAA;AAsEVC,UAAAA,cAAAA,EAtEU,EAAA;AAuEVC,UAAAA,kBAAAA,EAvEU,EAAA;AAwEVC,UAAAA,uBAAAA,EAxEU,EAAA;AAyEVC,UAAAA,gBAAAA,EAzEU,EAAA;AA0EVC,UAAAA,WAAAA,EA1EU,EAAA;AA2EVC,UAAAA,SAAAA,EA3EU,EAAA;AA4EVC,UAAAA,qBAAAA,EA5EU,EAAA;AA6EVC,UAAAA,mBAAAA,EA7EU,EAAA;AA8EVC,UAAAA,UAAAA,EA9EU,EAAA;AA+EVC,UAAAA,QAAAA,EA/EU,EAAA;AAgFVC,UAAAA,gBAAAA,EAhFU,EAAA;AAiFVC,UAAAA,cAAAA,EAjFU,EAAA;AAkFVC,UAAAA,eAAAA,EAlFU,EAAA;AAmFVC,UAAAA,aAAAA,EAnFU,EAAA;AAoFVC,UAAAA,gBAAAA,EApFU,EAAA;AAqFVC,UAAAA,qBAAAA,EArFU,EAAA;AAsFVC,UAAAA,0BAAAA,EAtFU,EAAA;AAuFVC,UAAAA,iBAAAA,EAvFU,EAAA;AAwFVC,UAAAA,uBAAAA,EAxFU,EAAA;AAyFVC,UAAAA,4BAAAA,EAzFU,EAAA;AA0FVC,UAAAA,uBAAAA,EA1FU,EAAA;AA2FVC,UAAAA,2BAAAA,EA3FU,EAAA;AA4FVC,UAAAA,wBAAAA,EA5FU,EAAA;AA6FVC,UAAAA,aAAAA,EA7FU;AAAA,SAAZ;;AAgGA,cAAMC,oBAAAA,GAAuB;AAE3BC,UAAAA,OAAAA,EAF2B,SAAA;AAG3BC,UAAAA,KAAAA,EAH2B,OAAA;AAI3BC,UAAAA,UAAAA,EAJ2B,YAAA;AAK3BC,UAAAA,KAAAA,EAL2B,OAAA;AAM3BC,UAAAA,cAAAA,EAN2B,gBAAA;AAQ3BC,UAAAA,IAAAA,EAR2B,MAAA;AAS3BC,UAAAA,kBAAAA,EAT2B,oBAAA;AAU3BC,UAAAA,cAAAA,EAV2B,gBAAA;AAW3BC,UAAAA,YAAAA,EAX2B,cAAA;AAY3BC,UAAAA,kBAAAA,EAZ2B,oBAAA;AAa3BC,UAAAA,cAAAA,EAb2B,gBAAA;AAc3BC,UAAAA,gBAAAA,EAd2B,kBAAA;AAe3BC,UAAAA,kBAAAA,EAf2B,oBAAA;AAgB3BC,UAAAA,eAAAA,EAhB2B,iBAAA;AAiB3BC,UAAAA,iBAAAA,EAjB2B,mBAAA;AAkB3BC,UAAAA,kBAAAA,EAlB2B,oBAAA;AAmB3BC,UAAAA,mBAAAA,EAnB2B,qBAAA;AAoB3BC,UAAAA,gBAAAA,EApB2B,kBAAA;AAqB3BC,UAAAA,kBAAAA,EArB2B;AAAA,SAA7B;;AAwBA,cAAMC,iBAAAA,GAAoB;AACxBC,UAAAA,aAAAA,EADwB,CAAA;AAExBC,UAAAA,kBAAAA,EAFwB;AAAA,SAA1B;;AAKA,YAAIC,SAAAA,GAAYzH,cAAAA,CArVhB,QAqVA;;AAEA,iBAAA,iBAAA,CAAA,KAAA,EAAkC;AAChC,cAAI0H,MAAAA,CAAAA,SAAAA,CAAJ,KAAIA,CAAJ,EAA6B;AAC3BD,YAAAA,SAAAA,GAD2B,KAC3BA;AAF8B;AAvVlC;;AA6VA,iBAAA,iBAAA,GAA6B;AAC3B,iBAD2B,SAC3B;AA9VF;;AAoWA,iBAAA,IAAA,CAAA,GAAA,EAAmB;AACjB,cAAIA,SAAAA,IAAazH,cAAAA,CAAjB,KAAA,EAAuC;AACrC/J,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,SADyB,GAAA,EACrCA;AAFe;AApWnB;;AA2WA,iBAAA,IAAA,CAAA,GAAA,EAAmB;AACjB,cAAIwR,SAAAA,IAAazH,cAAAA,CAAjB,QAAA,EAA0C;AACxC/J,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,YAD4B,GAAA,EACxCA;AAFe;AA3WnB;;AAiXA,iBAAA,WAAA,CAAA,GAAA,EAA0B;AACxB,gBAAM,IAAA,KAAA,CADkB,GAClB,CAAN;AAlXF;;AAqXA,iBAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAA2B;AACzB,cAAI,CAAJ,IAAA,EAAW;AACT5F,YAAAA,WAAAA,CADS,GACTA,CAAAA;AAFuB;AArX3B;;AA4XA,iBAAA,YAAA,CAAA,OAAA,EAAA,QAAA,EAAyC;AACvC,cADuC,IACvC;;AACA,cAAI;AACFsX,YAAAA,IAAAA,GAAO,IAAA,GAAA,CADL,OACK,CAAPA;;AACA,gBAAI,CAACA,IAAAA,CAAD,MAAA,IAAgBA,IAAAA,CAAAA,MAAAA,KAApB,MAAA,EAA4C;AAC1C,qBAD0C,KAC1C;AAHA;AAAJ,WAAA,CAKE,OAAA,CAAA,EAAU;AACV,mBADU,KACV;AARqC;;AAWvC,gBAAMC,KAAAA,GAAQ,IAAA,GAAA,CAAA,QAAA,EAXyB,IAWzB,CAAd;AACA,iBAAOD,IAAAA,CAAAA,MAAAA,KAAgBC,KAAAA,CAZgB,MAYvC;AAxYF;;AA4YA,iBAAA,gBAAA,CAAA,GAAA,EAA+B;AAC7B,cAAI,CAAJ,GAAA,EAAU;AACR,mBADQ,KACR;AAF2B;;AAI7B,kBAAQzW,GAAAA,CAAR,QAAA;AACE,iBADF,OACE;AACA,iBAFF,QAEE;AACA,iBAHF,MAGE;AACA,iBAJF,SAIE;AACA,iBAAA,MAAA;AACE,qBANJ,IAMI;;AACF;AACE,qBARJ,KAQI;AARJ;AAhZF;;AAmaA,iBAAA,sBAAA,CAAA,GAAA,EAAA,OAAA,EAA8C;AAC5C,cAAI,CAAJ,GAAA,EAAU;AACR,mBADQ,IACR;AAF0C;;AAI5C,cAAI;AACF,kBAAM0W,WAAAA,GAAc7W,OAAAA,GAAU,IAAA,GAAA,CAAA,GAAA,EAAVA,OAAU,CAAVA,GAAkC,IAAA,GAAA,CADpD,GACoD,CAAtD;;AACA,gBAAI8W,gBAAAA,CAAJ,WAAIA,CAAJ,EAAmC;AACjC,qBADiC,WACjC;AAHA;AAAJ,WAAA,CAKE,OAAA,EAAA,EAT0C,CAAA;;AAY5C,iBAZ4C,IAY5C;AA/aF;;AAkbA,iBAAA,MAAA,CAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAkC;AAChC3S,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAiC;AAAA,YAAA,KAAA;AAE/B4S,YAAAA,UAAAA,EAF+B,IAAA;AAG/BC,YAAAA,YAAAA,EAH+B,IAAA;AAI/BC,YAAAA,QAAAA,EAJ+B;AAAA,WAAjC9S;AAMA,iBAPgC,KAOhC;AAzbF;;AA+bA,cAAM+S,aAAAA,GAAiB,SAAA,oBAAA,GAAgC;AAErD,mBAAA,aAAA,CAAA,OAAA,EAAgC;AAC9B,gBAAI,KAAA,WAAA,KAAJ,aAAA,EAAwC;AACtC7X,cAAAA,WAAAA,CADsC,kCACtCA,CAAAA;AAF4B;;AAI9B,iBAAA,OAAA,GAJ8B,OAI9B;AACA,iBAAA,IAAA,GAAY,KAAA,WAAA,CALkB,IAK9B;AAPmD;;AASrD6X,UAAAA,aAAAA,CAAAA,SAAAA,GAA0B,IAT2B,KAS3B,EAA1BA;AACAA,UAAAA,aAAAA,CAAAA,WAAAA,GAVqD,aAUrDA;AAEA,iBAZqD,aAYrD;AAZF,SAAuB,EAAvB;;;;AAeA,cAAA,iBAAA,SAAA,aAAA,CAA8C;AAC5C9X,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAuB;AACrB,kBADqB,GACrB;AACA,iBAAA,IAAA,GAFqB,IAErB;AAH0C;;AAAA;;;;AAO9C,cAAA,qBAAA,SAAA,aAAA,CAAkD;AAChDA,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,OAAAA,EAA0B;AACxB,kBADwB,GACxB;AACA,iBAAA,OAAA,GAFwB,OAExB;AAH8C;;AAAA;;;;AAOlD,cAAA,mBAAA,SAAA,aAAA,CAAgD;;;;AAEhD,cAAA,mBAAA,SAAA,aAAA,CAAgD;;;;AAEhD,cAAA,2BAAA,SAAA,aAAA,CAAwD;AACtDA,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAAyB;AACvB,kBADuB,GACvB;AACA,iBAAA,MAAA,GAFuB,MAEvB;AAHoD;;AAAA;;;;AAUxD,cAAA,WAAA,SAAA,aAAA,CAAwC;;;;AAKxC,cAAA,cAAA,SAAA,aAAA,CAA2C;;;AAE3C,cAAM+X,oBAAAA,GAjfN,OAifA;;AAKA,iBAAA,oBAAA,CAAA,GAAA,EAAmC;AACjC,cAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3BtT,YAAAA,IAAAA,CAD2B,yDAC3BA,CAAAA;AACA,mBAF2B,GAE3B;AAH+B;;AAKjC,iBAAOuT,GAAAA,CAAAA,OAAAA,CAAAA,oBAAAA,EAL0B,EAK1BA,CAAP;AA3fF;;AA8fA,iBAAA,aAAA,CAAA,KAAA,EAA8B;AAC5BlW,UAAAA,MAAAA,CACEmW,KAAAA,KAAAA,IAAAA,IAAkB,OAAA,KAAA,KAAlBA,QAAAA,IAA+CA,KAAAA,CAAAA,MAAAA,KADjDnW,SAAAA,EAD4B,oCAC5BA,CAAAA;AAIA,gBAAMoW,MAAAA,GAASD,KAAAA,CALa,MAK5B;AACA,gBAAME,kBAAAA,GANsB,IAM5B;;AACA,cAAID,MAAAA,GAAJ,kBAAA,EAAiC;AAC/B,mBAAOE,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EADwB,KACxBA,CAAP;AAR0B;;AAU5B,gBAAMC,MAAAA,GAVsB,EAU5B;;AACA,eAAK,IAAIlU,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,kBAAA,EAAqD;AACnD,kBAAMmU,QAAAA,GAAWzV,IAAAA,CAAAA,GAAAA,CAASsB,CAAAA,GAATtB,kBAAAA,EADkC,MAClCA,CAAjB;AACA,kBAAM0V,KAAAA,GAAQN,KAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAFqC,QAErCA,CAAd;AACAI,YAAAA,MAAAA,CAAAA,IAAAA,CAAYD,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAHuC,KAGvCA,CAAZC;AAd0B;;AAgB5B,iBAAOA,MAAAA,CAAAA,IAAAA,CAhBqB,EAgBrBA,CAAP;AA9gBF;;AAihBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1BvW,UAAAA,MAAAA,CAAO,OAAA,GAAA,KAAPA,QAAAA,EAD0B,oCAC1BA,CAAAA;AACA,gBAAMoW,MAAAA,GAASF,GAAAA,CAFW,MAE1B;AACA,gBAAMC,KAAAA,GAAQ,IAAA,UAAA,CAHY,MAGZ,CAAd;;AACA,eAAK,IAAI9T,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/B8T,YAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWD,GAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IADoB,IAC/BC;AALwB;;AAO1B,iBAP0B,KAO1B;AAxhBF;;AAgiBA,iBAAA,eAAA,CAAA,GAAA,EAA8B;AAC5B,cAAIO,GAAAA,CAAAA,MAAAA,KAAJ,SAAA,EAA8B;AAC5B,mBAAOA,GAAAA,CADqB,MAC5B;AAF0B;;AAI5B1W,UAAAA,MAAAA,CAAO0W,GAAAA,CAAAA,UAAAA,KAAP1W,SAAAA,EAJ4B,qCAI5BA,CAAAA;AACA,iBAAO0W,GAAAA,CALqB,UAK5B;AAriBF;;AA8iBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,gBAAMN,MAAAA,GAASM,GAAAA,CADW,MAC1B;;AAEA,cAAIN,MAAAA,KAAAA,CAAAA,IAAgBM,GAAAA,CAAAA,CAAAA,CAAAA,YAApB,UAAA,EAAkD;AAChD,mBAAOA,GAAAA,CADyC,CACzCA,CAAP;AAJwB;;AAM1B,cAAIC,YAAAA,GANsB,CAM1B;;AACA,eAAK,IAAItU,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/BsU,YAAAA,YAAAA,IAAgBC,eAAAA,CAAgBF,GAAAA,CADD,CACCA,CAAhBE,CAAhBD;AARwB;;AAU1B,cAAIE,GAAAA,GAVsB,CAU1B;AACA,gBAAMC,IAAAA,GAAO,IAAA,UAAA,CAXa,YAWb,CAAb;;AACA,eAAK,IAAIzU,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B,gBAAI0U,IAAAA,GAAOL,GAAAA,CADoB,CACpBA,CAAX;;AACA,gBAAI,EAAE,IAAA,YAAN,UAAI,CAAJ,EAAmC;AACjC,kBAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5BK,gBAAAA,IAAAA,GAAOpX,aAAAA,CADqB,IACrBA,CAAPoX;AADF,eAAA,MAEO;AACLA,gBAAAA,IAAAA,GAAO,IAAA,UAAA,CADF,IACE,CAAPA;AAJ+B;AAFJ;;AAS/B,kBAAMC,UAAAA,GAAaD,IAAAA,CATY,UAS/B;AACAD,YAAAA,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAV+B,GAU/BA;AACAD,YAAAA,GAAAA,IAX+B,UAW/BA;AAvBwB;;AAyB1B,iBAzB0B,IAyB1B;AAvkBF;;AA0kBA,iBAAA,QAAA,CAAA,KAAA,EAAyB;AACvB,iBAAOP,MAAAA,CAAAA,YAAAA,CACJW,KAAAA,IAAD,EAACA,GADIX,IAAAA,EAEJW,KAAAA,IAAD,EAACA,GAFIX,IAAAA,EAGJW,KAAAA,IAAD,CAACA,GAHIX,IAAAA,EAILW,KAAAA,GALqB,IAChBX,CAAP;AA3kBF;;AAmlBA,iBAAA,UAAA,CAAA,GAAA,EAAyB;AACvB,iBAAOrT,MAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EADgB,MACvB;AAplBF;;AAylBA,iBAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,gBAAMiU,GAAAA,GAAMjU,MAAAA,CAAAA,MAAAA,CADc,IACdA,CAAZ;;AACA,eAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAAA,GAAA,EAAgC;AAC9BiU,YAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAD8B,KAC9BA;AAHwB;;AAK1B,iBAL0B,GAK1B;AA9lBF;;AAkmBA,iBAAA,cAAA,GAA0B;AACxB,gBAAMC,OAAAA,GAAU,IAAA,UAAA,CADQ,CACR,CAAhB;AACAA,UAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAFwB,CAExBA;AACA,gBAAMC,MAAAA,GAAS,IAAA,WAAA,CAAgBD,OAAAA,CAAhB,MAAA,EAAA,CAAA,EAHS,CAGT,CAAf;AACA,iBAAOC,MAAAA,CAAAA,CAAAA,CAAAA,KAJiB,CAIxB;AAtmBF;;AAwmBA,cAAMC,oBAAAA,GAAuB;AAC3B,cAAA,KAAA,GAAY;AACV,mBAAOC,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAsBC,cADnB,EACHD,CAAP;AAFyB;;AAAA,SAA7B;;;AAOA,iBAAA,eAAA,GAA2B;AACzB,cAAI;AACF,gBAAA,QAAA,CADE,EACF;AACA,mBAFE,IAEF;AAFF,WAAA,CAGE,OAAA,CAAA,EAAU;AACV,mBADU,KACV;AALuB;AA/mB3B;;AAunBA,cAAME,qBAAAA,GAAwB;AAC5B,cAAA,KAAA,GAAY;AACV,mBAAOF,MAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAsBG,eADnB,EACHH,CAAP;AAF0B;;AAAA,SAA9B;;AAMA,cAAMI,UAAAA,GAAa,CAAC,GAAGC,KAAAA,CAAAA,GAAAA,CAAAA,CAAJ,IAAIA,EAAJ,EAAA,GAAA,CAA2BC,CAAAA,IAC5CA,CAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EA9nBF,GA8nBEA,CADiB,CAAnB;;AAIA,cAAA,IAAA,CAAW;AACT,iBAAOC,YAAP,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA6B;AAC3B,mBAAO,IAAIH,UAAAA,CAAJ,CAAIA,CAAJ,GAAoBA,UAAAA,CAApB,CAAoBA,CAApB,GAAoCA,UAAAA,CADhB,CACgBA,CADhB,EAC3B;AAFO;;AAMT,iBAAO1I,SAAP,CAAA,EAAA,EAAA,EAAA,EAAyB;AACvB,mBAAO,CACL8I,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CADnB,CACmBA,CADnB,EAELD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAFnB,CAEmBA,CAFnB,EAGLD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAHnB,CAGmBA,CAHnB,EAILD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAJnB,CAImBA,CAJnB,EAKLD,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAAxBD,CAAwBC,CAAxBD,GAAgCA,EAAAA,CAL3B,CAK2BA,CAL3B,EAMLA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAARD,CAAQC,CAARD,GAAgBA,EAAAA,CAAAA,CAAAA,CAAAA,GAAQC,EAAAA,CAAxBD,CAAwBC,CAAxBD,GAAgCA,EAAAA,CANlC,CAMkCA,CAN3B,CAAP;AAPO;;AAkBT,iBAAOE,cAAP,CAAA,CAAA,EAAA,CAAA,EAA4B;AAC1B,kBAAMC,EAAAA,GAAKC,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAPD,CAAOC,CAAPD,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArBD,CAAqBC,CAArBD,GAA4BC,CAAAA,CADb,CACaA,CAAvC;AACA,kBAAMC,EAAAA,GAAKF,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAPD,CAAOC,CAAPD,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArBD,CAAqBC,CAArBD,GAA4BC,CAAAA,CAFb,CAEaA,CAAvC;AACA,mBAAO,CAAA,EAAA,EAAP,EAAO,CAAP;AArBO;;AAwBT,iBAAOE,qBAAP,CAAA,CAAA,EAAA,CAAA,EAAmC;AACjC,kBAAMC,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CADE,CACFA,CAA/B;AACA,kBAAMF,EAAAA,GAAM,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOE,CAAAA,CAAP,CAAOA,CAAP,GAAcD,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAArB,CAAqBA,CAArB,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAnC,CAAmCA,CAAnC,GAA0CA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAlD,CAAkDA,CAAjD,IAFqB,CAEjC;AACA,kBAAMC,EAAAA,GAAM,CAAA,CAACF,CAAAA,CAAD,CAACA,CAAD,GAAQC,CAAAA,CAAR,CAAQA,CAAR,GAAeD,CAAAA,CAAAA,CAAAA,CAAAA,GAAOC,CAAAA,CAAtB,CAAsBA,CAAtB,GAA6BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAApC,CAAoCA,CAApC,GAA2CA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAnD,CAAmDA,CAAlD,IAHqB,CAGjC;AACA,mBAAO,CAAA,EAAA,EAAP,EAAO,CAAP;AA5BO;;AAiCT,iBAAOI,0BAAP,CAAA,CAAA,EAAA,CAAA,EAAwC;AACtC,kBAAMC,EAAAA,GAAKC,IAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAD2B,CAC3BA,CAAX;AACA,kBAAMC,EAAAA,GAAKD,IAAAA,CAAAA,cAAAA,CAAoBE,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAApBF,CAAoBE,CAApBF,EAF2B,CAE3BA,CAAX;AACA,kBAAMG,EAAAA,GAAK,IAAA,CAAA,cAAA,CAAoB,CAACD,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAA3B,CAA2BA,CAAP,CAApB,EAH2B,CAG3B,CAAX;AACA,kBAAME,EAAAA,GAAK,IAAA,CAAA,cAAA,CAAoB,CAACF,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAA3B,CAA2BA,CAAP,CAApB,EAJ2B,CAI3B,CAAX;AACA,mBAAO,CACL5X,IAAAA,CAAAA,GAAAA,CAASyX,EAAAA,CAATzX,CAASyX,CAATzX,EAAgB2X,EAAAA,CAAhB3X,CAAgB2X,CAAhB3X,EAAuB6X,EAAAA,CAAvB7X,CAAuB6X,CAAvB7X,EAA8B8X,EAAAA,CADzB,CACyBA,CAA9B9X,CADK,EAELA,IAAAA,CAAAA,GAAAA,CAASyX,EAAAA,CAATzX,CAASyX,CAATzX,EAAgB2X,EAAAA,CAAhB3X,CAAgB2X,CAAhB3X,EAAuB6X,EAAAA,CAAvB7X,CAAuB6X,CAAvB7X,EAA8B8X,EAAAA,CAFzB,CAEyBA,CAA9B9X,CAFK,EAGLA,IAAAA,CAAAA,GAAAA,CAASyX,EAAAA,CAATzX,CAASyX,CAATzX,EAAgB2X,EAAAA,CAAhB3X,CAAgB2X,CAAhB3X,EAAuB6X,EAAAA,CAAvB7X,CAAuB6X,CAAvB7X,EAA8B8X,EAAAA,CAHzB,CAGyBA,CAA9B9X,CAHK,EAILA,IAAAA,CAAAA,GAAAA,CAASyX,EAAAA,CAATzX,CAASyX,CAATzX,EAAgB2X,EAAAA,CAAhB3X,CAAgB2X,CAAhB3X,EAAuB6X,EAAAA,CAAvB7X,CAAuB6X,CAAvB7X,EAA8B8X,EAAAA,CAJhC,CAIgCA,CAA9B9X,CAJK,CAAP;AAtCO;;AA8CT,iBAAO+X,gBAAP,CAAA,CAAA,EAA2B;AACzB,kBAAMR,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CADN,CACMA,CAA/B;AACA,mBAAO,CACLA,CAAAA,CAAAA,CAAAA,CAAAA,GADK,CAAA,EAEL,CAACA,CAAAA,CAAD,CAACA,CAAD,GAFK,CAAA,EAGL,CAACA,CAAAA,CAAD,CAACA,CAAD,GAHK,CAAA,EAILA,CAAAA,CAAAA,CAAAA,CAAAA,GAJK,CAAA,EAKJ,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOA,CAAAA,CAAP,CAAOA,CAAP,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAtB,CAAsBA,CAArB,IALI,CAAA,EAMJ,CAAA,CAAA,CAAA,CAAA,CAAA,GAAOA,CAAAA,CAAP,CAAOA,CAAP,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAtB,CAAsBA,CAArB,IANH,CAAO,CAAP;AAhDO;;AAgET,iBAAOY,gBAAP,CAAA,CAAA,EAAA,CAAA,EAA8B;AAC5B,mBAAO,CACLZ,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAD9B,CAC8BA,CAD9B,EAELb,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAF9B,CAE8BA,CAF9B,EAGLb,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAAPb,CAAOa,CAAPb,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAArBb,CAAqBa,CAArBb,GAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOa,CAAAA,CAHrC,CAGqCA,CAH9B,CAAP;AAjEO;;AA2ET,iBAAOC,6BAAP,CAAA,CAAA,EAAwC;AACtC,kBAAMC,SAAAA,GAAY,CAACf,CAAAA,CAAD,CAACA,CAAD,EAAOA,CAAAA,CAAP,CAAOA,CAAP,EAAaA,CAAAA,CAAb,CAAaA,CAAb,EAAmBA,CAAAA,CAArC,CAAqCA,CAAnB,CAAlB;AAGA,kBAAMgB,CAAAA,GAAIhB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAJD,CAICA,CAAvC;AACA,kBAAME,CAAAA,GAAIjB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CALD,CAKCA,CAAvC;AACA,kBAAMG,CAAAA,GAAIlB,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAND,CAMCA,CAAvC;AACA,kBAAMZ,CAAAA,GAAIH,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAAPf,CAAOe,CAAPf,GAAsBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOe,SAAAA,CAPD,CAOCA,CAAvC;AAGA,kBAAMI,KAAAA,GAAS,CAAA,CAAA,GAAD,CAAC,IAVuB,CAUtC;AACA,kBAAM5U,MAAAA,GAAS3D,IAAAA,CAAAA,IAAAA,CAAW,CAAA,CAAA,GAAD,CAAC,KAAD,CAAC,GAAc,KAAK,CAAA,GAAA,CAAA,GAAQsY,CAAAA,GAAtCtY,CAAyB,CAAzBA,IAXuB,CAWtC;AACA,kBAAMwY,EAAAA,GAAKD,KAAAA,GAAAA,MAAAA,IAZ2B,CAYtC;AACA,kBAAME,EAAAA,GAAKF,KAAAA,GAAAA,MAAAA,IAb2B,CAatC;AAGA,mBAAO,CAACvY,IAAAA,CAAAA,IAAAA,CAAD,EAACA,CAAD,EAAgBA,IAAAA,CAAAA,IAAAA,CAAvB,EAAuBA,CAAhB,CAAP;AA3FO;;AAkGT,iBAAO0Y,aAAP,CAAA,IAAA,EAA2B;AACzB,kBAAMd,CAAAA,GAAIrX,IAAAA,CAAAA,KAAAA,CADe,CACfA,CAAV;;AACA,gBAAIA,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAAd,CAAcA,CAAd,EAAuB;AACrBqX,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOrX,IAAAA,CADc,CACdA,CAAPqX;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOrX,IAAAA,CAFc,CAEdA,CAAPqX;AAJuB;;AAMzB,gBAAIrX,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAAd,CAAcA,CAAd,EAAuB;AACrBqX,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOrX,IAAAA,CADc,CACdA,CAAPqX;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOrX,IAAAA,CAFc,CAEdA,CAAPqX;AARuB;;AAUzB,mBAVyB,CAUzB;AA5GO;;AAkHT,iBAAOe,SAAP,CAAA,KAAA,EAAA,KAAA,EAA+B;AAC7B,qBAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAuB;AACrB,qBAAOP,CAAAA,GADc,CACrB;AAF2B;;AAM7B,kBAAMQ,QAAAA,GAAW,CAACC,KAAAA,CAAD,CAACA,CAAD,EAAWA,KAAAA,CAAX,CAAWA,CAAX,EAAqBC,KAAAA,CAArB,CAAqBA,CAArB,EAA+BA,KAAAA,CAA/B,CAA+BA,CAA/B,EAAA,IAAA,CANY,OAMZ,CAAjB;AACA,kBAAMC,QAAAA,GAAW,CAACF,KAAAA,CAAD,CAACA,CAAD,EAAWA,KAAAA,CAAX,CAAWA,CAAX,EAAqBC,KAAAA,CAArB,CAAqBA,CAArB,EAA+BA,KAAAA,CAA/B,CAA+BA,CAA/B,EAAA,IAAA,CAPY,OAOZ,CAAjB;AACA,kBAAME,MAAAA,GARuB,EAQ7B;AAEAH,YAAAA,KAAAA,GAAQnB,IAAAA,CAAAA,aAAAA,CAVqB,KAUrBA,CAARmB;AACAC,YAAAA,KAAAA,GAAQpB,IAAAA,CAAAA,aAAAA,CAXqB,KAWrBA,CAARoB;;AAGA,gBACGF,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBC,KAAAA,CAAhBD,CAAgBC,CAAhBD,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBE,KAAAA,CAA7C,CAA6CA,CAA5CF,IACAA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBE,KAAAA,CAAhBF,CAAgBE,CAAhBF,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBC,KAAAA,CAF/C,CAE+CA,CAF/C,EAGE;AAEAG,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYJ,QAAAA,CAFZ,CAEYA,CAAZI;AACAA,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYJ,QAAAA,CAHZ,CAGYA,CAAZI;AANF,aAAA,MAOO;AACL,qBADK,IACL;AAtB2B;;AA0B7B,gBACGD,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBF,KAAAA,CAAhBE,CAAgBF,CAAhBE,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBD,KAAAA,CAA7C,CAA6CA,CAA5CC,IACAA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBD,KAAAA,CAAhBC,CAAgBD,CAAhBC,IAA4BA,QAAAA,CAAAA,CAAAA,CAAAA,KAAgBF,KAAAA,CAF/C,CAE+CA,CAF/C,EAGE;AAEAG,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYD,QAAAA,CAFZ,CAEYA,CAAZC;AACAA,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYD,QAAAA,CAHZ,CAGYA,CAAZC;AANF,aAAA,MAOO;AACL,qBADK,IACL;AAlC2B;;AAqC7B,mBArC6B,MAqC7B;AAvJO;;AAAA;;;AA4JX,cAAMC,uhC,MAAgC,CAAhC;;AAYA,iBAAA,iBAAA,CAAA,GAAA,EAAgC;AAC9B,gBAAM5D,MAAAA,GAASF,GAAAA,CAAf,MAAA;AAAA,gBACEK,MAAAA,GAF4B,EAC9B;;AAEA,cAAIL,GAAAA,CAAAA,CAAAA,CAAAA,KAAAA,MAAAA,IAAqBA,GAAAA,CAAAA,CAAAA,CAAAA,KAAzB,MAAA,EAA4C;AAE1C,iBAAK,IAAI7T,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClCkU,cAAAA,MAAAA,CAAAA,IAAAA,CACED,MAAAA,CAAAA,YAAAA,CAAqBJ,GAAAA,CAAAA,UAAAA,CAAAA,CAAAA,KAAD,CAACA,GAA0BA,GAAAA,CAAAA,UAAAA,CAAe7T,CAAAA,GAF9B,CAEe6T,CAA/CI,CADFC;AAHwC;AAA5C,WAAA,MAOO,IAAIL,GAAAA,CAAAA,CAAAA,CAAAA,KAAAA,MAAAA,IAAqBA,GAAAA,CAAAA,CAAAA,CAAAA,KAAzB,MAAA,EAA4C;AAEjD,iBAAK,IAAI7T,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClCkU,cAAAA,MAAAA,CAAAA,IAAAA,CACED,MAAAA,CAAAA,YAAAA,CAAqBJ,GAAAA,CAAAA,UAAAA,CAAe7T,CAAAA,GAAf6T,CAAAA,KAAD,CAACA,GAA8BA,GAAAA,CAAAA,UAAAA,CAFnB,CAEmBA,CAAnDI,CADFC;AAH+C;AAA5C,WAAA,MAOA;AACL,iBAAK,IAAIlU,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/B,oBAAM4X,IAAAA,GAAOD,uBAAAA,CAAwB9D,GAAAA,CAAAA,UAAAA,CADN,CACMA,CAAxB8D,CAAb;AACAzD,cAAAA,MAAAA,CAAAA,IAAAA,CAAY0D,IAAAA,GAAO3D,MAAAA,CAAAA,YAAAA,CAAP2D,IAAO3D,CAAP2D,GAAmC/D,GAAAA,CAAAA,MAAAA,CAFhB,CAEgBA,CAA/CK;AAHG;AAjBuB;;AAuB9B,iBAAOA,MAAAA,CAAAA,IAAAA,CAvBuB,EAuBvBA,CAAP;AAh0BF;;AAm0BA,iBAAA,YAAA,CAAA,GAAA,EAA2B;AAIzB,iBAAO,GAAA,CAAA,OAAA,CAAA,eAAA,EAA6B2D,KAAAA,IAAS;AAC3C,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,qBADkB,KAClB;AADF,aAAA,MAEO,IAAIA,KAAAA,KAAJ,IAAA,EAAoB;AACzB,qBADyB,KACzB;AAJyC;;AAM3C,mBAAO,KANoC,KAAA,EAM3C;AANF,WAAO,CAAP;AAv0BF;;AAi1BA,iBAAA,OAAA,CAAA,GAAA,EAAsB;AACpB,iBAAO,iBAAA,IAAA,CADa,GACb,CAAP;AAl1BF;;AAq1BA,iBAAA,qBAAA,CAAA,GAAA,EAAoC;AAClC,gBAAMC,GAAAA,GAAM,CADsB,UACtB,CAAZ;;AACA,eAAK,IAAI9X,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK8T,GAAAA,CAArB,MAAA,EAAiC7T,CAAAA,GAAjC,EAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,kBAAM+X,IAAAA,GAAOlE,GAAAA,CAAAA,UAAAA,CAD+B,CAC/BA,CAAb;AACAiE,YAAAA,GAAAA,CAAAA,IAAAA,CAAS7D,MAAAA,CAAAA,YAAAA,CAAqB8D,IAAAA,IAAD,CAACA,GAFc,IAEnC9D,CAAT6D;AACAA,YAAAA,GAAAA,CAAAA,IAAAA,CAAS7D,MAAAA,CAAAA,YAAAA,CAAoB8D,IAAAA,GAHe,IAGnC9D,CAAT6D;AALgC;;AAOlC,iBAAOA,GAAAA,CAAAA,IAAAA,CAP2B,EAO3BA,CAAP;AA51BF;;AA+1BA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,iBAAOnX,kBAAAA,CAAmBqX,MAAAA,CADK,GACLA,CAAnBrX,CAAP;AAh2BF;;AAm2BA,iBAAA,kBAAA,CAAA,GAAA,EAAiC;AAC/B,iBAAOsX,QAAAA,CAASC,kBAAAA,CADe,GACfA,CAATD,CAAP;AAp2BF;;AAu2BA,iBAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,iBAAO,OAAA,CAAA,KADU,SACjB;AAx2BF;;AA22BA,iBAAA,KAAA,CAAA,CAAA,EAAkB;AAChB,iBAAO,OAAA,CAAA,KADS,QAChB;AA52BF;;AA+2BA,iBAAA,QAAA,CAAA,CAAA,EAAqB;AACnB,iBAAO,OAAA,CAAA,KADY,QACnB;AAh3BF;;AAm3BA,iBAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,iBAAO,OAAA,CAAA,KAAA,QAAA,IAAyBtB,CAAAA,KAAzB,IAAA,IAAuCA,CAAAA,CAAAA,UAAAA,KADtB,SACxB;AAp3BF;;AAu3BA,iBAAA,YAAA,CAAA,IAAA,EAAA,IAAA,EAAkC;AAChC,cAAIwB,IAAAA,CAAAA,MAAAA,KAAgBC,IAAAA,CAApB,MAAA,EAAiC;AAC/B,mBAD+B,KAC/B;AAF8B;;AAIhC,eAAK,IAAIpY,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKoY,IAAAA,CAArB,MAAA,EAAkCnY,CAAAA,GAAlC,EAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7C,gBAAImY,IAAAA,CAAAA,CAAAA,CAAAA,KAAYC,IAAAA,CAAhB,CAAgBA,CAAhB,EAAyB;AACvB,qBADuB,KACvB;AAF2C;AAJf;;AAShC,iBATgC,IAShC;AAh4BF;;AAm4BA,iBAAA,mBAAA,CAA6BC,IAAAA,GAAO,IAApC,IAAoC,EAApC,EAAgD;AAC9C,gBAAMC,MAAAA,GAAS,CACbD,IAAAA,CAAAA,cAAAA,GADa,QACbA,EADa,EAEZ,CAAA,IAAA,CAAA,WAAA,KAAD,CAAC,EAAD,QAAC,GAAD,QAAC,CAAD,CAAC,EAFY,GAEZ,CAFY,EAGbA,IAAAA,CAAAA,UAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EAHa,GAGbA,CAHa,EAIbA,IAAAA,CAAAA,WAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EAJa,GAIbA,CAJa,EAKbA,IAAAA,CAAAA,aAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EALa,GAKbA,CALa,EAMbA,IAAAA,CAAAA,aAAAA,GAAAA,QAAAA,GAAAA,QAAAA,CAAAA,CAAAA,EANF,GAMEA,CANa,CAAf;AASA,iBAAOC,MAAAA,CAAAA,IAAAA,CAVuC,EAUvCA,CAAP;AA74BF;;AAg6BA,iBAAA,uBAAA,GAAmC;AACjC,gBAAMC,UAAAA,GAAa3X,MAAAA,CAAAA,MAAAA,CADc,IACdA,CAAnB;AACA,cAAI4X,SAAAA,GAF6B,KAEjC;AAEA5X,UAAAA,MAAAA,CAAAA,cAAAA,CAAAA,UAAAA,EAAAA,SAAAA,EAA6C;AAC3C6X,YAAAA,GAAAA,GAAM;AACJ,qBADI,SACJ;AAFyC;;AAAA,WAA7C7X;AAKA2X,UAAAA,UAAAA,CAAAA,OAAAA,GAAqB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC1DA,YAAAA,UAAAA,CAAAA,OAAAA,GAAqB,UAAA,IAAA,EAAgB;AACnCC,cAAAA,SAAAA,GADmC,IACnCA;AACA/a,cAAAA,OAAAA,CAFmC,IAEnCA,CAAAA;AAFF8a,aAAAA;;AAIAA,YAAAA,UAAAA,CAAAA,MAAAA,GAAoB,UAAA,MAAA,EAAkB;AACpCC,cAAAA,SAAAA,GADoC,IACpCA;AACA9a,cAAAA,MAAAA,CAFoC,MAEpCA,CAAAA;AAFF6a,aAAAA;AALFA,WAAqB,CAArBA;AAUA,iBAnBiC,UAmBjC;AAn7BF;;AAs7BA,iBAAA,eAAA,CAAA,IAAA,EAA+BG,WAAAA,GAA/B,EAAA,EAAiDC,eAAAA,GAAjD,KAAA,EAA0E;AACxE,cAAIC,GAAAA,CAAAA,eAAAA,IAAuB,CAA3B,eAAA,EAA6C;AAC3C,mBAAOA,GAAAA,CAAAA,eAAAA,CAAoB,IAAA,IAAA,CAAS,CAAT,IAAS,CAAT,EAAiB;AAAEC,cAAAA,IAAAA,EADH;AACC,aAAjB,CAApBD,CAAP;AAFsE;;AAKxE,gBAAME,MAAAA,GALkE,mEAKxE;AAGA,cAAIR,MAAAA,GAAS,QAR2D,WAAA,UAQxE;;AACA,eAAK,IAAItY,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK0U,IAAAA,CAArB,MAAA,EAAkCzU,CAAAA,GAAlC,EAAA,EAA0CA,CAAAA,IAA1C,CAAA,EAAkD;AAChD,kBAAM+Y,EAAAA,GAAKtE,IAAAA,CAAAA,CAAAA,CAAAA,GADqC,IAChD;AACA,kBAAMuE,EAAAA,GAAKvE,IAAAA,CAAKzU,CAAAA,GAALyU,CAAAA,CAAAA,GAFqC,IAEhD;AACA,kBAAMwE,EAAAA,GAAKxE,IAAAA,CAAKzU,CAAAA,GAALyU,CAAAA,CAAAA,GAHqC,IAGhD;AACA,kBAAMyE,EAAAA,GAAKH,EAAAA,IAAX,CAAA;AAAA,kBACEI,EAAAA,GAAO,CAAA,EAAA,GAAD,CAAC,KAAF,CAAE,GAAiBH,EAAAA,IALsB,CAIhD;AAEA,kBAAMI,EAAAA,GAAKpZ,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,GAAe,CAAA,EAAA,GAAD,GAAC,KAAF,CAAE,GAAmBiZ,EAAAA,IAAlCjZ,CAAAA,GANqC,EAMhD;AACA,kBAAMqZ,EAAAA,GAAKrZ,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,GAAaiZ,EAAAA,GAAbjZ,IAAAA,GAPqC,EAOhD;AACAsY,YAAAA,MAAAA,IAAUQ,MAAAA,CAAAA,EAAAA,CAAAA,GAAaA,MAAAA,CAAbA,EAAaA,CAAbA,GAA0BA,MAAAA,CAA1BA,EAA0BA,CAA1BA,GAAuCA,MAAAA,CARD,EAQCA,CAAjDR;AAjBsE;;AAmBxE,iBAnBwE,MAmBxE;;;;;;;;;ACz8BF,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAkBA;;;;;;;;;;;ACEA,cAAMgB,QAAAA,GACJ,OAAA,OAAA,KAAA,QAAA,IACAC,OAAAA,GAAAA,EAAAA,KADA,kBAAA,IAEA,CAACA,OAAAA,CAAAA,QAAAA,CAFD,EAAA,IAGA,EAAE,OAAA,CAAA,QAAA,CAAA,QAAA,IAA6BA,OAAAA,CAA7B,IAAA,IAA6CA,OAAAA,CAAAA,IAAAA,KAxBjD,SAwBE,CAJF;;;;;;;;;;;;;;;ACDA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAmBA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAUA,YAAA,YAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AACA,YAAA,WAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAjDA,YAAA,mBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,kBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,OAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,gBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,SAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,wBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,iBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,MAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AA6DA,cAAMC,wBAAAA,GA7DN,KA6DA;AACA,cAAMC,2BAAAA,GA9DN,GA8DA;AAEA,cAAMC,oBAAAA,GACJ,QAAA,CAAA,QAAA,GAAA,WAAA,CAAA,iBAAA,GAjEF,cAAA,CAAA,gBAgEA;;AAIA,cAAMC,wBAAAA,GACJ,QAAA,CAAA,QAAA,GAAA,WAAA,CAAA,qBAAA,GArEF,cAAA,CAAA,oBAoEA;;AAkBA,YAtFA,sBAsFA;;AAWA,iBAAA,0BAAA,CAAA,uBAAA,EAA6D;AAC3DC,UAAAA,sBAAAA,GAD2D,uBAC3DA;AAlGF;;AAuMA,iBAAA,WAAA,CAAA,GAAA,EAA0B;AACxB,gBAAMC,IAAAA,GAAO,IADW,sBACX,EAAb;AAEA,cAHwB,MAGxB;;AACA,cAAI,OAAA,GAAA,KAAA,QAAA,IAA2BC,GAAAA,YAA/B,GAAA,EAAmD;AACjDC,YAAAA,MAAAA,GAAS;AAAEnd,cAAAA,GAAAA,EADsC;AACxC,aAATmd;AADF,WAAA,MAEO,IAAIC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAJ,GAAIA,CAAJ,EAAwB;AAC7BD,YAAAA,MAAAA,GAAS;AAAEtF,cAAAA,IAAAA,EADkB;AACpB,aAATsF;AADK,WAAA,MAEA,IAAID,GAAAA,YAAJ,qBAAA,EAA0C;AAC/CC,YAAAA,MAAAA,GAAS;AAAEE,cAAAA,KAAAA,EADoC;AACtC,aAATF;AADK,WAAA,MAEA;AACL,gBAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,oBAAM,IAAA,KAAA,CACJ,uCAFyB,2DACrB,CAAN;AAFG;;AAOL,gBAAI,CAACD,GAAAA,CAAD,GAAA,IAAY,CAACA,GAAAA,CAAb,IAAA,IAAyB,CAACA,GAAAA,CAA9B,KAAA,EAAyC;AACvC,oBAAM,IAAA,KAAA,CADiC,6DACjC,CAAN;AARG;;AAYLC,YAAAA,MAAAA,GAZK,GAYLA;AAtBsB;;AAwBxB,gBAAMG,MAAAA,GAAStZ,MAAAA,CAAAA,MAAAA,CAxBS,IAwBTA,CAAf;AACA,cAAIuZ,cAAAA,GAAJ,IAAA;AAAA,cACEC,MAAAA,GA1BsB,IAyBxB;;AAGA,eAAA,MAAA,GAAA,IAAA,MAAA,EAA0B;AACxB,kBAAMxF,KAAAA,GAAQmF,MAAAA,CADU,GACVA,CAAd;;AAEA,oBAAA,GAAA;AACE,mBAAA,KAAA;AACE,oBAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC,sBAAI;AAEFG,oBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,GAAA,CAAA,KAAA,EAAeG,MAAAA,CAAf,QAAA,EAFZ,IAEFH;AAFE;AAAJ,mBAAA,CAIE,OAAA,EAAA,EAAW;AACX5Z,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,6BADM,EAAA,IACXA;AAN+B;AAAnC,iBAAA,MAQO,IAAI,OAAA,KAAA,KAAA,QAAA,IAA6BsU,KAAAA,YAAjC,GAAA,EAAuD;AAC5DsF,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAActF,KAAAA,CAD8C,QAC9CA,EAAdsF;AAD4D;AAThE;;AAaE,sBAAM,IAAA,KAAA,CACJ,2BAfN,8DAcU,CAAN;;AAIF,mBAAA,OAAA;AACEC,gBAAAA,cAAAA,GADF,KACEA;AAnBJ;;AAqBE,mBAAA,QAAA;AACEC,gBAAAA,MAAAA,GADF,KACEA;AAtBJ;;AAwBE,mBAAA,MAAA;AAEE,oBACE,QAAA,CAAA,QAAA,IAGA,OAAA,MAAA,KAHA,WAAA,IAIAxF,KAAAA,YALF,MAAA,EAME;AACAsF,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADd,KACc,CAAdA;AAPF,iBAAA,MAQO,IAAItF,KAAAA,YAAJ,UAAA,EAAiC;AAAA;AAAjC,iBAAA,MAEA,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AACpCsF,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc5c,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADsB,KACtBA,CAAd4c;AADK,iBAAA,MAEA,IACL,OAAA,KAAA,KAAA,QAAA,IACAtF,KAAAA,KADA,IAAA,IAEA,CAAC0F,KAAAA,CAAM1F,KAAAA,CAHF,MAGJ0F,CAHI,EAIL;AACAJ,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADd,KACc,CAAdA;AALK,iBAAA,MAMA,IAAIF,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAJ,KAAIA,CAAJ,EAA0B;AAC/BE,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAc,IAAA,UAAA,CADiB,KACjB,CAAdA;AADK,iBAAA,MAEA;AACL,wBAAM,IAAA,KAAA,CACJ,kDAFG,gEACC,CAAN;AAvBJ;;AAxBF;AAAA;;AAsDAA,YAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAzDwB,KAyDxBA;AArFsB;;AAwFxBA,UAAAA,MAAAA,CAAAA,cAAAA,GAAwBA,MAAAA,CAAAA,cAAAA,IAxFA,wBAwFxBA;AACAA,UAAAA,MAAAA,CAAAA,iBAAAA,GACEA,MAAAA,CAAAA,iBAAAA,IA1FsB,wBAyFxBA;AAEAA,UAAAA,MAAAA,CAAAA,YAAAA,GAAsBA,MAAAA,CAAAA,YAAAA,KA3FE,IA2FxBA;AACAA,UAAAA,MAAAA,CAAAA,mBAAAA,GAA6BA,MAAAA,CAAAA,mBAAAA,KA5FL,IA4FxBA;AACAA,UAAAA,MAAAA,CAAAA,MAAAA,GAAgBA,MAAAA,CAAAA,MAAAA,KA7FQ,IA6FxBA;AACAA,UAAAA,MAAAA,CAAAA,SAAAA,GAAmBA,MAAAA,CAAAA,SAAAA,KA9FK,IA8FxBA;;AAEA,cACE,OAAOA,MAAAA,CAAP,UAAA,KAAA,QAAA,IACA7Z,CAAAA,GAAAA,cAAAA,CAAAA,YAAAA,EAAa6Z,MAAAA,CAFf,UAEE7Z,CAFF,EAGE;AAIA6Z,YAAAA,MAAAA,CAAAA,UAAAA,GAJA,IAIAA;AAvGsB;;AAyGxB,cAAI,CAAC/G,MAAAA,CAAAA,SAAAA,CAAiB+G,MAAAA,CAAtB,YAAK/G,CAAL,EAA4C;AAC1C+G,YAAAA,MAAAA,CAAAA,YAAAA,GAAsB,CADoB,CAC1CA;AA1GsB;;AA4GxB,cAAI,OAAOA,MAAAA,CAAP,eAAA,KAAJ,SAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,eAAAA,GAD+C,IAC/CA;AA7GsB;;AA+GxB,cAAI,OAAOA,MAAAA,CAAP,eAAA,KAAJ,SAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,eAAAA,GAAyBK,kBAAAA,CAAAA,sBAAAA,CAAAA,eAAAA,IADsB,KAC/CL;AAhHsB;;AAkHxB,cAAI,OAAOA,MAAAA,CAAP,aAAA,KAAJ,WAAA,EAAiD;AAC/CA,YAAAA,MAAAA,CAAAA,aAAAA,GAAuB5d,UAAAA,CADwB,QAC/C4d;AAnHsB;;AAsHxB,cAAI,OAAOA,MAAAA,CAAP,YAAA,KAAJ,SAAA,EAA8C;AAC5CA,YAAAA,MAAAA,CAAAA,YAAAA,GAD4C,KAC5CA;AAvHsB;;AAyHxB,cAAI,OAAOA,MAAAA,CAAP,aAAA,KAAJ,SAAA,EAA+C;AAC7CA,YAAAA,MAAAA,CAAAA,aAAAA,GAD6C,KAC7CA;AA1HsB;;AA4HxB,cAAI,OAAOA,MAAAA,CAAP,gBAAA,KAAJ,SAAA,EAAkD;AAChDA,YAAAA,MAAAA,CAAAA,gBAAAA,GADgD,KAChDA;AA7HsB;;AAiIxBM,WAAAA,GAAAA,KAAAA,CAAAA,iBAAAA,EAAkBN,MAAAA,CAjIM,SAiIxBM;;AAEA,cAAI,CAAJ,MAAA,EAAa;AACX,kBAAMC,YAAAA,GAAe;AACnBvH,cAAAA,SAAAA,EAAWgH,MAAAA,CADQ,SAAA;AAEnBQ,cAAAA,IAAAA,EAAMC,eAAAA,CAAAA,mBAAAA,CAFa;AAAA,aAArB;AAMAP,YAAAA,MAAAA,GAASK,YAAAA,CAAAA,IAAAA,GACLG,SAAAA,CAAAA,QAAAA,CADKH,YACLG,CADKH,GAEL,IAAA,SAAA,CATO,YASP,CAFJL;AAGAP,YAAAA,IAAAA,CAAAA,OAAAA,GAVW,MAUXA;AA7IsB;;AA+IxB,gBAAMgB,KAAAA,GAAQhB,IAAAA,CA/IU,KA+IxB;AACAO,UAAAA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CACQ,YAAY;AAChB,gBAAIP,IAAAA,CAAJ,SAAA,EAAoB;AAClB,oBAAM,IAAA,KAAA,CADY,iBACZ,CAAN;AAFc;;AAKhB,kBAAMiB,eAAAA,GAAkBC,cAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,cAAAA,EALR,KAKQA,CAAxB;;AAMA,kBAAMC,oBAAAA,GAAuB,IAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC1D,kBAD0D,aAC1D;;AACA,kBAAA,cAAA,EAAoB;AAClBC,gBAAAA,aAAAA,GAAgB,IAAA,iBAAA,CAAA,sBAAA,CACd;AACElH,kBAAAA,MAAAA,EAAQmG,MAAAA,CADV,MAAA;AAEEgB,kBAAAA,WAAAA,EAAahB,MAAAA,CAFf,WAAA;AAGEiB,kBAAAA,eAAAA,EAAiBjB,MAAAA,CAHnB,eAAA;AAIEkB,kBAAAA,0BAAAA,EAA4BlB,MAAAA,CAJ9B,0BAAA;AAKEmB,kBAAAA,YAAAA,EAAcnB,MAAAA,CALhB,YAAA;AAMEoB,kBAAAA,aAAAA,EAAepB,MAAAA,CANjB;AAAA,iBADc,EADE,cACF,CAAhBe;AADF,eAAA,MAYO,IAAI,CAACf,MAAAA,CAAL,IAAA,EAAkB;AACvBe,gBAAAA,aAAAA,GAAgB,sBAAA,CAAuB;AACrCre,kBAAAA,GAAAA,EAAKsd,MAAAA,CADgC,GAAA;AAErCnG,kBAAAA,MAAAA,EAAQmG,MAAAA,CAF6B,MAAA;AAGrCqB,kBAAAA,WAAAA,EAAarB,MAAAA,CAHwB,WAAA;AAIrCsB,kBAAAA,eAAAA,EAAiBtB,MAAAA,CAJoB,eAAA;AAKrCuB,kBAAAA,cAAAA,EAAgBvB,MAAAA,CALqB,cAAA;AAMrCmB,kBAAAA,YAAAA,EAAcnB,MAAAA,CANuB,YAAA;AAOrCoB,kBAAAA,aAAAA,EAAepB,MAAAA,CAPsB;AAAA,iBAAvB,CAAhBe;AAfwD;;AAyB1Dxd,cAAAA,OAAAA,CAzB0D,aAyB1DA,CAAAA;AAzBF,aAA6B,CAA7B;AA4BA,mBAAO,OAAA,CAAA,GAAA,CAAY,CAAA,eAAA,EAAZ,oBAAY,CAAZ,EAAA,IAAA,CACL,UAAU,CAAA,QAAA,EAAV,aAAU,CAAV,EAAqC;AACnC,kBAAIoc,IAAAA,CAAJ,SAAA,EAAoB;AAClB,sBAAM,IAAA,KAAA,CADY,iBACZ,CAAN;AAFiC;;AAKnC,oBAAM6B,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAGrBtB,MAAAA,CARiC,IAKZ,CAAvB;AAKAsB,cAAAA,cAAAA,CAAAA,oBAAAA,GAAsCtB,MAAAA,CAVH,oBAUnCsB;AACA,oBAAMC,SAAAA,GAAY,IAAA,eAAA,CAAA,cAAA,EAAA,IAAA,EAAA,aAAA,EAXiB,MAWjB,CAAlB;AAMA9B,cAAAA,IAAAA,CAAAA,UAAAA,GAjBmC,SAiBnCA;AACA6B,cAAAA,cAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAlBmC,IAkBnCA;AAnBJ,aAAO,CAAP;AAxCJtB,WAAAA,EAAAA,KAAAA,CA+DSP,IAAAA,CAAAA,WAAAA,CA/Me,MAgJxBO;AAiEA,iBAjNwB,IAiNxB;AAxZF;;AAsaA,iBAAA,cAAA,CAAA,MAAA,EAAA,MAAA,EAAA,qBAAA,EAAA,KAAA,EAAsE;AACpE,cAAIA,MAAAA,CAAJ,SAAA,EAAsB;AACpB,mBAAOwB,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADF,sBACE,CAAfA,CAAP;AAFkE;;AAKpE,cAAA,qBAAA,EAA2B;AACzB7B,YAAAA,MAAAA,CAAAA,MAAAA,GAAgB8B,qBAAAA,CADS,MACzB9B;AACAA,YAAAA,MAAAA,CAAAA,WAAAA,GAAqB8B,qBAAAA,CAFI,WAEzB9B;AACAA,YAAAA,MAAAA,CAAAA,eAAAA,GAAyB8B,qBAAAA,CAHA,eAGzB9B;AACAA,YAAAA,MAAAA,CAAAA,0BAAAA,GACE8B,qBAAAA,CALuB,0BAIzB9B;AATkE;;AAYpE,iBAAO,MAAA,CAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EAC6B;AAAA,YAAA,KAAA;AAEhC+B,YAAAA,UAAAA,EAFgC,SAAA;AAOhC/B,YAAAA,MAAAA,EAAQ;AACNtF,cAAAA,IAAAA,EAAMsF,MAAAA,CADA,IAAA;AAENnd,cAAAA,GAAAA,EAAKmd,MAAAA,CAFC,GAAA;AAGNgC,cAAAA,QAAAA,EAAUhC,MAAAA,CAHJ,QAAA;AAINiC,cAAAA,gBAAAA,EAAkBjC,MAAAA,CAJZ,gBAAA;AAKN0B,cAAAA,cAAAA,EAAgB1B,MAAAA,CALV,cAAA;AAMNhG,cAAAA,MAAAA,EAAQgG,MAAAA,CANF;AAAA,aAPwB;AAehCkC,YAAAA,YAAAA,EAAclC,MAAAA,CAfkB,YAAA;AAgBhCmC,YAAAA,eAAAA,EAAiBnC,MAAAA,CAhBe,eAAA;AAiBhCoC,YAAAA,oBAAAA,EAAsB/B,MAAAA,CAjBU,oBAAA;AAkBhCgC,YAAAA,UAAAA,EAAYrC,MAAAA,CAlBoB,UAAA;AAmBhCsC,YAAAA,YAAAA,EAActC,MAAAA,CAnBkB,YAAA;AAoBhC3E,YAAAA,eAAAA,EAAiB2E,MAAAA,CApBe,eAAA;AAqBhCuC,YAAAA,mBAAAA,EAAqBvC,MAAAA,CArBW,mBAAA;AAsBhCwC,YAAAA,SAAAA,EAAWxC,MAAAA,CAtBqB;AAAA,WAD7B,EAAA,IAAA,CAyBC,UAAA,QAAA,EAAoB;AACxB,gBAAIK,MAAAA,CAAJ,SAAA,EAAsB;AACpB,oBAAM,IAAA,KAAA,CADc,sBACd,CAAN;AAFsB;;AAIxB,mBAJwB,QAIxB;AA7BJ,WAAO,CAAP;AAlbF;;AAifA,cAAMoC,sBAAAA,GAA0B,SAAA,6BAAA,GAAyC;AACvE,cAAIC,cAAAA,GADmE,CACvE;;AAQA,gBAAA,sBAAA,CAA6B;AAC3B5gB,YAAAA,WAAAA,GAAc;AACZ,mBAAA,WAAA,GADY,CAAA,GAAA,KAAA,CAAA,uBAAA,GACZ;AACA,mBAAA,UAAA,GAFY,IAEZ;AACA,mBAAA,OAAA,GAHY,IAGZ;AAMA,mBAAA,KAAA,GAAa,MAAM4gB,cATP,EASZ;AAMA,mBAAA,SAAA,GAfY,KAeZ;AAQA,mBAAA,UAAA,GAvBY,IAuBZ;AASA,mBAAA,UAAA,GAhCY,IAgCZ;AAOA,mBAAA,oBAAA,GAvCY,IAuCZ;AAxCyB;;AA+C3B,gBAAIC,OAAJ,GAAc;AACZ,qBAAO,KAAA,WAAA,CADK,OACZ;AAhDyB;;AAuD3BtgB,YAAAA,OAAAA,GAAU;AACR,mBAAA,SAAA,GADQ,IACR;AAEA,oBAAMugB,kBAAAA,GAAqB,CAAC,KAAD,UAAA,GACvBf,OAAAA,CADuB,OACvBA,EADuB,GAEvB,KAAA,UAAA,CALI,OAKJ,EAFJ;AAGA,qBAAO,kBAAA,CAAA,IAAA,CAAwB,MAAM;AACnC,qBAAA,UAAA,GADmC,IACnC;;AACA,oBAAI,KAAJ,OAAA,EAAkB;AAChB,uBAAA,OAAA,CADgB,OAChB;;AACA,uBAAA,OAAA,GAFgB,IAEhB;AAJiC;AAArC,eAAO,CAAP;AA7DyB;;AAAA;;AAsE7B,iBA/EuE,sBA+EvE;AA/EF,SAAgC,EAAhC;;AAqFA,cAAA,qBAAA,CAA4B;AAO1B/f,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAGEsf,eAAAA,GAHFtf,KAAAA,EAIEuf,0BAAAA,GAJFvf,IAAAA,EAKE;AACA,iBAAA,MAAA,GADA,MACA;AACA,iBAAA,WAAA,GAFA,WAEA;AACA,iBAAA,eAAA,GAHA,eAGA;AACA,iBAAA,0BAAA,GAJA,0BAIA;AAEA,iBAAA,eAAA,GANA,EAMA;AACA,iBAAA,kBAAA,GAPA,EAOA;AACA,iBAAA,yBAAA,GARA,EAQA;AACA,iBAAA,yBAAA,GATA,EASA;AACA,iBAAA,gBAAA,GAVA,CAAA,GAAA,KAAA,CAAA,uBAAA,GAUA;AAtBwB;;AAyB1B+gB,UAAAA,gBAAAA,CAAAA,QAAAA,EAA2B;AACzB,iBAAA,eAAA,CAAA,IAAA,CADyB,QACzB;AA1BwB;;AA6B1BC,UAAAA,mBAAAA,CAAAA,QAAAA,EAA8B;AAC5B,iBAAA,kBAAA,CAAA,IAAA,CAD4B,QAC5B;AA9BwB;;AAiC1BC,UAAAA,0BAAAA,CAAAA,QAAAA,EAAqC;AACnC,iBAAA,yBAAA,CAAA,IAAA,CADmC,QACnC;AAlCwB;;AAqC1BC,UAAAA,0BAAAA,CAAAA,QAAAA,EAAqC;AACnC,iBAAA,yBAAA,CAAA,IAAA,CADmC,QACnC;AAtCwB;;AAyC1BC,UAAAA,WAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAA0B;AACxB,iBAAA,MAAA,QAAA,IAAuB,KAAvB,eAAA,EAA6C;AAC3CC,cAAAA,QAAAA,CAAAA,KAAAA,EAD2C,KAC3CA,CAAAA;AAFsB;AAzCA;;AA+C1BC,UAAAA,cAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAA8B;AAC5B,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,kBAAA,EAAgD;AAC9CD,gBAAAA,QAAAA,CAAAA,MAAAA,EAD8C,KAC9CA,CAAAA;AAFqC;AAAzC,aAAA;AAhDwB;;AAuD1BE,UAAAA,qBAAAA,CAAAA,KAAAA,EAA6B;AAC3B,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,yBAAA,EAAuD;AACrDF,gBAAAA,QAAAA,CADqD,KACrDA,CAAAA;AAFqC;AAAzC,aAAA;AAxDwB;;AA+D1BG,UAAAA,qBAAAA,GAAwB;AACtB,iBAAA,gBAAA,CAAA,OAAA,CAAA,IAAA,CAAmC,MAAM;AACvC,mBAAA,MAAA,QAAA,IAAuB,KAAvB,yBAAA,EAAuD;AACrDH,gBAAAA,QADqD;AADhB;AAAzC,aAAA;AAhEwB;;AAuE1BI,UAAAA,cAAAA,GAAiB;AACf,iBAAA,gBAAA,CADe,OACf;AAxEwB;;AA2E1BC,UAAAA,gBAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA6B;AAC3BxhB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD2B,wDAC3BA;AA5EwB;;AA+E1ByhB,UAAAA,KAAAA,GA/E0B,CAAA;;AAAA;;;;AAqF5B,cAAA,gBAAA,CAAuB;AACrB1hB,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAgC;AAC9B,iBAAA,QAAA,GAD8B,OAC9B;AACA,iBAAA,UAAA,GAF8B,SAE9B;AAHmB;;AASrB,cAAI2hB,iBAAJ,GAAwB;AACtB,mBAAOvI,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,EAAkC,IADnB,mBAAA,CAAA,iBACmB,EAAlCA,CAAP;AAVmB;;AAgBrB,cAAIwI,QAAJ,GAAe;AACb,mBAAO,KAAA,QAAA,CADM,QACb;AAjBmB;;AAuBrB,cAAIC,WAAJ,GAAkB;AAChB,mBAAO,KAAA,QAAA,CADS,WAChB;AAxBmB;;AA8BrB,cAAIC,SAAJ,GAAgB;AACd,mBAAO,KAAA,QAAA,CADO,SACd;AA/BmB;;AAuCrBC,UAAAA,OAAAA,CAAAA,UAAAA,EAAoB;AAClB,mBAAO,KAAA,UAAA,CAAA,OAAA,CADW,UACX,CAAP;AAxCmB;;AAkDrBC,UAAAA,YAAAA,CAAAA,GAAAA,EAAkB;AAChB,mBAAO,KAAA,UAAA,CAAA,YAAA,CADS,GACT,CAAP;AAnDmB;;AA4DrBC,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,eACT,EAAP;AA7DmB;;AAqErBC,UAAAA,cAAAA,CAAAA,EAAAA,EAAmB;AACjB,mBAAO,KAAA,UAAA,CAAA,cAAA,CADU,EACV,CAAP;AAtEmB;;AA8ErBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AA/EmB;;AAsFrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AAvFmB;;AA8FrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AA/FmB;;AAuGrBC,UAAAA,oBAAAA,GAAuB;AACrB,mBAAO,KAAA,UAAA,CADc,oBACd,EAAP;AAxGmB;;AAgHrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AAjHmB;;AAwHrBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,UAAA,CADQ,cACR,EAAP;AAzHmB;;AAiIrBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,UAAA,CADO,aACP,EAAP;AAlImB;;AA4IrBC,UAAAA,YAAAA,GAAe;AACb,mBAAO,KAAA,UAAA,CADM,eACN,EAAP;AA7ImB;;AAmKrBC,UAAAA,UAAAA,GAAa;AACX,mBAAO,KAAA,UAAA,CADI,UACJ,EAAP;AApKmB;;AA4KrBC,UAAAA,wBAAAA,GAA2B;AACzB,mBAAO,KAAA,UAAA,CADkB,wBAClB,EAAP;AA7KmB;;AAqLrBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,UAAA,CADQ,cACR,EAAP;AAtLmB;;AAgMrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AAjMmB;;AAiNrBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,UAAA,CADK,WACL,EAAP;AAlNmB;;AAyNrBC,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,UAAA,CADC,OACD,EAAP;AA1NmB;;AAkOrBC,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CAAA,sBAAA,CADS,OAChB;AAnOmB;;AAqPrBC,UAAAA,QAAAA,GAAW;AACT,mBAAO,KAAA,UAAA,CADE,QACF,EAAP;AAtPmB;;AAqQrBC,UAAAA,OAAAA,CAAQC,eAAAA,GAARD,KAAAA,EAAiC;AAC/B,mBAAO,KAAA,UAAA,CAAA,YAAA,CAA6BC,eAAAA,IAAmB,KADxB,SACxB,CAAP;AAtQmB;;AA4QrB7iB,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,WAAA,CADC,OACD,EAAP;AA7QmB;;AAqRrB,cAAI8iB,aAAJ,GAAoB;AAClB,mBAAO,KAAA,UAAA,CADW,aAClB;AAtRmB;;AA4RrB,cAAIC,WAAJ,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,WAChB;AA7RmB;;AAsSrBC,UAAAA,YAAAA,CAAAA,iBAAAA,EAAgC;AAC9B,mBAAO,KAAA,UAAA,CAAA,YAAA,CADuB,iBACvB,CAAP;AAvSmB;;AA+SrBC,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,UAAA,CADS,eACT,EAAP;AAhTmB;;AAuTrBC,UAAAA,YAAAA,GAAe;AACb,mBAAO,KAAA,UAAA,CADM,YACN,EAAP;AAxTmB;;AAgUrBC,UAAAA,sBAAAA,GAAyB;AACvB,mBAAO,KAAA,UAAA,CADgB,sBAChB,EAAP;AAjUmB;;AAAA;;;;AAobvB,cAAA,YAAA,CAAmB;AACjB1jB,UAAAA,WAAAA,CAAAA,SAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,aAAAA,EAA2D2jB,MAAAA,GAA3D3jB,KAAAA,EAA2E;AACzE,iBAAA,UAAA,GADyE,SACzE;AACA,iBAAA,SAAA,GAFyE,QAEzE;AACA,iBAAA,cAAA,GAHyE,aAGzE;AACA,iBAAA,UAAA,GAJyE,SAIzE;AACA,iBAAA,MAAA,GAAc2jB,MAAAA,GAAS,IAATA,cAAAA,CAAAA,SAAS,EAATA,GAL2D,IAKzE;AACA,iBAAA,OAAA,GANyE,MAMzE;AACA,iBAAA,UAAA,GAAkB7D,SAAAA,CAPuD,UAOzE;AACA,iBAAA,IAAA,GAAY,IAR6D,UAQ7D,EAAZ;AAEA,iBAAA,kBAAA,GAVyE,KAUzE;AACA,iBAAA,cAAA,GAXyE,KAWzE;AACA,iBAAA,aAAA,GAAqB,IAZoD,GAYpD,EAArB;AACA,iBAAA,SAAA,GAbyE,KAazE;AAde;;AAoBjB,cAAI8D,UAAJ,GAAiB;AACf,mBAAO,KAAA,UAAA,GADQ,CACf;AArBe;;AA2BjB,cAAIC,MAAJ,GAAa;AACX,mBAAO,KAAA,SAAA,CADI,MACX;AA5Be;;AAmCjB,cAAIC,GAAJ,GAAU;AACR,mBAAO,KAAA,SAAA,CADC,GACR;AApCe;;AA0CjB,cAAIC,QAAJ,GAAe;AACb,mBAAO,KAAA,SAAA,CADM,QACb;AA3Ce;;AAkDjB,cAAIC,IAAJ,GAAW;AACT,mBAAO,KAAA,SAAA,CADE,IACT;AAnDe;;AA2DjBC,UAAAA,WAAAA,CAAY;AAAA,YAAA,KAAA;AAEV1hB,YAAAA,QAAAA,GAAW,KAFD,MAAA;AAGVN,YAAAA,OAAAA,GAHU,CAAA;AAIVC,YAAAA,OAAAA,GAJU,CAAA;AAKVC,YAAAA,QAAAA,GALU;AAAA,cAAZ8hB,EAAAA,EAMQ;AACN,mBAAO,IAAA,cAAA,CAAA,YAAA,CAAiB;AACtB5hB,cAAAA,OAAAA,EAAS,KADa,IAAA;AAAA,cAAA,KAAA;AAAA,cAAA,QAAA;AAAA,cAAA,OAAA;AAAA,cAAA,OAAA;AAAA,cAAA;AAAA,aAAjB,CAAP;AAlEe;;AAiFjB6hB,UAAAA,cAAAA,CAAe;AAAEC,YAAAA,MAAAA,GAAF;AAAA,cAAfD,EAAAA,EAAuC;AACrC,gBAAI,CAAC,KAAD,mBAAA,IAA6B,KAAA,kBAAA,KAAjC,MAAA,EAAqE;AACnE,mBAAA,mBAAA,GAA2B,KAAA,UAAA,CAAA,cAAA,CACzB,KADyB,UAAA,EADwC,MACxC,CAA3B;AAIA,mBAAA,kBAAA,GALmE,MAKnE;AANmC;;AAQrC,mBAAO,KAR8B,mBAQrC;AAzFe;;AAgGjBxB,UAAAA,YAAAA,GAAe;AACb,mBAAQ,KAAR,iBAAQ,KAAA,KAAR,iBAAQ,GAA2B,KAAA,UAAA,CAAA,gBAAA,CACjC,KAFW,UACsB,CAA3B,CAAR;AAjGe;;AA4GjB0B,UAAAA,MAAAA,GAAS;AACP,mBAAQ,KAAR,WAAQ,KAAA,KAAR,WAAQ,GAAqB,KAAA,UAAA,CAAA,UAAA,CAA2B,KADjD,UACsB,CAArB,CAAR;AA7Ge;;AAuHjBC,UAAAA,MAAAA,CAAO;AAAA,YAAA,aAAA;AAAA,YAAA,QAAA;AAGLF,YAAAA,MAAAA,GAHK,SAAA;AAILG,YAAAA,WAAAA,GAJK,KAAA;AAKLC,YAAAA,sBAAAA,GALK,KAAA;AAMLzT,YAAAA,SAAAA,GANK,IAAA;AAOL0T,YAAAA,UAAAA,GAPK,IAAA;AAQLC,YAAAA,aAAAA,GARK,IAAA;AASLC,YAAAA,UAAAA,GATK,IAAA;AAUL/C,YAAAA,iBAAAA,GAVK,IAAA;AAWLgD,YAAAA,4BAAAA,GAXFN;AAAO,WAAPA,EAYG;AAAA,gBAAA,YAAA;;AACD,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,MAAA,CAAA,IAAA,CADe,SACf;AAFD;;AAKD,kBAAMO,eAAAA,GAAkBT,MAAAA,KAAAA,OAAAA,GAAAA,OAAAA,GALvB,SAKD;AAGA,iBAAA,cAAA,GARC,KAQD;;AAEA,gBAAI,CAAJ,4BAAA,EAAmC;AACjCQ,cAAAA,4BAAAA,GAA+B,KAAA,UAAA,CADE,wBACF,EAA/BA;AAXD;;AAcD,gBAAIE,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAdjB,eAciB,CAAlB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChBA,cAAAA,WAAAA,GAAc9f,MAAAA,CAAAA,MAAAA,CADE,IACFA,CAAd8f;;AACA,mBAAA,aAAA,CAAA,GAAA,CAAA,eAAA,EAFgB,WAEhB;AAjBD;;AAqBD,gBAAIA,WAAAA,CAAJ,yBAAA,EAA2C;AACzCC,cAAAA,YAAAA,CAAaD,WAAAA,CAD4B,yBACzCC,CAAAA;AACAD,cAAAA,WAAAA,CAAAA,yBAAAA,GAFyC,IAEzCA;AAvBD;;AA0BD,kBAAME,qBAAAA,GACJN,aAAAA,IACA,IAAA,oBAAA,CAAyB;AAAEjkB,cAAAA,aAAAA,EAAe,KA5B3C;AA4B0B,aAAzB,CAFF;AAGA,kBAAMwkB,YAAAA,GAAe,IAAA,MAAA,CAAA,YAAA,CAAiB;AACpCC,cAAAA,MAAAA,EA9BD;AA6BqC,aAAjB,CAArB;;AAMA,gBAAI,CAACJ,WAAAA,CAAL,sBAAA,EAAyC;AACvCA,cAAAA,WAAAA,CAAAA,sBAAAA,GADuC,CAAA,GAAA,KAAA,CAAA,uBAAA,GACvCA;AACAA,cAAAA,WAAAA,CAAAA,YAAAA,GAA2B;AACzBK,gBAAAA,OAAAA,EADyB,EAAA;AAEzBC,gBAAAA,SAAAA,EAFyB,EAAA;AAGzBC,gBAAAA,SAAAA,EAHyB;AAAA,eAA3BP;;AAMA,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,cACf;AATqC;;AAWvC,mBAAA,iBAAA,CAAuB;AACrBQ,gBAAAA,SAAAA,EAAW,KADU,UAAA;AAErBlB,gBAAAA,MAAAA,EAFqB,eAAA;AAGrBI,gBAAAA,sBAAAA,EAAwBA,sBAAAA,KAHH,IAAA;AAIrB5C,gBAAAA,iBAAAA,EAAmBA,CAAAA,iBAAAA,SAAAA,IAAAA,iBAAAA,WAAAA,YAAAA,iBAAAA,CAAAA,YAAAA,KAJE;AAAA,eAAvB;AA9CD;;AAsDD,kBAAM2D,QAAAA,GAAWC,KAAAA,IAAS;AACxBV,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CADwB,kBACxBA;;AAIA,kBAAI,KAAA,kBAAA,IAA2BD,eAAAA,KAA/B,OAAA,EAA4D;AAC1D,qBAAA,cAAA,GAD0D,IAC1D;AANsB;;AAQxB,mBARwB,WAQxB;;AAEA,kBAAA,KAAA,EAAW;AACTY,gBAAAA,kBAAAA,CAAAA,UAAAA,CAAAA,MAAAA,CADS,KACTA;;AAEA,qBAAA,kBAAA,CAAwB;AAAA,kBAAA,WAAA;AAEtBtkB,kBAAAA,MAAAA,EAFsB;AAAA,iBAAxB;AAHF,eAAA,MAOO;AACLskB,gBAAAA,kBAAAA,CAAAA,UAAAA,CADK,OACLA;AAlBsB;;AAoBxB,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,OAAA,CADe,WACf;;AACA,qBAAA,MAAA,CAAA,OAAA,CAFe,SAEf;AAtBsB;AAA1B,aAAA;;AA0BA,kBAAMA,kBAAAA,GAAqB,IAAA,kBAAA,CAAuB;AAChDC,cAAAA,QAAAA,EADgD,QAAA;AAGhDpH,cAAAA,MAAAA,EAAQ;AAAA,gBAAA,aAAA;AAAA,gBAAA,QAAA;AAAA,gBAAA,SAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA;AAAA,eAHwC;AAUhDqH,cAAAA,IAAAA,EAAM,KAV0C,IAAA;AAWhDC,cAAAA,UAAAA,EAAY,KAXoC,UAAA;AAYhDC,cAAAA,YAAAA,EAAcf,WAAAA,CAZkC,YAAA;AAahDQ,cAAAA,SAAAA,EAAW,KAbqC,UAAA;AAchDZ,cAAAA,aAAAA,EAdgD,qBAAA;AAAA,cAAA,YAAA;AAgBhDoB,cAAAA,wBAAAA,EAA0BjB,eAAAA,KAhBsB,OAAA;AAiBhDjB,cAAAA,MAAAA,EAAQ,KAjBwC;AAAA,aAAvB,CAA3B;AAoBC,aAAA,CAAA,YAAA,GAAA,WAAA,EAAA,WAAA,KAAA,YAAA,CAAA,WAAA,GAA4B,IAA7B,GAA6B,EAA5B,CAAA,EAAD,GAAC,CApGA,kBAoGA;AACD,kBAAMmC,UAAAA,GAAaN,kBAAAA,CArGlB,IAqGD;AAEAzF,YAAAA,OAAAA,CAAAA,GAAAA,CAAY,CACV8E,WAAAA,CAAAA,sBAAAA,CADU,OAAA,EAAZ9E,4BAAY,CAAZA,EAAAA,IAAAA,CAIQ,CAAC,CAAA,YAAA,EAAD,qBAAC,CAAD,KAA2C;AAC/C,kBAAI,KAAJ,cAAA,EAAyB;AACvBuF,gBAAAA,QADuB;AAAA;AADsB;;AAK/C,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,WACf;AAN6C;;AAQ/CE,cAAAA,kBAAAA,CAAAA,kBAAAA,CAAsC;AAAA,gBAAA,YAAA;AAAA,gBAAA;AAAA,eAAtCA;AAIAA,cAAAA,kBAAAA,CAZ+C,mBAY/CA;AAhBJzF,aAAAA,EAAAA,KAAAA,CAvGC,QAuGDA;AAoBA,mBA3HC,UA2HD;AA9Pe;;AAqQjBgG,UAAAA,eAAAA,GAAkB;AAChB,qBAAA,mBAAA,GAA+B;AAC7B,kBAAIlB,WAAAA,CAAAA,YAAAA,CAAJ,SAAA,EAAwC;AACtCA,gBAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,OAAAA,CAAyCA,WAAAA,CADH,YACtCA;AAEAA,gBAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CAHsC,UAGtCA;AAJ2B;AADf;;AAShB,kBAAMD,eAAAA,GATU,QAShB;;AACA,gBAAIC,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAVF,eAUE,CAAlB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAChBA,cAAAA,WAAAA,GAAc9f,MAAAA,CAAAA,MAAAA,CADE,IACFA,CAAd8f;;AACA,mBAAA,aAAA,CAAA,GAAA,CAAA,eAAA,EAFgB,WAEhB;AAbc;;AAehB,gBAfgB,UAehB;;AAEA,gBAAI,CAACA,WAAAA,CAAL,oBAAA,EAAuC;AAAA,kBAAA,aAAA;;AACrCmB,cAAAA,UAAAA,GAAajhB,MAAAA,CAAAA,MAAAA,CADwB,IACxBA,CAAbihB;AACAA,cAAAA,UAAAA,CAAAA,mBAAAA,GAFqC,mBAErCA;AACAnB,cAAAA,WAAAA,CAAAA,oBAAAA,GAHqC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAGrCA;AACC,eAAA,CAAA,aAAA,GAAA,WAAA,EAAA,WAAA,KAAA,aAAA,CAAA,WAAA,GAA4B,IAA7B,GAA6B,EAA5B,CAAA,EAAD,GAAC,CAJoC,UAIpC;AACDA,cAAAA,WAAAA,CAAAA,YAAAA,GAA2B;AACzBK,gBAAAA,OAAAA,EADyB,EAAA;AAEzBC,gBAAAA,SAAAA,EAFyB,EAAA;AAGzBC,gBAAAA,SAAAA,EAHyB;AAAA,eAA3BP;;AAMA,kBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAA,MAAA,CAAA,IAAA,CADe,cACf;AAZmC;;AAcrC,mBAAA,iBAAA,CAAuB;AACrBQ,gBAAAA,SAAAA,EAAW,KADU,UAAA;AAErBlB,gBAAAA,MAAAA,EAFqB;AAAA,eAAvB;AA/Bc;;AAoChB,mBAAOU,WAAAA,CAAAA,oBAAAA,CApCS,OAoChB;AAzSe;;AAgTjBoB,UAAAA,iBAAAA,CAAkB;AAChBC,YAAAA,mBAAAA,GADgB,KAAA;AAEhBC,YAAAA,uBAAAA,GAFgB;AAAA,cAAlBF,EAAAA,EAGQ;AACN,kBAAMG,uBAAAA,GADA,GACN;AAEA,mBAAO,KAAA,UAAA,CAAA,cAAA,CAAA,cAAA,CAAA,gBAAA,EAEL;AACEf,cAAAA,SAAAA,EAAW,KADb,UAAA;AAEEa,cAAAA,mBAAAA,EAAqBA,mBAAAA,KAFvB,IAAA;AAGEG,cAAAA,gBAAAA,EAAkBF,uBAAAA,KAHpB;AAAA,aAFK,EAOL;AACEG,cAAAA,aAAAA,EADF,uBAAA;;AAEEC,cAAAA,IAAAA,CAAAA,WAAAA,EAAkB;AAChB,uBAAOC,WAAAA,CAAAA,KAAAA,CADS,MAChB;AAHJ;;AAAA,aAPK,CAAP;AAtTe;;AA2UjBC,UAAAA,cAAAA,CAAepI,MAAAA,GAAfoI,EAAAA,EAA4B;AAC1B,kBAAMC,cAAAA,GAAiB,KAAA,iBAAA,CADG,MACH,CAAvB;AAEA,mBAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC5C,uBAAA,IAAA,GAAgB;AACdC,gBAAAA,MAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CAAmB,UAAU;AAAA,kBAAA,KAAA;AAAV,kBAAA;AAAU,iBAAV,EAA2B;AAC5C,sBAAA,IAAA,EAAU;AACR/kB,oBAAAA,OAAAA,CADQ,WACRA,CAAAA;AADQ;AADkC;;AAK5CmD,kBAAAA,MAAAA,CAAAA,MAAAA,CAAcyhB,WAAAA,CAAdzhB,MAAAA,EAAkCgU,KAAAA,CALU,MAK5ChU;AACAyhB,kBAAAA,WAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAuB,GAAGzN,KAAAA,CANkB,KAM5CyN;AACAI,kBAAAA,IAP4C;AAA9CD,iBAAAA,EADc,MACdA;AAF0C;;AAa5C,oBAAMA,MAAAA,GAASD,cAAAA,CAb6B,SAa7BA,EAAf;AACA,oBAAMF,WAAAA,GAAc;AAClBK,gBAAAA,KAAAA,EADkB,EAAA;AAElBC,gBAAAA,MAAAA,EAAQ/hB,MAAAA,CAAAA,MAAAA,CAFU,IAEVA;AAFU,eAApB;AAIA6hB,cAAAA,IAlB4C;AAA9C,aAAO,CAAP;AA9Ue;;AAwWjBG,UAAAA,QAAAA,GAAW;AACT,iBAAA,SAAA,GADS,IACT;AACA,iBAAA,UAAA,CAAA,SAAA,CAA0B,KAA1B,UAAA,IAFS,IAET;AAEA,kBAAMC,MAAAA,GAJG,EAIT;;AACA,iBAAA,MAAW,CAAA,MAAA,EAAX,WAAW,CAAX,IAAoC,KAApC,aAAA,EAAwD;AACtD,mBAAA,kBAAA,CAAwB;AAAA,gBAAA,WAAA;AAEtB9lB,gBAAAA,MAAAA,EAAQ,IAAA,KAAA,CAFc,qBAEd,CAFc;AAGtB+lB,gBAAAA,KAAAA,EAHsB;AAAA,eAAxB;;AAMA,kBAAI9C,MAAAA,KAAJ,QAAA,EAAyB;AAAA;AAP6B;;AAWtD,mBAAA,MAAA,kBAAA,IAAiCU,WAAAA,CAAjC,WAAA,EAA0D;AACxDmC,gBAAAA,MAAAA,CAAAA,IAAAA,CAAYxB,kBAAAA,CAD4C,SACxDwB;AACAxB,gBAAAA,kBAAAA,CAFwD,MAExDA;AAboD;AAL/C;;AAqBT,iBAAA,IAAA,CArBS,KAqBT;AACA,iBAAA,mBAAA,GAtBS,IAsBT;AACA,iBAAA,iBAAA,GAvBS,IAuBT;AACA,iBAAA,WAAA,GAxBS,IAwBT;AACA,iBAAA,cAAA,GAzBS,KAyBT;AACA,mBAAOzF,OAAAA,CAAAA,GAAAA,CA1BE,MA0BFA,CAAP;AAlYe;;AA4YjBoD,UAAAA,OAAAA,CAAQ+D,UAAAA,GAAR/D,KAAAA,EAA4B;AAC1B,iBAAA,cAAA,GAD0B,IAC1B;AACA,mBAAO,KAAA,WAAA,CAFmB,UAEnB,CAAP;AA9Ye;;AAqZjBgE,UAAAA,WAAAA,CAAYD,UAAAA,GAAZC,KAAAA,EAAgC;AAC9B,gBAAI,CAAC,KAAL,cAAA,EAA0B;AACxB,qBADwB,KACxB;AAF4B;;AAI9B,iBAAA,MAAW;AAAA,cAAA,WAAA;AAAX,cAAA;AAAW,aAAX,IAA4C,KAAA,aAAA,CAA5C,MAA4C,EAA5C,EAAyE;AACvE,kBAAIC,WAAAA,CAAAA,IAAAA,GAAAA,CAAAA,IAAwB,CAACxB,YAAAA,CAA7B,SAAA,EAAqD;AACnD,uBADmD,KACnD;AAFqE;AAJ3C;;AAU9B,iBAAA,aAAA,CAV8B,KAU9B;;AACA,iBAAA,IAAA,CAX8B,KAW9B;AACA,iBAAA,mBAAA,GAZ8B,IAY9B;AACA,iBAAA,iBAAA,GAb8B,IAa9B;AACA,iBAAA,WAAA,GAd8B,IAc9B;;AACA,gBAAIsB,UAAAA,IAAc,KAAlB,MAAA,EAA+B;AAC7B,mBAAA,MAAA,GAAc,IADe,cAAA,CAAA,SACf,EAAd;AAhB4B;;AAkB9B,iBAAA,cAAA,GAlB8B,KAkB9B;AACA,mBAnB8B,IAmB9B;AAxae;;AA8ajBG,UAAAA,gBAAAA,CAAAA,YAAAA,EAAAA,MAAAA,EAAuC;AACrC,kBAAMxC,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CADiB,MACjB,CAApB;;AACA,gBAAI,CAAJ,WAAA,EAAkB;AAAA;AAFmB;;AAKrC,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,MAAA,CAAA,OAAA,CADe,cACf;AANmC;;AAUrC,gBAAIA,WAAAA,CAAJ,sBAAA,EAAwC;AACtCA,cAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,OAAAA,CADsC,YACtCA;AAXmC;AA9atB;;AAgcjByC,UAAAA,gBAAAA,CAAAA,iBAAAA,EAAAA,WAAAA,EAAiD;AAE/C,iBAAK,IAAInjB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKqjB,iBAAAA,CAArB,MAAA,EAA+CpjB,CAAAA,GAA/C,EAAA,EAAuDA,CAAvD,EAAA,EAA4D;AAC1D0gB,cAAAA,WAAAA,CAAAA,YAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAsC0C,iBAAAA,CAAAA,OAAAA,CADoB,CACpBA,CAAtC1C;AACAA,cAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAwC0C,iBAAAA,CAAAA,SAAAA,CAFkB,CAElBA,CAAxC1C;AAJ6C;;AAM/CA,YAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAAqC0C,iBAAAA,CANU,SAM/C1C;;AAGA,iBAAA,MAAA,kBAAA,IAAiCA,WAAAA,CAAjC,WAAA,EAA0D;AACxDW,cAAAA,kBAAAA,CADwD,mBACxDA;AAV6C;;AAa/C,gBAAI+B,iBAAAA,CAAJ,SAAA,EAAiC;AAC/B,mBAD+B,WAC/B;AAd6C;AAhchC;;AAqdjBC,UAAAA,iBAAAA,CAAAA,IAAAA,EAAwB;AACtB1lB,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE2lB,IAAAA,CADF3lB,MAAAA,EADsB,6DACtBA;;AAKA,kBAAM4kB,cAAAA,GAAiB,KAAA,UAAA,CAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,EAND,IAMC,CAAvB;;AAIA,kBAAMC,MAAAA,GAASD,cAAAA,CAVO,SAUPA,EAAf;;AAEA,kBAAM7B,WAAAA,GAAc,KAAA,aAAA,CAAA,GAAA,CAAuB4C,IAAAA,CAZrB,MAYF,CAApB;;AACA5C,YAAAA,WAAAA,CAAAA,YAAAA,GAbsB,MAatBA;;AAEA,kBAAM+B,IAAAA,GAAO,MAAM;AACjBD,cAAAA,MAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CACE,CAAC;AAAA,gBAAA,KAAA;AAAD,gBAAA;AAAC,eAAD,KAAqB;AACnB,oBAAA,IAAA,EAAU;AACR9B,kBAAAA,WAAAA,CAAAA,YAAAA,GADQ,IACRA;AADQ;AADS;;AAKnB,oBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AALZ;;AAQnB,qBAAA,gBAAA,CAAA,KAAA,EARmB,WAQnB;;AACA+B,gBAAAA,IATmB;AADvBD,eAAAA,EAYEzlB,MAAAA,IAAU;AACR2jB,gBAAAA,WAAAA,CAAAA,YAAAA,GADQ,IACRA;;AAEA,oBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AAHvB;;AAMR,oBAAIA,WAAAA,CAAJ,YAAA,EAA8B;AAE5BA,kBAAAA,WAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAF4B,IAE5BA;;AAEA,uBAAA,MAAA,kBAAA,IAAiCA,WAAAA,CAAjC,WAAA,EAA0D;AACxDW,oBAAAA,kBAAAA,CADwD,mBACxDA;AAL0B;;AAO5B,uBAP4B,WAO5B;AAbM;;AAgBR,oBAAIX,WAAAA,CAAJ,sBAAA,EAAwC;AACtCA,kBAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,MAAAA,CADsC,MACtCA;AADF,iBAAA,MAEO,IAAIA,WAAAA,CAAJ,oBAAA,EAAsC;AAC3CA,kBAAAA,WAAAA,CAAAA,oBAAAA,CAAAA,MAAAA,CAD2C,MAC3CA;AADK,iBAAA,MAEA;AACL,wBADK,MACL;AArBM;AAZZ8B,eAAAA;AADF,aAAA;;AAuCAC,YAAAA,IAtDsB;AArdP;;AAihBjBc,UAAAA,kBAAAA,CAAmB;AAAA,YAAA,WAAA;AAAA,YAAA,MAAA;AAAuBT,YAAAA,KAAAA,GAA1CS;AAAmB,WAAnBA,EAA2D;AACzD5lB,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEZ,MAAAA,YAAAA,KAAAA,IACG,OAAA,MAAA,KAAA,QAAA,IAA8BA,MAAAA,KAFnCY,IAAAA,EADyD,8DACzDA;;AAMA,gBAAI,CAAC+iB,WAAAA,CAAL,YAAA,EAA+B;AAAA;AAP0B;;AAUzD,gBAAI,CAAJ,KAAA,EAAY;AAGV,kBAAIA,WAAAA,CAAAA,WAAAA,CAAAA,IAAAA,GAAJ,CAAA,EAAsC;AAAA;AAH5B;;AASV,kBAAI3jB,MAAAA,YAAJ,cAAA,CAAA,2BAAA,EAAmD;AACjD2jB,gBAAAA,WAAAA,CAAAA,yBAAAA,GAAwC,UAAA,CAAW,MAAM;AACvD,uBAAA,kBAAA,CAAwB;AAAA,oBAAA,WAAA;AAAA,oBAAA,MAAA;AAAuBoC,oBAAAA,KAAAA,EAAvB;AAAA,mBAAxB;;AACApC,kBAAAA,WAAAA,CAAAA,yBAAAA,GAFuD,IAEvDA;AAFsC,iBAAA,EADS,2BACT,CAAxCA;AADiD;AATzC;AAV6C;;AA2BzDA,YAAAA,WAAAA,CAAAA,YAAAA,CAAAA,MAAAA,CAAgC,IAAA,KAAA,CAAA,cAAA,CAAmB3jB,MAAnB,aAAmBA,MAAnB,uBAAmBA,MAAAA,CA3BM,OA2BzB,CAAhC2jB;AACAA,YAAAA,WAAAA,CAAAA,YAAAA,GA5ByD,IA4BzDA;;AAEA,gBAAI,KAAA,UAAA,CAAJ,SAAA,EAA+B;AAAA;AA9B0B;;AAmCzD,iBAAA,MAAW,CAAA,MAAA,EAAX,cAAW,CAAX,IAAuC,KAAvC,aAAA,EAA2D;AACzD,kBAAI8C,cAAAA,KAAJ,WAAA,EAAoC;AAClC,qBAAA,aAAA,CAAA,MAAA,CADkC,MAClC;;AADkC;AADqB;AAnCF;;AA0CzD,iBA1CyD,OA0CzD;AA3jBe;;AAikBjB,cAAIC,KAAJ,GAAY;AACV,mBAAO,KADG,MACV;AAlkBe;;AAAA;;;;AAskBnB,cAAA,YAAA,CAAmB;AACjB5nB,UAAAA,WAAAA,GAAc;AACZ,iBAAA,UAAA,GADY,EACZ;AACA,iBAAA,SAAA,GAAiB+f,OAAAA,CAAAA,OAAAA,CAFL,SAEKA,CAAjB;AAHe;;AAMjB8H,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,SAAAA,EAA4B;AAC1B,qBAAA,UAAA,CAAA,KAAA,EAA2B;AAGzB,kBAAI,OAAA,KAAA,KAAA,QAAA,IAA6B9O,KAAAA,KAAjC,IAAA,EAAiD;AAC/C,uBAD+C,KAC/C;AAJuB;;AAMzB,kBAAI+O,MAAAA,CAAAA,GAAAA,CAAJ,KAAIA,CAAJ,EAAuB;AAErB,uBAAOA,MAAAA,CAAAA,GAAAA,CAFc,KAEdA,CAAP;AARuB;;AAUzB,kBAAA,MAAA,EAVyB,MAUzB;;AACA,kBAAK,CAAA,MAAA,GAAS/O,KAAAA,CAAV,MAAC,KAA0BoF,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAA/B,MAA+BA,CAA/B,EAAsD;AAEpD,oBAAI4J,SAAJ,aAAIA,SAAJ,uBAAIA,SAAAA,CAAAA,QAAAA,CAAJ,MAAIA,CAAJ,EAAiC;AAC/BlM,kBAAAA,MAAAA,GAAS,IAAI9C,KAAAA,CAAJ,WAAA,CAAA,MAAA,EAEPA,KAAAA,CAFO,UAAA,EAGPA,KAAAA,CAJ6B,UACtB,CAAT8C;AADF,iBAAA,MAMO;AACLA,kBAAAA,MAAAA,GAAS,IAAI9C,KAAAA,CAAJ,WAAA,CADJ,KACI,CAAT8C;AATkD;;AAWpDiM,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAXoD,MAWpDA;AACA,uBAZoD,MAYpD;AAvBuB;;AAyBzB,kBAAI/O,KAAAA,YAAJ,GAAA,EAA0B;AACxB8C,gBAAAA,MAAAA,GAAS,IADe,GACf,EAATA;AACAiM,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAFwB,MAExBA;;AACA,qBAAA,MAAW,CAAA,GAAA,EAAX,GAAW,CAAX,IAAA,KAAA,EAAgC;AAC9BjM,kBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAgBmM,UAAAA,CADc,GACdA,CAAhBnM;AAJsB;;AAMxB,uBANwB,MAMxB;AA/BuB;;AAiCzB,kBAAI9C,KAAAA,YAAJ,GAAA,EAA0B;AACxB8C,gBAAAA,MAAAA,GAAS,IADe,GACf,EAATA;AACAiM,gBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAFwB,MAExBA;;AACA,qBAAA,MAAA,GAAA,IAAA,KAAA,EAAyB;AACvBjM,kBAAAA,MAAAA,CAAAA,GAAAA,CAAWmM,UAAAA,CADY,GACZA,CAAXnM;AAJsB;;AAMxB,uBANwB,MAMxB;AAvCuB;;AAyCzBA,cAAAA,MAAAA,GAASpC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,IAAAA,EAAAA,GAzCgB,EAyCzBoC;AACAiM,cAAAA,MAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EA1CyB,MA0CzBA;;AAGA,mBAAA,MAAA,CAAA,IAAA,KAAA,EAAuB;AACrB,oBAAA,IAAA;AAAA,oBACE9N,CAAAA,GAFmB,KACrB;;AAEA,uBAAO,EAAE,IAAA,GAAOjV,MAAAA,CAAAA,wBAAAA,CAAAA,CAAAA,EAAhB,CAAgBA,CAAT,CAAP,EAAwD;AACtDiV,kBAAAA,CAAAA,GAAIjV,MAAAA,CAAAA,cAAAA,CADkD,CAClDA,CAAJiV;AAJmB;;AAMrB,oBAAI,OAAOiO,IAAAA,CAAP,KAAA,KAAJ,WAAA,EAAuC;AAAA;AANlB;;AASrB,oBAAI,OAAOA,IAAAA,CAAP,KAAA,KAAJ,UAAA,EAAsC;AAAA;;AACpC,+CAAIlP,KAAAA,CAAAA,cAAJ,0DAAIA,2BAAAA,KAAAA,EAAJ,CAAIA,CAAJ,EAA+B;AAC7B,0BAAM,IAAA,KAAA,CACJ,4CAA4CA,KAAAA,CAFjB,CAEiBA,CAFjB,EACvB,CAAN;AAFkC;;AAAA;AATjB;;AAiBrB8C,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAYmM,UAAAA,CAAWC,IAAAA,CAjBF,KAiBTD,CAAZnM;AA9DuB;;AAgEzB,qBAhEyB,MAgEzB;AAjEwB;;AAoE1B,kBAAMiM,MAAAA,GAAS,IApEW,OAoEX,EAAf;AACA,kBAAMI,KAAAA,GAAQ;AAAEtP,cAAAA,IAAAA,EAAMoP,UAAAA,CArEI,GAqEJA;AAAR,aAAd;;AAEA,iBAAA,SAAA,CAAA,IAAA,CAAoB,MAAM;AACxB,mBAAA,MAAA,QAAA,IAAuB,KAAvB,UAAA,EAAwC;AACtC5G,gBAAAA,QAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EADsC,KACtCA;AAFsB;AAA1B,aAAA;AA7Ee;;AAoFjB+G,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAiC;AAC/B,iBAAA,UAAA,CAAA,IAAA,CAD+B,QAC/B;AArFe;;AAwFjBC,UAAAA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoC;AAClC,kBAAMjkB,CAAAA,GAAI,KAAA,UAAA,CAAA,OAAA,CADwB,QACxB,CAAV;;AACA,iBAAA,UAAA,CAAA,MAAA,CAAA,CAAA,EAFkC,CAElC;AA1Fe;;AA6FjBkkB,UAAAA,SAAAA,GAAY;AACV,iBAAA,UAAA,CAAA,MAAA,GADU,CACV;AA9Fe;;AAAA;;;;AA2GnB,cAAMtJ,SAAAA,GAAa,SAAA,gBAAA,GAA4B;AAC7C,gBAAMuJ,cAAAA,GAAiB,IADsB,OACtB,EAAvB;AACA,cAAIC,gBAAAA,GAFyC,KAE7C;AACA,cAH6C,iBAG7C;AACA,cAAIC,gBAAAA,GAJyC,CAI7C;AACA,cAL6C,oBAK7C;;AAIE,cAAI/K,QAAAA,CAAAA,QAAAA,IAAY,OAAA,OAAA,KAAhB,UAAA,EAA+D;AAE7D8K,YAAAA,gBAAAA,GAF6D,IAE7DA;AAKEE,YAAAA,iBAAAA,GAP2D,iBAO3DA;AAPJ,WAAA,MASO,IAAI,OAAA,QAAA,KAAA,QAAA,IAAgC,mBAApC,QAAA,EAAiE;AAAA;;AACtE,kBAAMC,aAAAA,4BAAgBpnB,QAAAA,CAAAA,aAAhBonB,0DAAgBpnB,sBADgD,GACtE;;AACA,gBAAA,aAAA,EAAmB;AACjBmnB,cAAAA,iBAAAA,GAAoBC,aAAAA,CAAAA,OAAAA,CAAAA,2BAAAA,EADH,aACGA,CAApBD;AAHoE;AAlB7B;;AA6B7C,mBAAA,YAAA,GAAwB;AACtB,gBAAI3J,eAAAA,CAAAA,mBAAAA,CAAJ,SAAA,EAAmC;AACjC,qBAAOA,eAAAA,CAAAA,mBAAAA,CAD0B,SACjC;AAFoB;;AAItB,gBAAI,OAAA,iBAAA,KAAJ,WAAA,EAA8C;AAC5C,kBAAI,CAAJ,QAAA,CAAA,QAAA,EAAe;AACb6J,iBAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADa,+CACbA;AAF0C;;AAI5C,qBAJ4C,iBAI5C;AARoB;;AAUtB,kBAAM,IAAA,KAAA,CAVgB,+CAUhB,CAAN;AAvC2C;;AA0C7C,mBAAA,iCAAA,GAA6C;AAC3C,gBAD2C,wBAC3C;;AACA,gBAAI;AAAA;;AACFC,cAAAA,wBAAAA,4BAA2BnoB,UAAAA,CAAAA,WAA3BmoB,0DAA2BnoB,sBADzB,oBACFmoB;AADF,aAAA,CAEE,OAAA,EAAA,EAJyC,CAAA;;AAO3C,mBAAOA,wBAAAA,IAPoC,IAO3C;AAjD2C;;AAqD7C,mBAAA,qBAAA,GAAiC;AAC/B,gBAAA,oBAAA,EAA0B;AACxB,qBAAOC,oBAAAA,CADiB,OACxB;AAF6B;;AAI/BA,YAAAA,oBAAAA,GAJ+B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAI/BA;;AAEA,kBAAMC,MAAAA,GAAS,kBAAkB;AAC/B,oBAAMF,wBAAAA,GAA2BG,iCADF,EAC/B;;AAEA,kBAAA,wBAAA,EAA8B;AAE5B,uBAF4B,wBAE5B;AAL6B;;AAW/B,kBACE,QAAA,CAAA,QAAA,IAGA,OAAA,OAAA,KAJF,UAAA,EAKE;AAcA,sBAAMxK,MAAAA,GAASyK,IAAAA,CAAAA,SAAAA,CAAAA,CAAgBC,YAd/B,EAceD,CAAf;AACA,uBAAOzK,MAAAA,CAfP,oBAeA;AA/B6B;;AAiC/B,oBAAM2K,CAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EAAWD,YAjCc,EAiCzBC,CAAN;AACA,qBAAO1K,MAAAA,CAAAA,WAAAA,CAlCwB,oBAkC/B;AAlCF,aAAA;;AAoCAsK,YAAAA,MAAAA,GAAAA,IAAAA,CAAcD,oBAAAA,CAAdC,OAAAA,EAA4CD,oBAAAA,CA1Cb,MA0C/BC;AAEA,mBAAOD,oBAAAA,CA5CwB,OA4C/B;AAjG2C;;AAoG7C,mBAAA,gBAAA,CAAA,GAAA,EAA+B;AAI7B,kBAAMM,OAAAA,GAAU,oBAAA,GAAA,GAJa,KAI7B;AACA,mBAAOpM,GAAAA,CAAAA,eAAAA,CAAoB,IAAA,IAAA,CAAS,CALP,OAKO,CAAT,CAApBA,CAAP;AAzG2C;;AAmH7C,gBAAA,SAAA,CAAgB;AAId/c,YAAAA,WAAAA,CAAY;AACViF,cAAAA,IAAAA,GADU,IAAA;AAEV4Z,cAAAA,IAAAA,GAFU,IAAA;AAGVxH,cAAAA,SAAAA,GAHU,CAAA,GAAA,KAAA,CAAA,iBAAA;AAAA,gBAAZrX,EAAAA,EAIQ;AACN,kBAAI6e,IAAAA,IAAQyJ,cAAAA,CAAAA,GAAAA,CAAZ,IAAYA,CAAZ,EAAsC;AACpC,sBAAM,IAAA,KAAA,CAD8B,6CAC9B,CAAN;AAFI;;AAKN,mBAAA,IAAA,GALM,IAKN;AACA,mBAAA,SAAA,GANM,KAMN;AACA,mBAAA,oBAAA,GAPM,IAON;AACA,mBAAA,SAAA,GARM,SAQN;AAEA,mBAAA,gBAAA,GAVM,CAAA,GAAA,KAAA,CAAA,uBAAA,GAUN;AACA,mBAAA,KAAA,GAXM,IAWN;AACA,mBAAA,UAAA,GAZM,IAYN;AACA,mBAAA,eAAA,GAbM,IAaN;;AAEA,kBAAA,IAAA,EAAU;AACRA,gBAAAA,cAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EADQ,IACRA;;AACA,qBAAA,mBAAA,CAFQ,IAER;;AAFQ;AAfJ;;AAoBN,mBApBM,WAoBN;AA5BY;;AA+Bd,gBAAIzH,OAAJ,GAAc;AACZ,qBAAO,KAAA,gBAAA,CADK,OACZ;AAhCY;;AAmCd,gBAAIhC,IAAJ,GAAW;AACT,qBAAO,KADE,KACT;AApCY;;AAuCd,gBAAIgB,cAAJ,GAAqB;AACnB,qBAAO,KADY,eACnB;AAxCY;;AA2CduJ,YAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,mBAAA,KAAA,GADwB,IACxB;AACA,mBAAA,eAAA,GAAuB,IAAA,gBAAA,CAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAFC,IAED,CAAvB;;AACA,mBAAA,eAAA,CAAA,EAAA,CAAA,OAAA,EAAiC,YAHT,CAGxB,CAAA;;AAIA,mBAAA,gBAAA,CAPwB,OAOxB;AAlDY;;AAqDdC,YAAAA,WAAAA,GAAc;AAMZ,kBACE,OAAA,MAAA,KAAA,WAAA,IACA,CADA,gBAAA,IAEA,CAACN,iCAHH,EAAA,EAIE;AACA,oBAAIO,SAAAA,GAAYL,YADhB,EACA;;AAEA,oBAAI;AAGF,sBAGE,CAACM,CAAAA,GAAAA,KAAAA,CAAAA,YAAAA,EAAa/K,MAAAA,CAAAA,QAAAA,CAAb+K,IAAAA,EAHH,SAGGA,CAHH,EAIE;AACAD,oBAAAA,SAAAA,GAAYE,gBAAAA,CACV,IAAA,GAAA,CAAA,SAAA,EAAmBhL,MAAAA,CAAnB,QAAA,EAFF,IACYgL,CAAZF;AARA;;AAeF,wBAAM/K,MAAAA,GAAS,IAAA,MAAA,CAfb,SAea,CAAf;AACA,wBAAMsB,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAhBrB,MAgBqB,CAAvB;;AACA,wBAAM4J,cAAAA,GAAiB,MAAM;AAC3BlL,oBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAD2B,aAC3BA;AACAsB,oBAAAA,cAAAA,CAF2B,OAE3BA;AACAtB,oBAAAA,MAAAA,CAH2B,SAG3BA;;AACA,wBAAI,KAAJ,SAAA,EAAoB;AAClB,2BAAA,gBAAA,CAAA,MAAA,CAA6B,IAAA,KAAA,CADX,sBACW,CAA7B;AADF,qBAAA,MAEO;AAGL,2BAHK,gBAGL;AATyB;AAA7B,mBAAA;;AAaA,wBAAMmL,aAAAA,GAAgB,MAAM;AAC1B,wBAAI,CAAC,KAAL,UAAA,EAAsB;AAGpBD,sBAAAA,cAHoB;AADI;AAA5B,mBAAA;;AAOAlL,kBAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EArCE,aAqCFA;AAEAsB,kBAAAA,cAAAA,CAAAA,EAAAA,CAAAA,MAAAA,EAA0BjH,IAAAA,IAAQ;AAChC2F,oBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EADgC,aAChCA;;AACA,wBAAI,KAAJ,SAAA,EAAoB;AAClBkL,sBAAAA,cADkB;AAAA;AAFY;;AAMhC,wBAAA,IAAA,EAAU;AAER,2BAAA,eAAA,GAFQ,cAER;AACA,2BAAA,KAAA,GAHQ,MAGR;AACA,2BAAA,UAAA,GAJQ,MAIR;;AACA,0BAAI,CAAC7Q,IAAAA,CAAL,gBAAA,EAA4B;AAC1B,6BAAA,oBAAA,GAD0B,KAC1B;AANM;;AAQR,2BAAA,gBAAA,CARQ,OAQR;;AAEAiH,sBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAiC;AAC/BxI,wBAAAA,SAAAA,EAAW,KAXL;AAUyB,uBAAjCwI;AAVF,qBAAA,MAaO;AACL,2BADK,gBACL;;AACAA,sBAAAA,cAAAA,CAFK,OAELA;AACAtB,sBAAAA,MAAAA,CAHK,SAGLA;AAtB8B;AAAlCsB,mBAAAA;AA0BAA,kBAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2BjH,IAAAA,IAAQ;AACjC2F,oBAAAA,MAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EADiC,aACjCA;;AACA,wBAAI,KAAJ,SAAA,EAAoB;AAClBkL,sBAAAA,cADkB;AAAA;AAFa;;AAMjC,wBAAI;AACFE,sBAAAA,QADE;AAAJ,qBAAA,CAEE,OAAA,CAAA,EAAU;AAEV,2BAFU,gBAEV;AAV+B;AAAnC9J,mBAAAA;;AAcA,wBAAM8J,QAAAA,GAAW,MAAM;AACrB,0BAAMC,OAAAA,GAAU,IAAA,UAAA,CAAe,CAC7B,KAAA,oBAAA,GAAA,GAAA,GAFmB,CACU,CAAf,CAAhB;;AAKA,wBAAI;AACF/J,sBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAqC,CAAC+J,OAAAA,CADpC,MACmC,CAArC/J;AADF,qBAAA,CAEE,OAAA,EAAA,EAAW;AACXpb,uBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADW,mCACXA;AACAmlB,sBAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAFW,CAEXA;AACA/J,sBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAHW,OAGXA;AAXmB;AAAvB,mBAAA;;AAmBA8J,kBAAAA,QAlGE;AAAA;AAAJ,iBAAA,CAoGE,OAAA,CAAA,EAAU;AACVE,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADU,+BACVA;AAxGF;AAVU;;AAuHZ,mBAvHY,gBAuHZ;AA5KY;;AA+KdC,YAAAA,gBAAAA,GAAmB;AACjB,kBAAI,CAAJ,gBAAA,EAAuB;AACrBrlB,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADqB,yBACrBA;AACA8jB,gBAAAA,gBAAAA,GAFqB,IAErBA;AAHe;;AAMjBwB,cAAAA,qBAAAA,GAAAA,IAAAA,CACQC,oBAAAA,IAAwB;AAC5B,oBAAI,KAAJ,SAAA,EAAoB;AAClB,uBAAA,gBAAA,CAAA,MAAA,CAA6B,IAAA,KAAA,CADX,sBACW,CAA7B;;AADkB;AADQ;;AAK5B,sBAAMnL,IAAAA,GAAO,IALe,YAKf,EAAb;AACA,qBAAA,KAAA,GAN4B,IAM5B;AAGA,sBAAMoL,EAAAA,GAAK,SAASzB,gBATQ,EAS5B;AAIA,sBAAM0B,aAAAA,GAAgB,IAAA,gBAAA,CAAA,cAAA,CAAmBD,EAAAA,GAAnB,SAAA,EAAA,EAAA,EAbM,IAaN,CAAtB;AACAD,gBAAAA,oBAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EAd4B,IAc5BA;AAEA,sBAAMnK,cAAAA,GAAiB,IAAA,gBAAA,CAAA,cAAA,CAAA,EAAA,EAAuBoK,EAAAA,GAAvB,SAAA,EAhBK,IAgBL,CAAvB;AACA,qBAAA,eAAA,GAjB4B,cAiB5B;;AACA,qBAAA,gBAAA,CAlB4B,OAkB5B;;AAEApK,gBAAAA,cAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAiC;AAC/BxI,kBAAAA,SAAAA,EAAW,KArBe;AAoBK,iBAAjCwI;AArBJkK,eAAAA,EAAAA,KAAAA,CAyBS7oB,MAAAA,IAAU;AACf,qBAAA,gBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAAU,mCAAmCA,MAAAA,CAFhC,OAAA,IAEb,CADF;AA1BJ6oB,eAAAA;AArLY;;AAwNdxpB,YAAAA,OAAAA,GAAU;AACR,mBAAA,SAAA,GADQ,IACR;;AACA,kBAAI,KAAJ,UAAA,EAAqB;AAEnB,qBAAA,UAAA,CAFmB,SAEnB;;AACA,qBAAA,UAAA,GAHmB,IAGnB;AALM;;AAOR+nB,cAAAA,cAAAA,CAAAA,MAAAA,CAAsB,KAPd,KAORA;AACA,mBAAA,KAAA,GARQ,IAQR;;AACA,kBAAI,KAAJ,eAAA,EAA0B;AACxB,qBAAA,eAAA,CADwB,OACxB;;AACA,qBAAA,eAAA,GAFwB,IAExB;AAXM;AAxNI;;AA2Od,mBAAO6B,QAAP,CAAA,MAAA,EAAwB;AACtB,kBAAI,CAAA,MAAA,IAAW,CAAC9L,MAAAA,CAAhB,IAAA,EAA6B;AAC3B,sBAAM,IAAA,KAAA,CADqB,gDACrB,CAAN;AAFoB;;AAItB,kBAAIiK,cAAAA,CAAAA,GAAAA,CAAmBjK,MAAAA,CAAvB,IAAIiK,CAAJ,EAAqC;AACnC,uBAAOA,cAAAA,CAAAA,GAAAA,CAAmBjK,MAAAA,CADS,IAC5BiK,CAAP;AALoB;;AAOtB,qBAAO,IAAA,SAAA,CAPe,MAOf,CAAP;AAlPY;;AAqPd,mBAAOW,YAAP,GAAsB;AACpB,qBAAOA,YADa,EACpB;AAtPY;;AAAA;;AAyPhB,iBA5W6C,SA4W7C;AA5WF,SAAmB,EAAnB;;;;AAmXA,cAAA,eAAA,CAAsB;AACpBjpB,UAAAA,WAAAA,CAAAA,cAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,MAAAA,EAAgE;AAC9D,iBAAA,cAAA,GAD8D,cAC9D;AACA,iBAAA,WAAA,GAF8D,WAE9D;AACA,iBAAA,UAAA,GAAkB,IAH4C,UAG5C,EAAlB;AACA,iBAAA,UAAA,GAAkB,IAAA,YAAA,CAAA,UAAA,CAAe;AAC/Bgf,cAAAA,KAAAA,EAAOsE,WAAAA,CADwB,KAAA;AAE/B8G,cAAAA,oBAAAA,EAAsB,KAAA,qBAAA,CAAA,IAAA,CAFS,IAET,CAFS;AAG/B5pB,cAAAA,aAAAA,EAAe6d,MAAAA,CAHgB;AAAA,aAAf,CAAlB;AAKA,iBAAA,OAAA,GAT8D,MAS9D;AACA,iBAAA,iBAAA,GAAyB,IAAIA,MAAAA,CAAJ,iBAAA,CAA6B;AACpDzd,cAAAA,OAAAA,EAASyd,MAAAA,CAD2C,OAAA;AAEpDxd,cAAAA,YAAAA,EAAcwd,MAAAA,CAFsC;AAAA,aAA7B,CAAzB;AAKA,iBAAA,SAAA,GAf8D,KAe9D;AACA,iBAAA,iBAAA,GAhB8D,IAgB9D;AACA,iBAAA,mBAAA,GAjB8D,IAiB9D;AAEA,iBAAA,cAAA,GAnB8D,aAmB9D;AACA,iBAAA,WAAA,GApB8D,IAoB9D;AACA,iBAAA,aAAA,GArB8D,IAqB9D;AAEA,iBAAA,SAAA,GAvB8D,EAuB9D;AACA,iBAAA,YAAA,GAxB8D,EAwB9D;AACA,iBAAA,sBAAA,GAzB8D,CAAA,GAAA,KAAA,CAAA,uBAAA,GAyB9D;AAEA,iBA3B8D,mBA2B9D;AA5BkB;;AA+BpB,cAAIgM,kBAAJ,GAAyB;AACvB,mBAAO,KAAA,WAAA,CAAA,WAAA,CADgB,OACvB;AAhCkB;;AAmCpB9pB,UAAAA,OAAAA,GAAU;AACR,gBAAI,KAAJ,iBAAA,EAA4B;AAC1B,qBAAO,KAAA,iBAAA,CADmB,OAC1B;AAFM;;AAKR,iBAAA,SAAA,GALQ,IAKR;AACA,iBAAA,iBAAA,GANQ,CAAA,GAAA,KAAA,CAAA,uBAAA,GAMR;;AAEA,gBAAI,KAAJ,mBAAA,EAA8B;AAC5B,mBAAA,mBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAF0B,iDAE1B,CADF;AATM;;AAcR,kBAAMymB,MAAAA,GAdE,EAcR;AAGA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,IAAA,EAAgB;AACrC,kBAAA,IAAA,EAAU;AACRA,gBAAAA,MAAAA,CAAAA,IAAAA,CAAYsD,IAAAA,CADJ,QACIA,EAAZtD;AAFmC;AAAvC,aAAA;AAKA,iBAAA,SAAA,CAAA,MAAA,GAtBQ,CAsBR;AACA,iBAAA,YAAA,CAAA,MAAA,GAvBQ,CAuBR;AAEA,kBAAMuD,UAAAA,GAAa,KAAA,cAAA,CAAA,eAAA,CAAA,WAAA,EAzBX,IAyBW,CAAnB;AACAvD,YAAAA,MAAAA,CAAAA,IAAAA,CA1BQ,UA0BRA;;AAEA,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,oBAAMwD,8BAAAA,GAAiC,KAAA,WAAA,CAAA,OAAA,CAAA,IAAA,CAC/BC,WAAAA,IAAe;AAEnB,oBAAIA,WAAAA,CAAAA,cAAAA,CAAJ,mBAAIA,CAAJ,EAAqD;AACnDA,kBAAAA,WAAAA,CAAAA,iBAAAA,CADmD,aACnDA;AAHiB;AADgB,eAAA,EAAA,KAAA,CAO9B,MARkB,CAC3B,CAAuC,CAAvC;AAQAzD,cAAAA,MAAAA,CAAAA,IAAAA,CAT2B,8BAS3BA;AArCM;;AAuCRjH,YAAAA,OAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAAA,IAAAA,CAAyB,MAAM;AAC7B,mBAAA,UAAA,CAD6B,KAC7B;AACA,mBAAA,UAAA,CAF6B,KAE7B;AACA,mBAAA,oBAAA,GAH6B,IAG7B;;AAEA,kBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAA,cAAA,CAAA,iBAAA,CACE,IAAA,KAAA,CAAA,cAAA,CAFqB,wBAErB,CADF;AAN2B;;AAW7B,kBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAA,cAAA,CADuB,OACvB;AACA,qBAAA,cAAA,GAFuB,IAEvB;AAb2B;;AAe7B,mBAAA,iBAAA,CAf6B,OAe7B;AAfFA,aAAAA,EAgBG,KAAA,iBAAA,CAvDK,MAuCRA;AAiBA,mBAAO,KAAA,iBAAA,CAxDC,OAwDR;AA3FkB;;AA8FpB2K,UAAAA,mBAAAA,GAAsB;AACpB,kBAAM;AAAA,cAAA,cAAA;AAAA,cAAA;AAAA,gBADc,IACpB;AAEA7K,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,WAAAA,EAA+B,CAAA,IAAA,EAAA,IAAA,KAAgB;AAC7C/d,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KADFA,cAAAA,EAD6C,iDAC7CA;AAIA,mBAAA,WAAA,GAAmB,KAAA,cAAA,CAL0B,aAK1B,EAAnB;;AACA,mBAAA,WAAA,CAAA,UAAA,GAA8B6oB,GAAAA,IAAO;AACnC,qBAAA,aAAA,GAAqB;AACnBC,kBAAAA,MAAAA,EAAQD,GAAAA,CADW,MAAA;AAEnBE,kBAAAA,KAAAA,EAAOF,GAAAA,CAFY;AAAA,iBAArB;AADF,eAAA;;AAMAG,cAAAA,IAAAA,CAAAA,MAAAA,GAAc,MAAM;AAClB,qBAAA,WAAA,CAAA,IAAA,GAAA,IAAA,CAEQ,UAAU;AAAA,kBAAA,KAAA;AAAV,kBAAA;AAAU,iBAAV,EAA2B;AAC/B,sBAAA,IAAA,EAAU;AACRA,oBAAAA,IAAAA,CADQ,KACRA;AADQ;AADqB;;AAK/BhpB,mBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEqc,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADFrc,KACEqc,CADFrc,EAL+B,sCAK/BA;AAMAgpB,kBAAAA,IAAAA,CAAAA,OAAAA,CAAa,IAAA,UAAA,CAAbA,KAAa,CAAbA,EAAAA,CAAAA,EAAuC,CAXR,KAWQ,CAAvCA;AAbJ,iBAAA,EAAA,KAAA,CAeS5pB,MAAAA,IAAU;AACf4pB,kBAAAA,IAAAA,CAAAA,KAAAA,CADe,MACfA;AAhBJ,iBAAA;AADFA,eAAAA;;AAqBAA,cAAAA,IAAAA,CAAAA,QAAAA,GAAgB5pB,MAAAA,IAAU;AACxB,qBAAA,WAAA,CAAA,MAAA,CADwB,MACxB;;AAEA4pB,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAiBC,WAAAA,IAAe;AAC9B,sBAAI,KAAJ,SAAA,EAAoB;AAAA;AADU;;AAI9B,wBAJ8B,WAI9B;AAJFD,iBAAAA;AAHFA,eAAAA;AAjCFjL,aAAAA;AA6CAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,oBAAAA,EAAwCjH,IAAAA,IAAQ;AAC9C,oBAAMoS,iBAAAA,GADwC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAC9C;AACA,oBAAMC,UAAAA,GAAa,KAF2B,WAE9C;AACAA,cAAAA,UAAAA,CAAAA,YAAAA,CAAAA,IAAAA,CAA6B,MAAM;AAGjC,oBAAI,CAACA,UAAAA,CAAD,oBAAA,IAAoC,CAACA,UAAAA,CAAzC,gBAAA,EAAsE;AACpE,sBAAI,KAAA,aAAA,IAAsB3H,WAAAA,CAA1B,UAAA,EAAkD;AAChDA,oBAAAA,WAAAA,CAAAA,UAAAA,CAAuB,KADyB,aAChDA;AAFkE;;AAIpE2H,kBAAAA,UAAAA,CAAAA,UAAAA,GAAwBN,GAAAA,IAAO;AAC7B,wBAAIrH,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,sBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrBsH,wBAAAA,MAAAA,EAAQD,GAAAA,CADa,MAAA;AAErBE,wBAAAA,KAAAA,EAAOF,GAAAA,CAFc;AAAA,uBAAvBrH;AAF2B;AAA/B2H,mBAAAA;AAP+B;;AAiBjCD,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AACxBE,kBAAAA,oBAAAA,EAAsBD,UAAAA,CADE,oBAAA;AAExBE,kBAAAA,gBAAAA,EAAkBF,UAAAA,CAFM,gBAAA;AAGxBG,kBAAAA,aAAAA,EAAeH,UAAAA,CAHS;AAAA,iBAA1BD;AAjBFC,eAAAA,EAsBGD,iBAAAA,CAzB2C,MAG9CC;AAwBA,qBAAOD,iBAAAA,CA3BuC,OA2B9C;AA3BFnL,aAAAA;AA8BAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,gBAAAA,EAAoC,CAAA,IAAA,EAAA,IAAA,KAAgB;AAClD/d,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KADFA,cAAAA,EADkD,sDAClDA;;AAIA,oBAAMupB,WAAAA,GAAc,KAAA,cAAA,CAAA,cAAA,CAClBzS,IAAAA,CADkB,KAAA,EAElBA,IAAAA,CAPgD,GAK9B,CAApB;;AAeA,kBAAI,CAAJ,WAAA,EAAkB;AAChBkS,gBAAAA,IAAAA,CADgB,KAChBA;AADgB;AApBgC;;AAyBlDA,cAAAA,IAAAA,CAAAA,MAAAA,GAAc,MAAM;AAClBO,gBAAAA,WAAAA,CAAAA,IAAAA,GAAAA,IAAAA,CAEQ,UAAU;AAAA,kBAAA,KAAA;AAAV,kBAAA;AAAU,iBAAV,EAA2B;AAC/B,sBAAA,IAAA,EAAU;AACRP,oBAAAA,IAAAA,CADQ,KACRA;AADQ;AADqB;;AAK/BhpB,mBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACEqc,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EADFrc,KACEqc,CADFrc,EAL+B,2CAK/BA;AAIAgpB,kBAAAA,IAAAA,CAAAA,OAAAA,CAAa,IAAA,UAAA,CAAbA,KAAa,CAAbA,EAAAA,CAAAA,EAAuC,CATR,KASQ,CAAvCA;AAXJO,iBAAAA,EAAAA,KAAAA,CAaSnqB,MAAAA,IAAU;AACf4pB,kBAAAA,IAAAA,CAAAA,KAAAA,CADe,MACfA;AAdJO,iBAAAA;AADFP,eAAAA;;AAmBAA,cAAAA,IAAAA,CAAAA,QAAAA,GAAgB5pB,MAAAA,IAAU;AACxBmqB,gBAAAA,WAAAA,CAAAA,MAAAA,CADwB,MACxBA;AAEAP,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAiBC,WAAAA,IAAe;AAC9B,sBAAI,KAAJ,SAAA,EAAoB;AAAA;AADU;;AAI9B,wBAJ8B,WAI9B;AAJFD,iBAAAA;AAHFA,eAAAA;AA5CFjL,aAAAA;AAwDAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,QAAAA,EAA4B,CAAC;AAAD,cAAA;AAAC,aAAD,KAAiB;AAC3C,mBAAA,SAAA,GAAiByL,OAAAA,CAD0B,QAC3C;;AACAhI,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAgC,IAAA,gBAAA,CAAA,OAAA,EAFW,IAEX,CAAhCA;AAFFzD,aAAAA;AAKAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,cAAAA,EAAkC,UAAA,EAAA,EAAc;AAC9C,kBAD8C,MAC9C;;AACA,sBAAQ0L,EAAAA,CAAR,IAAA;AACE,qBAAA,mBAAA;AACErqB,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,iBAAA,CAAsBqqB,EAAAA,CAAtB,OAAA,EAAkCA,EAAAA,CAD7C,IACW,CAATrqB;AAFJ;;AAIE,qBAAA,qBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,mBAAA,CAAwBqqB,EAAAA,CADnC,OACW,CAATrqB;AALJ;;AAOE,qBAAA,qBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,mBAAA,CAAwBqqB,EAAAA,CADnC,OACW,CAATrqB;AARJ;;AAUE,qBAAA,6BAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,2BAAA,CAAgCqqB,EAAAA,CAAhC,OAAA,EAA4CA,EAAAA,CADvD,MACW,CAATrqB;AAXJ;;AAaE,qBAAA,uBAAA;AACEA,kBAAAA,MAAAA,GAAS,IAAA,KAAA,CAAA,qBAAA,CAA0BqqB,EAAAA,CAA1B,OAAA,EAAsCA,EAAAA,CADjD,OACW,CAATrqB;AAdJ;AAAA;;AAiBA,kBAAI,EAAE,MAAA,YAAN,KAAI,CAAJ,EAAgC;AAC9B,sBAAMsqB,GAAAA,GADwB,wCAC9B;AAOE/mB,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAR4B,GAQ5BA;AA3B0C;;AA8B9C6e,cAAAA,WAAAA,CAAAA,WAAAA,CAAAA,MAAAA,CA9B8C,MA8B9CA;AA9BFzD,aAAAA;AAiCAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,iBAAAA,EAAqC4L,SAAAA,IAAa;AAChD,mBAAA,mBAAA,GADgD,CAAA,GAAA,KAAA,CAAA,uBAAA,GAChD;;AAEA,kBAAInI,WAAAA,CAAJ,UAAA,EAA4B;AAC1B,sBAAMoI,cAAAA,GAAiBxL,QAAAA,IAAY;AACjC,uBAAA,mBAAA,CAAA,OAAA,CAAiC;AADA,oBAAA;AACA,mBAAjC;AADF,iBAAA;;AAKA,oBAAI;AACFoD,kBAAAA,WAAAA,CAAAA,UAAAA,CAAAA,cAAAA,EAAuCmI,SAAAA,CADrC,IACFnI;AADF,iBAAA,CAEE,OAAA,EAAA,EAAW;AACX,uBAAA,mBAAA,CAAA,MAAA,CADW,EACX;AATwB;AAA5B,eAAA,MAWO;AACL,qBAAA,mBAAA,CAAA,MAAA,CACE,IAAA,KAAA,CAAA,iBAAA,CAAsBmI,SAAAA,CAAtB,OAAA,EAAyCA,SAAAA,CAFtC,IAEH,CADF;AAf8C;;AAmBhD,qBAAO,KAAA,mBAAA,CAnByC,OAmBhD;AAnBF5L,aAAAA;AAsBAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,YAAAA,EAAgCjH,IAAAA,IAAQ;AAGtC,kBAAI0K,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrBsH,kBAAAA,MAAAA,EAAQhS,IAAAA,CADa,MAAA;AAErBiS,kBAAAA,KAAAA,EAAOjS,IAAAA,CAFc;AAAA,iBAAvB0K;AAJoC;;AAStC,mBAAA,sBAAA,CAAA,OAAA,CATsC,IAStC;AATFzD,aAAAA;AAYAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,iBAAAA,EAAqCjH,IAAAA,IAAQ;AAC3C,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADuB;;AAK3C,oBAAM0R,IAAAA,GAAO,KAAA,SAAA,CAAe1R,IAAAA,CALe,SAK9B,CAAb;;AACA0R,cAAAA,IAAAA,CAAAA,gBAAAA,CAAsB1R,IAAAA,CAAtB0R,YAAAA,EAAyC1R,IAAAA,CANE,MAM3C0R;AANFzK,aAAAA;AASAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,WAAAA,EAA+BjH,IAAAA,IAAQ;AAAA;;AACrC,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADiB;;AAKrC,oBAAM,CAAA,EAAA,EAAA,IAAA,EAAA,YAAA,IAL+B,IAKrC;;AACA,kBAAI,KAAA,UAAA,CAAA,GAAA,CAAJ,EAAI,CAAJ,EAA6B;AAAA;AANQ;;AAUrC,sBAAA,IAAA;AACE,qBAAA,MAAA;AACE,wBAAMyF,MAAAA,GAAS,KADjB,OACE;;AAEA,sBAAI,WAAJ,YAAA,EAA6B;AAC3B,0BAAMsN,aAAAA,GAAgBC,YAAAA,CADK,KAC3B;AACAnnB,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,8BAFsB,aAAA,EAE3BA;AACA,yBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EAH2B,aAG3B;AAH2B;AAH/B;;AAUE,sBAAIonB,YAAAA,GAVN,IAUE;;AACA,sBAAIxN,MAAAA,CAAAA,MAAAA,8BAAiB5d,UAAAA,CAAAA,aAAjB4d,0DAAiB5d,sBAArB,OAAI4d,CAAJ,EAAwD;AACtDwN,oBAAAA,YAAAA,GAAe;AACbC,sBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwB;AACtBrrB,wBAAAA,UAAAA,CAAAA,aAAAA,CAAAA,SAAAA,CAAAA,IAAAA,EADsB,GACtBA;AAFW;;AAAA,qBAAforB;AAZJ;;AAkBE,wBAAMzV,IAAAA,GAAO,IAAA,YAAA,CAAA,cAAA,CAAA,YAAA,EAAiC;AAC5CmD,oBAAAA,eAAAA,EAAiB8E,MAAAA,CAD2B,eAAA;AAE5CgC,oBAAAA,eAAAA,EAAiBhC,MAAAA,CAF2B,eAAA;AAG5CmC,oBAAAA,YAAAA,EAAcnC,MAAAA,CAH8B,YAAA;AAI5C+L,oBAAAA,oBAAAA,EAAsB,KAAA,qBAAA,CAAA,IAAA,CAJsB,IAItB,CAJsB;AAAA,oBAAA;AAAA,mBAAjC,CAAb;AAQA,uBAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAESlpB,MAAAA,IAAU;AACf,2BAAO2e,cAAAA,CAAAA,eAAAA,CAAAA,cAAAA,EAA+C;AADvC,sBAAA;AACuC,qBAA/CA,CAAP;AAHJ,mBAAA,EAAA,OAAA,CAKW,MAAM;AACb,wBAAI,CAACxB,MAAAA,CAAD,mBAAA,IAA+BjI,IAAAA,CAAnC,IAAA,EAA8C;AAM5CA,sBAAAA,IAAAA,CAAAA,IAAAA,GAN4C,IAM5CA;AAPW;;AASb,yBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EATa,IASb;AAdJ,mBAAA;AA3BJ;;AA4CE,qBA5CF,UA4CE;AACA,qBAAA,OAAA;AACE,uBAAA,UAAA,CAAA,OAAA,CAAA,EAAA,EADF,YACE;AA9CJ;;AAgDE;AACE,wBAAM,IAAA,KAAA,CAAU,kCAjDpB,IAAA,EAiDU,CAAN;AAjDJ;AAVFyJ,aAAAA;AA+DAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyBjH,IAAAA,IAAQ;AAAA;;AAC/B,kBAAI,KAAJ,SAAA,EAAoB;AAElB,uBAFkB,SAElB;AAH6B;;AAM/B,oBAAM,CAAA,EAAA,EAAA,SAAA,EAAA,IAAA,EAAA,SAAA,IANyB,IAM/B;AACA,oBAAMmT,SAAAA,GAAY,KAAA,SAAA,CAPa,SAOb,CAAlB;;AACA,kBAAIA,SAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAJ,EAAIA,CAAJ,EAA4B;AAC1B,uBAD0B,SAC1B;AAT6B;;AAY/B,sBAAA,IAAA;AACE,qBAAA,OAAA;AACEA,kBAAAA,SAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EADF,SACEA;AAGA,wBAAMC,uBAAAA,GAJR,OAIE;;AACA,sBAAIC,CAAAA,SAAAA,SAAAA,IAAAA,SAAAA,WAAAA,+BAAAA,SAAAA,CAAAA,IAAAA,oEAAAA,MAAAA,IAAJ,uBAAA,EAAuD;AACrDF,oBAAAA,SAAAA,CAAAA,kBAAAA,GADqD,IACrDA;AANJ;;AADF;;AAUE;AACE,wBAAM,IAAA,KAAA,CAAU,2BAXpB,IAAA,EAWU,CAAN;AAXJ;;AAaA,qBAzB+B,SAyB/B;AAzBFlM,aAAAA;AA4BAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,aAAAA,EAAiCjH,IAAAA,IAAQ;AACvC,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADmB;;AAKvC,kBAAI0K,WAAAA,CAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AACrBsH,kBAAAA,MAAAA,EAAQhS,IAAAA,CADa,MAAA;AAErBiS,kBAAAA,KAAAA,EAAOjS,IAAAA,CAFc;AAAA,iBAAvB0K;AANqC;AAAzCzD,aAAAA;AAaAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,oBAAAA,EAEE,KAAA,qBAAA,CAAA,IAAA,CAjUkB,IAiUlB,CAFFA;AAKAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,kBAAAA,EAAsC,CAAA,IAAA,EAAA,IAAA,KAAgB;AACpD,kBAAI,KAAJ,SAAA,EAAoB;AAClBiL,gBAAAA,IAAAA,CAAAA,KAAAA,CAAW,IAAA,KAAA,CADO,sBACP,CAAXA;AADkB;AADgC;;AAKpD,kBAAIoB,OAAAA,GALgD,KAKpD;;AAEApB,cAAAA,IAAAA,CAAAA,MAAAA,GAAc,MAAM;AAClB,oBAAA,OAAA,EAAa;AACXA,kBAAAA,IAAAA,CADW,KACXA;AADW;AADK;;AAKlBoB,gBAAAA,OAAAA,GALkB,IAKlBA;AAEA,qBAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,CACQ,UAAA,WAAA,EAAuB;AAC3BpB,kBAAAA,IAAAA,CAAAA,OAAAA,CAAAA,WAAAA,EAAAA,CAAAA,EAA6B,CAACqB,WAAAA,CAAAA,QAAAA,CADH,MACE,CAA7BrB;AAFJ,iBAAA,EAAA,KAAA,CAIS,UAAA,MAAA,EAAkB;AACvBA,kBAAAA,IAAAA,CAAAA,KAAAA,CADuB,MACvBA;AALJ,iBAAA;AAPFA,eAAAA;AAPFjL,aAAAA;AAlakB;;AA2bpBuM,UAAAA,qBAAAA,CAAsB;AAAtBA,YAAAA;AAAsB,WAAtBA,EAAqC;AACnC,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AADe;;AAInC,gBAAI,KAAA,WAAA,CAAJ,oBAAA,EAA2C;AACzC,mBAAA,WAAA,CAAA,oBAAA,CADyC,SACzC;AALiC;AA3bjB;;AAocpBpJ,UAAAA,OAAAA,GAAU;AACR,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EADC,IACD,CAAP;AArckB;;AAwcpBjB,UAAAA,OAAAA,CAAAA,UAAAA,EAAoB;AAClB,gBACE,CAACzK,MAAAA,CAAAA,SAAAA,CAAD,UAACA,CAAD,IACAsM,UAAAA,IADA,CAAA,IAEAA,UAAAA,GAAa,KAHf,SAAA,EAIE;AACA,qBAAO7D,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADtB,sBACsB,CAAfA,CAAP;AANgB;;AASlB,kBAAMsF,SAAAA,GAAYzB,UAAAA,GATA,CASlB;;AACA,gBAAIyB,SAAAA,IAAa,KAAjB,YAAA,EAAoC;AAClC,qBAAO,KAAA,YAAA,CAD2B,SAC3B,CAAP;AAXgB;;AAalB,kBAAMxE,OAAAA,GAAU,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EACc;AADd,cAAA;AACc,aADd,EAAA,IAAA,CAIRwL,QAAAA,IAAY;AAChB,kBAAI,KAAJ,SAAA,EAAoB;AAClB,sBAAM,IAAA,KAAA,CADY,qBACZ,CAAN;AAFc;;AAIhB,oBAAM/B,IAAAA,GAAO,IAAA,YAAA,CAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAIX,KAAA,OAAA,CAJW,aAAA,EAKX,KAAA,OAAA,CATc,MAIH,CAAb;AAOA,mBAAA,SAAA,CAAA,SAAA,IAXgB,IAWhB;AACA,qBAZgB,IAYhB;AAhBJ,aAAgB,CAAhB;AAkBA,iBAAA,YAAA,CAAA,SAAA,IA/BkB,OA+BlB;AACA,mBAhCkB,OAgClB;AAxekB;;AA2epBtI,UAAAA,YAAAA,CAAAA,GAAAA,EAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EAC4B;AAD5B,cAAA;AAC4B,aAD5B,EAAA,KAAA,CAIE,UAAA,MAAA,EAAkB;AACvB,qBAAOjC,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADC,MACD,CAAfA,CAAP;AALJ,aAAO,CAAP;AA5ekB;;AAqfpBmE,UAAAA,cAAAA,CAAAA,SAAAA,EAAAA,MAAAA,EAAkC;AAChC,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EAAsD;AAAA,cAAA,SAAA;AAAA,cAAA;AAAA,aAAtD,CAAP;AAtfkB;;AA4fpBX,UAAAA,YAAAA,CAAAA,iBAAAA,EAAgC;AAAA;;AAC9B,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EAC4B;AAC/B3B,cAAAA,QAAAA,EAAU,KADqB,SAAA;AAE/BD,cAAAA,iBAAAA,EAAmBA,CAAAA,iBAAAA,SAAAA,IAAAA,iBAAAA,WAAAA,YAAAA,iBAAAA,CAAAA,YAAAA,KAFY,IAAA;AAG/B2K,cAAAA,QAAAA,EAAU,2BAAA,WAAA,wEAAA,QAAA,KAHqB;AAAA,aAD5B,EAAA,OAAA,CAMI,MAAM;AACb,kBAAA,iBAAA,EAAuB;AACrB3K,gBAAAA,iBAAAA,CADqB,aACrBA;AAFW;AANjB,aAAO,CAAP;AA7fkB;;AA0gBpB6B,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EADS,IACT,CAAP;AA3gBkB;;AA8gBpBC,UAAAA,YAAAA,GAAe;AACb,mBAAQ,KAAR,oBAAQ,KAAA,KAAR,oBAAQ,GAA8B,KAAA,cAAA,CAAA,eAAA,CAAA,cAAA,EADzB,IACyB,CAA9B,CAAR;AA/gBkB;;AAqhBpBC,UAAAA,sBAAAA,GAAyB;AACvB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,wBAAA,EADgB,IAChB,CAAP;AAthBkB;;AAyhBpBzB,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EADS,IACT,CAAP;AA1hBkB;;AA6hBpBC,UAAAA,cAAAA,CAAAA,EAAAA,EAAmB;AACjB,gBAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAC1B,qBAAOnC,OAAAA,CAAAA,MAAAA,CAAe,IAAA,KAAA,CADI,8BACJ,CAAfA,CAAP;AAFe;;AAIjB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EAAsD;AAJ5C,cAAA;AAI4C,aAAtD,CAAP;AAjiBkB;;AAsiBpBoC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AAviBkB;;AA0iBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AA3iBkB;;AA8iBpBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EADK,IACL,CAAP;AA/iBkB;;AAkjBpBC,UAAAA,oBAAAA,GAAuB;AACrB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,sBAAA,EADc,IACd,CAAP;AAnjBkB;;AAsjBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AAvjBkB;;AA0jBpBC,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EADQ,IACR,CAAP;AA3jBkB;;AA8jBpBC,UAAAA,aAAAA,GAAgB;AACd,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,eAAA,EADO,IACP,CAAP;AA/jBkB;;AAkkBpB8J,UAAAA,eAAAA,GAAkB;AAChB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,iBAAA,EADS,IACT,CAAP;AAnkBkB;;AAskBpBC,UAAAA,gBAAAA,CAAAA,SAAAA,EAA4B;AAC1B,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,kBAAA,EAAwD;AADrC,cAAA;AACqC,aAAxD,CAAP;AAvkBkB;;AA4kBpBC,UAAAA,UAAAA,CAAAA,SAAAA,EAAsB;AACpB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,YAAA,EAAkD;AADrC,cAAA;AACqC,aAAlD,CAAP;AA7kBkB;;AAklBpB9J,UAAAA,UAAAA,GAAa;AACX,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,YAAA,EADI,IACJ,CAAP;AAnlBkB;;AAslBpBC,UAAAA,wBAAAA,GAA2B;AACzB,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,0BAAA,EAAA,IAAA,EAAA,IAAA,CAEC8J,OAAAA,IAAW;AACf,qBAAO,IAAA,wBAAA,CAAA,qBAAA,CADQ,OACR,CAAP;AAHJ,aAAO,CAAP;AAvlBkB;;AA8lBpB7J,UAAAA,cAAAA,GAAiB;AACf,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,gBAAA,EADQ,IACR,CAAP;AA/lBkB;;AAkmBpBC,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EAAA,IAAA,EAAA,IAAA,CAEC4J,OAAAA,IAAW;AAAA;;AACf,qBAAO;AACL7C,gBAAAA,IAAAA,EAAM6C,OAAAA,CADD,CACCA,CADD;AAELC,gBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,GAAa,IAAA,SAAA,CAAA,QAAA,CAAaA,OAAAA,CAA1BA,CAA0BA,CAAb,CAAbA,GAFL,IAAA;AAGLnN,gBAAAA,0BAAAA,EAA4B,4BAAA,WAAA,0EAAA,QAAA,KAHvB,IAAA;AAIL6L,gBAAAA,aAAAA,EAAe,4BAAA,WAAA,0EAAA,aAAA,KAJV;AAAA,eAAP;AAHJ,aAAO,CAAP;AAnmBkB;;AA+mBpBrI,UAAAA,WAAAA,GAAc;AACZ,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,aAAA,EADK,IACL,CAAP;AAhnBkB;;AAmnBpBG,UAAAA,QAAAA,GAAW;AACT,mBAAO,KAAA,cAAA,CAAA,eAAA,CAAA,UAAA,EADE,IACF,CAAP;AApnBkB;;AAunBpB,gBAAM0J,YAAN,CAAmBxJ,eAAAA,GAAnB,KAAA,EAA4C;AAC1C,kBAAM,KAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EADoC,IACpC,CAAN;;AAEA,gBAAI,KAAJ,SAAA,EAAoB;AAAA;AAHsB;;AAM1C,iBAAK,IAAIjf,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK,KAAA,SAAA,CAArB,MAAA,EAA4CC,CAAAA,GAA5C,EAAA,EAAoDA,CAApD,EAAA,EAAyD;AACvD,oBAAMmmB,IAAAA,GAAO,KAAA,SAAA,CAD0C,CAC1C,CAAb;;AACA,kBAAI,CAAJ,IAAA,EAAW;AAAA;AAF4C;;AAKvD,oBAAMuC,iBAAAA,GAAoBvC,IAAAA,CAL6B,OAK7BA,EAA1B;;AAEA,kBAAI,CAAJ,iBAAA,EAAwB;AACtB,sBAAM,IAAA,KAAA,CAAU,sBAAsBnmB,CAAAA,GADhB,CAAA,0BAChB,CAAN;AARqD;AANf;;AAiB1C,iBAAA,UAAA,CAjB0C,KAiB1C;;AACA,gBAAI,CAAJ,eAAA,EAAsB;AACpB,mBAAA,UAAA,CADoB,KACpB;AAnBwC;;AAqB1C,iBAAA,oBAAA,GArB0C,IAqB1C;AA5oBkB;;AA+oBpB,cAAIkf,aAAJ,GAAoB;AAClB,kBAAMhF,MAAAA,GAAS,KADG,OAClB;AACA,mBAAO,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,eAAA,EAA8B;AACnC8B,cAAAA,gBAAAA,EAAkB9B,MAAAA,CADiB,gBAAA;AAEnCgC,cAAAA,eAAAA,EAAiBhC,MAAAA,CAFkB;AAAA,aAA9B,CAAP;AAjpBkB;;AAAA;;AA8pBtB,cAAA,UAAA,CAAiB;AACfre,UAAAA,WAAAA,GAAc;AACZ,iBAAA,KAAA,GAAa+E,MAAAA,CAAAA,MAAAA,CADD,IACCA,CAAb;AAFa;;AASf+nB,UAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,gBAAI,KAAA,KAAA,CAAJ,KAAI,CAAJ,EAAuB;AACrB,qBAAO,KAAA,KAAA,CADc,KACd,CAAP;AAFc;;AAIhB,mBAAQ,KAAA,KAAA,CAAA,KAAA,IAAoB;AAC1BpQ,cAAAA,UAAAA,EAD0B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAAA;AAE1B9D,cAAAA,IAAAA,EAF0B,IAAA;AAG1BmU,cAAAA,QAAAA,EAH0B;AAAA,aAA5B;AAba;;AA4BfnQ,UAAAA,GAAAA,CAAAA,KAAAA,EAAW6I,QAAAA,GAAX7I,IAAAA,EAA4B;AAG1B,gBAAA,QAAA,EAAc;AACZ,mBAAA,UAAA,CAAA,KAAA,EAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CADY,QACZ;;AACA,qBAFY,IAEZ;AALwB;;AAS1B,kBAAM5D,GAAAA,GAAM,KAAA,KAAA,CATc,KASd,CAAZ;;AAGA,gBAAI,CAAA,GAAA,IAAQ,CAACA,GAAAA,CAAb,QAAA,EAA2B;AACzB,oBAAM,IAAA,KAAA,CAAU,6CADS,KAAA,GACnB,CAAN;AAbwB;;AAe1B,mBAAOA,GAAAA,CAfmB,IAe1B;AA3Ca;;AA8CfgU,UAAAA,GAAAA,CAAAA,KAAAA,EAAW;AACT,kBAAMhU,GAAAA,GAAM,KAAA,KAAA,CADH,KACG,CAAZ;AACA,mBAAOA,CAAAA,GAAAA,SAAAA,IAAAA,GAAAA,WAAAA,YAAAA,GAAAA,CAAAA,QAAAA,KAFE,KAET;AAhDa;;AAsDfpX,UAAAA,OAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAAqB;AACnB,kBAAMoX,GAAAA,GAAM,KAAA,UAAA,CADO,KACP,CAAZ;;AAEAA,YAAAA,GAAAA,CAAAA,QAAAA,GAHmB,IAGnBA;AACAA,YAAAA,GAAAA,CAAAA,IAAAA,GAJmB,IAInBA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CALmB,IAKnBA;AA3Da;;AA8DfiU,UAAAA,KAAAA,GAAQ;AACN,iBAAA,KAAA,GAAaloB,MAAAA,CAAAA,MAAAA,CADP,IACOA,CAAb;AA/Da;;AAAA;;AAsEjB,cAAA,UAAA,CAAiB;AACf/E,UAAAA,WAAAA,CAAAA,kBAAAA,EAAgC;AAC9B,iBAAA,mBAAA,GAD8B,kBAC9B;AAQA,iBAAA,UAAA,GAT8B,IAS9B;AAVa;;AAiBf,cAAI6gB,OAAJ,GAAc;AACZ,mBAAO,KAAA,mBAAA,CAAA,UAAA,CADK,OACZ;AAlBa;;AA0BfqM,UAAAA,MAAAA,GAAS;AACP,iBAAA,mBAAA,CADO,MACP;AA3Ba;;AAAA;;AAmCjB,cAAMC,kBAAAA,GAAsB,SAAA,yBAAA,GAAqC;AAC/D,gBAAMC,iBAAAA,GAAoB,IADqC,OACrC,EAA1B;;AAGA,gBAAA,kBAAA,CAAyB;AACvBptB,YAAAA,WAAAA,CAAY;AAAA,cAAA,QAAA;AAAA,cAAA,MAAA;AAAA,cAAA,IAAA;AAAA,cAAA,UAAA;AAAA,cAAA,YAAA;AAAA,cAAA,SAAA;AAAA,cAAA,aAAA;AAAA,cAAA,YAAA;AASV6lB,cAAAA,wBAAAA,GATU,KAAA;AAUVlC,cAAAA,MAAAA,GAVF3jB;AAAY,aAAZA,EAWG;AACD,mBAAA,QAAA,GADC,QACD;AACA,mBAAA,MAAA,GAFC,MAED;AACA,mBAAA,IAAA,GAHC,IAGD;AACA,mBAAA,UAAA,GAJC,UAID;AACA,mBAAA,eAAA,GALC,IAKD;AACA,mBAAA,YAAA,GANC,YAMD;AACA,mBAAA,UAAA,GAPC,SAOD;AACA,mBAAA,aAAA,GARC,aAQD;AACA,mBAAA,YAAA,GATC,YASD;AACA,mBAAA,OAAA,GAVC,MAUD;AAEA,mBAAA,OAAA,GAZC,KAYD;AACA,mBAAA,qBAAA,GAbC,IAaD;AACA,mBAAA,aAAA,GAdC,KAcD;AACA,mBAAA,yBAAA,GACE6lB,wBAAAA,KAAAA,IAAAA,IAAqC,OAAA,MAAA,KAhBtC,WAeD;AAEA,mBAAA,SAAA,GAjBC,KAiBD;AACA,mBAAA,UAAA,GAlBC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAkBD;AACA,mBAAA,IAAA,GAAY,IAAA,UAAA,CAnBX,IAmBW,CAAZ;AAEA,mBAAA,YAAA,GAAoB,KAAA,MAAA,CAAA,IAAA,CArBnB,IAqBmB,CAApB;AACA,mBAAA,cAAA,GAAsB,KAAA,SAAA,CAAA,IAAA,CAtBrB,IAsBqB,CAAtB;AACA,mBAAA,kBAAA,GAA0B,KAAA,aAAA,CAAA,IAAA,CAvBzB,IAuByB,CAA1B;AACA,mBAAA,UAAA,GAAkB,KAAA,KAAA,CAAA,IAAA,CAxBjB,IAwBiB,CAAlB;AACA,mBAAA,OAAA,GAAexH,MAAAA,CAAAA,aAAAA,CAzBd,MAyBD;AArCqB;;AAwCvB,gBAAIgP,SAAJ,GAAgB;AACd,qBAAO,KAAA,UAAA,CAAA,OAAA,CAAA,KAAA,CAA8B,YADvB,CACd,CAAO,CAAP;AAzCqB;;AA+CvBC,YAAAA,kBAAAA,CAAmB;AAAEC,cAAAA,YAAAA,GAAF,KAAA;AAAnBD,cAAAA;AAAmB,aAAnBA,EAAoE;AAAA;;AAClE,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AAD8C;;AAIlE,kBAAI,KAAJ,OAAA,EAAkB;AAChB,oBAAIF,iBAAAA,CAAAA,GAAAA,CAAsB,KAA1B,OAAIA,CAAJ,EAAyC;AACvC,wBAAM,IAAA,KAAA,CACJ,qEAAA,0DAAA,GAFqC,yBACjC,CAAN;AAFc;;AAQhBA,gBAAAA,iBAAAA,CAAAA,GAAAA,CAAsB,KARN,OAQhBA;AAZgE;;AAelE,kBAAI,KAAA,OAAA,8BAAgB3sB,UAAAA,CAAAA,cAAhB,0DAAgBA,sBAApB,OAAI,CAAJ,EAAwD;AACtD,qBAAA,OAAA,GAAeA,UAAAA,CAAAA,cAAAA,CAAAA,MAAAA,CAAiC,KADM,UACvCA,CAAf;AACA,qBAAA,OAAA,CAAA,IAAA,CAAkB,KAFoC,YAEtD;AACA,qBAAA,OAAA,CAAA,cAAA,GAA8B,KAAA,OAAA,CAHwB,iBAGxB,EAA9B;AAlBgE;;AAoBlE,oBAAM;AAAA,gBAAA,aAAA;AAAA,gBAAA,QAAA;AAAA,gBAAA,SAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA;AAAA,kBAMF,KA1B8D,MAoBlE;AAQA,mBAAA,GAAA,GAAW,IAAA,OAAA,CAAA,cAAA,CAAA,aAAA,EAET,KAFS,UAAA,EAGT,KAHS,IAAA,EAIT,KAJS,aAAA,EAKT,KALS,YAAA,EAAA,UAAA,EA5BuD,qBA4BvD,CAAX;AASA,mBAAA,GAAA,CAAA,YAAA,CAAsB;AAAA,gBAAA,SAAA;AAAA,gBAAA,QAAA;AAAA,gBAAA,YAAA;AAAA,gBAAA;AAAA,eAAtB;AAMA,mBAAA,eAAA,GA3CkE,CA2ClE;AACA,mBAAA,aAAA,GA5CkE,IA4ClE;;AACA,kBAAI,KAAJ,qBAAA,EAAgC;AAC9B,qBAD8B,qBAC9B;AA9CgE;AA/C7C;;AAiGvBysB,YAAAA,MAAAA,CAAO3H,KAAAA,GAAP2H,IAAAA,EAAqB;AACnB,mBAAA,OAAA,GADmB,KACnB;AACA,mBAAA,SAAA,GAFmB,IAEnB;;AACA,kBAAI,KAAJ,GAAA,EAAc;AACZ,qBAAA,GAAA,CADY,UACZ;AAJiB;;AAMnB,kBAAI,KAAJ,OAAA,EAAkB;AAChBE,gBAAAA,iBAAAA,CAAAA,MAAAA,CAAyB,KADT,OAChBA;AAPiB;;AASnB,mBAAA,QAAA,CACE7H,KAAAA,IACE,IAAA,cAAA,CAAA,2BAAA,CACE,6BAA6B,KAAA,UAAA,GAD/B,CAAA,EAAA,EAXe,QAWf,CAFJ;AA1GqB;;AAmHvBiI,YAAAA,mBAAAA,GAAsB;AACpB,kBAAI,CAAC,KAAL,aAAA,EAAyB;AACvB,oBAAI,CAAC,KAAL,qBAAA,EAAiC;AAC/B,uBAAA,qBAAA,GAA6B,KADE,cAC/B;AAFqB;;AAAA;AADL;;AAQpB,kBAAI,KAAJ,OAAA,EAAkB;AAChB,qBAAA,OAAA,CAAA,kBAAA,CAAgC,KADhB,YAChB;AATkB;;AAYpB,kBAAI,KAAJ,OAAA,EAAkB;AAAA;AAZE;;AAepB,mBAfoB,SAepB;AAlIqB;;AAqIvBC,YAAAA,SAAAA,GAAY;AACV,mBAAA,OAAA,GADU,IACV;;AACA,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AAFV;;AAKV,kBAAI,KAAA,IAAA,CAAJ,UAAA,EAA0B;AACxB,qBAAA,IAAA,CAAA,UAAA,CAAqB,KADG,kBACxB;AADF,eAAA,MAEO;AACL,qBADK,aACL;AARQ;AArIW;;AAiJvBC,YAAAA,aAAAA,GAAgB;AACd,kBAAI,KAAJ,yBAAA,EAAoC;AAClClP,gBAAAA,MAAAA,CAAAA,qBAAAA,CAA6B,MAAM;AACjC,uBAAA,UAAA,GAAA,KAAA,CAAwB,KADS,YACjC;AADFA,iBAAAA;AADF,eAAA,MAIO;AACLuB,gBAAAA,OAAAA,CAAAA,OAAAA,GAAAA,IAAAA,CAAuB,KAAvBA,UAAAA,EAAAA,KAAAA,CAA8C,KADzC,YACLA;AANY;AAjJO;;AA2JvB,kBAAM4N,KAAN,GAAc;AACZ,kBAAI,KAAJ,SAAA,EAAoB;AAAA;AADR;;AAIZ,mBAAA,eAAA,GAAuB,KAAA,GAAA,CAAA,mBAAA,CACrB,KADqB,YAAA,EAErB,KAFqB,eAAA,EAGrB,KAHqB,cAAA,EAIrB,KARU,OAIW,CAAvB;;AAMA,kBAAI,KAAA,eAAA,KAAyB,KAAA,YAAA,CAAA,SAAA,CAA7B,MAAA,EAAiE;AAC/D,qBAAA,OAAA,GAD+D,KAC/D;;AACA,oBAAI,KAAA,YAAA,CAAJ,SAAA,EAAiC;AAC/B,uBAAA,GAAA,CAD+B,UAC/B;;AACA,sBAAI,KAAJ,OAAA,EAAkB;AAChBP,oBAAAA,iBAAAA,CAAAA,MAAAA,CAAyB,KADT,OAChBA;AAH6B;;AAK/B,uBAL+B,QAK/B;AAP6D;AAVrD;AA3JS;;AAAA;;AAiLzB,iBArL+D,kBAqL/D;AArLF,SAA4B,EAA5B;;AAyLA,cAAMQ,OAAAA,GAnjGN,SAmjGA;;AAGA,cAAMC,KAAAA,GAtjGN,WAsjGA;;;;;;;;;;;;;ACviGA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAWA,cAAA,cAAA,CAAqB;AACnB7tB,UAAAA,WAAAA,CAAY;AAAA,YAAA,KAAA;AAAA,YAAA,oBAAA;AAGVQ,YAAAA,aAAAA,GAAgBC,UAAAA,CAHlBT;AAAY,WAAZA,EAIG;AACD,gBAAI,KAAA,WAAA,KAAJ,cAAA,EAAyC;AACvCC,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADuC,mCACvCA;AAFD;;AAID,iBAAA,KAAA,GAJC,KAID;AACA,iBAAA,qBAAA,GALC,oBAKD;AACA,iBAAA,SAAA,GANC,aAMD;AAEA,iBAAA,eAAA,GARC,EAQD;AACA,iBAAA,YAAA,GATC,IASD;AAdiB;;AAiBnB6tB,UAAAA,iBAAAA,CAAAA,cAAAA,EAAkC;AAChC,iBAAA,eAAA,CAAA,IAAA,CADgC,cAChC;;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAFgC,cAEhC;AAnBiB;;AAsBnBC,UAAAA,UAAAA,CAAAA,IAAAA,EAAiB;AACf,gBAAIC,YAAAA,GAAe,KADJ,YACf;;AACA,gBAAI,CAAJ,YAAA,EAAmB;AACjBA,cAAAA,YAAAA,GAAe,KAAA,YAAA,GAAoB,KAAA,SAAA,CAAA,aAAA,CADlB,OACkB,CAAnCA;AACAA,cAAAA,YAAAA,CAAAA,EAAAA,GAAkB,wBAAwB,KAFzB,KAAA,EAEjBA;;AACA,mBAAA,SAAA,CAAA,eAAA,CAAA,oBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,WAAA,CAHiB,YAGjB;AALa;;AAUf,kBAAMC,UAAAA,GAAaD,YAAAA,CAVJ,KAUf;AACAC,YAAAA,UAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EAA4BA,UAAAA,CAAAA,QAAAA,CAXb,MAWfA;AAjCiB;;AAoCnBhB,UAAAA,KAAAA,GAAQ;AACN,iBAAA,eAAA,CAAA,OAAA,CAA6BiB,cAAAA,IAAkB;AAC7C,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,CAD6C,cAC7C;AADF,aAAA;AAGA,iBAAA,eAAA,CAAA,MAAA,GAJM,CAIN;;AAEA,gBAAI,KAAJ,YAAA,EAAuB;AAErB,mBAAA,YAAA,CAFqB,MAErB;AACA,mBAAA,YAAA,GAHqB,IAGrB;AATI;AApCW;;AAiDnB,gBAAMC,IAAN,CAAA,IAAA,EAAiB;AAEf,gBAAI/X,IAAAA,CAAAA,QAAAA,IAAiBA,IAAAA,CAArB,WAAA,EAAuC;AAAA;AAFxB;;AAKfA,YAAAA,IAAAA,CAAAA,QAAAA,GALe,IAKfA;;AAEA,gBAAI,KAAJ,yBAAA,EAAoC;AAClC,oBAAM8X,cAAAA,GAAiB9X,IAAAA,CADW,oBACXA,EAAvB;;AACA,kBAAA,cAAA,EAAoB;AAClB,qBAAA,iBAAA,CADkB,cAClB;;AACA,oBAAI;AACF,wBAAM8X,cAAAA,CADJ,MACF;AADF,iBAAA,CAEE,OAAA,EAAA,EAAW;AACX,uBAAA,qBAAA,CAA2B;AACzBE,oBAAAA,SAAAA,EAAWtY,KAAAA,CAAAA,oBAAAA,CAFF;AACgB,mBAA3B;;AAGArR,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,wBAAwBypB,cAAAA,CAAxB,MAAA,OAJM,EAAA,IAIXzpB;AAGA2R,kBAAAA,IAAAA,CAAAA,eAAAA,GAPW,IAOXA;AACA,wBARW,EAQX;AAZgB;AAFc;;AAAA;AAPrB;;AA4Bf,kBAAMiY,IAAAA,GAAOjY,IAAAA,CA5BE,kBA4BFA,EAAb;;AACA,gBAAA,IAAA,EAAU;AACR,mBAAA,UAAA,CADQ,IACR;;AAEA,kBAAI,KAAJ,0BAAA,EAAqC;AAAA;AAH7B;;AAMR,oBAAM,IAAA,OAAA,CAAYxU,OAAAA,IAAW;AAC3B,sBAAMF,OAAAA,GAAU,KAAA,qBAAA,CADW,OACX,CAAhB;;AACA,qBAAA,qBAAA,CAA2B,CAA3B,IAA2B,CAA3B,EAAmC,CAAnC,IAAmC,CAAnC,EAF2B,OAE3B;AAFF,eAAM,CAAN;AAnCa;AAjDE;;AA4FnB4sB,UAAAA,qBAAAA,CAAAA,QAAAA,EAAgC;AAC9BruB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD8B,0CAC9BA;AA7FiB;;AAgGnB,cAAIsuB,yBAAJ,GAAgC;AAAA;;AAC9B,mBAAOnV,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,2BAAAA,EAA0C,CAAC,qBAAC,KAAA,SAAD,oDAAC,gBADrB,KACoB,CAA3CA,CAAP;AAjGiB;;AAqGnB,cAAIoV,0BAAJ,GAAiC;AAC/BvuB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD+B,+CAC/BA;AAtGiB;;AA0GnB,cAAIwuB,aAAJ,GAAoB;AAClBxuB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADkB,kCAClBA;AA3GiB;;AA8GnByuB,UAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,WAAAA,EAAAA,OAAAA,EAAmD;AACjDzuB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADiD,0CACjDA;AA/GiB;;AAAA;;AAmHrB,YA7IA,UA6IA;;AAOO;AAGL0uB,UAAAA,OAAAA,CAAAA,UAAAA,GAAAA,UAAAA,GAAa,MAAA,iBAAA,SAAA,cAAA,CAA+C;AAC1D3uB,YAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,oBADkB,MAClB;AACA,mBAAA,cAAA,GAAsB;AACpB4uB,gBAAAA,QAAAA,EADoB,EAAA;AAEpBC,gBAAAA,aAAAA,EAFoB;AAAA,eAAtB;AAIA,mBAAA,cAAA,GANkB,CAMlB;AAPwD;;AAU1D,gBAAIL,0BAAJ,GAAiC;AAC/B,kBAAIM,SAAAA,GAD2B,KAC/B;;AAEE,kBAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AAEpCA,gBAAAA,SAAAA,GAFoC,IAEpCA;AAFF,eAAA,MAGO;AAGL,sBAAM7U,CAAAA,GAAI,mCAAA,IAAA,CACR8U,SAAAA,CAJG,SAGK,CAAV;;AAGA,oBAAI9U,CAAAA,CAAAA,SAAAA,IAAAA,CAAAA,WAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAJ,EAAA,EAAkB;AAChB6U,kBAAAA,SAAAA,GADgB,IAChBA;AAPG;AANsB;;AAkB/B,qBAAO1V,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,4BAAAA,EAlBwB,SAkBxBA,CAAP;AA5BwD;;AA+B1DkV,YAAAA,qBAAAA,CAAAA,QAAAA,EAAgC;AAC9B,uBAAA,eAAA,GAA2B;AACzBxsB,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO,CAACJ,OAAAA,CAARI,IAAAA,EADyB,2CACzBA;AACAJ,gBAAAA,OAAAA,CAAAA,IAAAA,GAFyB,IAEzBA;;AAGA,uBAAOf,OAAAA,CAAAA,QAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAA+BA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAtC,IAAA,EAAgE;AAC9D,wBAAMquB,YAAAA,GAAeruB,OAAAA,CAAAA,QAAAA,CADyC,KACzCA,EAArB;AACAsuB,kBAAAA,UAAAA,CAAWD,YAAAA,CAAXC,QAAAA,EAF8D,CAE9DA,CAAAA;AAPuB;AADG;;AAY9B,oBAAMtuB,OAAAA,GAAU,KAZc,cAY9B;AACA,oBAAMe,OAAAA,GAAU;AACduoB,gBAAAA,EAAAA,EAAI,sBAAsBtpB,OAAAA,CADZ,aACYA,EADZ,EAAA;AAEduuB,gBAAAA,IAAAA,EAFc,KAAA;AAGd5J,gBAAAA,QAAAA,EAHc,eAAA;AAAA,gBAAA;AAAA,eAAhB;AAMA3kB,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAnB8B,OAmB9BA;AACA,qBApB8B,OAoB9B;AAnDwD;;AAsD1D,gBAAI8tB,aAAJ,GAAoB;AAClB,oBAAMU,eAAAA,GAAkB,YAAY;AAGlC,uBAAOC,IAAAA,CACL,yEAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAAA,sEAAA,GAJgC,sEAG3BA,CAAP;AAHF,eAAA;;AA4BA,qBAAOhW,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,eAAAA,EAA8B+V,eA7BnB,EA6BX/V,CAAP;AAnFwD;;AAsF1DsV,YAAAA,qBAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAA6C;AAO3C,uBAAA,KAAA,CAAA,IAAA,EAAA,MAAA,EAA6B;AAC3B,uBACG9V,IAAAA,CAAAA,UAAAA,CAAAA,MAAAA,KAAD,EAACA,GACAA,IAAAA,CAAAA,UAAAA,CAAgByW,MAAAA,GAAhBzW,CAAAA,KADD,EAACA,GAEAA,IAAAA,CAAAA,UAAAA,CAAgByW,MAAAA,GAAhBzW,CAAAA,KAFD,CAACA,GAGAA,IAAAA,CAAAA,UAAAA,CAAgByW,MAAAA,GAAhBzW,CAAAA,IALwB,IAC3B;AARyC;;AAe3C,uBAAA,YAAA,CAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAiD;AAC/C,sBAAM0W,MAAAA,GAASC,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EADgC,MAChCA,CAAf;AACA,sBAAMC,MAAAA,GAASD,CAAAA,CAAAA,SAAAA,CAAYF,MAAAA,GAFoB,MAEhCE,CAAf;AACA,uBAAOD,MAAAA,GAAAA,MAAAA,GAHwC,MAG/C;AAlByC;;AAoB3C,kBAAA,CAAA,EApB2C,EAoB3C;;AAGA,oBAAM5uB,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CAvB4B,QAuB5B,CAAf;;AACAA,cAAAA,MAAAA,CAAAA,KAAAA,GAxB2C,CAwB3CA;AACAA,cAAAA,MAAAA,CAAAA,MAAAA,GAzB2C,CAyB3CA;AACA,oBAAM+uB,GAAAA,GAAM/uB,MAAAA,CAAAA,UAAAA,CA1B+B,IA0B/BA,CAAZ;AAEA,kBAAIgvB,MAAAA,GA5BuC,CA4B3C;;AACA,uBAAA,WAAA,CAAA,IAAA,EAAA,QAAA,EAAqC;AACnCA,gBAAAA,MADmC;;AAGnC,oBAAIA,MAAAA,GAAJ,EAAA,EAAiB;AACfjrB,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADe,8BACfA;AACAghB,kBAAAA,QAFe;AAAA;AAHkB;;AAQnCgK,gBAAAA,GAAAA,CAAAA,IAAAA,GAAW,UARwB,IAQnCA;AACAA,gBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EATmC,EASnCA;AACA,sBAAMxD,SAAAA,GAAYwD,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAViB,CAUjBA,CAAlB;;AACA,oBAAIxD,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAJ,CAAA,EAA2B;AACzBxG,kBAAAA,QADyB;AAAA;AAXQ;;AAenCwJ,gBAAAA,UAAAA,CAAWU,WAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAfwB,QAexBA,CAAXV,CAAAA;AA5CyC;;AA+C3C,oBAAMW,cAAAA,GAAiB,KAAK1qB,IAAAA,CAAL,GAAKA,EAAL,GAAkB,KA/CE,cA+CF,EA/CE,EA+C3C;AAMA,kBAAI0T,IAAAA,GAAO,KArDgC,aAqD3C;AACA,oBAAMiX,cAAAA,GAtDqC,GAsD3C;AACAjX,cAAAA,IAAAA,GAAOkX,YAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAGLF,cAAAA,CAHKE,MAAAA,EAvDoC,cAuDpCA,CAAPlX;AAOA,oBAAMmX,mBAAAA,GA9DqC,EA8D3C;AACA,oBAAMC,UAAAA,GA/DqC,UA+D3C;AACA,kBAAIC,QAAAA,GAAWC,KAAAA,CAAAA,IAAAA,EAhE4B,mBAgE5BA,CAAf;;AACA,mBAAK/rB,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK0rB,cAAAA,CAAAA,MAAAA,GAAjB,CAAA,EAA4CzrB,CAAAA,GAA5C,EAAA,EAAoDA,CAAAA,IAApD,CAAA,EAA4D;AAC1D8rB,gBAAAA,QAAAA,GAAYA,QAAAA,GAAAA,UAAAA,GAAwBC,KAAAA,CAAAA,cAAAA,EAAzB,CAAyBA,CAAxBD,GAD8C,CAC1DA;AAlEyC;;AAoE3C,kBAAI9rB,CAAAA,GAAIyrB,cAAAA,CAAR,MAAA,EAA+B;AAE7BK,gBAAAA,QAAAA,GACGA,QAAAA,GAAAA,UAAAA,GAAwBC,KAAAA,CAAMN,cAAAA,GAANM,KAAAA,EAAzB,CAAyBA,CAAxBD,GAH0B,CAE7BA;AAtEyC;;AAyE3CrX,cAAAA,IAAAA,GAAOkX,YAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAAA,CAAAA,EAA2CK,CAAAA,GAAAA,KAAAA,CAAAA,QAAAA,EAzEP,QAyEOA,CAA3CL,CAAPlX;AAEA,oBAAM7X,GAAAA,GAAM,iCAAiCqvB,IAAAA,CA3EF,IA2EEA,CA3EF,IA2E3C;AACA,oBAAM/B,IAAAA,GAAO,4BAAA,cAAA,SA5E8B,GAAA,GA4E3C;AACA,mBAAA,UAAA,CA7E2C,IA6E3C;AAEA,oBAAMgC,KAAAA,GA/EqC,EA+E3C;;AACA,mBAAKlsB,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAKosB,KAAAA,CAAjB,MAAA,EAA+BnsB,CAAAA,GAA/B,EAAA,EAAuCA,CAAvC,EAAA,EAA4C;AAC1CksB,gBAAAA,KAAAA,CAAAA,IAAAA,CAAWC,KAAAA,CAAAA,CAAAA,CAAAA,CAD+B,UAC1CD;AAjFyC;;AAmF3CA,cAAAA,KAAAA,CAAAA,IAAAA,CAnF2C,cAmF3CA;;AAEA,oBAAME,GAAAA,GAAM,KAAA,SAAA,CAAA,aAAA,CArF+B,KAqF/B,CAAZ;;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAtF2C,QAsF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAkBA,GAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAvFyB,MAuF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAxF2C,UAwF3CA;AACAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAgBA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAzF2B,KAyF3CA;;AAEA,mBAAKpsB,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAKmsB,KAAAA,CAAjB,MAAA,EAA+BlsB,CAAAA,GAA/B,EAAA,EAAuC,EAAvC,CAAA,EAA4C;AAC1C,sBAAMqsB,IAAAA,GAAO,KAAA,SAAA,CAAA,aAAA,CAD6B,MAC7B,CAAb;;AACAA,gBAAAA,IAAAA,CAAAA,WAAAA,GAF0C,IAE1CA;AACAA,gBAAAA,IAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAwBH,KAAAA,CAHkB,CAGlBA,CAAxBG;AACAD,gBAAAA,GAAAA,CAAAA,WAAAA,CAJ0C,IAI1CA;AA/FyC;;AAiG3C,mBAAA,SAAA,CAAA,IAAA,CAAA,WAAA,CAjG2C,GAiG3C;;AAEAZ,cAAAA,WAAAA,CAAAA,cAAAA,EAA4B,MAAM;AAChC,qBAAA,SAAA,CAAA,IAAA,CAAA,WAAA,CADgC,GAChC;;AACAjuB,gBAAAA,OAAAA,CAFgC,QAEhCA;AAFFiuB,eAAAA,CAAAA;AAzLwD;;AAAA,WAA5DhB;AAvJF;;AAyVA,cAAA,cAAA,CAAqB;AACnB3uB,UAAAA,WAAAA,CAAAA,cAAAA,EAEE;AACEuZ,YAAAA,eAAAA,GADF,IAAA;AAEE8G,YAAAA,eAAAA,GAFF,KAAA;AAGEG,YAAAA,YAAAA,GAHF,KAAA;AAAA,YAAA,oBAAA;AAKEqL,YAAAA,YAAAA,GAPJ7rB;AAEE,WAFFA,EASE;AACA,iBAAA,cAAA,GAAsB+E,MAAAA,CAAAA,MAAAA,CADtB,IACsBA,CAAtB;;AAEA,iBAAA,MAAA,CAAA,IAAA,cAAA,EAAgC;AAC9B,mBAAA,CAAA,IAAU0rB,cAAAA,CADoB,CACpBA,CAAV;AAJF;;AAMA,iBAAA,eAAA,GAAuBlX,eAAAA,KANvB,KAMA;AACA,iBAAA,eAAA,GAAuB8G,eAAAA,KAPvB,IAOA;AACA,iBAAA,YAAA,GAAoBG,YAAAA,KARpB,IAQA;AACA,iBAAA,qBAAA,GATA,oBASA;AACA,iBAAA,YAAA,GAVA,YAUA;AApBiB;;AAuBnBkQ,UAAAA,oBAAAA,GAAuB;AACrB,gBAAI,CAAC,KAAD,IAAA,IAAc,KAAlB,eAAA,EAAwC;AACtC,qBADsC,IACtC;AAFmB;;AAIrB,kBAAMxC,cAAAA,GAAiB,IAAA,QAAA,CAAa,KAAb,UAAA,EAA8B,KAA9B,IAAA,EAJF,EAIE,CAAvB;;AAEA,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,YAAA,CAAA,YAAA,CADqB,IACrB;AAPmB;;AASrB,mBATqB,cASrB;AAhCiB;;AAmCnByC,UAAAA,kBAAAA,GAAqB;AACnB,gBAAI,CAAC,KAAD,IAAA,IAAc,KAAlB,eAAA,EAAwC;AACtC,qBADsC,IACtC;AAFiB;;AAInB,kBAAM/X,IAAAA,GAAOgY,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,IAAA,UAAA,CAAe,KAJvB,IAIQ,CAAdA,CAAb;AAEA,kBAAM7vB,GAAAA,GAAM,YAAY,KAAZ,QAAA,WAAoCqvB,IAAAA,CAN7B,IAM6BA,CAN7B,IAMnB;AACA,kBAAM/B,IAAAA,GAAO,4BAA4B,KAA5B,UAAA,SAPM,GAAA,GAOnB;;AAEA,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,YAAA,CAAA,YAAA,CAAA,IAAA,EADqB,GACrB;AAViB;;AAYnB,mBAZmB,IAYnB;AA/CiB;;AAkDnBwC,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAkC;AAChC,gBAAI,KAAA,cAAA,CAAA,SAAA,MAAJ,SAAA,EAAkD;AAChD,qBAAO,KAAA,cAAA,CADyC,SACzC,CAAP;AAF8B;;AAKhC,gBAAA,IAAA,EALgC,OAKhC;;AACA,gBAAI;AACFC,cAAAA,IAAAA,GAAOpL,IAAAA,CAAAA,GAAAA,CAAS,KAAA,UAAA,GAAA,QAAA,GADd,SACKA,CAAPoL;AADF,aAAA,CAEE,OAAA,EAAA,EAAW;AACX,kBAAI,CAAC,KAAL,YAAA,EAAwB;AACtB,sBADsB,EACtB;AAFS;;AAIX,mBAAA,qBAAA,CAA2B;AACzB1C,gBAAAA,SAAAA,EAAWtY,KAAAA,CAAAA,oBAAAA,CALF;AAIgB,eAA3B;;AAGArR,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,2CAPM,EAAA,IAOXA;AAEA,qBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,UAAA,CAAA,EAAA,IAAA,EAT9B,CASX,CAAA;AAjB8B;;AAuBhC,gBAAI,KAAA,eAAA,IAAwB6U,KAAAA,CAAAA,qBAAAA,CAA5B,KAAA,EAAyD;AACvD,kBAAA,IAAA;AAAA,kBACEyX,EAAAA,GAFqD,EACvD;;AAEA,mBAAK,IAAI5sB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK4sB,IAAAA,CAArB,MAAA,EAAkC3sB,CAAAA,GAAlC,EAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7C6sB,gBAAAA,OAAAA,GAAUF,IAAAA,CADmC,CACnCA,CAAVE;;AAEA,oBAAIA,OAAAA,CAAAA,IAAAA,KAAJ,SAAA,EAAgC;AAC9BvJ,kBAAAA,IAAAA,GAAOuJ,OAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CADuB,GACvBA,CAAPvJ;AADF,iBAAA,MAEO;AACLA,kBAAAA,IAAAA,GADK,EACLA;AAN2C;;AAQ7CsJ,gBAAAA,EAAAA,IAAM,OAAOC,OAAAA,CAAP,GAAA,GAAA,GAAA,GAAA,IAAA,GARuC,MAQ7CD;AAXqD;;AAcvD,qBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,IAAA,QAAA,CAAA,GAAA,EAAA,MAAA,EAdc,EAcd,CAAzC;AArC8B;;AAyChC,mBAAQ,KAAA,cAAA,CAAA,SAAA,IAAiC,UAAA,CAAA,EAAA,IAAA,EAAmB;AAC1D,mBAAK,IAAI5sB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK4sB,IAAAA,CAArB,MAAA,EAAkC3sB,CAAAA,GAAlC,EAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7C6sB,gBAAAA,OAAAA,GAAUF,IAAAA,CADmC,CACnCA,CAAVE;;AAEA,oBAAIA,OAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA6B;AAC3BA,kBAAAA,OAAAA,CAAAA,IAAAA,GAAe,CAAA,IAAA,EAAO,CAAtBA,IAAe,CAAfA;AAJ2C;;AAM7C7V,gBAAAA,CAAAA,CAAE6V,OAAAA,CAAF7V,GAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAwB6V,OAAAA,CANqB,IAM7C7V;AAPwD;AAA5D,aAAA;AA3FiB;;AAAA;;;;;;;;;;;;;;ACzUrB,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAhBA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAoBA,YAAI8V,iBAAAA,GAAoB,MAAM;AAC5BjxB,UAAAA,WAAAA,GAAc;AACZC,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,oCACZA;AAF0B;;AAAA,SAA9B;;AAMA,YAAIixB,qBAAAA,GAAwB,MAAM;AAChClxB,UAAAA,WAAAA,GAAc;AACZC,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADY,wCACZA;AAF8B;;AAAA,SAAlC;;;AAMA,YAAA,QAAA,CAAA,QAAA,EAA+E;AAC7EgxB,UAAAA,OAAAA,CAAAA,iBAAAA,GAAAA,iBAAAA,GAAoB,cAAA,cAAA,CAAA,iBAAA,CAAgC;AAClD/wB,YAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAsB;AACpB,kBAAIG,KAAAA,IAAAA,CAAAA,IAAcC,MAAAA,IAAlB,CAAA,EAA+B;AAC7B,sBAAM,IAAA,KAAA,CADuB,qBACvB,CAAN;AAFkB;;AAIpB,oBAAM6wB,MAAAA,GAASC,OAAAA,CAJK,QAILA,CAAf;;AACA,oBAAM1wB,MAAAA,GAASywB,MAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EALK,MAKLA,CAAf;AACA,qBAAO;AAAA,gBAAA,MAAA;AAELxwB,gBAAAA,OAAAA,EAASD,MAAAA,CAAAA,UAAAA,CAFJ,IAEIA;AAFJ,eAAP;AAPgD;;AAAA,WAApDuwB;AAcAC,UAAAA,OAAAA,CAAAA,qBAAAA,GAAAA,qBAAAA,GAAwB,cAAA,cAAA,CAAA,qBAAA,CAAoC;AAC1D/vB,YAAAA,UAAAA,CAAAA,GAAAA,EAAAA,eAAAA,EAAiC;AAC/B,qBAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,sBAAMkwB,EAAAA,GAAKD,OAAAA,CAD2B,IAC3BA,CAAX;;AACAC,gBAAAA,EAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAiB,CAAA,KAAA,EAAA,IAAA,KAAiB;AAChC,sBAAI9L,KAAAA,IAAS,CAAb,IAAA,EAAoB;AAClB1jB,oBAAAA,MAAAA,CAAO,IAAA,KAAA,CADW,KACX,CAAPA,CAAAA;AADkB;AADY;;AAKhCD,kBAAAA,OAAAA,CAAQ;AAAEJ,oBAAAA,QAAAA,EAAU,IAAA,UAAA,CAAZ,IAAY,CAAZ;AAAA,oBAAA;AAAA,mBAARI,CAAAA;AALFyvB,iBAAAA;AAFF,eAAO,CAAP;AAFwD;;AAAA,WAA5DH;;;;;;;;;;;;;;AC/CF,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAqBA,cAAA,iBAAA,CAAwB;AACtBlxB,UAAAA,WAAAA,GAAc;AACZ,iBAAA,QAAA,GAAgB,IADJ,GACI,EAAhB;AACA,iBAAA,SAAA,GAFY,KAEZ;AAMA,iBAAA,aAAA,GARY,IAQZ;AACA,iBAAA,eAAA,GATY,IASZ;AAVoB;;AAsBtBsxB,UAAAA,QAAAA,CAAAA,GAAAA,EAAAA,YAAAA,EAA4B;AAC1B,kBAAMtY,GAAAA,GAAM,KAAA,QAAA,CAAA,GAAA,CADc,GACd,CAAZ;;AACA,mBAAOA,GAAAA,KAAAA,SAAAA,GAAAA,GAAAA,GAFmB,YAE1B;AAxBoB;;AA8BtBuY,UAAAA,gBAAAA,CAAAA,GAAAA,EAAAA,YAAAA,EAAoC;AAClC5I,aAAAA,GAAAA,cAAAA,CAAAA,UAAAA,EADkC,uBAClCA;;AACA,gBAAI,KAAA,QAAA,CAAA,GAAA,CAAJ,GAAI,CAAJ,EAA4B;AAC1B,qBAAO,KAAA,QAAA,CAAA,GAAA,CADmB,GACnB,CAAP;AAHgC;;AAMlC,iBAAA,QAAA,CAAA,GAAA,CAAA,GAAA,EANkC,YAMlC;;AACA,mBAPkC,YAOlC;AArCoB;;AAgDtB6I,UAAAA,QAAAA,CAAAA,GAAAA,EAAAA,KAAAA,EAAqB;AACnB,kBAAMxY,GAAAA,GAAM,KAAA,QAAA,CAAA,GAAA,CADO,GACP,CAAZ;;AACA,gBAAIyY,QAAAA,GAFe,KAEnB;;AACA,gBAAIzY,GAAAA,KAAJ,SAAA,EAAuB;AACrB,mBAAA,MAAW,CAAA,KAAA,EAAX,GAAW,CAAX,IAA2BjU,MAAAA,CAAAA,OAAAA,CAA3B,KAA2BA,CAA3B,EAAkD;AAChD,oBAAIiU,GAAAA,CAAAA,KAAAA,CAAAA,KAAJ,GAAA,EAAwB;AACtByY,kBAAAA,QAAAA,GADsB,IACtBA;AACAzY,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAFsB,GAEtBA;AAH8C;AAD7B;AAAvB,aAAA,MAOO;AACL,mBAAA,QAAA,CAAA,GAAA,CAAA,GAAA,EADK,KACL;;AACAyY,cAAAA,QAAAA,GAFK,IAELA;AAZiB;;AAcnB,gBAAA,QAAA,EAAc;AACZ,mBADY,YACZ;AAfiB;AAhDC;;AAmEtBC,UAAAA,MAAAA,GAAS;AACP,mBAAO,KAAA,QAAA,CAAA,IAAA,GAAA,CAAA,GAAyBC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KAAvC,QAAyBA,CAAzB,GADA,IACP;AApEoB;;AAuEtB,cAAIpL,IAAJ,GAAW;AACT,mBAAO,KAAA,QAAA,CADE,IACT;AAxEoB;;AA8EtBqL,UAAAA,YAAAA,GAAe;AACb,gBAAI,CAAC,KAAL,SAAA,EAAqB;AACnB,mBAAA,SAAA,GADmB,IACnB;;AACA,kBAAI,OAAO,KAAP,aAAA,KAAJ,UAAA,EAA8C;AAC5C,qBAD4C,aAC5C;AAHiB;AADR;AA9EO;;AAuFtBC,UAAAA,aAAAA,GAAgB;AACd,gBAAI,KAAJ,SAAA,EAAoB;AAClB,mBAAA,SAAA,GADkB,KAClB;;AACA,kBAAI,OAAO,KAAP,eAAA,KAAJ,UAAA,EAAgD;AAC9C,qBAD8C,eAC9C;AAHgB;AADN;AAvFM;;AAoGtB,cAAIC,YAAJ,GAAmB;AACjB,mBAAO,KAAA,QAAA,CAAA,IAAA,GAAA,CAAA,GAAyB,KAAzB,QAAA,GADU,IACjB;AArGoB;;AAAA;;;;;;;;;;;;;;ACrBxB,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAiBA,cAAMC,mBAAAA,GAAsBhtB,MAAAA,CAAAA,MAAAA,CAjB5B,IAiB4BA,CAA5B;AACiE;AAE9D,WAAA,SAAA,aAAA,GAAyB;AAExB,gBAAA,QAAA,CAAA,QAAA,EAAc;AACZgtB,cAAAA,mBAAAA,CAAAA,eAAAA,GADY,IACZA;AAHsB;AAA1B,WAAC;AApBH;AA2BA,cAAMrT,sBAAAA,GAAyB3Z,MAAAA,CAAAA,MAAAA,CA3B/B,mBA2B+BA,CAA/B;;;;;;;;;;;;;ACZA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAcA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAKA,cAAMitB,aAAAA,GAlCN,EAkCA;AAEA,cAAMC,aAAAA,GApCN,GAoCA;AACA,cAAMC,cAAAA,GArCN,IAqCA;AAEA,cAAMC,oBAAAA,GAvCN,IAuCA;AACA,cAAMC,mBAAAA,GAxCN,IAwCA;AAEA,cAAMC,iBAAAA,GA1CN,EA0CA;AAOA,cAAMC,sBAAAA,GAjDN,QAiDA;;AAEA,iBAAA,0BAAA,CAAA,GAAA,EAAyC;AAEvC,cAAI,CAAC7C,GAAAA,CAAL,mBAAA,EAA8B;AAC5BA,YAAAA,GAAAA,CAAAA,aAAAA,GAAoBA,GAAAA,CADQ,IAC5BA;AACAA,YAAAA,GAAAA,CAAAA,gBAAAA,GAAuBA,GAAAA,CAFK,OAE5BA;AACAA,YAAAA,GAAAA,CAAAA,eAAAA,GAAsBA,GAAAA,CAHM,MAG5BA;AACAA,YAAAA,GAAAA,CAAAA,cAAAA,GAAqBA,GAAAA,CAJO,KAI5BA;AACAA,YAAAA,GAAAA,CAAAA,kBAAAA,GAAyBA,GAAAA,CALG,SAK5BA;AACAA,YAAAA,GAAAA,CAAAA,kBAAAA,GAAyBA,GAAAA,CANG,SAM5BA;AACAA,YAAAA,GAAAA,CAAAA,qBAAAA,GAA4BA,GAAAA,CAPA,YAO5BA;AACAA,YAAAA,GAAAA,CAAAA,uBAAAA,GAA8BA,GAAAA,CARF,cAQ5BA;AAEAA,YAAAA,GAAAA,CAAAA,gBAAAA,GAAuBA,GAAAA,CAAAA,gBAAAA,IAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA/CA,CAA+C,CAA/CA;AACAA,YAAAA,GAAAA,CAAAA,eAAAA,GAX4B,EAW5BA;;AAEA,gBAAI;AAIF,oBAAMxH,IAAAA,GAAOljB,MAAAA,CAAAA,wBAAAA,CACXA,MAAAA,CAAAA,cAAAA,CADWA,GACXA,CADWA,EAJX,WAIWA,CAAb;AAKA0qB,cAAAA,GAAAA,CAAAA,aAAAA,GAAoBxH,IAAAA,CATlB,GASFwH;AACAA,cAAAA,GAAAA,CAAAA,aAAAA,GAAoBxH,IAAAA,CAVlB,GAUFwH;AAEA1qB,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,WAAAA,EAAwC;AACtCwtB,gBAAAA,GAAAA,EAAK,SAAA,YAAA,CAAA,KAAA,EAA6B;AAChC,uBAAA,aAAA,CAAmBlyB,KAAAA,GADa,sBAChC;AAFoC,iBAAA;AAItCuc,gBAAAA,GAAAA,EAAK,SAAA,YAAA,GAAwB;AAC3B,yBAAO,KADoB,aACpB,EAAP;AALoC;AAAA,eAAxC7X;AAZF,aAAA,CAoBE,OAAA,CAAA,EAjC0B,CAAA;;AAmC5BA,YAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,qBAAAA,EAAkD;AAChD6X,cAAAA,GAAAA,EAAK,SAAA,mBAAA,GAA+B;AAClC,uBAAO,KAD2B,gBAClC;AAF8C;AAAA,aAAlD7X;AAMAA,YAAAA,MAAAA,CAAAA,cAAAA,CAAAA,GAAAA,EAAAA,4BAAAA,EAAyD;AACvD6X,cAAAA,GAAAA,EAAK,SAAA,0BAAA,GAAsC;AAKzC,sBAAM3C,CAAAA,GAAI,KAL+B,gBAKzC;AACA,sBAAMgB,CAAAA,GAAIhB,CAAAA,CAAV,CAAUA,CAAV;AAAA,sBACEiB,CAAAA,GAAIjB,CAAAA,CADN,CACMA,CADN;AAAA,sBAEEkB,CAAAA,GAAIlB,CAAAA,CAFN,CAEMA,CAFN;AAAA,sBAGEG,CAAAA,GAAIH,CAAAA,CAHN,CAGMA,CAHN;AAAA,sBAIEuY,CAAAA,GAAIvY,CAAAA,CAJN,CAIMA,CAJN;AAAA,sBAKEwY,CAAAA,GAAIxY,CAAAA,CAXmC,CAWnCA,CALN;AAOA,sBAAMyY,KAAAA,GAAQzX,CAAAA,GAAAA,CAAAA,GAAQC,CAAAA,GAbmB,CAazC;AACA,sBAAMyX,KAAAA,GAAQzX,CAAAA,GAAAA,CAAAA,GAAQD,CAAAA,GAdmB,CAczC;AAEA,uBAAO,CACLb,CAAAA,GADK,KAAA,EAELc,CAAAA,GAFK,KAAA,EAGLC,CAAAA,GAHK,KAAA,EAILF,CAAAA,GAJK,KAAA,EAKJ,CAAA,CAAA,GAAA,CAAA,GAAQE,CAAAA,GAAT,CAAC,IALI,KAAA,EAMJ,CAAA,CAAA,GAAA,CAAA,GAAQF,CAAAA,GAAT,CAAC,IANH,KAAO,CAAP;AAjBqD;AAAA,aAAzDlW;;AA4BA0qB,YAAAA,GAAAA,CAAAA,IAAAA,GAAW,SAAA,OAAA,GAAmB;AAC5B,oBAAMmD,GAAAA,GAAM,KADgB,gBAC5B;;AACA,mBAAA,eAAA,CAAA,IAAA,CAF4B,GAE5B;;AACA,mBAAA,gBAAA,GAAwBA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAHI,CAGJA,CAAxB;;AAEA,mBAL4B,aAK5B;AALFnD,aAAAA;;AAQAA,YAAAA,GAAAA,CAAAA,OAAAA,GAAc,SAAA,UAAA,GAAsB;AAClC,oBAAMoD,IAAAA,GAAO,KAAA,eAAA,CADqB,GACrB,EAAb;;AACA,kBAAA,IAAA,EAAU;AACR,qBAAA,gBAAA,GADQ,IACR;;AACA,qBAFQ,gBAER;AAJgC;AAApCpD,aAAAA;;AAQAA,YAAAA,GAAAA,CAAAA,SAAAA,GAAgB,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA4B;AAC1C,oBAAMxV,CAAAA,GAAI,KADgC,gBAC1C;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CAFa,CAEbA,CAA7BA;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CAHa,CAGbA,CAA7BA;;AAEA,mBAAA,kBAAA,CAAA,CAAA,EAL0C,CAK1C;AALFwV,aAAAA;;AAQAA,YAAAA,GAAAA,CAAAA,KAAAA,GAAY,SAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAwB;AAClC,oBAAMxV,CAAAA,GAAI,KADwB,gBAClC;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAF2B,CAElCA;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAH2B,CAGlCA;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAJ2B,CAIlCA;AACAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAAA,CAAAA,CAAAA,GAL2B,CAKlCA;;AAEA,mBAAA,cAAA,CAAA,CAAA,EAPkC,CAOlC;AAPFwV,aAAAA;;AAUAA,YAAAA,GAAAA,CAAAA,SAAAA,GAAgB,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwC;AACtD,oBAAMxV,CAAAA,GAAI,KAD4C,gBACtD;AACA,mBAAA,gBAAA,GAAwB,CACtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GADW,CAAA,EAEtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAFW,CAAA,EAGtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAHW,CAAA,EAItBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAJW,CAAA,EAKtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CALA,CAKAA,CALA,EAMtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAWA,CAAAA,CAAAA,CAAAA,CAAAA,GAAXA,CAAAA,GAAsBA,CAAAA,CANxB,CAMwBA,CANA,CAAxB;;AASAwV,cAAAA,GAAAA,CAAAA,kBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAXsD,CAWtDA;AAXFA,aAAAA;;AAcAA,YAAAA,GAAAA,CAAAA,YAAAA,GAAmB,SAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA2C;AAC5D,mBAAA,gBAAA,GAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AAEAA,cAAAA,GAAAA,CAAAA,qBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAH4D,CAG5DA;AAHFA,aAAAA;;AAMAA,YAAAA,GAAAA,CAAAA,cAAAA,GAAqB,SAAA,iBAAA,GAA6B;AAChD,mBAAA,gBAAA,GAAwB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;;AAEAA,cAAAA,GAAAA,CAHgD,uBAGhDA;AAHFA,aAAAA;;AAMAA,YAAAA,GAAAA,CAAAA,MAAAA,GAAa,SAAA,SAAA,CAAA,KAAA,EAA0B;AACrC,oBAAMqD,QAAAA,GAAWjwB,IAAAA,CAAAA,GAAAA,CADoB,KACpBA,CAAjB;AACA,oBAAMkwB,QAAAA,GAAWlwB,IAAAA,CAAAA,GAAAA,CAFoB,KAEpBA,CAAjB;AAEA,oBAAMoX,CAAAA,GAAI,KAJ2B,gBAIrC;AACA,mBAAA,gBAAA,GAAwB,CACtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAAkBA,CAAAA,CAAAA,CAAAA,CAAAA,GADI,QAAA,EAEtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAAkBA,CAAAA,CAAAA,CAAAA,CAAAA,GAFI,QAAA,EAGtBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO,CAAPA,QAAAA,GAAmBA,CAAAA,CAAAA,CAAAA,CAAAA,GAHG,QAAA,EAItBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAO,CAAPA,QAAAA,GAAmBA,CAAAA,CAAAA,CAAAA,CAAAA,GAJG,QAAA,EAKtBA,CAAAA,CALsB,CAKtBA,CALsB,EAMtBA,CAAAA,CANF,CAMEA,CANsB,CAAxB;;AASA,mBAAA,eAAA,CAdqC,KAcrC;AAdFwV,aAAAA;AAnIqC;AAnDzC;;AAyMA,cAAMuD,cAAAA,GAAkB,SAAA,qBAAA,GAAiC;AAEvD,mBAAA,cAAA,CAAA,aAAA,EAAuC;AACrC,iBAAA,aAAA,GADqC,aACrC;AACA,iBAAA,KAAA,GAAajuB,MAAAA,CAAAA,MAAAA,CAFwB,IAExBA,CAAb;AAJqD;;AAMvDiuB,UAAAA,cAAAA,CAAAA,SAAAA,GAA2B;AACzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,CAAA,EAAA,EAAA,KAAA,EAAA,MAAA,EAAA,cAAA,EAKT;AACA,kBADA,WACA;;AACA,kBAAI,KAAA,KAAA,CAAA,EAAA,MAAJ,SAAA,EAAkC;AAChCC,gBAAAA,WAAAA,GAAc,KAAA,KAAA,CADkB,EAClB,CAAdA;AACA,qBAAA,aAAA,CAAA,KAAA,CAAA,WAAA,EAAA,KAAA,EAFgC,MAEhC;AAEAA,gBAAAA,WAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAJgC,CAIhCA;AAJF,eAAA,MAKO;AACLA,gBAAAA,WAAAA,GAAc,KAAA,aAAA,CAAA,MAAA,CAAA,KAAA,EADT,MACS,CAAdA;AACA,qBAAA,KAAA,CAAA,EAAA,IAFK,WAEL;AATF;;AAWA,kBAAA,cAAA,EAAoB;AAClBC,gBAAAA,0BAAAA,CAA2BD,WAAAA,CADT,OAClBC,CAAAA;AAZF;;AAcA,qBAdA,WAcA;AApBuB,aAAA;;AAsBzBlG,YAAAA,KAAAA,GAAQ;AACN,mBAAA,MAAA,EAAA,IAAiB,KAAjB,KAAA,EAA6B;AAC3B,sBAAMiG,WAAAA,GAAc,KAAA,KAAA,CADO,EACP,CAApB;AACA,qBAAA,aAAA,CAAA,OAAA,CAF2B,WAE3B;AACA,uBAAO,KAAA,KAAA,CAHoB,EAGpB,CAAP;AAJI;AAtBiB;;AAAA,WAA3BF;AA8BA,iBApCuD,cAoCvD;AApCF,SAAwB,EAAxB;;AAuCA,iBAAA,iBAAA,CAAA,OAAA,EAAoC;AAClC,gBAAMI,sBAAAA,GAD4B,IAClC;AAEA,gBAAM/yB,KAAAA,GAAQgzB,OAAAA,CAAd,KAAA;AAAA,gBACE/yB,MAAAA,GAAS+yB,OAAAA,CADX,MAAA;AAAA,gBAEEC,MAAAA,GAASjzB,KAAAA,GALuB,CAGlC;AAGA,cAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EANkC,EAMlC;AACA,gBAAMkzB,MAAAA,GAAS,IAAA,UAAA,CAAeD,MAAAA,IAAU,MAAA,GAPN,CAOJA,CAAf,CAAf;AAEA,gBAAME,WAAAA,GACF,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EADnB,CACmB,CAAf,CADJ;AAIA,gBAAMC,QAAAA,GAAYpzB,KAAAA,GAAD,CAACA,GAAa,CAA/B,CAAA;AAAA,gBACEqzB,KAAAA,GAAQL,OAAAA,CAdwB,IAalC;AAEA,gBAAMza,IAAAA,GAAO,IAAA,UAAA,CAAe6a,QAAAA,GAfM,MAerB,CAAb;AACA,cAAI9a,GAAAA,GAhB8B,CAgBlC;;AACA,eAAKxU,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAKwvB,KAAAA,CAAjB,MAAA,EAA+BvvB,CAAAA,GAA/B,EAAA,EAAuCA,CAAvC,EAAA,EAA4C;AAC1C,kBAAMwvB,IAAAA,GAAOD,KAAAA,CAD6B,CAC7BA,CAAb;AACA,gBAAIE,IAAAA,GAFsC,GAE1C;;AACA,mBAAOA,IAAAA,GAAP,CAAA,EAAiB;AACfhb,cAAAA,IAAAA,CAAKD,GAALC,EAAAA,CAAAA,GAAc+a,IAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GADC,GACf/a;AACAgb,cAAAA,IAAAA,KAFe,CAEfA;AALwC;AAjBV;;AAoClC,cAAIC,KAAAA,GApC8B,CAoClC;AACAlb,UAAAA,GAAAA,GArCkC,CAqClCA;;AACA,cAAIC,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnB2a,YAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAxCgC;;AA0ClC,eAAKO,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,gBAAIlb,IAAAA,CAAAA,GAAAA,CAAAA,KAAcA,IAAAA,CAAKD,GAAAA,GAAvB,CAAkBC,CAAlB,EAAiC;AAC/B2a,cAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAY3a,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADmB,CAC/B2a;AACA,gBAF+B,KAE/B;AAHwB;;AAK1B5a,YAAAA,GAL0B;AA1CM;;AAiDlC,cAAIC,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnB2a,YAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAnDgC;;AAqDlC,eAAKpvB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,MAAA,EAAwBA,CAAxB,EAAA,EAA6B;AAC3BwU,YAAAA,GAAAA,GAAMxU,CAAAA,GADqB,QAC3BwU;AACAob,YAAAA,EAAAA,GAAK5vB,CAAAA,GAFsB,MAE3B4vB;;AACA,gBAAInb,IAAAA,CAAKD,GAAAA,GAALC,QAAAA,CAAAA,KAAyBA,IAAAA,CAA7B,GAA6BA,CAA7B,EAAwC;AACtC2a,cAAAA,MAAAA,CAAAA,EAAAA,CAAAA,GAAa3a,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADyB,CACtC2a;AACA,gBAFsC,KAEtC;AALyB;;AAS3B,gBAAIS,GAAAA,GAAO,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAD,CAAC,KAAsB,IAAA,CAAKrb,GAAAA,GAAL,QAAA,CAAA,GAAA,CAAA,GATN,CAShB,CAAX;;AACA,iBAAKmb,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1BE,cAAAA,GAAAA,GACG,CAAA,GAAA,IAAD,CAAC,KACA,IAAA,CAAKrb,GAAAA,GAAL,CAAA,CAAA,GAAA,CAAA,GADD,CAAC,KAEA,IAAA,CAAKA,GAAAA,GAAAA,QAAAA,GAAL,CAAA,CAAA,GAAA,CAAA,GAJuB,CAEvB,CADHqb;;AAIA,kBAAIR,WAAAA,CAAJ,GAAIA,CAAJ,EAAsB;AACpBD,gBAAAA,MAAAA,CAAOQ,EAAAA,GAAPR,CAAAA,CAAAA,GAAiBC,WAAAA,CADG,GACHA,CAAjBD;AACA,kBAFoB,KAEpB;AAPwB;;AAS1B5a,cAAAA,GAT0B;AAVD;;AAqB3B,gBAAIC,IAAAA,CAAKD,GAAAA,GAALC,QAAAA,CAAAA,KAAyBA,IAAAA,CAA7B,GAA6BA,CAA7B,EAAwC;AACtC2a,cAAAA,MAAAA,CAAOQ,EAAAA,GAAPR,CAAAA,CAAAA,GAAiB3a,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADqB,CACtC2a;AACA,gBAFsC,KAEtC;AAvByB;;AA0B3B,gBAAIM,KAAAA,GAAJ,sBAAA,EAAoC;AAClC,qBADkC,IAClC;AA3ByB;AArDK;;AAoFlClb,UAAAA,GAAAA,GAAM8a,QAAAA,IAAY,MAAA,GApFgB,CAoF5BA,CAAN9a;AACAob,UAAAA,EAAAA,GAAK5vB,CAAAA,GArF6B,MAqFlC4vB;;AACA,cAAInb,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnB2a,YAAAA,MAAAA,CAAAA,EAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAxFgC;;AA0FlC,eAAKO,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,KAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,gBAAIlb,IAAAA,CAAAA,GAAAA,CAAAA,KAAcA,IAAAA,CAAKD,GAAAA,GAAvB,CAAkBC,CAAlB,EAAiC;AAC/B2a,cAAAA,MAAAA,CAAOQ,EAAAA,GAAPR,CAAAA,CAAAA,GAAiB3a,IAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GADc,CAC/B2a;AACA,gBAF+B,KAE/B;AAHwB;;AAK1B5a,YAAAA,GAL0B;AA1FM;;AAiGlC,cAAIC,IAAAA,CAAAA,GAAAA,CAAAA,KAAJ,CAAA,EAAqB;AACnB2a,YAAAA,MAAAA,CAAOQ,EAAAA,GAAPR,CAAAA,CAAAA,GADmB,CACnBA;AACA,cAFmB,KAEnB;AAnGgC;;AAqGlC,cAAIM,KAAAA,GAAJ,sBAAA,EAAoC;AAClC,mBADkC,IAClC;AAtGgC;;AA0GlC,gBAAMI,KAAAA,GAAQ,IAAA,UAAA,CAAe,CAAA,CAAA,EAAA,MAAA,EAAY,CAAZ,CAAA,EAAA,CAAA,EAAmB,CAAnB,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA7B,CAA6B,CAAf,CAAd;AACA,gBAAMC,QAAAA,GA3G4B,EA2GlC;;AACA,eAAK/vB,CAAAA,GAAL,CAAA,EAAY0vB,KAAAA,IAAS1vB,CAAAA,IAArB,MAAA,EAAkCA,CAAlC,EAAA,EAAuC;AACrC,gBAAI6V,CAAAA,GAAI7V,CAAAA,GAD6B,MACrC;AACA,kBAAMG,GAAAA,GAAM0V,CAAAA,GAFyB,KAErC;;AACA,mBAAOA,CAAAA,GAAAA,GAAAA,IAAW,CAACuZ,MAAAA,CAAnB,CAAmBA,CAAnB,EAA8B;AAC5BvZ,cAAAA,CAD4B;AAHO;;AAMrC,gBAAIA,CAAAA,KAAJ,GAAA,EAAe;AAAA;AANsB;;AASrC,kBAAMma,MAAAA,GAAS,CAACna,CAAAA,GAAD,MAAA,EAAf,CAAe,CAAf;AAEA,kBAAMoa,EAAAA,GAX+B,CAWrC;AACA,gBAAIpX,IAAAA,GAAOuW,MAAAA,CAZ0B,CAY1BA,CAAX;;AACA,eAAG;AACD,oBAAMc,IAAAA,GAAOJ,KAAAA,CADZ,IACYA,CAAb;;AACA,iBAAG;AACDja,gBAAAA,CAAAA,IADC,IACDA;AADF,eAAA,QAES,CAACuZ,MAAAA,CAJT,CAISA,CAFV;;AAIA,oBAAMe,EAAAA,GAAKf,MAAAA,CANV,CAMUA,CAAX;;AACA,kBAAIe,EAAAA,KAAAA,CAAAA,IAAYA,EAAAA,KAAhB,EAAA,EAA2B;AAEzBtX,gBAAAA,IAAAA,GAFyB,EAEzBA;AAEAuW,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAJyB,CAIzBA;AAJF,eAAA,MAKO;AAGLvW,gBAAAA,IAAAA,GAAOsX,EAAAA,GAAO,OAAD,IAAC,IAHT,CAGLtX;AAEAuW,gBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAcvW,IAAAA,IAAD,CAACA,GAAcA,IAAAA,IALvB,CAKLuW;AAjBD;;AAoBDY,cAAAA,MAAAA,CAAAA,IAAAA,CAAYna,CAAAA,GApBX,MAoBDma;AACAA,cAAAA,MAAAA,CAAAA,IAAAA,CAAana,CAAAA,GAAD,MAACA,GArBZ,CAqBDma;;AAEA,kBAAI,CAACZ,MAAAA,CAAL,CAAKA,CAAL,EAAgB;AACd,kBADc,KACd;AAxBD;AAAH,aAAA,QA0BSa,EAAAA,KAvC4B,CAarC;;AA2BAF,YAAAA,QAAAA,CAAAA,IAAAA,CAxCqC,MAwCrCA;AACA,cAzCqC,CAyCrC;AArJgC;;AAwJlC,gBAAMK,WAAAA,GAAc,UAAA,CAAA,EAAa;AAC/BpZ,YAAAA,CAAAA,CAD+B,IAC/BA;AAEAA,YAAAA,CAAAA,CAAAA,KAAAA,CAAQ,IAARA,KAAAA,EAAmB,CAAA,CAAA,GAHY,MAG/BA;AACAA,YAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAe,CAJgB,MAI/BA;AACAA,YAAAA,CAAAA,CAL+B,SAK/BA;;AACA,iBAAK,IAAIqZ,CAAAA,GAAJ,CAAA,EAAWC,EAAAA,GAAKP,QAAAA,CAArB,MAAA,EAAsCM,CAAAA,GAAtC,EAAA,EAA8CA,CAA9C,EAAA,EAAmD;AACjD,oBAAME,CAAAA,GAAIR,QAAAA,CADuC,CACvCA,CAAV;AACA/Y,cAAAA,CAAAA,CAAAA,MAAAA,CAASuZ,CAAAA,CAATvZ,CAASuZ,CAATvZ,EAAeuZ,CAAAA,CAFkC,CAElCA,CAAfvZ;;AACA,mBAAK,IAAIwZ,CAAAA,GAAJ,CAAA,EAAWC,EAAAA,GAAKF,CAAAA,CAArB,MAAA,EAA+BC,CAAAA,GAA/B,EAAA,EAAuCA,CAAAA,IAAvC,CAAA,EAA+C;AAC7CxZ,gBAAAA,CAAAA,CAAAA,MAAAA,CAASuZ,CAAAA,CAATvZ,CAASuZ,CAATvZ,EAAeuZ,CAAAA,CAAEC,CAAAA,GAD4B,CAC9BD,CAAfvZ;AAJ+C;AANpB;;AAa/BA,YAAAA,CAAAA,CAb+B,IAa/BA;AACAA,YAAAA,CAAAA,CAd+B,SAc/BA;AACAA,YAAAA,CAAAA,CAf+B,OAe/BA;AAfF,WAAA;;AAkBA,iBA1KkC,WA0KlC;AA1ZF;;AA6ZA,cAAM0Z,gBAAAA,GAAoB,SAAA,uBAAA,GAAmC;AAE3D,mBAAA,gBAAA,GAA4B;AAE1B,iBAAA,YAAA,GAF0B,KAE1B;AACA,iBAAA,QAAA,GAH0B,CAG1B;AACA,iBAAA,aAAA,GAJ0B,CAI1B;AACA,iBAAA,UAAA,GAL0B,KAAA,CAAA,eAK1B;AACA,iBAAA,eAAA,GAN0B,CAM1B;AACA,iBAAA,UAAA,GAP0B,KAAA,CAAA,oBAO1B;AACA,iBAAA,OAAA,GAR0B,CAQ1B;AAEA,iBAAA,CAAA,GAV0B,CAU1B;AACA,iBAAA,CAAA,GAX0B,CAW1B;AAEA,iBAAA,KAAA,GAb0B,CAa1B;AACA,iBAAA,KAAA,GAd0B,CAc1B;AAEA,iBAAA,WAAA,GAhB0B,CAgB1B;AACA,iBAAA,WAAA,GAjB0B,CAiB1B;AACA,iBAAA,UAAA,GAlB0B,CAkB1B;AACA,iBAAA,iBAAA,GAAyBttB,KAAAA,CAAAA,iBAAAA,CAnBC,IAmB1B;AACA,iBAAA,QAAA,GApB0B,CAoB1B;AAEA,iBAAA,SAAA,GAtB0B,SAsB1B;AACA,iBAAA,WAAA,GAvB0B,SAuB1B;AACA,iBAAA,WAAA,GAxB0B,KAwB1B;AAEA,iBAAA,SAAA,GA1B0B,CA0B1B;AACA,iBAAA,WAAA,GA3B0B,CA2B1B;AACA,iBAAA,SAAA,GA5B0B,CA4B1B;AACA,iBAAA,WAAA,GA7B0B,IA6B1B;AACA,iBAAA,cAAA,GA9B0B,IA8B1B;AACA,iBAAA,YAAA,GA/B0B,IA+B1B;AAjCyD;;AAoC3DstB,UAAAA,gBAAAA,CAAAA,SAAAA,GAA6B;AAC3B9xB,YAAAA,KAAAA,EAAO,SAAA,sBAAA,GAAkC;AACvC,qBAAOgC,MAAAA,CAAAA,MAAAA,CADgC,IAChCA,CAAP;AAFyB,aAAA;AAI3B+vB,YAAAA,eAAAA,EAAiB,SAAA,gCAAA,CAAA,CAAA,EAAA,CAAA,EAAgD;AAC/D,mBAAA,CAAA,GAD+D,CAC/D;AACA,mBAAA,CAAA,GAF+D,CAE/D;AANyB;AAAA,WAA7BD;AASA,iBA7C2D,gBA6C3D;AA7CF,SAA0B,EAA1B;;AAmDA,cAAME,cAAAA,GAAkB,SAAA,qBAAA,GAAiC;AAGvD,gBAAMC,cAAAA,GAHiD,EAGvD;AAEA,gBAAMC,eAAAA,GALiD,EAKvD;;AAGA,mBAAA,cAAA,CAAA,SAAA,EAAA,UAAA,EAAA,IAAA,EAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EAAA,qBAAA,EAQE;AACA,iBAAA,GAAA,GADA,SACA;AACA,iBAAA,OAAA,GAAe,IAFf,gBAEe,EAAf;AACA,iBAAA,UAAA,GAHA,EAGA;AACA,iBAAA,WAAA,GAJA,IAIA;AACA,iBAAA,aAAA,GALA,KAKA;AACA,iBAAA,GAAA,GANA,IAMA;AACA,iBAAA,KAAA,GAPA,IAOA;AACA,iBAAA,UAAA,GARA,UAQA;AACA,iBAAA,IAAA,GATA,IASA;AACA,iBAAA,aAAA,GAVA,aAUA;AACA,iBAAA,YAAA,GAXA,YAWA;AACA,iBAAA,UAAA,GAZA,UAYA;AACA,iBAAA,UAAA,GAbA,EAaA;AACA,iBAAA,eAAA,GAdA,IAcA;AAGA,iBAAA,aAAA,GAjBA,IAiBA;AACA,iBAAA,kBAAA,GAlBA,EAkBA;AACA,iBAAA,UAAA,GAnBA,CAmBA;AACA,iBAAA,UAAA,GApBA,EAoBA;AACA,iBAAA,YAAA,GArBA,CAqBA;AACA,iBAAA,SAAA,GAtBA,IAsBA;AACA,iBAAA,cAAA,GAvBA,IAuBA;AACA,iBAAA,kBAAA,GAxBA,EAwBA;AACA,iBAAA,qBAAA,GAzBA,qBAyBA;AACA,iBAAA,cAAA,GAAsB,IAAA,cAAA,CAAmB,KA1BzC,aA0BsB,CAAtB;;AACA,gBAAA,SAAA,EAAe;AAGb9B,cAAAA,0BAAAA,CAHa,SAGbA,CAAAA;AA9BF;;AAgCA,iBAAA,0BAAA,GAhCA,IAgCA;AAhDqD;;AAmDvD,mBAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAA0C+B,YAAAA,GAA1C,IAAA,EAA+D;AAC7D,gBAAI,OAAA,SAAA,KAAA,WAAA,IAAoC7B,OAAAA,YAAxC,SAAA,EAAsE;AACpE5D,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAAAA,CAAAA,EADoE,CACpEA;AADoE;AADT;;AAiB7D,kBAAMnvB,MAAAA,GAAS+yB,OAAAA,CAAf,MAAA;AAAA,kBACEhzB,KAAAA,GAAQgzB,OAAAA,CAlBmD,KAiB7D;AAEA,kBAAM8B,kBAAAA,GAAqB70B,MAAAA,GAnBkC,iBAmB7D;AACA,kBAAM80B,UAAAA,GAAc,CAAA,MAAA,GAAD,kBAAC,IApByC,iBAoB7D;AACA,kBAAMC,WAAAA,GAAcF,kBAAAA,KAAAA,CAAAA,GAAAA,UAAAA,GAAwCC,UAAAA,GArBC,CAqB7D;AAEA,kBAAME,YAAAA,GAAe7F,GAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EAvBwC,iBAuBxCA,CAArB;AACA,gBAAI8F,MAAAA,GAAJ,CAAA;AAAA,gBAxB6D,OAwB7D;AAEA,kBAAMtX,GAAAA,GAAMoV,OAAAA,CA1BiD,IA0B7D;AACA,kBAAMmC,IAAAA,GAAOF,YAAAA,CA3BgD,IA2B7D;AACA,gBAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EA5B6D,gBA4B7D;AAEA,gBAAA,cAAA,EAAA,gBAAA,EAAA,eAAA,EA9B6D,eA8B7D;;AACA,gBAAA,YAAA,EAAkB;AAChB,sBAAQJ,YAAAA,CAAR,MAAA;AACE,qBAAA,CAAA;AACEO,kBAAAA,cAAAA,GAAiBP,YAAAA,CADnB,CACmBA,CAAjBO;AACAC,kBAAAA,gBAAAA,GAAmBR,YAAAA,CAFrB,CAEqBA,CAAnBQ;AACAC,kBAAAA,eAAAA,GAAkBT,YAAAA,CAHpB,CAGoBA,CAAlBS;AACAC,kBAAAA,eAAAA,GAAkBV,YAAAA,CAJpB,CAIoBA,CAAlBU;AALJ;;AAOE,qBAAA,CAAA;AACEH,kBAAAA,cAAAA,GAAiBP,YAAAA,CADnB,CACmBA,CAAjBO;AACAC,kBAAAA,gBAAAA,GAAmBR,YAAAA,CAFrB,CAEqBA,CAAnBQ;AACAC,kBAAAA,eAAAA,GAAkBT,YAAAA,CAHpB,CAGoBA,CAAlBS;AACAC,kBAAAA,eAAAA,GAAkBV,YAAAA,CAJpB,CAIoBA,CAAlBU;AAXJ;AAAA;AAhC2D;;AAkD7D,gBAAIvC,OAAAA,CAAAA,IAAAA,KAAiBnrB,KAAAA,CAAAA,SAAAA,CAArB,cAAA,EAA+C;AAE7C,oBAAM2tB,SAAAA,GAAY5X,GAAAA,CAF2B,UAE7C;AACA,oBAAM6X,MAAAA,GAAS,IAAA,WAAA,CAAgBN,IAAAA,CAAhB,MAAA,EAAA,CAAA,EAAgCA,IAAAA,CAAAA,UAAAA,IAHF,CAG9B,CAAf;AACA,oBAAMO,gBAAAA,GAAmBD,MAAAA,CAJoB,MAI7C;AACA,oBAAME,WAAAA,GAAe31B,KAAAA,GAAD,CAACA,IALwB,CAK7C;AACA,kBAAI41B,KAAAA,GANyC,UAM7C;AACA,kBAAIC,KAAAA,GAAQ/c,KAAAA,CAAAA,oBAAAA,CAAAA,KAAAA,GAAAA,UAAAA,GAPiC,UAO7C;;AAEA,kBAAA,eAAA,EAAqB;AACnB,oBAAIyc,eAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAAA,IAA+BA,eAAAA,CAAAA,IAAAA,CAAAA,KAAnC,CAAA,EAAgE;AAC9D,mBAAA,KAAA,EAAA,KAAA,IAAiB,CAAA,KAAA,EAAjB,KAAiB,CAAjB;AAFiB;AATwB;;AAe7C,mBAAKzxB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,WAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChCgyB,gBAAAA,eAAAA,GACEhyB,CAAAA,GAAAA,UAAAA,GAAAA,iBAAAA,GAF8B,kBAChCgyB;AAEAC,gBAAAA,OAAAA,GAHgC,CAGhCA;;AACA,qBAAKtC,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,eAAA,EAAiCA,CAAjC,EAAA,EAAsC;AACpC,wBAAMuC,OAAAA,GAAUR,SAAAA,GADoB,MACpC;AACA,sBAAIrB,CAAAA,GAFgC,CAEpC;AACA,wBAAM8B,IAAAA,GAAOD,OAAAA,GAAAA,WAAAA,GAAAA,KAAAA,GAAgCA,OAAAA,GAAAA,CAAAA,GAHT,CAGpC;AACA,wBAAME,YAAAA,GAAeD,IAAAA,GAAO,CAJQ,CAIpC;AACA,sBAAI1C,IAAAA,GALgC,CAKpC;AACA,sBAAI4C,OAAAA,GANgC,CAMpC;;AACA,yBAAOhC,CAAAA,GAAP,YAAA,EAAyBA,CAAAA,IAAzB,CAAA,EAAiC;AAC/BgC,oBAAAA,OAAAA,GAAUvY,GAAAA,CAAIsX,MADiB,EACrBtX,CAAVuY;AACAV,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,GAAAA,GAAAA,KAAAA,GAFW,KAE/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GAHW,KAG/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GAJW,KAI/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GALW,KAK/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GANW,KAM/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAPW,KAO/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GARW,KAQ/BV;AACAA,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GATW,KAS/BV;AAhBkC;;AAkBpC,yBAAOtB,CAAAA,GAAP,IAAA,EAAiBA,CAAjB,EAAA,EAAsB;AACpB,wBAAIZ,IAAAA,KAAJ,CAAA,EAAgB;AACd4C,sBAAAA,OAAAA,GAAUvY,GAAAA,CAAIsX,MADA,EACJtX,CAAVuY;AACA5C,sBAAAA,IAAAA,GAFc,GAEdA;AAHkB;;AAMpBkC,oBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GAAoBU,OAAAA,GAAAA,IAAAA,GAAAA,KAAAA,GANA,KAMpBV;AACAlC,oBAAAA,IAAAA,KAPoB,CAOpBA;AAzBkC;AAJN;;AAiChC,uBAAOwC,OAAAA,GAAP,gBAAA,EAAmC;AACjCN,kBAAAA,MAAAA,CAAOM,OAAPN,EAAAA,CAAAA,GADiC,CACjCA;AAlC8B;;AAqChCrG,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkCtrB,CAAAA,GArCF,iBAqChCsrB;AApD2C;AAA/C,aAAA,MAsDO,IAAI4D,OAAAA,CAAAA,IAAAA,KAAiBnrB,KAAAA,CAAAA,SAAAA,CAArB,UAAA,EAA2C;AAEhD,oBAAMuuB,eAAAA,GAAkB,CAAC,EACvB,cAAA,IAAA,gBAAA,IAH8C,eAEvB,CAAzB;AAMA3C,cAAAA,CAAAA,GARgD,CAQhDA;AACA4C,cAAAA,gBAAAA,GAAmBr2B,KAAAA,GAAAA,iBAAAA,GAT6B,CAShDq2B;;AACA,mBAAKvyB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,UAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/BqxB,gBAAAA,IAAAA,CAAAA,GAAAA,CAASvX,GAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAqBsX,MAAAA,GADC,gBACtBtX,CAATuX;AACAD,gBAAAA,MAAAA,IAF+B,gBAE/BA;;AAEA,oBAAA,eAAA,EAAqB;AACnB,uBAAK,IAAIf,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,gBAAA,EAAsCA,CAAAA,IAAtC,CAAA,EAA8C;AAC5C,wBAAA,cAAA,EAAoB;AAClBgB,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAfC,CAAdD;AAF0C;;AAI5C,wBAAA,gBAAA,EAAsB;AACpBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAjBE,CAAdF;AAL0C;;AAO5C,wBAAA,eAAA,EAAqB;AACnBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAhBG,CAAdH;AAR0C;AAD3B;AAJU;;AAkB/B/F,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAlB+B,CAkB/BA;AACAqE,gBAAAA,CAAAA,IAnB+B,iBAmB/BA;AA7B8C;;AA+BhD,kBAAI3vB,CAAAA,GAAJ,WAAA,EAAqB;AACnBuyB,gBAAAA,gBAAAA,GAAmBr2B,KAAAA,GAAAA,kBAAAA,GADA,CACnBq2B;AACAlB,gBAAAA,IAAAA,CAAAA,GAAAA,CAASvX,GAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAqBsX,MAAAA,GAFX,gBAEVtX,CAATuX;;AAEA,oBAAA,eAAA,EAAqB;AACnB,uBAAK,IAAIhB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,gBAAA,EAAsCA,CAAAA,IAAtC,CAAA,EAA8C;AAC5C,wBAAA,cAAA,EAAoB;AAClBgB,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAfC,CAAdD;AAF0C;;AAI5C,wBAAA,gBAAA,EAAsB;AACpBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAjBE,CAAdF;AAL0C;;AAO5C,wBAAA,eAAA,EAAqB;AACnBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAhBG,CAAdH;AAR0C;AAD3B;AAJF;;AAkBnB/F,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAlBmB,CAkBnBA;AAjD8C;AAA3C,aAAA,MAmDA,IAAI4D,OAAAA,CAAAA,IAAAA,KAAiBnrB,KAAAA,CAAAA,SAAAA,CAArB,SAAA,EAA0C;AAE/C,oBAAMuuB,eAAAA,GAAkB,CAAC,EACvB,cAAA,IAAA,gBAAA,IAH6C,eAEtB,CAAzB;AAMAN,cAAAA,eAAAA,GAR+C,iBAQ/CA;AACAO,cAAAA,gBAAAA,GAAmBr2B,KAAAA,GAT4B,eAS/Cq2B;;AACA,mBAAKvyB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,WAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,oBAAIA,CAAAA,IAAJ,UAAA,EAAqB;AACnBgyB,kBAAAA,eAAAA,GADmB,kBACnBA;AACAO,kBAAAA,gBAAAA,GAAmBr2B,KAAAA,GAFA,eAEnBq2B;AAH8B;;AAMhCN,gBAAAA,OAAAA,GANgC,CAMhCA;;AACA,qBAAKtC,CAAAA,GAAL,gBAAA,EAA2BA,CAA3B,EAAA,GAAkC;AAChC0B,kBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkBvX,GAAAA,CAAIsX,MADU,EACdtX,CAAlBuX;AACAA,kBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkBvX,GAAAA,CAAIsX,MAFU,EAEdtX,CAAlBuX;AACAA,kBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAAkBvX,GAAAA,CAAIsX,MAHU,EAGdtX,CAAlBuX;AACAA,kBAAAA,IAAAA,CAAKY,OAALZ,EAAAA,CAAAA,GAJgC,GAIhCA;AAX8B;;AAchC,oBAAA,eAAA,EAAqB;AACnB,uBAAK,IAAIhB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,OAAA,EAA6BA,CAAAA,IAA7B,CAAA,EAAqC;AACnC,wBAAA,cAAA,EAAoB;AAClBgB,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcC,cAAAA,CAAeD,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAfC,CAAdD;AAFiC;;AAInC,wBAAA,gBAAA,EAAsB;AACpBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcE,gBAAAA,CAAiBF,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAjBE,CAAdF;AALiC;;AAOnC,wBAAA,eAAA,EAAqB;AACnBA,sBAAAA,IAAAA,CAAKhB,CAAAA,GAALgB,CAAAA,CAAAA,GAAcG,eAAAA,CAAgBH,IAAAA,CAAKhB,CAAAA,GADhB,CACWgB,CAAhBG,CAAdH;AARiC;AADlB;AAdW;;AA4BhC/F,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkCtrB,CAAAA,GA5BF,iBA4BhCsrB;AAtC6C;AAA1C,aAAA,MAwCA;AACL,oBAAM,IAAA,KAAA,CAAU,mBAAmB4D,OAAAA,CAD9B,IAAA,EACC,CAAN;AApM2D;AAnDR;;AA2PvD,mBAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAA0C;AACxC,kBAAM/yB,MAAAA,GAAS+yB,OAAAA,CAAf,MAAA;AAAA,kBACEhzB,KAAAA,GAAQgzB,OAAAA,CAF8B,KACxC;AAEA,kBAAM8B,kBAAAA,GAAqB70B,MAAAA,GAHa,iBAGxC;AACA,kBAAM80B,UAAAA,GAAc,CAAA,MAAA,GAAD,kBAAC,IAJoB,iBAIxC;AACA,kBAAMC,WAAAA,GAAcF,kBAAAA,KAAAA,CAAAA,GAAAA,UAAAA,GAAwCC,UAAAA,GALpB,CAKxC;AAEA,kBAAME,YAAAA,GAAe7F,GAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EAPmB,iBAOnBA,CAArB;AACA,gBAAI8F,MAAAA,GARoC,CAQxC;AACA,kBAAMtX,GAAAA,GAAMoV,OAAAA,CAT4B,IASxC;AACA,kBAAMmC,IAAAA,GAAOF,YAAAA,CAV2B,IAUxC;;AAEA,iBAAK,IAAInxB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,WAAA,EAAiCA,CAAjC,EAAA,EAAsC;AACpC,oBAAMgyB,eAAAA,GACJhyB,CAAAA,GAAAA,UAAAA,GAAAA,iBAAAA,GAFkC,kBACpC;AAKA,kBAAIiyB,OAAAA,GANgC,CAMpC;;AACA,mBAAK,IAAItC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,eAAA,EAAqCA,CAArC,EAAA,EAA0C;AACxC,oBAAA,IAAA;AAAA,oBACEF,IAAAA,GAFsC,CACxC;;AAEA,qBAAK,IAAIY,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9B,sBAAI,CAAJ,IAAA,EAAW;AACTb,oBAAAA,IAAAA,GAAO1V,GAAAA,CAAIsX,MADF,EACFtX,CAAP0V;AACAC,oBAAAA,IAAAA,GAFS,GAETA;AAH4B;;AAK9B4B,kBAAAA,IAAAA,CAAAA,OAAAA,CAAAA,GAAgB7B,IAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GALc,GAK9B6B;AACAY,kBAAAA,OAAAA,IAN8B,CAM9BA;AACAxC,kBAAAA,IAAAA,KAP8B,CAO9BA;AAVsC;AAPN;;AAoBpCnE,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAAA,CAAAA,EAAkCtrB,CAAAA,GApBE,iBAoBpCsrB;AAhCsC;AA3Pa;;AA+RvD,mBAAA,YAAA,CAAA,SAAA,EAAA,OAAA,EAA0C;AACxC,kBAAMkH,UAAAA,GAAa,CAAA,aAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,YAAA,EAAA,0BAAA,EAAnB,MAAmB,CAAnB;;AAYA,iBAAK,IAAIxyB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKyyB,UAAAA,CAArB,MAAA,EAAwCxyB,CAAAA,GAAxC,EAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnD,oBAAMyyB,QAAAA,GAAWD,UAAAA,CADkC,CAClCA,CAAjB;;AACA,kBAAIE,SAAAA,CAAAA,QAAAA,CAAAA,KAAJ,SAAA,EAAuC;AACrCC,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,GAAoBD,SAAAA,CADiB,QACjBA,CAApBC;AAHiD;AAbb;;AAmBxC,gBAAID,SAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAyC;AACvCC,cAAAA,OAAAA,CAAAA,WAAAA,CAAoBD,SAAAA,CADmB,WACnBA,EAApBC;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,GAAyBD,SAAAA,CAFc,cAEvCC;AArBsC;AA/Ra;;AAwTvD,mBAAA,iBAAA,CAAA,GAAA,EAAgC;AAC9BrH,YAAAA,GAAAA,CAAAA,WAAAA,GAD8B,SAC9BA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,GAF8B,SAE9BA;AACAA,YAAAA,GAAAA,CAAAA,QAAAA,GAH8B,SAG9BA;AACAA,YAAAA,GAAAA,CAAAA,WAAAA,GAJ8B,CAI9BA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,GAL8B,CAK9BA;AACAA,YAAAA,GAAAA,CAAAA,OAAAA,GAN8B,MAM9BA;AACAA,YAAAA,GAAAA,CAAAA,QAAAA,GAP8B,OAO9BA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,GAR8B,EAQ9BA;AACAA,YAAAA,GAAAA,CAAAA,wBAAAA,GAT8B,aAS9BA;AACAA,YAAAA,GAAAA,CAAAA,IAAAA,GAV8B,iBAU9BA;;AACA,gBAAIA,GAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAmC;AACjCA,cAAAA,GAAAA,CAAAA,WAAAA,CADiC,EACjCA;AACAA,cAAAA,GAAAA,CAAAA,cAAAA,GAFiC,CAEjCA;AAb4B;AAxTuB;;AAyUvD,mBAAA,oBAAA,CAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAiD;AAC/C,kBAAMvX,MAAAA,GAASD,KAAAA,CADgC,MAC/C;;AACA,iBAAK,IAAI9T,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,oBAAM4yB,KAAAA,GAAQ9e,KAAAA,CADoB,CACpBA,CAAd;;AACA,kBAAI8e,KAAAA,KAAJ,CAAA,EAAiB;AACf9e,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GADe,EACfA;AACAA,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAFe,EAEfA;AACAA,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAHe,EAGfA;AAHF,eAAA,MAIO,IAAI8e,KAAAA,GAAJ,GAAA,EAAiB;AACtB,sBAAMC,MAAAA,GAAS,MADO,KACtB;AACA/e,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAgBA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAAA,KAAAA,GAAuBgf,EAAAA,GAAxB,MAAChf,IAFM,CAEtBA;AACAA,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAgBA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAAA,KAAAA,GAAuBif,EAAAA,GAAxB,MAACjf,IAHM,CAGtBA;AACAA,gBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAgBA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAAA,KAAAA,GAAuBkf,EAAAA,GAAxB,MAAClf,IAJM,CAItBA;AAVgC;AAFW;AAzUM;;AA0VvD,mBAAA,iBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAA6D;AAC3D,kBAAMC,MAAAA,GAASkf,QAAAA,CAD4C,MAC3D;AACA,kBAAMp0B,KAAAA,GAAQ,IAF6C,GAE3D;;AACA,iBAAK,IAAImB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,oBAAM4yB,KAAAA,GAAQM,WAAAA,GAAcA,WAAAA,CAAYD,QAAAA,CAA1BC,CAA0BD,CAAZC,CAAdA,GAAyCD,QAAAA,CADrB,CACqBA,CAAvD;AACAE,cAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAgBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,GAAD,KAACA,GAFkB,CAElCA;AALyD;AA1VN;;AAmWvD,mBAAA,sBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAkE;AAChE,kBAAMpf,MAAAA,GAASkf,QAAAA,CADiD,MAChE;;AACA,iBAAK,IAAIjzB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAAAA,IAA5B,CAAA,EAAoC;AAClC,oBAAMozB,CAAAA,GACJH,QAAAA,CAASjzB,CAAAA,GAATizB,CAAAA,CAAAA,GAAAA,EAAAA,GACAA,QAAAA,CAASjzB,CAAAA,GAATizB,CAAAA,CAAAA,GADAA,GAAAA,GAEAA,QAAAA,CAASjzB,CAAAA,GAATizB,CAAAA,CAAAA,GAJgC,EAClC;AAIAE,cAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAeD,WAAAA,GACVC,SAAAA,CAAAA,CAAAA,CAAAA,GAAeD,WAAAA,CAAYE,CAAAA,IAA5B,CAAgBF,CAAfC,IADUD,CAAAA,GAEVC,SAAAA,CAAAA,CAAAA,CAAAA,GAAD,CAACA,IAP6B,EAKlCA;AAP8D;AAnWX;;AAgXvD,mBAAA,mBAAA,CAAA,OAAA,EAAA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAQE;AACA,kBAAME,WAAAA,GAAc,CAAC,CADrB,QACA;AACA,kBAAMP,EAAAA,GAAKO,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAFX,CAEA;AACA,kBAAMN,EAAAA,GAAKM,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAHX,CAGA;AACA,kBAAML,EAAAA,GAAKK,WAAAA,GAAcC,QAAAA,CAAdD,CAAcC,CAAdD,GAJX,CAIA;AAEA,gBANA,SAMA;;AACA,gBAAIE,OAAAA,KAAJ,YAAA,EAA8B;AAC5BC,cAAAA,SAAAA,GAD4B,sBAC5BA;AADF,aAAA,MAEO;AACLA,cAAAA,SAAAA,GADK,iBACLA;AAVF;;AAcA,kBAAMC,iBAAAA,GAdN,OAcA;AACA,kBAAMC,SAAAA,GAAYh1B,IAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAiBA,IAAAA,CAAAA,IAAAA,CAAU+0B,iBAAAA,GAf7C,KAemC/0B,CAAjBA,CAAlB;;AACA,iBAAK,IAAIi1B,GAAAA,GAAT,CAAA,EAAkBA,GAAAA,GAAlB,MAAA,EAAgCA,GAAAA,IAAhC,SAAA,EAAkD;AAChD,oBAAMC,WAAAA,GAAcl1B,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAoBvC,MAAAA,GADQ,GAC5BuC,CAApB;AACA,oBAAMu0B,QAAAA,GAAWY,OAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAF+B,WAE/BA,CAAjB;AACA,oBAAMV,SAAAA,GAAYW,QAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,KAAAA,EAH8B,WAG9BA,CAAlB;;AAEA,kBAAA,WAAA,EAAiB;AACfC,gBAAAA,oBAAAA,CAAqBd,QAAAA,CAArBc,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EADe,EACfA,CAAAA;AAN8C;;AAQhDP,cAAAA,SAAAA,CAAUP,QAAAA,CAAVO,IAAAA,EAAyBL,SAAAA,CAAzBK,IAAAA,EARgD,WAQhDA,CAAAA;AAEAK,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EAVgD,GAUhDA;AA1BF;AAxXqD;;AAsZvD,mBAAA,YAAA,CAAA,GAAA,EAAA,KAAA,EAAA,QAAA,EAAA,YAAA,EAA0D;AACxD,kBAAMpE,IAAAA,GAAO1d,KAAAA,CAD2C,MACxD;AACA,kBAAM8hB,OAAAA,GAAU9hB,KAAAA,CAFwC,OAExD;AAEAuZ,YAAAA,GAAAA,CAAAA,YAAAA,CACEvZ,KAAAA,CADFuZ,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAIEvZ,KAAAA,CAJFuZ,MAAAA,EAKEvZ,KAAAA,CALFuZ,OAAAA,EAMEvZ,KAAAA,CAVsD,OAIxDuZ;AASA,kBAAMgI,QAAAA,GAAWvhB,KAAAA,CAAAA,QAAAA,IAbuC,IAaxD;;AACA,gBAAI,CAACA,KAAAA,CAAD,WAAA,IAAsB8O,YAAAA,CAA1B,SAAA,EAAkD;AAChD,oBAAMmT,QAAAA,GAAW,YAAA,CAAA,YAAA,CAA0B;AACzCC,gBAAAA,KAAAA,EAAOH,QAAAA,CADkC,MAAA;AAAA,gBAAA,IAAA;AAGzCtB,gBAAAA,UAAAA,EAAY;AACVe,kBAAAA,OAAAA,EAASxhB,KAAAA,CADC,OAAA;AAAA,kBAAA;AAAA;AAH6B,eAA1B,CAAjB;AAQAuZ,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EATgD,CAShDA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAAwBvZ,KAAAA,CAAxBuZ,OAAAA,EAAuCvZ,KAAAA,CAVS,OAUhDuZ;AAVgD;AAdM;;AA2BxD4I,YAAAA,mBAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAGEzE,IAAAA,CAHFyE,KAAAA,EAIEzE,IAAAA,CAJFyE,MAAAA,EAKEniB,KAAAA,CALFmiB,OAAAA,EAAAA,QAAAA,EAOEniB,KAAAA,CAlCsD,WA2BxDmiB,CAAAA;AASA5I,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EApCwD,CAoCxDA;AA1bqD;;AA6bvD,gBAAM6I,eAAAA,GAAkB,CAAA,MAAA,EAAA,OAAA,EAAxB,QAAwB,CAAxB;AACA,gBAAMC,gBAAAA,GAAmB,CAAA,OAAA,EAAA,OAAA,EAAzB,OAAyB,CAAzB;AACA,gBAAMC,WAAAA,GA/biD,EA+bvD;AACA,gBAAMC,OAAAA,GAhciD,EAgcvD;AAEA1D,UAAAA,cAAAA,CAAAA,SAAAA,GAA2B;AACzB2D,YAAAA,YAAAA,CAAa;AAAA,cAAA,SAAA;AAAA,cAAA,QAAA;AAGXnL,cAAAA,YAAAA,GAHW,KAAA;AAIX7I,cAAAA,UAAAA,GAJFgU;AAAa,aAAbA,EAKG;AAMD,oBAAMr4B,KAAAA,GAAQ,KAAA,GAAA,CAAA,MAAA,CANb,KAMD;AACA,oBAAMC,MAAAA,GAAS,KAAA,GAAA,CAAA,MAAA,CAPd,MAOD;AAEA,mBAAA,GAAA,CATC,IASD;AACA,mBAAA,GAAA,CAAA,SAAA,GAAqBokB,UAAAA,IAVpB,oBAUD;AACA,mBAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAXC,MAWD;AACA,mBAAA,GAAA,CAZC,OAYD;;AAEA,kBAAA,YAAA,EAAkB;AAChB,sBAAMiU,iBAAAA,GAAoB,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,KAAA,EAAA,MAAA,EADV,IACU,CAA1B;AAMA,qBAAA,YAAA,GAAoB,KAPJ,GAOhB;AACA,qBAAA,iBAAA,GAAyBA,iBAAAA,CART,MAQhB;AACA,qBAAA,GAAA,GAAWA,iBAAAA,CATK,OAShB;AACA,qBAAA,GAAA,CAVgB,IAUhB;AAGA,qBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CACE,KADF,GAAA,EAEE,KAAA,YAAA,CAfc,mBAahB;AA3BD;;AAiCD,mBAAA,GAAA,CAjCC,IAiCD;AACAC,cAAAA,iBAAAA,CAAkB,KAlCjB,GAkCDA,CAAAA;;AACA,kBAAA,SAAA,EAAe;AACb,qBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EADa,SACb;AApCD;;AAsCD,mBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAAmCC,QAAAA,CAtClC,SAsCD;AAEA,mBAAA,aAAA,GAAqB,KAAA,GAAA,CAAA,mBAAA,CAxCpB,KAwCoB,EAArB;AACA,mBAAA,oBAAA,GAA4Bh2B,IAAAA,CAAAA,KAAAA,CAC1B,KAAA,aAAA,CAD0BA,CAC1B,CAD0BA,EAE1B,KAAA,aAAA,CA3CD,CA2CC,CAF0BA,CAA5B;;AAKA,kBAAI,KAAJ,UAAA,EAAqB;AACnB,qBAAA,UAAA,CADmB,WACnB;AA/CD;AANsB,aAAA;;AAyDzBi2B,YAAAA,mBAAAA,EAAqB,SAAA,kCAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,OAAA,EAKnB;AACA,oBAAM3T,SAAAA,GAAYS,YAAAA,CADlB,SACA;AACA,oBAAMV,OAAAA,GAAUU,YAAAA,CAFhB,OAEA;AACA,kBAAIzhB,CAAAA,GAAI40B,iBAAAA,IAHR,CAGA;AACA,oBAAMC,YAAAA,GAAe7T,SAAAA,CAJrB,MAIA;;AAGA,kBAAI6T,YAAAA,KAAJ,CAAA,EAAwB;AACtB,uBADsB,CACtB;AARF;;AAWA,oBAAMC,eAAAA,GACJD,YAAAA,GAAAA,CAAAA,GAAAA,eAAAA,IACA,OAAA,gBAAA,KAbF,UAWA;AAGA,oBAAME,OAAAA,GAAUD,eAAAA,GAAkB/zB,IAAAA,CAAAA,GAAAA,KAAlB+zB,cAAAA,GAdhB,CAcA;AACA,kBAAIhF,KAAAA,GAfJ,CAeA;AAEA,oBAAMtO,UAAAA,GAAa,KAjBnB,UAiBA;AACA,oBAAMD,IAAAA,GAAO,KAlBb,IAkBA;AACA,kBAnBA,IAmBA;;AAEA,qBAAA,IAAA,EAAa;AACX,oBAAIyT,OAAAA,KAAAA,SAAAA,IAAyBh1B,CAAAA,KAAMg1B,OAAAA,CAAnC,cAAA,EAA2D;AACzDA,kBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EADyD,gBACzDA;AACA,yBAFyD,CAEzD;AAHS;;AAMXC,gBAAAA,IAAAA,GAAOlU,OAAAA,CANI,CAMJA,CAAPkU;;AAEA,oBAAIA,IAAAA,KAASlpB,KAAAA,CAAAA,GAAAA,CAAb,UAAA,EAA6B;AAC3B,uBAAA,IAAA,EAAA,KAAA,CAAA,IAAA,EAAuBiV,SAAAA,CADI,CACJA,CAAvB;AADF,iBAAA,MAEO;AACL,uBAAA,MAAA,QAAA,IAAuBA,SAAAA,CAAvB,CAAuBA,CAAvB,EAAqC;AACnC,0BAAMkU,QAAAA,GAAWC,QAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IAAAA,UAAAA,GADkB,IACnC;;AAIA,wBAAI,CAACD,QAAAA,CAAAA,GAAAA,CAAL,QAAKA,CAAL,EAA6B;AAC3BA,sBAAAA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAD2B,gBAC3BA;AACA,6BAF2B,CAE3B;AAPiC;AADhC;AAVI;;AAuBXl1B,gBAAAA,CAvBW;;AA0BX,oBAAIA,CAAAA,KAAJ,YAAA,EAAwB;AACtB,yBADsB,CACtB;AA3BS;;AAgCX,oBAAI80B,eAAAA,IAAmB,EAAA,KAAA,GAAvB,eAAA,EAAkD;AAChD,sBAAI/zB,IAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA0B;AACxBq0B,oBAAAA,gBADwB;AAExB,2BAFwB,CAExB;AAH8C;;AAKhDtF,kBAAAA,KAAAA,GALgD,CAKhDA;AArCS;AArBb;AA9DuB,aAAA;AAgIzBuF,YAAAA,UAAAA,EAAY,SAAA,yBAAA,GAAqC;AAE/C,qBAAO,KAAA,UAAA,CAAA,MAAA,IAA0B,KAAA,OAAA,CAAA,WAAA,KAAjC,IAAA,EAAoE;AAClE,qBADkE,OAClE;AAH6C;;AAM/C,mBAAA,GAAA,CAN+C,OAM/C;;AAEA,kBAAI,KAAJ,iBAAA,EAA4B;AAC1B,qBAAA,GAAA,GAAW,KADe,YAC1B;AACA,qBAAA,GAAA,CAF0B,IAE1B;AACA,qBAAA,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAH0B,CAG1B;AACA,qBAAA,GAAA,CAAA,SAAA,CAAmB,KAAnB,iBAAA,EAAA,CAAA,EAJ0B,CAI1B;AACA,qBAAA,GAAA,CAL0B,OAK1B;AACA,qBAAA,iBAAA,GAN0B,IAM1B;AAd6C;;AAiB/C,mBAAA,cAAA,CAjB+C,KAiB/C;AACA,mBAAA,YAAA,CAlB+C,KAkB/C;;AAEA,kBAAI,KAAJ,UAAA,EAAqB;AACnB,qBAAA,UAAA,CADmB,SACnB;AArB6C;AAhIxB,aAAA;AA0JzBppB,YAAAA,YAAAA,EAAc,SAAA,2BAAA,CAAA,KAAA,EAA4C;AACxD,mBAAA,OAAA,CAAA,SAAA,GADwD,KACxD;AACA,mBAAA,GAAA,CAAA,SAAA,GAFwD,KAExD;AA5JuB,aAAA;AA8JzBC,YAAAA,UAAAA,EAAY,SAAA,yBAAA,CAAA,KAAA,EAA0C;AACpD,mBAAA,GAAA,CAAA,OAAA,GAAmBioB,eAAAA,CADiC,KACjCA,CAAnB;AA/JuB,aAAA;AAiKzBhoB,YAAAA,WAAAA,EAAa,SAAA,0BAAA,CAAA,KAAA,EAA2C;AACtD,mBAAA,GAAA,CAAA,QAAA,GAAoBioB,gBAAAA,CADkC,KAClCA,CAApB;AAlKuB,aAAA;AAoKzBhoB,YAAAA,aAAAA,EAAe,SAAA,4BAAA,CAAA,KAAA,EAA6C;AAC1D,mBAAA,GAAA,CAAA,UAAA,GAD0D,KAC1D;AArKuB,aAAA;AAuKzBC,YAAAA,OAAAA,EAAS,SAAA,sBAAA,CAAA,SAAA,EAAA,SAAA,EAAsD;AAC7D,oBAAMif,GAAAA,GAAM,KADiD,GAC7D;;AACA,kBAAIA,GAAAA,CAAAA,WAAAA,KAAJ,SAAA,EAAmC;AACjCA,gBAAAA,GAAAA,CAAAA,WAAAA,CADiC,SACjCA;AACAA,gBAAAA,GAAAA,CAAAA,cAAAA,GAFiC,SAEjCA;AAJ2D;AAvKtC,aAAA;;AA8KzBhf,YAAAA,kBAAAA,CAAAA,MAAAA,EA9KyB,CAAA,CAAA;;AAiLzBC,YAAAA,WAAAA,CAAAA,QAAAA,EAjLyB,CAAA,CAAA;;AAoLzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,CAAA,MAAA,EAA0C;AACnD,mBAAK,IAAIxM,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKu1B,MAAAA,CAArB,MAAA,EAAoCt1B,CAAAA,GAApC,EAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,sBAAMu1B,KAAAA,GAAQD,MAAAA,CADiC,CACjCA,CAAd;AACA,sBAAME,GAAAA,GAAMD,KAAAA,CAFmC,CAEnCA,CAAZ;AACA,sBAAM3gB,KAAAA,GAAQ2gB,KAAAA,CAHiC,CAGjCA,CAAd;;AAEA,wBAAA,GAAA;AACE,uBAAA,IAAA;AACE,yBAAA,YAAA,CADF,KACE;AAFJ;;AAIE,uBAAA,IAAA;AACE,yBAAA,UAAA,CADF,KACE;AALJ;;AAOE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AARJ;;AAUE,uBAAA,IAAA;AACE,yBAAA,aAAA,CADF,KACE;AAXJ;;AAaE,uBAAA,GAAA;AACE,yBAAA,OAAA,CAAa3gB,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAdJ;;AAgBE,uBAAA,IAAA;AACE,yBAAA,kBAAA,CADF,KACE;AAjBJ;;AAmBE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AApBJ;;AAsBE,uBAAA,MAAA;AACE,yBAAA,OAAA,CAAaA,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAvBJ;;AAyBE,uBAAA,IAAA;AACE,yBAAA,OAAA,CAAA,WAAA,GAA2B2gB,KAAAA,CAD7B,CAC6BA,CAA3B;AA1BJ;;AA4BE,uBAAA,IAAA;AACE,yBAAA,OAAA,CAAA,SAAA,GAAyBA,KAAAA,CAD3B,CAC2BA,CAAzB;AACA,yBAAA,GAAA,CAAA,WAAA,GAAuBA,KAAAA,CAFzB,CAEyBA,CAAvB;AA9BJ;;AAgCE,uBAAA,IAAA;AACE,yBAAA,GAAA,CAAA,wBAAA,GADF,KACE;AAjCJ;;AAmCE,uBAAA,OAAA;AACE,wBAAI,KAAA,OAAA,CAAJ,WAAA,EAA8B;AAI5B,0BACE,KAAA,UAAA,CAAA,MAAA,GAAA,CAAA,IACA,KAAA,UAAA,CAAgB,KAAA,UAAA,CAAA,MAAA,GAAhB,CAAA,EAAA,WAAA,KACE,KAAA,OAAA,CAHJ,WAAA,EAIE;AACA,6BADA,iBACA;AALF,uBAAA,MAMO;AACL,6BADK,aACL;AAX0B;AADhC;;AAeE,yBAAA,OAAA,CAAA,WAAA,GAA2B3gB,KAAAA,GAAQ,KAARA,SAAAA,GAf7B,IAeE;;AACA,wBAAI,KAAA,OAAA,CAAJ,WAAA,EAA8B;AAC5B,2BAD4B,eAC5B;AAjBJ;;AAmBE,yBAAA,SAAA,GAnBF,IAmBE;AAtDJ;;AAwDE,uBAAA,IAAA;AACE,yBAAA,OAAA,CAAA,YAAA,GAzDJ,KAyDI;AAzDJ;AANiD;AApL5B,aAAA;AAuPzB6gB,YAAAA,eAAAA,EAAiB,SAAA,8BAAA,GAA0C;AACzD,oBAAMC,WAAAA,GAAc,KAAA,OAAA,CADqC,WACzD;AACA,oBAAMC,UAAAA,GAAaD,WAAAA,CAAAA,MAAAA,CAFsC,KAEzD;AACA,oBAAME,WAAAA,GAAcF,WAAAA,CAAAA,MAAAA,CAHqC,MAGzD;AACA,oBAAMG,OAAAA,GAAU,iBAAiB,KAJwB,UAIzD;AACA,oBAAMC,aAAAA,GAAgB,KAAA,cAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EALmC,IAKnC,CAAtB;AAOA,oBAAMC,UAAAA,GAAa,KAZsC,GAYzD;AACA,oBAAMC,gBAAAA,GAAmBD,UAAAA,CAbgC,mBAazD;AACA,mBAAA,GAAA,CAdyD,IAczD;AAEA,oBAAME,QAAAA,GAAWH,aAAAA,CAhBwC,OAgBzD;AACAG,cAAAA,QAAAA,CAAAA,KAAAA,CAAe,IAAIP,WAAAA,CAAnBO,MAAAA,EAAuC,IAAIP,WAAAA,CAjBc,MAiBzDO;AACAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAmB,CAACP,WAAAA,CAApBO,OAAAA,EAAyC,CAACP,WAAAA,CAlBe,OAkBzDO;AACAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAnByD,gBAmBzDA;AAEAP,cAAAA,WAAAA,CAAAA,qBAAAA,GAAoCO,QAAAA,CArBqB,0BAqBzDP;AAEAQ,cAAAA,YAAAA,CAAAA,UAAAA,EAvByD,QAuBzDA,CAAAA;AACA,mBAAA,GAAA,GAxByD,QAwBzD;AACA,mBAAA,SAAA,CAAe,CACb,CAAA,IAAA,EADa,aACb,CADa,EAEb,CAAA,IAAA,EAFa,CAEb,CAFa,EAGb,CAAA,IAAA,EAHF,CAGE,CAHa,CAAf;AAKA,mBAAA,UAAA,CAAA,IAAA,CA9ByD,UA8BzD;AACA,mBA/ByD,UA+BzD;AAtRuB,aAAA;AAwRzBC,YAAAA,iBAAAA,EAAmB,SAAA,4BAAA,GAAwC;AAGzD,oBAAMF,QAAAA,GAAW,KAHwC,GAGzD;AACA,mBAJyD,UAIzD;AACA,mBAAA,GAAA,GAAW,KAAA,UAAA,CAL8C,GAK9C,EAAX;AAEAG,cAAAA,YAAAA,CACE,KADFA,GAAAA,EAEE,KAAA,OAAA,CAFFA,WAAAA,EAAAA,QAAAA,EAIE,KAXuD,YAOzDA,CAAAA;AAMA,mBAAA,GAAA,CAbyD,OAazD;AACA,mBAAA,GAAA,CAdyD,IAczD;AACAF,cAAAA,YAAAA,CAAAA,QAAAA,EAAuB,KAfkC,GAezDA,CAAAA;AAGA,mBAAA,OAAA,CAAA,cAAA,GAlByD,QAkBzD;;AAGA,oBAAMG,cAAAA,GAAiBjgB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KAAA,OAAA,CAAA,WAAA,CADqBA,qBAAAA,EAErB6f,QAAAA,CAvBuD,mBAqBlC7f,CAAvB;;AAIA,mBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAzByD,cAyBzD;AAGA6f,cAAAA,QAAAA,CA5ByD,IA4BzDA;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EA7ByD,CA6BzDA;AACAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAyBA,QAAAA,CAAAA,MAAAA,CAAzBA,KAAAA,EAAgDA,QAAAA,CAAAA,MAAAA,CA9BS,MA8BzDA;AACAA,cAAAA,QAAAA,CA/ByD,OA+BzDA;AAvTuB,aAAA;AAyTzBK,YAAAA,gBAAAA,EAAkB,SAAA,+BAAA,GAA2C;AAI3D,oBAAML,QAAAA,GAAW,KAAA,OAAA,CAJ0C,cAI3D;AACA,oBAAMF,UAAAA,GAAa,KALwC,GAK3D;AACA,mBAAA,GAAA,GAN2D,QAM3D;AACA,mBAAA,UAAA,CAAA,IAAA,CAP2D,UAO3D;AACA,mBAR2D,UAQ3D;AAjUuB,aAAA;AAmUzBQ,YAAAA,aAAAA,EAAe,SAAA,4BAAA,GAAwC;AACrD,oBAAMN,QAAAA,GAAW,KADoC,GACrD;AACA,mBAFqD,UAErD;AACA,mBAAA,GAAA,GAAW,KAAA,UAAA,CAH0C,GAG1C,EAAX;AAEAG,cAAAA,YAAAA,CACE,KADFA,GAAAA,EAEE,KAAA,OAAA,CAFFA,WAAAA,EAAAA,QAAAA,EAIE,KATmD,YAKrDA,CAAAA;AAMA,mBAAA,GAAA,CAXqD,OAWrD;AACAF,cAAAA,YAAAA,CAAAA,QAAAA,EAAuB,KAZ8B,GAYrDA,CAAAA;;AAGA,oBAAMG,cAAAA,GAAiBjgB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KAAA,OAAA,CAAA,WAAA,CADqBA,qBAAAA,EAErB6f,QAAAA,CAjBmD,mBAe9B7f,CAAvB;;AAIA,mBAAA,GAAA,CAAA,SAAA,CAAA,KAAA,CAAyB,KAAzB,GAAA,EAnBqD,cAmBrD;AAtVuB,aAAA;AAwVzB3J,YAAAA,IAAAA,EAAM,SAAA,mBAAA,GAA+B;AACnC,mBAAA,GAAA,CADmC,IACnC;AACA,oBAAMgiB,GAAAA,GAAM,KAFuB,OAEnC;AACA,mBAAA,UAAA,CAAA,IAAA,CAHmC,GAGnC;AACA,mBAAA,OAAA,GAAeA,GAAAA,CAJoB,KAIpBA,EAAf;AACA,mBAAA,OAAA,CAAA,cAAA,GALmC,IAKnC;AA7VuB,aAAA;AA+VzB/hB,YAAAA,OAAAA,EAAS,SAAA,sBAAA,GAAkC;AAEzC,kBAAI,KAAA,OAAA,CAAJ,cAAA,EAAiC;AAC/B,qBAD+B,gBAC/B;AAHuC;;AAOzC,kBACE,KAAA,OAAA,CAAA,WAAA,KAAA,IAAA,KACC,KAAA,UAAA,CAAA,MAAA,KAAA,CAAA,IACC,KAAA,UAAA,CAAgB,KAAA,UAAA,CAAA,MAAA,GAAhB,CAAA,EAAA,WAAA,KACE,KAAA,OAAA,CAJN,WACE,CADF,EAKE;AACA,qBADA,aACA;AAbuC;;AAgBzC,kBAAI,KAAA,UAAA,CAAA,MAAA,KAAJ,CAAA,EAAkC;AAChC,qBAAA,OAAA,GAAe,KAAA,UAAA,CADiB,GACjB,EAAf;AACA,qBAAA,GAAA,CAFgC,OAEhC;AAGA,qBAAA,WAAA,GALgC,IAKhC;AAEA,qBAAA,0BAAA,GAPgC,IAOhC;AAPF,eAAA,MAQO;AAEL,qBAAA,OAAA,CAAA,WAAA,GAFK,IAEL;AA1BuC;AA/VlB,aAAA;AA4XzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAoD;AAC7D,mBAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAD6D,CAC7D;AAEA,mBAAA,0BAAA,GAH6D,IAG7D;AA/XuB,aAAA;AAmYzB+E,YAAAA,aAAAA,EAAe,SAAA,4BAAA,CAAA,GAAA,EAAA,IAAA,EAAiD;AAC9D,oBAAM4Z,GAAAA,GAAM,KADkD,GAC9D;AACA,oBAAMuB,OAAAA,GAAU,KAF8C,OAE9D;AACA,kBAAI2J,CAAAA,GAAI3J,OAAAA,CAAR,CAAA;AAAA,kBACEuG,CAAAA,GAAIvG,OAAAA,CAJwD,CAG9D;;AAEA,mBAAK,IAAI7sB,CAAAA,GAAJ,CAAA,EAAW2vB,CAAAA,GAAX,CAAA,EAAkB5vB,EAAAA,GAAK02B,GAAAA,CAA5B,MAAA,EAAwCz2B,CAAAA,GAAxC,EAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnD,wBAAQy2B,GAAAA,CAAAA,CAAAA,CAAAA,GAAR,CAAA;AACE,uBAAK1qB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACA,0BAAMl3B,KAAAA,GAAQonB,IAAAA,CAAKqM,CAHrB,EAGgBrM,CAAd;AACA,0BAAMnnB,MAAAA,GAASmnB,IAAAA,CAAKqM,CAJtB,EAIiBrM,CAAf;AAEA,0BAAMoT,EAAAA,GAAKF,CAAAA,GANb,KAME;AACA,0BAAMG,EAAAA,GAAKvD,CAAAA,GAPb,MAOE;AACA9H,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EARF,CAQEA;;AACA,wBAAIpvB,KAAAA,KAAAA,CAAAA,IAAeC,MAAAA,KAAnB,CAAA,EAAiC;AAC/BmvB,sBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAD+B,EAC/BA;AADF,qBAAA,MAEO;AACLA,sBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EADK,CACLA;AACAA,sBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAFK,EAELA;AACAA,sBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHK,EAGLA;AAdJ;;AAiBEA,oBAAAA,GAAAA,CAjBF,SAiBEA;AAlBJ;;AAoBE,uBAAKvf,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACA9H,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHF,CAGEA;AAvBJ;;AAyBE,uBAAKvf,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACA9H,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAHF,CAGEA;AA5BJ;;AA8BE,uBAAKvf,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GADX,CACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAFX,CAEMrM,CAAJ8P;AACA9H,oBAAAA,GAAAA,CAAAA,aAAAA,CACEhI,IAAAA,CADFgI,CACEhI,CADFgI,EAEEhI,IAAAA,CAAKqM,CAAAA,GAFPrE,CAEEhI,CAFFgI,EAGEhI,IAAAA,CAAKqM,CAAAA,GAHPrE,CAGEhI,CAHFgI,EAIEhI,IAAAA,CAAKqM,CAAAA,GAJPrE,CAIEhI,CAJFgI,EAAAA,CAAAA,EAHF,CAGEA;AAQAqE,oBAAAA,CAAAA,IAXF,CAWEA;AAzCJ;;AA2CE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEuf,oBAAAA,GAAAA,CAAAA,aAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAGEhI,IAAAA,CAHFgI,CAGEhI,CAHFgI,EAIEhI,IAAAA,CAAKqM,CAAAA,GAJPrE,CAIEhI,CAJFgI,EAKEhI,IAAAA,CAAKqM,CAAAA,GALPrE,CAKEhI,CALFgI,EAMEhI,IAAAA,CAAKqM,CAAAA,GAPT,CAOIrM,CANFgI;AAQAkL,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GATX,CASMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAVX,CAUMrM,CAAJ8P;AACAzD,oBAAAA,CAAAA,IAXF,CAWEA;AAtDJ;;AAwDE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GADX,CACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAFX,CAEMrM,CAAJ8P;AACA9H,oBAAAA,GAAAA,CAAAA,aAAAA,CAAkBhI,IAAAA,CAAlBgI,CAAkBhI,CAAlBgI,EAA2BhI,IAAAA,CAAKqM,CAAAA,GAAhCrE,CAA2BhI,CAA3BgI,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAHF,CAGEA;AACAqE,oBAAAA,CAAAA,IAJF,CAIEA;AA5DJ;;AA8DE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEuf,oBAAAA,GAAAA,CADF,SACEA;AA/DJ;AAAA;AAN4D;;AAyE9DuB,cAAAA,OAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAzE8D,CAyE9DA;AA5cuB,aAAA;AA8czB5f,YAAAA,SAAAA,EAAW,SAAA,wBAAA,GAAoC;AAC7C,mBAAA,GAAA,CAD6C,SAC7C;AA/cuB,aAAA;AAidzBE,YAAAA,MAAAA,EAAQ,SAAA,qBAAA,CAAA,WAAA,EAA4C;AAClDypB,cAAAA,WAAAA,GAAc,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GADoC,IAClDA;AACA,oBAAMtL,GAAAA,GAAM,KAFsC,GAElD;AACA,oBAAMuL,WAAAA,GAAc,KAAA,OAAA,CAH8B,WAGlD;AAGAvL,cAAAA,GAAAA,CAAAA,WAAAA,GAAkB,KAAA,OAAA,CANgC,WAMlDA;;AACA,kBAAI,KAAJ,cAAA,EAAyB;AACvB,oBAAI,OAAA,WAAA,KAAA,QAAA,KAAmCuL,WAAnC,aAAmCA,WAAnC,uBAAmCA,WAAAA,CAAvC,UAAI,CAAJ,EAAgE;AAG9DvL,kBAAAA,GAAAA,CAH8D,IAG9DA;AAKA,wBAAM3e,SAAAA,GAAY2e,GAAAA,CAR4C,mBAQ9D;;AACA,wBAAMzsB,KAAAA,GAAQuX,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAAA,SAAAA,EATgD,CAShDA,CAAd;;AACAkV,kBAAAA,GAAAA,CAAAA,WAAAA,GAAkBuL,WAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAV4C,IAU5CA,CAAlBvL;AACA,wBAAMwL,SAAAA,GAAY,KAX4C,mBAW5C,EAAlB;AACA,wBAAMC,eAAAA,GAAkB,KAAA,OAAA,CAAA,SAAA,GAZsC,KAY9D;;AACA,sBAAID,SAAAA,GAAAA,CAAAA,IAAiB,CAAA,SAAA,IAArB,eAAA,EAAoD;AAClDxL,oBAAAA,GAAAA,CADkD,cAClDA;AACAA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,KAAAA,CAAW,KAFuB,oBAElCA,CAAhB4sB;AAFF,mBAAA,MAGO;AACLA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EADX,eACWA,CAAhB4sB;AAjB4D;;AAmB9DA,kBAAAA,GAAAA,CAnB8D,MAmB9DA;AACAA,kBAAAA,GAAAA,CApB8D,OAoB9DA;AApBF,iBAAA,MAqBO;AACL,wBAAMwL,SAAAA,GAAY,KADb,mBACa,EAAlB;;AACA,sBAAIA,SAAAA,GAAAA,CAAAA,IAAiB,CAAA,SAAA,IAAc,KAAA,OAAA,CAAnC,SAAA,EAA2D;AAGzDxL,oBAAAA,GAAAA,CAHyD,IAGzDA;AACAA,oBAAAA,GAAAA,CAJyD,cAIzDA;AACAA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,KAAAA,CAAW,KAL8B,oBAKzCA,CAAhB4sB;AACAA,oBAAAA,GAAAA,CANyD,MAMzDA;AACAA,oBAAAA,GAAAA,CAPyD,OAOzDA;AAPF,mBAAA,MAQO;AAELA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAoB,KAAA,OAAA,CAF/B,SAEWA,CAAhB4sB;AACAA,oBAAAA,GAAAA,CAHK,MAGLA;AAbG;AAtBgB;AAPyB;;AA8ClD,kBAAA,WAAA,EAAiB;AACf,qBADe,WACf;AA/CgD;;AAkDlDA,cAAAA,GAAAA,CAAAA,WAAAA,GAAkB,KAAA,OAAA,CAlDgC,SAkDlDA;AAngBuB,aAAA;AAqgBzBle,YAAAA,WAAAA,EAAa,SAAA,0BAAA,GAAsC;AACjD,mBADiD,SACjD;AACA,mBAFiD,MAEjD;AAvgBuB,aAAA;AAygBzBC,YAAAA,IAAAA,EAAM,SAAA,mBAAA,CAAA,WAAA,EAA0C;AAC9CupB,cAAAA,WAAAA,GAAc,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GADgC,IAC9CA;AACA,oBAAMtL,GAAAA,GAAM,KAFkC,GAE9C;AACA,oBAAM0L,SAAAA,GAAY,KAAA,OAAA,CAH4B,SAG9C;AACA,oBAAMC,aAAAA,GAAgB,KAAA,OAAA,CAJwB,WAI9C;AACA,kBAAIC,WAAAA,GAL0C,KAK9C;;AAEA,kBAAA,aAAA,EAAmB;AACjB5L,gBAAAA,GAAAA,CADiB,IACjBA;;AACA,oBAAI,KAAJ,aAAA,EAAwB;AACtBA,kBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4B,KADN,aACtBA;AAHe;;AAKjBA,gBAAAA,GAAAA,CAAAA,SAAAA,GAAgB0L,SAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EALC,IAKDA,CAAhB1L;AACA4L,gBAAAA,WAAAA,GANiB,IAMjBA;AAb4C;;AAgB9C,kBAAI,KAAJ,cAAA,EAAyB;AACvB,oBAAI,KAAJ,aAAA,EAAwB;AACtB5L,kBAAAA,GAAAA,CAAAA,IAAAA,CADsB,SACtBA;AACA,uBAAA,aAAA,GAFsB,KAEtB;AAFF,iBAAA,MAGO;AACLA,kBAAAA,GAAAA,CADK,IACLA;AALqB;AAhBqB;;AAyB9C,kBAAA,WAAA,EAAiB;AACfA,gBAAAA,GAAAA,CADe,OACfA;AA1B4C;;AA4B9C,kBAAA,WAAA,EAAiB;AACf,qBADe,WACf;AA7B4C;AAzgBvB,aAAA;AAyiBzBhe,YAAAA,MAAAA,EAAQ,SAAA,qBAAA,GAAiC;AACvC,mBAAA,aAAA,GADuC,IACvC;AACA,mBAFuC,IAEvC;AA3iBuB,aAAA;AA6iBzBC,YAAAA,UAAAA,EAAY,SAAA,yBAAA,GAAqC;AAC/C,mBAAA,IAAA,CAD+C,KAC/C;AACA,mBAAA,MAAA,CAF+C,KAE/C;AAEA,mBAJ+C,WAI/C;AAjjBuB,aAAA;AAmjBzBC,YAAAA,YAAAA,EAAc,SAAA,2BAAA,GAAuC;AACnD,mBAAA,aAAA,GADmD,IACnD;AACA,mBAFmD,UAEnD;AArjBuB,aAAA;AAujBzBC,YAAAA,eAAAA,EAAiB,SAAA,8BAAA,GAA0C;AACzD,mBADyD,SACzD;AACA,mBAFyD,UAEzD;AAzjBuB,aAAA;AA2jBzBC,YAAAA,iBAAAA,EAAmB,SAAA,gCAAA,GAA4C;AAC7D,mBAAA,aAAA,GAD6D,IAC7D;AACA,mBAF6D,SAE7D;AACA,mBAH6D,UAG7D;AA9jBuB,aAAA;AAgkBzBC,YAAAA,OAAAA,EAAS,SAAA,sBAAA,GAAkC;AACzC,mBADyC,WACzC;AAjkBuB,aAAA;AAqkBzBC,YAAAA,IAAAA,EAAM,SAAA,mBAAA,GAA+B;AACnC,mBAAA,WAAA,GADmC,WACnC;AAtkBuB,aAAA;AAwkBzBC,YAAAA,MAAAA,EAAQ,SAAA,qBAAA,GAAiC;AACvC,mBAAA,WAAA,GADuC,OACvC;AAzkBuB,aAAA;AA6kBzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,GAAoC;AAC7C,mBAAA,OAAA,CAAA,UAAA,GAD6C,KAAA,CAAA,eAC7C;AACA,mBAAA,OAAA,CAAA,eAAA,GAF6C,CAE7C;AACA,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAH4B,CAG7C;AACA,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAJ4B,CAI7C;AAjlBuB,aAAA;AAmlBzBC,YAAAA,OAAAA,EAAS,SAAA,sBAAA,GAAkC;AACzC,oBAAMopB,KAAAA,GAAQ,KAD2B,gBACzC;AACA,oBAAM7L,GAAAA,GAAM,KAF6B,GAEzC;;AACA,kBAAI6L,KAAAA,KAAJ,SAAA,EAAyB;AACvB7L,gBAAAA,GAAAA,CADuB,SACvBA;AADuB;AAHgB;;AAQzCA,cAAAA,GAAAA,CARyC,IAQzCA;AACAA,cAAAA,GAAAA,CATyC,SASzCA;;AACA,mBAAK,IAAItrB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIm3B,KAAAA,CAApB,MAAA,EAAkCn3B,CAAlC,EAAA,EAAuC;AACrC,sBAAMo3B,IAAAA,GAAOD,KAAAA,CADwB,CACxBA,CAAb;AACA7L,gBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4B8L,IAAAA,CAFS,SAErC9L;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAc8L,IAAAA,CAAd9L,CAAAA,EAAsB8L,IAAAA,CAHe,CAGrC9L;AACA8L,gBAAAA,IAAAA,CAAAA,SAAAA,CAAAA,GAAAA,EAAoBA,IAAAA,CAJiB,QAIrCA;AAduC;;AAgBzC9L,cAAAA,GAAAA,CAhByC,OAgBzCA;AACAA,cAAAA,GAAAA,CAjByC,IAiBzCA;AACAA,cAAAA,GAAAA,CAlByC,SAkBzCA;AACA,qBAAO,KAnBkC,gBAmBzC;AAtmBuB,aAAA;AAwmBzBtd,YAAAA,cAAAA,EAAgB,SAAA,6BAAA,CAAA,OAAA,EAAgD;AAC9D,mBAAA,OAAA,CAAA,WAAA,GAD8D,OAC9D;AAzmBuB,aAAA;AA2mBzBC,YAAAA,cAAAA,EAAgB,SAAA,6BAAA,CAAA,OAAA,EAAgD;AAC9D,mBAAA,OAAA,CAAA,WAAA,GAD8D,OAC9D;AA5mBuB,aAAA;AA8mBzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,CAAA,KAAA,EAAyC;AAClD,mBAAA,OAAA,CAAA,UAAA,GAA0BrP,KAAAA,GADwB,GAClD;AA/mBuB,aAAA;AAinBzBsP,YAAAA,UAAAA,EAAY,SAAA,yBAAA,CAAA,OAAA,EAA4C;AACtD,mBAAA,OAAA,CAAA,OAAA,GAAuB,CAD+B,OACtD;AAlnBuB,aAAA;AAonBzBC,YAAAA,OAAAA,EAAS,SAAA,sBAAA,CAAA,WAAA,EAAA,IAAA,EAAmD;AAC1D,oBAAMipB,OAAAA,GAAU,KAAA,UAAA,CAAA,GAAA,CAD0C,WAC1C,CAAhB;AACA,oBAAMxK,OAAAA,GAAU,KAF0C,OAE1D;;AAEA,kBAAI,CAAJ,OAAA,EAAc;AACZ,sBAAM,IAAA,KAAA,CAAU,uBADJ,WAAA,EACN,CAAN;AALwD;;AAO1DA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqBwK,OAAAA,CAAAA,UAAAA,IAPqC,KAAA,CAAA,oBAO1DxK;;AAIA,kBAAIA,OAAAA,CAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,IAA+BA,OAAAA,CAAAA,UAAAA,CAAAA,CAAAA,MAAnC,CAAA,EAAgE;AAC9DvsB,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADyD,WAC9DA;AAZwD;;AAiB1D,kBAAI8hB,IAAAA,GAAJ,CAAA,EAAc;AACZA,gBAAAA,IAAAA,GAAO,CADK,IACZA;AACAyK,gBAAAA,OAAAA,CAAAA,aAAAA,GAAwB,CAFZ,CAEZA;AAFF,eAAA,MAGO;AACLA,gBAAAA,OAAAA,CAAAA,aAAAA,GADK,CACLA;AArBwD;;AAwB1D,mBAAA,OAAA,CAAA,IAAA,GAxB0D,OAwB1D;AACA,mBAAA,OAAA,CAAA,QAAA,GAzB0D,IAyB1D;;AAEA,kBAAIwK,OAAAA,CAAJ,WAAA,EAAyB;AAAA;AA3BiC;;AA+B1D,oBAAMv2B,IAAAA,GAAOu2B,OAAAA,CAAAA,UAAAA,IA/B6C,YA+B1D;AAEA,kBAAIC,IAAAA,GAjCsD,QAiC1D;;AACA,kBAAID,OAAAA,CAAJ,KAAA,EAAmB;AACjBC,gBAAAA,IAAAA,GADiB,KACjBA;AADF,eAAA,MAEO,IAAID,OAAAA,CAAJ,IAAA,EAAkB;AACvBC,gBAAAA,IAAAA,GADuB,MACvBA;AArCwD;;AAuC1D,oBAAMC,MAAAA,GAASF,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GAvC2C,QAuC1D;AACA,oBAAMG,QAAAA,GAAW,IAAA,IAAA,MAAcH,OAAAA,CAxC2B,YAAA,EAwC1D;AAMA,kBAAII,eAAAA,GA9CsD,IA8C1D;;AACA,kBAAIrV,IAAAA,GAAJ,aAAA,EAA0B;AACxBqV,gBAAAA,eAAAA,GADwB,aACxBA;AADF,eAAA,MAEO,IAAIrV,IAAAA,GAAJ,aAAA,EAA0B;AAC/BqV,gBAAAA,eAAAA,GAD+B,aAC/BA;AAlDwD;;AAoD1D,mBAAA,OAAA,CAAA,aAAA,GAA6BrV,IAAAA,GApD6B,eAoD1D;AAEA,mBAAA,GAAA,CAAA,IAAA,GAAgB,GAAA,MAAA,IAAA,IAAA,IAAA,eAAA,MAtD0C,QAAA,EAsD1D;AA1qBuB,aAAA;AA4qBzB/T,YAAAA,oBAAAA,EAAsB,SAAA,mCAAA,CAAA,IAAA,EAAmD;AACvE,mBAAA,OAAA,CAAA,iBAAA,GADuE,IACvE;AA7qBuB,aAAA;AA+qBzBC,YAAAA,WAAAA,EAAa,SAAA,0BAAA,CAAA,IAAA,EAA0C;AACrD,mBAAA,OAAA,CAAA,QAAA,GADqD,IACrD;AAhrBuB,aAAA;AAkrBzBC,YAAAA,QAAAA,EAAU,SAAA,uBAAA,CAAA,CAAA,EAAA,CAAA,EAAuC;AAC/C,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,IAD8B,CAC/C;AACA,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,IAF8B,CAE/C;AAprBuB,aAAA;AAsrBzBC,YAAAA,kBAAAA,EAAoB,SAAA,iCAAA,CAAA,CAAA,EAAA,CAAA,EAAiD;AACnE,mBAAA,UAAA,CAAgB,CADmD,CACnE;AACA,mBAAA,QAAA,CAAA,CAAA,EAFmE,CAEnE;AAxrBuB,aAAA;AA0rBzBC,YAAAA,aAAAA,EAAe,SAAA,4BAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwD;AACrE,mBAAA,OAAA,CAAA,UAAA,GAA0B,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA1B,CAA0B,CAA1B;AACA,mBAAA,OAAA,CAAA,eAAA,GAA+B/P,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAFsC,CAEtCA,CAA/B;AAEA,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GAJoD,CAIrE;AACA,mBAAA,OAAA,CAAA,CAAA,GAAiB,KAAA,OAAA,CAAA,KAAA,GALoD,CAKrE;AA/rBuB,aAAA;AAisBzBgQ,YAAAA,QAAAA,EAAU,SAAA,uBAAA,GAAmC;AAC3C,mBAAA,QAAA,CAAA,CAAA,EAAiB,KAAA,OAAA,CAD0B,OAC3C;AAlsBuB,aAAA;;AAqsBzBgpB,YAAAA,SAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,gBAAAA,EAAAA,mBAAAA,EAAkE;AAChE,oBAAMpM,GAAAA,GAAM,KADoD,GAChE;AACA,oBAAMuB,OAAAA,GAAU,KAFgD,OAEhE;AACA,oBAAM5a,IAAAA,GAAO4a,OAAAA,CAHmD,IAGhE;AACA,oBAAM8K,iBAAAA,GAAoB9K,OAAAA,CAJsC,iBAIhE;AACA,oBAAM+K,QAAAA,GAAW/K,OAAAA,CAAAA,QAAAA,GAAmBA,OAAAA,CAL4B,aAKhE;AACA,oBAAMgL,cAAAA,GACJF,iBAAAA,GAAoBv0B,KAAAA,CAAAA,iBAAAA,CAP0C,gBAMhE;AAEA,oBAAM00B,cAAAA,GAAiB,CAAC,EACtB,iBAAA,GAAoB10B,KAAAA,CAAAA,iBAAAA,CAT0C,gBAQxC,CAAxB;AAGA,oBAAM20B,WAAAA,GAAclL,OAAAA,CAAAA,WAAAA,IAAuB,CAAC5a,IAAAA,CAXoB,WAWhE;AAEA,kBAbgE,SAahE;;AACA,kBAAIA,IAAAA,CAAAA,eAAAA,IAAAA,cAAAA,IAAJ,WAAA,EAA2D;AACzD+lB,gBAAAA,SAAAA,GAAY/lB,IAAAA,CAAAA,gBAAAA,CAAsB,KAAtBA,UAAAA,EAD6C,SAC7CA,CAAZ+lB;AAf8D;;AAkBhE,kBAAI/lB,IAAAA,CAAAA,eAAAA,IAAJ,WAAA,EAAyC;AACvCqZ,gBAAAA,GAAAA,CADuC,IACvCA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAFuC,CAEvCA;AACAA,gBAAAA,GAAAA,CAHuC,SAGvCA;AACA0M,gBAAAA,SAAAA,CAAAA,GAAAA,EAJuC,QAIvCA,CAAAA;;AACA,oBAAA,gBAAA,EAAsB;AACpB1M,kBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EADoB,gBACpBA;AANqC;;AAQvC,oBACEuM,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,IAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACAkoB,kBAAAA,GAAAA,CADA,IACAA;AAZqC;;AAcvC,oBACEuM,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,MAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,sBAAA,mBAAA,EAAyB;AACvBkoB,oBAAAA,GAAAA,CADuB,cACvBA;AACAA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,KAAAA,CAAW,KAFJ,oBAEPA,CAAhB4sB;AAHF;;AAKAA,kBAAAA,GAAAA,CALA,MAKAA;AAtBqC;;AAwBvCA,gBAAAA,GAAAA,CAxBuC,OAwBvCA;AAxBF,eAAA,MAyBO;AACL,oBACEuM,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,IAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACAkoB,kBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EADA,CACAA;AALG;;AAOL,oBACEuM,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,MAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,sBAAA,mBAAA,EAAyB;AACvBkoB,oBAAAA,GAAAA,CADuB,IACvBA;AACAA,oBAAAA,GAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAFuB,CAEvBA;AACAA,oBAAAA,GAAAA,CAHuB,cAGvBA;AACAA,oBAAAA,GAAAA,CAAAA,SAAAA,GAAgB5sB,IAAAA,CAAAA,KAAAA,CAAW,KAJJ,oBAIPA,CAAhB4sB;AACAA,oBAAAA,GAAAA,CAAAA,UAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EALuB,CAKvBA;AACAA,oBAAAA,GAAAA,CANuB,OAMvBA;AANF,mBAAA,MAOO;AACLA,oBAAAA,GAAAA,CAAAA,UAAAA,CAAAA,SAAAA,EAAAA,CAAAA,EADK,CACLA;AATF;AAVG;AA3CyD;;AAmEhE,kBAAA,cAAA,EAAoB;AAClB,sBAAM6L,KAAAA,GAAQ,KAAA,gBAAA,KAA0B,KAAA,gBAAA,GADtB,EACJ,CAAd;AACAA,gBAAAA,KAAAA,CAAAA,IAAAA,CAAW;AACTxqB,kBAAAA,SAAAA,EAAW2e,GAAAA,CADF,mBAAA;AAAA,kBAAA,CAAA;AAAA,kBAAA,CAAA;AAAA,kBAAA,QAAA;AAAA,kBAAA;AAAA,iBAAX6L;AArE8D;AArsBzC,aAAA;;AAoxBzB,gBAAA,uBAAA,GAA8B;AAG5B,oBAAM;AAAE36B,gBAAAA,OAAAA,EAAF;AAAA,kBAAmB,KAAA,cAAA,CAAA,SAAA,CAAA,yBAAA,EAAA,EAAA,EAHG,EAGH,CAAzB;AAKA8uB,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAR4B,CAQ5BA;AACAA,cAAAA,GAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAT4B,EAS5BA;AACA,oBAAM7W,IAAAA,GAAO6W,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAVe,IAU5B;AACA,kBAAI5rB,OAAAA,GAXwB,KAW5B;;AACA,mBAAK,IAAIM,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIyU,IAAAA,CAApB,MAAA,EAAiCzU,CAAAA,IAAjC,CAAA,EAAyC;AACvC,oBAAIyU,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAeA,IAAAA,CAAAA,CAAAA,CAAAA,GAAnB,GAAA,EAAkC;AAChC/U,kBAAAA,OAAAA,GADgC,IAChCA;AADgC;AADK;AAZb;;AAkB5B,qBAAOuV,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,yBAAAA,EAlBqB,OAkBrBA,CAAP;AAtyBuB,aAAA;;AAyyBzBtG,YAAAA,QAAAA,EAAU,SAAA,uBAAA,CAAA,MAAA,EAAyC;AACjD,oBAAMke,OAAAA,GAAU,KADiC,OACjD;AACA,oBAAM5a,IAAAA,GAAO4a,OAAAA,CAFoC,IAEjD;;AACA,kBAAI5a,IAAAA,CAAJ,WAAA,EAAsB;AACpB,uBAAO,KAAA,aAAA,CADa,MACb,CAAP;AAJ+C;;AAOjD,oBAAM2lB,QAAAA,GAAW/K,OAAAA,CAPgC,QAOjD;;AACA,kBAAI+K,QAAAA,KAAJ,CAAA,EAAoB;AAClB,uBADkB,SAClB;AAT+C;;AAYjD,oBAAMtM,GAAAA,GAAM,KAZqC,GAYjD;AACA,oBAAM2M,aAAAA,GAAgBpL,OAAAA,CAb2B,aAajD;AACA,oBAAMqL,WAAAA,GAAcrL,OAAAA,CAd6B,WAcjD;AACA,oBAAMsL,WAAAA,GAActL,OAAAA,CAf6B,WAejD;AACA,oBAAMuL,aAAAA,GAAgBvL,OAAAA,CAhB2B,aAgBjD;AACA,oBAAMwL,UAAAA,GAAaxL,OAAAA,CAAAA,UAAAA,GAjB8B,aAiBjD;AACA,oBAAMyL,YAAAA,GAAeC,MAAAA,CAlB4B,MAkBjD;AACA,oBAAMC,QAAAA,GAAWvmB,IAAAA,CAnBgC,QAmBjD;AACA,oBAAMwmB,UAAAA,GAAaD,QAAAA,GAAAA,CAAAA,GAAe,CApBe,CAoBjD;AACA,oBAAME,eAAAA,GAAkBzmB,IAAAA,CArByB,eAqBjD;AACA,oBAAM0mB,iBAAAA,GAAoBf,QAAAA,GAAW/K,OAAAA,CAAAA,UAAAA,CAtBY,CAsBZA,CAArC;AAEA,oBAAM+L,cAAAA,GACJ/L,OAAAA,CAAAA,iBAAAA,KAA8BzpB,KAAAA,CAAAA,iBAAAA,CAA9BypB,IAAAA,IACA,CAAC5a,IAAAA,CADD4a,eAAAA,IAEA,CAACA,OAAAA,CA3B8C,WAwBjD;AAKAvB,cAAAA,GAAAA,CA7BiD,IA6BjDA;AACA,kBA9BiD,gBA8BjD;;AACA,kBAAIuB,OAAAA,CAAJ,WAAA,EAAyB;AAGvBvB,gBAAAA,GAAAA,CAHuB,IAGvBA;AACA,sBAAMuN,OAAAA,GAAUhM,OAAAA,CAAAA,SAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAJO,IAIPA,CAAhB;AACAiM,gBAAAA,gBAAAA,GAAmBxN,GAAAA,CALI,mBAKvBwN;AACAxN,gBAAAA,GAAAA,CANuB,OAMvBA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,GAPuB,OAOvBA;AAtC+C;;AAwCjDA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyBuB,OAAAA,CAxCwB,UAwCjDvB;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAcuB,OAAAA,CAAdvB,CAAAA,EAAyBuB,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAzCY,QAyCjDvB;;AAEA,kBAAI8M,aAAAA,GAAJ,CAAA,EAAuB;AACrB9M,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAsB,CADD,CACrBA;AADF,eAAA,MAEO;AACLA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EADK,CACLA;AA9C+C;;AAiDjD,kBAAIwL,SAAAA,GAAYjK,OAAAA,CAjDiC,SAiDjD;AACA,kBAAIkM,mBAAAA,GAlD6C,KAkDjD;AACA,oBAAMl6B,KAAAA,GAAQguB,OAAAA,CAnDmC,eAmDjD;;AACA,kBAAIhuB,KAAAA,KAAAA,CAAAA,IAAei4B,SAAAA,KAAnB,CAAA,EAAoC;AAClC,sBAAMe,cAAAA,GACJhL,OAAAA,CAAAA,iBAAAA,GAA4BzpB,KAAAA,CAAAA,iBAAAA,CAFI,gBAClC;;AAEA,oBACEy0B,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,MAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,uBAAA,0BAAA,GADA,IACA;AACA0zB,kBAAAA,SAAAA,GAAY,KAFZ,mBAEY,EAAZA;AACAiC,kBAAAA,mBAAAA,GAAsBjC,SAAAA,GAHtB,CAGAiC;AATgC;AAApC,eAAA,MAWO;AACLjC,gBAAAA,SAAAA,IADK,KACLA;AAhE+C;;AAmEjD,kBAAImB,aAAAA,KAAJ,GAAA,EAA2B;AACzB3M,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EADyB,aACzBA;AACAwL,gBAAAA,SAAAA,IAFyB,aAEzBA;AArE+C;;AAwEjDxL,cAAAA,GAAAA,CAAAA,SAAAA,GAxEiD,SAwEjDA;AAEA,kBAAIkL,CAAAA,GAAJ,CAAA;AAAA,kBA1EiD,CA0EjD;;AAEA,mBAAKx2B,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,YAAA,EAA8B,EAA9B,CAAA,EAAmC;AACjC,sBAAMg5B,KAAAA,GAAQT,MAAAA,CADmB,CACnBA,CAAd;;AACA,oBAAIU,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AAChBzC,kBAAAA,CAAAA,IAAMiC,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADU,IAChBjC;AADgB;AAFe;;AAOjC,oBAAI0C,aAAAA,GAP6B,KAOjC;AACA,sBAAMC,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IARgB,WAQjC;AACA,sBAAMC,SAAAA,GAAYJ,KAAAA,CATe,QASjC;AACA,sBAAMK,MAAAA,GAASL,KAAAA,CAVkB,MAUjC;AACA,oBAAA,OAAA,EAXiC,OAWjC;AACA,oBAAI98B,KAAAA,GAAQ88B,KAAAA,CAZqB,KAYjC;;AACA,oBAAA,QAAA,EAAc;AACZ,wBAAMM,OAAAA,GAAUN,KAAAA,CAAAA,OAAAA,IADJ,eACZ;AACA,wBAAMO,EAAAA,GACJ,EAAE,KAAA,CAAA,OAAA,GAAgBD,OAAAA,CAAhB,CAAgBA,CAAhB,GAA6Bp9B,KAAAA,GAA/B,GAAA,IAHU,iBAEZ;AAEA,wBAAMs9B,EAAAA,GAAKF,OAAAA,CAAAA,CAAAA,CAAAA,GAJC,iBAIZ;AAEAp9B,kBAAAA,KAAAA,GAAQo9B,OAAAA,GAAU,CAACA,OAAAA,CAAXA,CAAWA,CAAXA,GANI,KAMZp9B;AACAu9B,kBAAAA,OAAAA,GAAUF,EAAAA,GAPE,aAOZE;AACAC,kBAAAA,OAAAA,GAAW,CAAA,CAAA,GAAD,EAAC,IARC,aAQZA;AARF,iBAAA,MASO;AACLD,kBAAAA,OAAAA,GAAUjD,CAAAA,GADL,aACLiD;AACAC,kBAAAA,OAAAA,GAFK,CAELA;AAxB+B;;AA2BjC,oBAAIznB,IAAAA,CAAAA,SAAAA,IAAkB/V,KAAAA,GAAtB,CAAA,EAAiC;AAI/B,wBAAMy9B,aAAAA,GACFrO,GAAAA,CAAAA,WAAAA,CAAAA,SAAAA,EAAAA,KAAAA,GAAD,IAACA,GAAF,QAAEA,GAL2B,aAI/B;;AAGA,sBAAIpvB,KAAAA,GAAAA,aAAAA,IAAyB,KAA7B,uBAAA,EAA2D;AACzD,0BAAM09B,eAAAA,GAAkB19B,KAAAA,GADiC,aACzD;AACAg9B,oBAAAA,aAAAA,GAFyD,IAEzDA;AACA5N,oBAAAA,GAAAA,CAHyD,IAGzDA;AACAA,oBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,eAAAA,EAJyD,CAIzDA;AACAmO,oBAAAA,OAAAA,IALyD,eAKzDA;AALF,mBAAA,MAMO,IAAIv9B,KAAAA,KAAJ,aAAA,EAA6B;AAClCu9B,oBAAAA,OAAAA,IACK,CAAA,KAAA,GAAD,aAAC,IAAF,IAAE,GAAH,QAAG,GAF6B,aAClCA;AAd6B;AA3BA;;AAgDjC,oBAAI,KAAA,cAAA,KAAwB,KAAA,CAAA,QAAA,IAAkBxnB,IAAAA,CAA9C,WAAI,CAAJ,EAAiE;AAC/D,sBAAI2mB,cAAAA,IAAkB,CAAtB,MAAA,EAA+B;AAE7BtN,oBAAAA,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,EAAAA,OAAAA,EAF6B,OAE7BA;AAFF,mBAAA,MAGO;AACL,yBAAA,SAAA,CAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAAA,gBAAA,EADK,mBACL;;AAOA,wBAAA,MAAA,EAAY;AACV,4BAAMuO,aAAAA,GACJJ,OAAAA,GAAW7B,QAAAA,GAAWyB,MAAAA,CAAAA,MAAAA,CAAZ,CAACzB,GAFH,aACV;AAEA,4BAAMkC,aAAAA,GACJJ,OAAAA,GAAW9B,QAAAA,GAAWyB,MAAAA,CAAAA,MAAAA,CAAZ,CAACzB,GAJH,aAGV;AAEA,2BAAA,SAAA,CACEyB,MAAAA,CADF,QAAA,EAAA,aAAA,EAAA,aAAA,EAAA,gBAAA,EALU,mBAKV;AAbG;AAJwD;AAhDhC;;AA4EjC,oBA5EiC,SA4EjC;;AACA,oBAAA,QAAA,EAAc;AACZU,kBAAAA,SAAAA,GAAY79B,KAAAA,GAAAA,iBAAAA,GAA4Bi9B,OAAAA,GAD5B,aACZY;AADF,iBAAA,MAEO;AACLA,kBAAAA,SAAAA,GAAY79B,KAAAA,GAAAA,iBAAAA,GAA4Bi9B,OAAAA,GADnC,aACLY;AAhF+B;;AAkFjCvD,gBAAAA,CAAAA,IAlFiC,SAkFjCA;;AAEA,oBAAA,aAAA,EAAmB;AACjBlL,kBAAAA,GAAAA,CADiB,OACjBA;AArF+B;AA5Ec;;AAoKjD,kBAAA,QAAA,EAAc;AACZuB,gBAAAA,OAAAA,CAAAA,CAAAA,IADY,CACZA;AADF,eAAA,MAEO;AACLA,gBAAAA,OAAAA,CAAAA,CAAAA,IAAa2J,CAAAA,GADR,UACL3J;AAvK+C;;AAyKjDvB,cAAAA,GAAAA,CAzKiD,OAyKjDA;AAl9BuB,aAAA;AAq9BzB0O,YAAAA,aAAAA,EAAe,SAAA,4BAAA,CAAA,MAAA,EAA8C;AAE3D,oBAAM1O,GAAAA,GAAM,KAF+C,GAE3D;AACA,oBAAMuB,OAAAA,GAAU,KAH2C,OAG3D;AACA,oBAAM5a,IAAAA,GAAO4a,OAAAA,CAJ8C,IAI3D;AACA,oBAAM+K,QAAAA,GAAW/K,OAAAA,CAL0C,QAK3D;AACA,oBAAMuL,aAAAA,GAAgBvL,OAAAA,CANqC,aAM3D;AACA,oBAAM4L,UAAAA,GAAaxmB,IAAAA,CAAAA,QAAAA,GAAAA,CAAAA,GAAoB,CAPoB,CAO3D;AACA,oBAAMimB,WAAAA,GAAcrL,OAAAA,CARuC,WAQ3D;AACA,oBAAMsL,WAAAA,GAActL,OAAAA,CATuC,WAS3D;AACA,oBAAMwL,UAAAA,GAAaxL,OAAAA,CAAAA,UAAAA,GAVwC,aAU3D;AACA,oBAAMoN,UAAAA,GAAapN,OAAAA,CAAAA,UAAAA,IAXwC,KAAA,CAAA,oBAW3D;AACA,oBAAMyL,YAAAA,GAAeC,MAAAA,CAZsC,MAY3D;AACA,oBAAM2B,eAAAA,GACJrN,OAAAA,CAAAA,iBAAAA,KAA8BzpB,KAAAA,CAAAA,iBAAAA,CAd2B,SAa3D;AAEA,kBAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAf2D,aAe3D;;AAEA,kBAAI82B,eAAAA,IAAmBtC,QAAAA,KAAvB,CAAA,EAAuC;AAAA;AAjBoB;;AAoB3D,mBAAA,0BAAA,GApB2D,IAoB3D;AAEAtM,cAAAA,GAAAA,CAtB2D,IAsB3DA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyBuB,OAAAA,CAvBkC,UAuB3DvB;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAcuB,OAAAA,CAAdvB,CAAAA,EAAyBuB,OAAAA,CAxBkC,CAwB3DvB;AAEAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EA1B2D,aA0B3DA;;AAEA,mBAAKtrB,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,YAAA,EAA8B,EAA9B,CAAA,EAAmC;AACjCg5B,gBAAAA,KAAAA,GAAQT,MAAAA,CADyB,CACzBA,CAARS;;AACA,oBAAIC,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AAChBkB,kBAAAA,aAAAA,GAAiB1B,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADD,IAChB0B;AACA,uBAAA,GAAA,CAAA,SAAA,CAAA,aAAA,EAFgB,CAEhB;AACAtN,kBAAAA,OAAAA,CAAAA,CAAAA,IAAasN,aAAAA,GAHG,UAGhBtN;AAHgB;AAFe;;AASjC,sBAAMsM,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IATgB,WASjC;AACA,sBAAM1X,YAAAA,GAAexP,IAAAA,CAAAA,oBAAAA,CAA0B+mB,KAAAA,CAVd,cAUZ/mB,CAArB;;AACA,oBAAI,CAAJ,YAAA,EAAmB;AACjB3R,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,oBAAoB04B,KAAAA,CADR,cAAA,qBACjB14B;AADiB;AAXc;;AAejC,oBAAI,KAAJ,cAAA,EAAyB;AACvB,uBAAA,eAAA,GADuB,KACvB;AACA,uBAFuB,IAEvB;AACAgrB,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAHuB,QAGvBA;AACAA,kBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAJuB,UAIvBA;AACA,uBAAA,mBAAA,CALuB,YAKvB;AACA,uBANuB,OAMvB;AArB+B;;AAwBjC,sBAAM8O,WAAAA,GAAc,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAACpB,KAAAA,CAAD,KAAA,EAApB,CAAoB,CAApB,EAxBa,UAwBb,CAApB;;AACA98B,gBAAAA,KAAAA,GAAQk+B,WAAAA,CAAAA,CAAAA,CAAAA,GAAAA,QAAAA,GAzByB,OAyBjCl+B;AAEAovB,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,EA3BiC,CA2BjCA;AACAuB,gBAAAA,OAAAA,CAAAA,CAAAA,IAAa3wB,KAAAA,GA5BoB,UA4BjC2wB;AAxDyD;;AA0D3DvB,cAAAA,GAAAA,CA1D2D,OA0D3DA;AACA,mBAAA,eAAA,GA3D2D,IA2D3D;AAhhCuB,aAAA;AAohCzBvc,YAAAA,YAAAA,EAAc,SAAA,2BAAA,CAAA,MAAA,EAAA,MAAA,EAphCW,CAAA,CAAA;AAwhCzBC,YAAAA,qBAAAA,EAAuB,SAAA,oCAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAOrB;AAGA,mBAAA,GAAA,CAAA,IAAA,CAAA,GAAA,EAAA,GAAA,EAAwBqrB,GAAAA,GAAxB,GAAA,EAAmCC,GAAAA,GAHnC,GAGA;AACA,mBAJA,IAIA;AACA,mBALA,OAKA;AApiCuB,aAAA;AAwiCzBC,YAAAA,iBAAAA,EAAmB,SAAA,gCAAA,CAAA,EAAA,EAA8C;AAC/D,kBAD+D,OAC/D;;AACA,kBAAIC,EAAAA,CAAAA,CAAAA,CAAAA,KAAJ,eAAA,EAA+B;AAC7B,sBAAMC,KAAAA,GAAQD,EAAAA,CADe,CACfA,CAAd;AACA,sBAAME,aAAAA,GACJ,KAAA,aAAA,IAAsB,KAAA,GAAA,CAAA,mBAAA,CAHK,KAGL,EADxB;AAEA,sBAAMC,qBAAAA,GAAwB;AAC5BC,kBAAAA,oBAAAA,EAAsBtP,GAAAA,IAAO;AAC3B,2BAAO,IAAA,cAAA,CAAA,GAAA,EAEL,KAFK,UAAA,EAGL,KAHK,IAAA,EAIL,KAJK,aAAA,EAKL,KANyB,YACpB,CAAP;AAF0B;AAAA,iBAA9B;AAWAuN,gBAAAA,OAAAA,GAAU,IAAA,eAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAGR,KAHQ,GAAA,EAAA,qBAAA,EAfmB,aAenB,CAAVA;AAfF,eAAA,MAsBO;AACLA,gBAAAA,OAAAA,GAAUgC,CAAAA,GAAAA,eAAAA,CAAAA,uBAAAA,EADL,EACKA,CAAVhC;AAzB6D;;AA2B/D,qBA3B+D,OA2B/D;AAnkCuB,aAAA;AAqkCzBzpB,YAAAA,eAAAA,EAAiB,SAAA,8BAAA,GAA0C;AACzD,mBAAA,OAAA,CAAA,WAAA,GAA2B,KAAA,iBAAA,CAD8B,SAC9B,CAA3B;AAtkCuB,aAAA;AAwkCzBE,YAAAA,aAAAA,EAAe,SAAA,4BAAA,GAAwC;AACrD,mBAAA,OAAA,CAAA,SAAA,GAAyB,KAAA,iBAAA,CAD4B,SAC5B,CAAzB;AACA,mBAAA,OAAA,CAAA,WAAA,GAFqD,IAErD;AA1kCuB,aAAA;AA4kCzBG,YAAAA,iBAAAA,EAAmB,SAAA,gCAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAmD;AACpE,oBAAMgrB,KAAAA,GAAQrkB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADsD,CACtDA,CAAd;;AACA,mBAAA,GAAA,CAAA,WAAA,GAFoE,KAEpE;AACA,mBAAA,OAAA,CAAA,WAAA,GAHoE,KAGpE;AA/kCuB,aAAA;AAilCzB1G,YAAAA,eAAAA,EAAiB,SAAA,8BAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAiD;AAChE,oBAAM+qB,KAAAA,GAAQrkB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADkD,CAClDA,CAAd;;AACA,mBAAA,GAAA,CAAA,SAAA,GAFgE,KAEhE;AACA,mBAAA,OAAA,CAAA,SAAA,GAHgE,KAGhE;AACA,mBAAA,OAAA,CAAA,WAAA,GAJgE,KAIhE;AArlCuB,aAAA;AAwlCzBvG,YAAAA,WAAAA,EAAa,SAAA,0BAAA,CAAA,SAAA,EAA+C;AAC1D,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADgC;;AAI1D,oBAAMyb,GAAAA,GAAM,KAJ8C,GAI1D;AAEA,mBAN0D,IAM1D;AACA,oBAAMuN,OAAAA,GAAUgC,CAAAA,GAAAA,eAAAA,CAAAA,uBAAAA,EAP0C,SAO1CA,CAAhB;AACAvP,cAAAA,GAAAA,CAAAA,SAAAA,GAAgBuN,OAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAR0C,IAQ1CA,CAAhBvN;AAEA,oBAAMwP,GAAAA,GAAMxP,GAAAA,CAV8C,0BAU1D;;AACA,kBAAA,GAAA,EAAS;AACP,sBAAM/uB,MAAAA,GAAS+uB,GAAAA,CADR,MACP;AACA,sBAAMpvB,KAAAA,GAAQK,MAAAA,CAFP,KAEP;AACA,sBAAMJ,MAAAA,GAASI,MAAAA,CAHR,MAGP;;AAEA,sBAAMw+B,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EALJ,GAKI,CAAX;;AACA,sBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,MAAoB,CAApB,EANJ,GAMI,CAAX;;AACA,sBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,CAAoB,CAApB,EAPJ,GAOI,CAAX;;AACA,sBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,MAAoB,CAApB,EARJ,GAQI,CAAX;;AAEA,sBAAMC,EAAAA,GAAKz8B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAVlC,CAUkCA,CAA9Bx8B,CAAX;AACA,sBAAM08B,EAAAA,GAAK18B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAXlC,CAWkCA,CAA9Bx8B,CAAX;AACA,sBAAM28B,EAAAA,GAAK38B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAZlC,CAYkCA,CAA9Bx8B,CAAX;AACA,sBAAM48B,EAAAA,GAAK58B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAblC,CAakCA,CAA9Bx8B,CAAX;AAEA,qBAAA,GAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,EAA0B28B,EAAAA,GAA1B,EAAA,EAAmCC,EAAAA,GAf5B,EAeP;AAfF,eAAA,MAgBO;AAOL,qBAAA,GAAA,CAAA,QAAA,CAAkB,CAAlB,IAAA,EAAyB,CAAzB,IAAA,EAAA,IAAA,EAPK,IAOL;AAlCwD;;AAqC1D,mBArC0D,OAqC1D;AA7nCuB,aAAA;AAioCzBxrB,YAAAA,gBAAAA,EAAkB,SAAA,+BAAA,GAA2C;AAC3DhU,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EAD2D,kCAC3DA;AAloCuB,aAAA;AAooCzBiU,YAAAA,cAAAA,EAAgB,SAAA,6BAAA,GAAyC;AACvDjU,eAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADuD,gCACvDA;AAroCuB,aAAA;AAwoCzB2U,YAAAA,qBAAAA,EAAuB,SAAA,oCAAA,CAAA,MAAA,EAAA,IAAA,EAGrB;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,mBAJA,IAIA;AACA,mBAAA,kBAAA,CAAA,IAAA,CAA6B,KAL7B,aAKA;;AAEA,kBAAI6E,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAyBimB,MAAAA,CAAAA,MAAAA,KAA7B,CAAA,EAAkD;AAChD,qBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EADgD,MAChD;AARF;;AAWA,mBAAA,aAAA,GAAqB,KAAA,GAAA,CAXrB,mBAWA;;AAEA,kBAAA,IAAA,EAAU;AACR,sBAAMr/B,KAAAA,GAAQs/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADhB,CACgBA,CAAxB;AACA,sBAAMr/B,MAAAA,GAASq/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFjB,CAEiBA,CAAzB;AACA,qBAAA,GAAA,CAAA,IAAA,CAAcA,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CAAvB,CAAuBA,CAAvB,EAAA,KAAA,EAHQ,MAGR;AACA,qBAJQ,IAIR;AACA,qBALQ,OAKR;AAlBF;AA3oCuB,aAAA;AAiqCzB9qB,YAAAA,mBAAAA,EAAqB,SAAA,kCAAA,GAA8C;AACjE,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADuC;;AAIjE,mBAJiE,OAIjE;AACA,mBAAA,aAAA,GAAqB,KAAA,kBAAA,CAL4C,GAK5C,EAArB;AAtqCuB,aAAA;AAyqCzBC,YAAAA,UAAAA,EAAY,SAAA,yBAAA,CAAA,KAAA,EAA0C;AACpD,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD0B;;AAKpD,mBALoD,IAKpD;AACA,oBAAMolB,UAAAA,GAAa,KANiC,GAMpD;;AAcA,kBAAI,CAAC0F,KAAAA,CAAL,QAAA,EAAqB;AACnB/V,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADmB,oCACnBA;AArBkD;;AA0BpD,kBAAI+V,KAAAA,CAAJ,QAAA,EAAoB;AAClBn7B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADkB,gCAClBA;AA3BkD;;AA8BpD,oBAAM01B,gBAAAA,GAAmBD,UAAAA,CA9B2B,mBA8BpD;;AACA,kBAAI0F,KAAAA,CAAJ,MAAA,EAAkB;AAChB1F,gBAAAA,UAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,UAAAA,EAAuC0F,KAAAA,CADvB,MAChB1F;AAhCkD;;AAkCpD,kBAAI,CAAC0F,KAAAA,CAAL,IAAA,EAAiB;AACf,sBAAM,IAAA,KAAA,CADS,2BACT,CAAN;AAnCkD;;AAwCpD,kBAAIC,MAAAA,GAAStlB,KAAAA,CAAAA,IAAAA,CAAAA,0BAAAA,CACXqlB,KAAAA,CADWrlB,IAAAA,EAEX2f,UAAAA,CA1CkD,mBAwCvC3f,CAAb;;AAKA,oBAAMulB,YAAAA,GAAe,CAAA,CAAA,EAAA,CAAA,EAGnB5F,UAAAA,CAAAA,MAAAA,CAHmB,KAAA,EAInBA,UAAAA,CAAAA,MAAAA,CAJF,MAAqB,CAArB;AAMA2F,cAAAA,MAAAA,GAAStlB,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,YAAAA,KAAwC,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAjDslB,CAAiD,CAAjDA;AAGA,oBAAM59B,OAAAA,GAAUY,IAAAA,CAAAA,KAAAA,CAAWg9B,MAAAA,CAtDyB,CAsDzBA,CAAXh9B,CAAhB;AACA,oBAAMX,OAAAA,GAAUW,IAAAA,CAAAA,KAAAA,CAAWg9B,MAAAA,CAvDyB,CAuDzBA,CAAXh9B,CAAhB;AACA,kBAAIi3B,UAAAA,GAAaj3B,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,IAAAA,CAAUg9B,MAAAA,CAAVh9B,CAAUg9B,CAAVh9B,IAATA,OAAAA,EAxDmC,CAwDnCA,CAAjB;AACA,kBAAIk3B,WAAAA,GAAcl3B,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,IAAAA,CAAUg9B,MAAAA,CAAVh9B,CAAUg9B,CAAVh9B,IAATA,OAAAA,EAzDkC,CAyDlCA,CAAlB;AACA,kBAAIk9B,MAAAA,GAAJ,CAAA;AAAA,kBACEC,MAAAA,GA3DkD,CA0DpD;;AAEA,kBAAIlG,UAAAA,GAAJ,cAAA,EAAiC;AAC/BiG,gBAAAA,MAAAA,GAASjG,UAAAA,GADsB,cAC/BiG;AACAjG,gBAAAA,UAAAA,GAF+B,cAE/BA;AA9DkD;;AAgEpD,kBAAIC,WAAAA,GAAJ,cAAA,EAAkC;AAChCiG,gBAAAA,MAAAA,GAASjG,WAAAA,GADuB,cAChCiG;AACAjG,gBAAAA,WAAAA,GAFgC,cAEhCA;AAlEkD;;AAqEpD,kBAAIC,OAAAA,GAAU,YAAY,KArE0B,UAqEpD;;AACA,kBAAI4F,KAAAA,CAAJ,KAAA,EAAiB;AAEf5F,gBAAAA,OAAAA,IAAW,YAAa,KAAA,YAAA,KAFT,CAEfA;AAxEkD;;AA0EpD,oBAAMC,aAAAA,GAAgB,KAAA,cAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EA1E8B,IA0E9B,CAAtB;AAMA,oBAAMG,QAAAA,GAAWH,aAAAA,CAhFmC,OAgFpD;AAIAG,cAAAA,QAAAA,CAAAA,KAAAA,CAAe,IAAfA,MAAAA,EAA2B,IApFyB,MAoFpDA;AACAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAmB,CAAnBA,OAAAA,EAA6B,CArFuB,OAqFpDA;AACAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAtFoD,gBAsFpDA;;AAEA,kBAAIwF,KAAAA,CAAJ,KAAA,EAAiB;AAEf,qBAAA,UAAA,CAAA,IAAA,CAAqB;AACnBl/B,kBAAAA,MAAAA,EAAQu5B,aAAAA,CADW,MAAA;AAEnBt5B,kBAAAA,OAAAA,EAFmB,QAAA;AAAA,kBAAA,OAAA;AAAA,kBAAA,OAAA;AAAA,kBAAA,MAAA;AAAA,kBAAA,MAAA;AAOnB+2B,kBAAAA,OAAAA,EAASkI,KAAAA,CAAAA,KAAAA,CAPU,OAAA;AAQnBnI,kBAAAA,QAAAA,EAAUmI,KAAAA,CAAAA,KAAAA,CARS,QAAA;AASnBvI,kBAAAA,WAAAA,EAAauI,KAAAA,CAAAA,KAAAA,CAAAA,WAAAA,IATM,IAAA;AAUnBK,kBAAAA,qBAAAA,EAVmB;AAAA,iBAArB;AAFF,eAAA,MAcO;AAGL/F,gBAAAA,UAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAHK,CAGLA;AACAA,gBAAAA,UAAAA,CAAAA,SAAAA,CAAAA,OAAAA,EAJK,OAILA;AACAA,gBAAAA,UAAAA,CAAAA,KAAAA,CAAAA,MAAAA,EALK,MAKLA;AA3GkD;;AA+GpDG,cAAAA,YAAAA,CAAAA,UAAAA,EA/GoD,QA+GpDA,CAAAA;AACA,mBAAA,GAAA,GAhHoD,QAgHpD;AACA,mBAAA,SAAA,CAAe,CACb,CAAA,IAAA,EADa,aACb,CADa,EAEb,CAAA,IAAA,EAFa,CAEb,CAFa,EAGb,CAAA,IAAA,EAHF,CAGE,CAHa,CAAf;AAKA,mBAAA,UAAA,CAAA,IAAA,CAtHoD,UAsHpD;AACA,mBAvHoD,UAuHpD;AAGA,mBAAA,OAAA,CAAA,WAAA,GA1HoD,IA0HpD;AAnyCuB,aAAA;AAsyCzBtlB,YAAAA,QAAAA,EAAU,SAAA,uBAAA,CAAA,KAAA,EAAwC;AAChD,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADsB;;AAIhD,mBAJgD,UAIhD;AACA,oBAAMqlB,QAAAA,GAAW,KAL+B,GAKhD;AACA,mBAAA,GAAA,GAAW,KAAA,UAAA,CANqC,GAMrC,EAAX;;AAGA,kBAAI,KAAA,GAAA,CAAA,qBAAA,KAAJ,SAAA,EAAkD;AAChD,qBAAA,GAAA,CAAA,qBAAA,GADgD,KAChD;AADF,eAAA,MAEO;AACL,qBAAA,GAAA,CAAA,wBAAA,GADK,KACL;AAZ8C;;AAchD,kBAAIwF,KAAAA,CAAJ,KAAA,EAAiB;AACf,qBAAA,SAAA,GAAiB,KAAA,UAAA,CADF,GACE,EAAjB;AADF,eAAA,MAEO;AACL,qBAAA,GAAA,CAAA,SAAA,CAAmBxF,QAAAA,CAAnB,MAAA,EAAA,CAAA,EADK,CACL;AAjB8C;;AAmBhD,mBAnBgD,OAmBhD;AAzzCuB,aAAA;AA4zCzBplB,YAAAA,gBAAAA,EAAkB,SAAA,+BAAA,GAA2C;AAC3D,mBAD2D,IAC3D;;AACA,kBAAI,KAAJ,aAAA,EAAwB;AACtB,qBAAA,GAAA,CAAA,YAAA,CAAA,KAAA,CAA4B,KAA5B,GAAA,EAAsC,KADhB,aACtB;AAHyD;AA5zCpC,aAAA;AAm0CzBC,YAAAA,cAAAA,EAAgB,SAAA,6BAAA,GAAyC;AACvD,mBADuD,OACvD;AAp0CuB,aAAA;AAu0CzBC,YAAAA,eAAAA,EAAiB,SAAA,8BAAA,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAIf;AACA,mBADA,IACA;AACA0jB,cAAAA,iBAAAA,CAAkB,KAFlB,GAEAA,CAAAA;AACA,mBAAA,OAAA,GAAe,IAHf,gBAGe,EAAf;;AAEA,kBAAInf,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,KAAuBrW,IAAAA,CAAAA,MAAAA,KAA3B,CAAA,EAA8C;AAC5C,sBAAM/C,KAAAA,GAAQ+C,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADoB,CACpBA,CAAxB;AACA,sBAAM9C,MAAAA,GAAS8C,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFmB,CAEnBA,CAAzB;AACA,qBAAA,GAAA,CAAA,IAAA,CAAcA,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CAAvB,CAAuBA,CAAvB,EAAA,KAAA,EAH4C,MAG5C;AACA,qBAJ4C,IAI5C;AACA,qBAL4C,OAK5C;AAVF;;AAaA,mBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAbA,SAaA;AACA,mBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,EAdA,MAcA;AAz1CuB,aAAA;AA41CzB+R,YAAAA,aAAAA,EAAe,SAAA,4BAAA,GAAwC;AACrD,mBADqD,OACrD;AA71CuB,aAAA;AAg2CzBE,YAAAA,qBAAAA,EAAuB,SAAA,oCAAA,CAAA,GAAA,EAAmD;AACxE,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD8C;;AAIxE,oBAAMoa,GAAAA,GAAM,KAJ4D,GAIxE;AACA,oBAAMpvB,KAAAA,GAAQ6/B,GAAAA,CAAd,KAAA;AAAA,oBACE5/B,MAAAA,GAAS4/B,GAAAA,CAN6D,MAKxE;AAEA,oBAAM/E,SAAAA,GAAY,KAAA,OAAA,CAPsD,SAOxE;AACA,oBAAMC,aAAAA,GAAgB,KAAA,OAAA,CARkD,WAQxE;AAEA,oBAAM+B,KAAAA,GAAQ,KAV0D,eAUxE;;AAEA,kBAAIhL,oBAAAA,IAAAA,KAAAA,IAAiCgL,KAAAA,CAAAA,QAAAA,KAArC,SAAA,EAAmE;AACjE,oBAAI98B,KAAAA,IAAAA,mBAAAA,IAAgCC,MAAAA,IAApC,mBAAA,EAAmE;AACjE68B,kBAAAA,KAAAA,CAAAA,QAAAA,GAAiB,iBAAA,CAAkB;AAAEvkB,oBAAAA,IAAAA,EAAMsnB,GAAAA,CAAR,IAAA;AAAA,oBAAA,KAAA;AAAA,oBAAA;AAAA,mBAAlB,CAAjB/C;AADF,iBAAA,MAEO;AACLA,kBAAAA,KAAAA,CAAAA,QAAAA,GADK,IACLA;AAJ+D;AAZK;;AAoBxE,kBAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAAA,CAAJ,QAAA,EAAqB;AACnBA,gBAAAA,KAAAA,CAAAA,QAAAA,CADmB,GACnBA;AADmB;AApBmD;;AAyBxE,oBAAMgD,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,KAAA,EAzBqD,MAyBrD,CAAnB;AAKA,oBAAMnI,OAAAA,GAAUmI,UAAAA,CA9BwD,OA8BxE;AACAnI,cAAAA,OAAAA,CA/BwE,IA+BxEA;AAEAoI,cAAAA,kBAAAA,CAAAA,OAAAA,EAjCwE,GAiCxEA,CAAAA;AAEApI,cAAAA,OAAAA,CAAAA,wBAAAA,GAnCwE,WAmCxEA;AAEAA,cAAAA,OAAAA,CAAAA,SAAAA,GAAoBoD,aAAAA,GAChBD,SAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EADgBC,IAChBD,CADgBC,GArCoD,SAqCxEpD;AAGAA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAxCwE,MAwCxEA;AAEAA,cAAAA,OAAAA,CA1CwE,OA0CxEA;AAEA,mBAAA,uBAAA,CAA6BmI,UAAAA,CA5C2C,MA4CxE;AA54CuB,aAAA;;AA+4CzBxqB,YAAAA,2BAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAGE0qB,KAAAA,GAHF1qB,CAAAA,EAIE2qB,KAAAA,GAJF3qB,CAAAA,EAAAA,MAAAA,EAAAA,SAAAA,EAOE;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,oBAAMtV,KAAAA,GAAQgzB,OAAAA,CAJd,KAIA;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CALf,MAKA;AACA,oBAAM8H,SAAAA,GAAY,KAAA,OAAA,CANlB,SAMA;AACA,oBAAMC,aAAAA,GAAgB,KAAA,OAAA,CAPtB,WAOA;AAEA,oBAAM+E,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,KAAA,EATnB,MASmB,CAAnB;AAKA,oBAAMnI,OAAAA,GAAUmI,UAAAA,CAdhB,OAcA;AACAnI,cAAAA,OAAAA,CAfA,IAeAA;AAEAoI,cAAAA,kBAAAA,CAAAA,OAAAA,EAjBA,OAiBAA,CAAAA;AAEApI,cAAAA,OAAAA,CAAAA,wBAAAA,GAnBA,WAmBAA;AAEAA,cAAAA,OAAAA,CAAAA,SAAAA,GAAoBoD,aAAAA,GAChBD,SAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EADgBC,IAChBD,CADgBC,GArBpB,SAqBApD;AAGAA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAxBA,MAwBAA;AAEAA,cAAAA,OAAAA,CA1BA,OA0BAA;AAEA,oBAAMvI,GAAAA,GAAM,KA5BZ,GA4BA;;AACA,mBAAK,IAAItrB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKq8B,SAAAA,CAArB,MAAA,EAAuCp8B,CAAAA,GAAvC,EAAA,EAA+CA,CAAAA,IAA/C,CAAA,EAAuD;AACrDsrB,gBAAAA,GAAAA,CADqD,IACrDA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAKE8Q,SAAAA,CALF9Q,CAKE8Q,CALF9Q,EAME8Q,SAAAA,CAAUp8B,CAAAA,GARyC,CAQnDo8B,CANF9Q;AAQAA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAa,CAVwC,CAUrDA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAc0Q,UAAAA,CAAd1Q,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAyD,CAAzDA,CAAAA,EAAAA,CAAAA,EAXqD,CAWrDA;AACAA,gBAAAA,GAAAA,CAZqD,OAYrDA;AAzCF;AAt5CuB,aAAA;;AAm8CzBna,YAAAA,0BAAAA,EAA4B,SAAA,yCAAA,CAAA,MAAA,EAE1B;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,oBAAMma,GAAAA,GAAM,KAJZ,GAIA;AAEA,oBAAM0L,SAAAA,GAAY,KAAA,OAAA,CANlB,SAMA;AACA,oBAAMC,aAAAA,GAAgB,KAAA,OAAA,CAPtB,WAOA;;AACA,mBAAK,IAAIj3B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKs8B,MAAAA,CAArB,MAAA,EAAoCr8B,CAAAA,GAApC,EAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,sBAAMs8B,KAAAA,GAAQD,MAAAA,CADiC,CACjCA,CAAd;AACA,sBAAMngC,KAAAA,GAAQogC,KAAAA,CAAd,KAAA;AAAA,sBACEngC,MAAAA,GAASmgC,KAAAA,CAHoC,MAE/C;AAGA,sBAAMN,UAAAA,GAAa,KAAA,cAAA,CAAA,SAAA,CAAA,YAAA,EAAA,KAAA,EAL4B,MAK5B,CAAnB;AAKA,sBAAMnI,OAAAA,GAAUmI,UAAAA,CAV+B,OAU/C;AACAnI,gBAAAA,OAAAA,CAX+C,IAW/CA;AAEAoI,gBAAAA,kBAAAA,CAAAA,OAAAA,EAb+C,KAa/CA,CAAAA;AAEApI,gBAAAA,OAAAA,CAAAA,wBAAAA,GAf+C,WAe/CA;AAEAA,gBAAAA,OAAAA,CAAAA,SAAAA,GAAoBoD,aAAAA,GAChBD,SAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EADgBC,IAChBD,CADgBC,GAjB2B,SAiB/CpD;AAGAA,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EApB+C,MAoB/CA;AAEAA,gBAAAA,OAAAA,CAtB+C,OAsB/CA;AAEAvI,gBAAAA,GAAAA,CAxB+C,IAwB/CA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyBgR,KAAAA,CAzBsB,SAyB/ChR;AACAA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAa,CA1BkC,CA0B/CA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAc0Q,UAAAA,CAAd1Q,MAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAyD,CAAzDA,CAAAA,EAAAA,CAAAA,EA3B+C,CA2B/CA;AACAA,gBAAAA,GAAAA,CA5B+C,OA4B/CA;AApCF;AAr8CuB,aAAA;AA6+CzBla,YAAAA,iBAAAA,EAAmB,SAAA,gCAAA,CAAA,KAAA,EAAiD;AAClE,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADwC;;AAIlE,oBAAM8d,OAAAA,GAAUqN,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CAN8D,KAM9D,CAFJ;;AAGA,kBAAI,CAAJ,OAAA,EAAc;AACZj8B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADY,iCACZA;AADY;AAPoD;;AAYlE,mBAAA,uBAAA,CAZkE,OAYlE;AAz/CuB,aAAA;AA4/CzBiR,YAAAA,uBAAAA,EAAyB,SAAA,sCAAA,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAKvB;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,oBAAM2d,OAAAA,GAAUqN,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CANJ,KAMI,CAFJ;;AAGA,kBAAI,CAAJ,OAAA,EAAc;AACZj8B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADY,iCACZA;AADY;AAPd;;AAYA,oBAAMpE,KAAAA,GAAQgzB,OAAAA,CAZd,KAYA;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CAbf,MAaA;AACA,oBAAMsN,GAAAA,GAdN,EAcA;;AACA,mBAAK,IAAIx8B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKq8B,SAAAA,CAArB,MAAA,EAAuCp8B,CAAAA,GAAvC,EAAA,EAA+CA,CAAAA,IAA/C,CAAA,EAAuD;AACrDw8B,gBAAAA,GAAAA,CAAAA,IAAAA,CAAS;AACP7vB,kBAAAA,SAAAA,EAAW,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAuByvB,SAAAA,CAAvB,CAAuBA,CAAvB,EAAqCA,SAAAA,CAAUp8B,CAAAA,GADnD,CACyCo8B,CAArC,CADJ;AAEP5F,kBAAAA,CAAAA,EAFO,CAAA;AAGPpD,kBAAAA,CAAAA,EAHO,CAAA;AAIPqJ,kBAAAA,CAAAA,EAJO,KAAA;AAKPC,kBAAAA,CAAAA,EALO;AAAA,iBAATF;AAhBF;;AAwBA,mBAAA,4BAAA,CAAA,OAAA,EAxBA,GAwBA;AAzhDuB,aAAA;AA4hDzBnrB,YAAAA,uBAAAA,EAAyB,SAAA,sCAAA,CAAA,OAAA,EAEvB;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,oBAAMnV,KAAAA,GAAQgzB,OAAAA,CAJd,KAIA;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CALf,MAKA;AACA,oBAAM5D,GAAAA,GAAM,KANZ,GAMA;AAEA,mBARA,IAQA;AAEAA,cAAAA,GAAAA,CAAAA,KAAAA,CAAU,IAAVA,KAAAA,EAAqB,CAAA,CAAA,GAVrB,MAUAA;AAEA,oBAAM0K,gBAAAA,GAAmB1K,GAAAA,CAZzB,0BAYA;AACA,kBAAIqR,UAAAA,GAAaj+B,IAAAA,CAAAA,GAAAA,CACfA,IAAAA,CAAAA,KAAAA,CAAWs3B,gBAAAA,CAAXt3B,CAAWs3B,CAAXt3B,EAAgCs3B,gBAAAA,CADjBt3B,CACiBs3B,CAAhCt3B,CADeA,EAbjB,CAaiBA,CAAjB;AAIA,kBAAIk+B,WAAAA,GAAcl+B,IAAAA,CAAAA,GAAAA,CAChBA,IAAAA,CAAAA,KAAAA,CAAWs3B,gBAAAA,CAAXt3B,CAAWs3B,CAAXt3B,EAAgCs3B,gBAAAA,CADhBt3B,CACgBs3B,CAAhCt3B,CADgBA,EAjBlB,CAiBkBA,CAAlB;AAKA,kBAAA,UAAA,EAAA,SAAA,EAtBA,MAsBA;;AAEA,kBACG,OAAA,WAAA,KAAA,UAAA,IAAqCwwB,OAAAA,YAAtC,WAAC,IACD,CAACA,OAAAA,CAFH,IAAA,EAGE;AACA2N,gBAAAA,UAAAA,GADA,OACAA;AAJF,eAAA,MAKO;AACLC,gBAAAA,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,KAAA,EADP,MACO,CAAZA;AACAC,gBAAAA,MAAAA,GAASD,SAAAA,CAFJ,OAELC;AACAC,gBAAAA,kBAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAoC,KAAA,OAAA,CAH/B,YAGLA,CAAAA;AACAH,gBAAAA,UAAAA,GAAaC,SAAAA,CAJR,MAILD;AAjCF;;AAoCA,kBAAII,UAAAA,GAAJ,KAAA;AAAA,kBACEC,WAAAA,GArCF,MAoCA;AAEA,kBAAIC,WAAAA,GAtCJ,WAsCA;;AAIA,qBACGR,UAAAA,GAAAA,CAAAA,IAAkBM,UAAAA,GAAnB,CAACN,IACAC,WAAAA,GAAAA,CAAAA,IAAmBM,WAAAA,GAFtB,CAAA,EAGE;AACA,oBAAIE,QAAAA,GAAJ,UAAA;AAAA,oBACEC,SAAAA,GAFF,WACA;;AAEA,oBAAIV,UAAAA,GAAAA,CAAAA,IAAkBM,UAAAA,GAAtB,CAAA,EAAsC;AACpCG,kBAAAA,QAAAA,GAAW1+B,IAAAA,CAAAA,IAAAA,CAAUu+B,UAAAA,GADe,CACzBv+B,CAAX0+B;AACAT,kBAAAA,UAAAA,IAAcM,UAAAA,GAFsB,QAEpCN;AALF;;AAOA,oBAAIC,WAAAA,GAAAA,CAAAA,IAAmBM,WAAAA,GAAvB,CAAA,EAAwC;AACtCG,kBAAAA,SAAAA,GAAY3+B,IAAAA,CAAAA,IAAAA,CAAUw+B,WAAAA,GADgB,CAC1Bx+B,CAAZ2+B;AACAT,kBAAAA,WAAAA,IAAeM,WAAAA,GAFuB,SAEtCN;AATF;;AAWAE,gBAAAA,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,WAAA,EAAA,QAAA,EAXZ,SAWY,CAAZA;AAKAC,gBAAAA,MAAAA,GAASD,SAAAA,CAhBT,OAgBAC;AACAA,gBAAAA,MAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,QAAAA,EAjBA,SAiBAA;AACAA,gBAAAA,MAAAA,CAAAA,SAAAA,CAAAA,UAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,QAAAA,EAlBA,SAkBAA;AAWAF,gBAAAA,UAAAA,GAAaC,SAAAA,CA7Bb,MA6BAD;AACAI,gBAAAA,UAAAA,GA9BA,QA8BAA;AACAC,gBAAAA,WAAAA,GA/BA,SA+BAA;AACAC,gBAAAA,WAAAA,GAAcA,WAAAA,KAAAA,WAAAA,GAAAA,WAAAA,GAhCd,WAgCAA;AA7EF;;AA+EA7R,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,UAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,CAAAA,EAOE,CAPFA,MAAAA,EAAAA,KAAAA,EA/EA,MA+EAA;;AAYA,kBAAI,KAAJ,UAAA,EAAqB;AACnB,sBAAMgS,QAAAA,GAAW,KAAA,iBAAA,CAAA,CAAA,EAA0B,CADxB,MACF,CAAjB;AACA,qBAAA,UAAA,CAAA,WAAA,CAA4B;AAAA,kBAAA,OAAA;AAE1BC,kBAAAA,IAAAA,EAAMD,QAAAA,CAFoB,CAEpBA,CAFoB;AAG1BE,kBAAAA,GAAAA,EAAKF,QAAAA,CAHqB,CAGrBA,CAHqB;AAI1BphC,kBAAAA,KAAAA,EAAOA,KAAAA,GAAQ85B,gBAAAA,CAJW,CAIXA,CAJW;AAK1B75B,kBAAAA,MAAAA,EAAQA,MAAAA,GAAS65B,gBAAAA,CALS,CAKTA;AALS,iBAA5B;AA7FF;;AAqGA,mBArGA,OAqGA;AAnoDuB,aAAA;AAsoDzB1kB,YAAAA,4BAAAA,EAA8B,SAAA,2CAAA,CAAA,OAAA,EAAA,GAAA,EAG5B;AACA,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AAD1B;;AAIA,oBAAMga,GAAAA,GAAM,KAJZ,GAIA;AACA,oBAAMmR,CAAAA,GAAIvN,OAAAA,CALV,KAKA;AACA,oBAAMwN,CAAAA,GAAIxN,OAAAA,CANV,MAMA;AAEA,oBAAM4N,SAAAA,GAAY,KAAA,cAAA,CAAA,SAAA,CAAA,aAAA,EAAA,CAAA,EARlB,CAQkB,CAAlB;AACA,oBAAMC,MAAAA,GAASD,SAAAA,CATf,OASA;AACAE,cAAAA,kBAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAoC,KAAA,OAAA,CAVpC,YAUAA,CAAAA;;AAEA,mBAAK,IAAIh9B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKy8B,GAAAA,CAArB,MAAA,EAAiCx8B,CAAAA,GAAjC,EAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,sBAAMy9B,KAAAA,GAAQjB,GAAAA,CAD8B,CAC9BA,CAAd;AACAlR,gBAAAA,GAAAA,CAF4C,IAE5CA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyBmS,KAAAA,CAHmB,SAG5CnS;AACAA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAa,CAJ+B,CAI5CA;AACAA,gBAAAA,GAAAA,CAAAA,SAAAA,CACEwR,SAAAA,CADFxR,MAAAA,EAEEmS,KAAAA,CAFFnS,CAAAA,EAGEmS,KAAAA,CAHFnS,CAAAA,EAIEmS,KAAAA,CAJFnS,CAAAA,EAKEmS,KAAAA,CALFnS,CAAAA,EAAAA,CAAAA,EAOE,CAPFA,CAAAA,EAAAA,CAAAA,EAL4C,CAK5CA;;AAWA,oBAAI,KAAJ,UAAA,EAAqB;AACnB,wBAAMgS,QAAAA,GAAW,KAAA,iBAAA,CAAuBG,KAAAA,CAAvB,CAAA,EAAgCA,KAAAA,CAD9B,CACF,CAAjB;AACA,uBAAA,UAAA,CAAA,WAAA,CAA4B;AAAA,oBAAA,OAAA;AAE1BF,oBAAAA,IAAAA,EAAMD,QAAAA,CAFoB,CAEpBA,CAFoB;AAG1BE,oBAAAA,GAAAA,EAAKF,QAAAA,CAHqB,CAGrBA,CAHqB;AAI1BphC,oBAAAA,KAAAA,EAJ0B,CAAA;AAK1BC,oBAAAA,MAAAA,EAL0B;AAAA,mBAA5B;AAlB0C;;AA0B5CmvB,gBAAAA,GAAAA,CA1B4C,OA0B5CA;AAtCF;AAzoDuB,aAAA;AAmrDzB7Z,YAAAA,wBAAAA,EAA0B,SAAA,uCAAA,GAAmD;AAC3E,kBAAI,CAAC,KAAL,cAAA,EAA0B;AAAA;AADiD;;AAI3E,mBAAA,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAJ2E,CAI3E;AAvrDuB,aAAA;AA4rDzBvB,YAAAA,SAAAA,EAAW,SAAA,wBAAA,CAAA,GAAA,EA5rDc,CAAA,CAAA;AA+rDzBC,YAAAA,cAAAA,EAAgB,SAAA,6BAAA,CAAA,GAAA,EAAA,UAAA,EA/rDS,CAAA,CAAA;AAksDzBC,YAAAA,kBAAAA,EAAoB,SAAA,iCAAA,CAAA,GAAA,EAAgD;AAClE,mBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BstB,gBAAAA,OAAAA,EAFgE;AACrC,eAA7B;AAnsDuB,aAAA;AAusDzBrtB,YAAAA,uBAAAA,EAAyB,SAAA,sCAAA,CAAA,GAAA,EAAA,UAAA,EAGvB;AACA,kBAAIstB,GAAAA,KAAJ,IAAA,EAAkB;AAChB,qBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BD,kBAAAA,OAAAA,EAAS,KAAA,qBAAA,CAAA,SAAA,CAFK,UAEL;AADkB,iBAA7B;AADF,eAAA,MAIO;AACL,qBAAA,kBAAA,CAAA,IAAA,CAA6B;AAC3BA,kBAAAA,OAAAA,EAFG;AACwB,iBAA7B;AANF;;AAUA,mBAAA,cAAA,GAAsB,KAVtB,gBAUsB,EAAtB;AAptDuB,aAAA;AAstDzBptB,YAAAA,gBAAAA,EAAkB,SAAA,+BAAA,GAA2C;AAC3D,mBAAA,kBAAA,CAD2D,GAC3D;AACA,mBAAA,cAAA,GAAsB,KAFqC,gBAErC,EAAtB;AAxtDuB,aAAA;AA6tDzBC,YAAAA,WAAAA,EAAa,SAAA,0BAAA,GA7tDY,CAAA,CAAA;AAguDzBC,YAAAA,SAAAA,EAAW,SAAA,wBAAA,GAhuDc,CAAA,CAAA;AAsuDzBomB,YAAAA,WAAAA,EAAa,SAAA,0BAAA,GAAsC;AACjD,oBAAMtL,GAAAA,GAAM,KADqC,GACjD;;AACA,kBAAI,KAAJ,WAAA,EAAsB;AACpB,oBAAI,KAAA,WAAA,KAAJ,OAAA,EAAkC;AAChCA,kBAAAA,GAAAA,CAAAA,IAAAA,CADgC,SAChCA;AADF,iBAAA,MAEO;AACLA,kBAAAA,GAAAA,CADK,IACLA;AAJkB;;AAMpB,qBAAA,WAAA,GANoB,IAMpB;AAR+C;;AAUjDA,cAAAA,GAAAA,CAViD,SAUjDA;AAhvDuB,aAAA;;AAkvDzBsS,YAAAA,mBAAAA,GAAsB;AACpB,kBAAI,KAAA,0BAAA,KAAJ,IAAA,EAA8C;AAY5C,sBAAM9nB,CAAAA,GAAI,KAAA,GAAA,CAZkC,mBAY5C;AAEA,sBAAM+nB,MAAAA,GAASn/B,IAAAA,CAAAA,GAAAA,CAASoX,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAAPA,CAAOA,CAAPA,GAAcA,CAAAA,CAAAA,CAAAA,CAAAA,GAAOA,CAAAA,CAdD,CAcCA,CAA9BpX,CAAf;AACA,sBAAMo/B,OAAAA,GAAUhoB,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAYA,CAAAA,CAAAA,CAAAA,CAAAA,IAfgB,CAe5C;AACA,sBAAMioB,OAAAA,GAAUjoB,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAYA,CAAAA,CAAAA,CAAAA,CAAAA,IAhBgB,CAgB5C;AACA,sBAAMkoB,WAAAA,GAAct/B,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAAVA,OAAUA,CAAVA,IAjBwB,MAiB5C;;AACA,oBACEo/B,OAAAA,KAAAA,OAAAA,IACA,KAAA,oBAAA,GAAA,WAAA,GAFF,CAAA,EAGE;AAUA,uBAAA,0BAAA,GAAkC,EAChC,KAAA,oBAAA,GAXF,WAUkC,CAAlC;AAbF,iBAAA,MAgBO,IAAID,MAAAA,GAAS1qB,MAAAA,CAAb,OAAA,EAA6B;AAClC,uBAAA,0BAAA,GADkC,WAClC;AADK,iBAAA,MAEA;AAEL,uBAAA,0BAAA,GAFK,CAEL;AAtC0C;AAD1B;;AA2CpB,qBAAO,KA3Ca,0BA2CpB;AA7xDuB,aAAA;;AA+xDzB8qB,YAAAA,iBAAAA,EAAmB,SAAA,gCAAA,CAAA,CAAA,EAAA,CAAA,EAAgD;AACjE,oBAAMtxB,SAAAA,GAAY,KAAA,GAAA,CAD+C,mBACjE;AACA,qBAAO,CACLA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAmBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAnBA,CAAAA,GAAsCA,SAAAA,CADjC,CACiCA,CADjC,EAELA,SAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAmBA,SAAAA,CAAAA,CAAAA,CAAAA,GAAnBA,CAAAA,GAAsCA,SAAAA,CAFxC,CAEwCA,CAFjC,CAAP;AAjyDuB,aAAA;AAuyDzBuxB,YAAAA,gBAAAA,EAAkB,SAAA,+BAAA,GAA2C;AAC3D,mBAAK,IAAIl+B,CAAAA,GAAI,KAAA,kBAAA,CAAA,MAAA,GAAb,CAAA,EAAiDA,CAAAA,IAAjD,CAAA,EAAyDA,CAAzD,EAAA,EAA8D;AAC5D,oBAAI,CAAC,KAAA,kBAAA,CAAA,CAAA,EAAL,OAAA,EAAyC;AACvC,yBADuC,KACvC;AAF0D;AADH;;AAM3D,qBAN2D,IAM3D;AA7yDuB;AAAA,WAA3B4wB;;AAizDA,eAAA,MAAA,EAAA,IAAA,KAAA,CAAA,GAAA,EAAsB;AACpBA,YAAAA,cAAAA,CAAAA,SAAAA,CAAyB7kB,KAAAA,CAAAA,GAAAA,CAAzB6kB,EAAyB7kB,CAAzB6kB,IAAoCA,cAAAA,CAAAA,SAAAA,CADhB,EACgBA,CAApCA;AApvEqD;;AAuvEvD,iBAvvEuD,cAuvEvD;AAvvEF,SAAwB,EAAxB;;;;;;;;;;;;;;;ACjcA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEA,cAAMuN,UAAAA,GAjBN,EAiBA;;AAEA,iBAAA,gBAAA,CAAA,GAAA,EAAA,IAAA,EAAqC;AACnC,cAAI,CAAA,IAAA,IAAS,OAAA,MAAA,KAAb,WAAA,EAA4C;AAAA;AADT;;AAInC,gBAAMjiC,KAAAA,GAAQs/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAJW,CAIXA,CAAxB;AACA,gBAAMr/B,MAAAA,GAASq/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CALU,CAKVA,CAAzB;AACA,gBAAM4C,MAAAA,GAAS,IANoB,MAMpB,EAAf;AACAA,UAAAA,MAAAA,CAAAA,IAAAA,CAAY5C,IAAAA,CAAZ4C,CAAY5C,CAAZ4C,EAAqB5C,IAAAA,CAArB4C,CAAqB5C,CAArB4C,EAAAA,KAAAA,EAPmC,MAOnCA;AACA9S,UAAAA,GAAAA,CAAAA,IAAAA,CARmC,MAQnCA;AA3BF;;AA8BA6S,QAAAA,UAAAA,CAAAA,WAAAA,GAAyB;AACvBE,UAAAA,MAAAA,EAAQ,SAAA,kBAAA,CAAA,GAAA,EAAiC;AACvC,kBAAMxlB,IAAAA,GAAOylB,GAAAA,CAD0B,CAC1BA,CAAb;AACA,kBAAM9C,IAAAA,GAAO8C,GAAAA,CAF0B,CAE1BA,CAAb;AACA,kBAAMC,UAAAA,GAAaD,GAAAA,CAHoB,CAGpBA,CAAnB;AACA,kBAAMrO,EAAAA,GAAKqO,GAAAA,CAJ4B,CAI5BA,CAAX;AACA,kBAAMnoB,EAAAA,GAAKmoB,GAAAA,CAL4B,CAK5BA,CAAX;AACA,kBAAMxL,EAAAA,GAAKwL,GAAAA,CAN4B,CAM5BA,CAAX;AACA,kBAAME,EAAAA,GAAKF,GAAAA,CAP4B,CAO5BA,CAAX;AACA,mBAAO;AACLG,cAAAA,UAAAA,EAAY,SAAA,sBAAA,CAAA,GAAA,EAAqC;AAC/CC,gBAAAA,gBAAAA,CAAAA,GAAAA,EAD+C,IAC/CA,CAAAA;AACA,oBAF+C,IAE/C;;AACA,oBAAI7lB,IAAAA,KAAJ,OAAA,EAAsB;AACpB8lB,kBAAAA,IAAAA,GAAOrT,GAAAA,CAAAA,oBAAAA,CAAyB2E,EAAAA,CAAzB3E,CAAyB2E,CAAzB3E,EAAgC2E,EAAAA,CAAhC3E,CAAgC2E,CAAhC3E,EAAuCnV,EAAAA,CAAvCmV,CAAuCnV,CAAvCmV,EAA8CnV,EAAAA,CADjC,CACiCA,CAA9CmV,CAAPqT;AADF,iBAAA,MAEO,IAAI9lB,IAAAA,KAAJ,QAAA,EAAuB;AAC5B8lB,kBAAAA,IAAAA,GAAOrT,GAAAA,CAAAA,oBAAAA,CAAyB2E,EAAAA,CAAzB3E,CAAyB2E,CAAzB3E,EAAgC2E,EAAAA,CAAhC3E,CAAgC2E,CAAhC3E,EAAAA,EAAAA,EAA2CnV,EAAAA,CAA3CmV,CAA2CnV,CAA3CmV,EAAkDnV,EAAAA,CAAlDmV,CAAkDnV,CAAlDmV,EADqB,EACrBA,CAAPqT;AAN6C;;AAS/C,qBAAK,IAAI3+B,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKw+B,UAAAA,CAArB,MAAA,EAAwCv+B,CAAAA,GAAxC,EAAA,EAAgD,EAAhD,CAAA,EAAqD;AACnD,wBAAMgX,CAAAA,GAAIunB,UAAAA,CADyC,CACzCA,CAAV;AACAI,kBAAAA,IAAAA,CAAAA,YAAAA,CAAkB3nB,CAAAA,CAAlB2nB,CAAkB3nB,CAAlB2nB,EAAwB3nB,CAAAA,CAF2B,CAE3BA,CAAxB2nB;AAX6C;;AAa/C,uBAb+C,IAa/C;AAdG;AAAA,aAAP;AATqB;AAAA,SAAzBR;;AA6BA,cAAMS,gBAAAA,GAAoB,SAAA,uBAAA,GAAmC;AAC3D,mBAAA,YAAA,CAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAA6D;AAE3D,kBAAM5O,MAAAA,GAASxzB,OAAAA,CAAf,MAAA;AAAA,kBACEqiC,MAAAA,GAASriC,OAAAA,CAHgD,MAE3D;AAEA,kBAAMsX,KAAAA,GAAQW,IAAAA,CAAd,IAAA;AAAA,kBACEqqB,OAAAA,GAAUrqB,IAAAA,CAAAA,KAAAA,GAL+C,CAI3D;AAEA,gBAN2D,GAM3D;;AACA,gBAAIub,MAAAA,CAAO7Z,EAAAA,GAAP6Z,CAAAA,CAAAA,GAAiBA,MAAAA,CAAO3Z,EAAAA,GAA5B,CAAqB2Z,CAArB,EAAqC;AACnC+O,cAAAA,GAAAA,GADmC,EACnCA;AACA5oB,cAAAA,EAAAA,GAFmC,EAEnCA;AACAE,cAAAA,EAAAA,GAHmC,GAGnCA;AACA0oB,cAAAA,GAAAA,GAJmC,EAInCA;AACAC,cAAAA,EAAAA,GALmC,EAKnCA;AACAC,cAAAA,EAAAA,GANmC,GAMnCA;AAbyD;;AAe3D,gBAAIjP,MAAAA,CAAO3Z,EAAAA,GAAP2Z,CAAAA,CAAAA,GAAiBA,MAAAA,CAAOzZ,EAAAA,GAA5B,CAAqByZ,CAArB,EAAqC;AACnC+O,cAAAA,GAAAA,GADmC,EACnCA;AACA1oB,cAAAA,EAAAA,GAFmC,EAEnCA;AACAE,cAAAA,EAAAA,GAHmC,GAGnCA;AACAwoB,cAAAA,GAAAA,GAJmC,EAInCA;AACAE,cAAAA,EAAAA,GALmC,EAKnCA;AACAC,cAAAA,EAAAA,GANmC,GAMnCA;AArByD;;AAuB3D,gBAAIlP,MAAAA,CAAO7Z,EAAAA,GAAP6Z,CAAAA,CAAAA,GAAiBA,MAAAA,CAAO3Z,EAAAA,GAA5B,CAAqB2Z,CAArB,EAAqC;AACnC+O,cAAAA,GAAAA,GADmC,EACnCA;AACA5oB,cAAAA,EAAAA,GAFmC,EAEnCA;AACAE,cAAAA,EAAAA,GAHmC,GAGnCA;AACA0oB,cAAAA,GAAAA,GAJmC,EAInCA;AACAC,cAAAA,EAAAA,GALmC,EAKnCA;AACAC,cAAAA,EAAAA,GANmC,GAMnCA;AA7ByD;;AA+B3D,kBAAM5D,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAa7+B,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CA/Be,MA+B3D;AACA,kBAAM8+B,EAAAA,GAAM,CAAA,MAAA,CAAOnlB,EAAAA,GAAP,CAAA,CAAA,GAAiB3Z,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CAhCW,MAgC3D;AACA,kBAAM2iC,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAa3iC,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CAjCe,MAiC3D;AACA,kBAAM4iC,EAAAA,GAAM,CAAA,MAAA,CAAO/oB,EAAAA,GAAP,CAAA,CAAA,GAAiB7Z,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CAlCW,MAkC3D;AACA,kBAAM6iC,EAAAA,GAAM,CAAA,MAAA,CAAA,EAAA,CAAA,GAAa7iC,OAAAA,CAAd,OAAC,IAAgCA,OAAAA,CAnCe,MAmC3D;AACA,kBAAM8iC,EAAAA,GAAM,CAAA,MAAA,CAAO/oB,EAAAA,GAAP,CAAA,CAAA,GAAiB/Z,OAAAA,CAAlB,OAAC,IAAoCA,OAAAA,CApCW,MAoC3D;;AACA,gBAAI8+B,EAAAA,IAAJ,EAAA,EAAc;AAAA;AArC6C;;AAwC3D,kBAAMiE,GAAAA,GAAMV,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,kBACEW,GAAAA,GAAMX,MAAAA,CAAOG,EAAAA,GADf,CACQH,CADR;AAAA,kBAEEY,GAAAA,GAAMZ,MAAAA,CAAOG,EAAAA,GA1C4C,CA0CnDH,CAFR;AAGA,kBAAMa,GAAAA,GAAMb,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,kBACEc,GAAAA,GAAMd,MAAAA,CAAOI,EAAAA,GADf,CACQJ,CADR;AAAA,kBAEEe,GAAAA,GAAMf,MAAAA,CAAOI,EAAAA,GA7C4C,CA6CnDJ,CAFR;AAGA,kBAAMgB,GAAAA,GAAMhB,MAAAA,CAAZ,EAAYA,CAAZ;AAAA,kBACEiB,GAAAA,GAAMjB,MAAAA,CAAOK,EAAAA,GADf,CACQL,CADR;AAAA,kBAEEkB,GAAAA,GAAMlB,MAAAA,CAAOK,EAAAA,GAhD4C,CAgDnDL,CAFR;AAIA,kBAAMmB,IAAAA,GAAOthC,IAAAA,CAAAA,KAAAA,CAAb,EAAaA,CAAb;AAAA,kBACEuhC,IAAAA,GAAOvhC,IAAAA,CAAAA,KAAAA,CAnDkD,EAmDlDA,CADT;AAEA,gBAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EApD2D,GAoD3D;AACA,gBAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EArD2D,GAqD3D;;AACA,iBAAK,IAAI00B,CAAAA,GAAT,IAAA,EAAmBA,CAAAA,IAAnB,IAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjC,kBAAIA,CAAAA,GAAJ,EAAA,EAAY;AACV,oBADU,CACV;;AACA,oBAAIA,CAAAA,GAAJ,EAAA,EAAY;AACV/C,kBAAAA,CAAAA,GADU,CACVA;AADF,iBAAA,MAEO,IAAIiL,EAAAA,KAAJ,EAAA,EAAe;AACpBjL,kBAAAA,CAAAA,GADoB,CACpBA;AADK,iBAAA,MAEA;AACLA,kBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AAPQ;;AASV6P,gBAAAA,EAAAA,GAAK7E,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IATD,CASV6E;AACAC,gBAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAVH,CAUVY;AACAC,gBAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAXH,CAWVY;AACAC,gBAAAA,GAAAA,GAAMZ,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAZH,CAYVY;AAZF,eAAA,MAaO;AACL,oBADK,CACL;;AACA,oBAAIjN,CAAAA,GAAJ,EAAA,EAAY;AACV/C,kBAAAA,CAAAA,GADU,CACVA;AADF,iBAAA,MAEO,IAAI+O,EAAAA,KAAJ,EAAA,EAAe;AACpB/O,kBAAAA,CAAAA,GADoB,CACpBA;AADK,iBAAA,MAEA;AACLA,kBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AAPG;;AASL6P,gBAAAA,EAAAA,GAAKf,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IATN,CASLe;AACAC,gBAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAVR,CAULS;AACAC,gBAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAXR,CAWLS;AACAC,gBAAAA,GAAAA,GAAMT,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAZR,CAYLS;AA1B+B;;AA6BjC,kBA7BiC,CA6BjC;;AACA,kBAAIjN,CAAAA,GAAJ,EAAA,EAAY;AACV/C,gBAAAA,CAAAA,GADU,CACVA;AADF,eAAA,MAEO,IAAI+C,CAAAA,GAAJ,EAAA,EAAY;AACjB/C,gBAAAA,CAAAA,GADiB,CACjBA;AADK,eAAA,MAEA;AACLA,gBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADX,EACA,CAALA;AAnC+B;;AAqCjCiQ,cAAAA,EAAAA,GAAKjF,EAAAA,GAAM,CAAA,EAAA,GAAD,EAAC,IArCsB,CAqCjCiF;AACAC,cAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAtCoB,CAsCjCgB;AACAC,cAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAvCoB,CAuCjCgB;AACAC,cAAAA,GAAAA,GAAMhB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAxCoB,CAwCjCgB;AACA,oBAAMC,GAAAA,GAAMhiC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAzCU,EAyCVA,CAAXA,CAAZ;AACA,oBAAMiiC,GAAAA,GAAMjiC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EA1CU,EA0CVA,CAAXA,CAAZ;AACA,kBAAIixB,CAAAA,GAAImP,OAAAA,GAAAA,CAAAA,GAAc4B,GAAAA,GA3CW,CA2CjC;;AACA,mBAAK,IAAIlK,CAAAA,GAAT,GAAA,EAAkBA,CAAAA,IAAlB,GAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/BnG,gBAAAA,CAAAA,GAAK,CAAA,EAAA,GAAD,CAAC,KAAW,EAAA,GADe,EAC1B,CAALA;;AACA,oBAAIA,CAAAA,GAAJ,CAAA,EAAW;AACTA,kBAAAA,CAAAA,GADS,CACTA;AADF,iBAAA,MAEO,IAAIA,CAAAA,GAAJ,CAAA,EAAW;AAChBA,kBAAAA,CAAAA,GADgB,CAChBA;AAL6B;;AAO/Bvc,gBAAAA,KAAAA,CAAM6b,CAAN7b,EAAAA,CAAAA,GAAcqsB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GAPiB,CAO/BrsB;AACAA,gBAAAA,KAAAA,CAAM6b,CAAN7b,EAAAA,CAAAA,GAAcssB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GARiB,CAQ/BtsB;AACAA,gBAAAA,KAAAA,CAAM6b,CAAN7b,EAAAA,CAAAA,GAAcusB,GAAAA,GAAO,CAAA,GAAA,GAAD,GAAC,IAAR,CAACA,GATiB,CAS/BvsB;AACAA,gBAAAA,KAAAA,CAAM6b,CAAN7b,EAAAA,CAAAA,GAV+B,GAU/BA;AAtD+B;AAtDwB;AADF;;AAkH3D,mBAAA,UAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAA2C;AACzC,kBAAM8sB,EAAAA,GAAKC,MAAAA,CAD8B,MACzC;AACA,kBAAMC,EAAAA,GAAKD,MAAAA,CAF8B,MAEzC;AACA,gBAAA,CAAA,EAHyC,EAGzC;;AACA,oBAAQA,MAAAA,CAAR,IAAA;AACE,mBAAA,SAAA;AACE,sBAAME,cAAAA,GAAiBF,MAAAA,CADzB,cACE;AACA,sBAAMG,IAAAA,GAAOtiC,IAAAA,CAAAA,KAAAA,CAAWkiC,EAAAA,CAAAA,MAAAA,GAAXliC,cAAAA,IAFf,CAEE;AACA,sBAAMuiC,IAAAA,GAAOF,cAAAA,GAHf,CAGE;;AACA,qBAAK/gC,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAZ,IAAA,EAAsBA,CAAtB,EAAA,EAA2B;AACzB,sBAAIkhC,CAAAA,GAAIlhC,CAAAA,GADiB,cACzB;;AACA,uBAAK,IAAI2vB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,IAAA,EAA0BA,CAAAA,IAAKuR,CAA/B,EAAA,EAAoC;AAClCC,oBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAHFO,CAGEP,CAHFO,EAIEP,EAAAA,CAAGM,CAAAA,GAJLC,CAIEP,CAJFO,EAKEP,EAAAA,CAAGM,CAAAA,GALLC,cAKEP,CALFO,EAMEL,EAAAA,CANFK,CAMEL,CANFK,EAOEL,EAAAA,CAAGI,CAAAA,GAPLC,CAOEL,CAPFK,EAQEL,EAAAA,CAAGI,CAAAA,GAT6B,cAShCJ,CARFK,CAAAA;AAUAA,oBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAAGM,CAAAA,GAAAA,cAAAA,GAHLC,CAGEP,CAHFO,EAIEP,EAAAA,CAAGM,CAAAA,GAJLC,CAIEP,CAJFO,EAKEP,EAAAA,CAAGM,CAAAA,GALLC,cAKEP,CALFO,EAMEL,EAAAA,CAAGI,CAAAA,GAAAA,cAAAA,GANLC,CAMEL,CANFK,EAOEL,EAAAA,CAAGI,CAAAA,GAPLC,CAOEL,CAPFK,EAQEL,EAAAA,CAAGI,CAAAA,GAnB6B,cAmBhCJ,CARFK,CAAAA;AAbuB;AAJ7B;;AADF;;AA+BE,mBAAA,WAAA;AACE,qBAAKnhC,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK6gC,EAAAA,CAAjB,MAAA,EAA4B5gC,CAAAA,GAA5B,EAAA,EAAoCA,CAAAA,IAApC,CAAA,EAA4C;AAC1CmhC,kBAAAA,YAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAGEP,EAAAA,CAHFO,CAGEP,CAHFO,EAIEP,EAAAA,CAAG5gC,CAAAA,GAJLmhC,CAIEP,CAJFO,EAKEP,EAAAA,CAAG5gC,CAAAA,GALLmhC,CAKEP,CALFO,EAMEL,EAAAA,CANFK,CAMEL,CANFK,EAOEL,EAAAA,CAAG9gC,CAAAA,GAPLmhC,CAOEL,CAPFK,EAQEL,EAAAA,CAAG9gC,CAAAA,GATqC,CASxC8gC,CARFK,CAAAA;AAFJ;;AA/BF;;AA6CE;AACE,sBAAM,IAAA,KAAA,CA9CV,gBA8CU,CAAN;AA9CJ;AAtHyD;;AAyK3D,mBAAA,gBAAA,CAAA,MAAA,EAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,eAAA,EAAA,cAAA,EAAA,YAAA,EASE;AAGA,kBAAMC,cAAAA,GAHN,GAGA;AAEA,kBAAMC,gBAAAA,GALN,IAKA;AAGA,kBAAMC,WAAAA,GARN,CAQA;AAEA,kBAAMxjC,OAAAA,GAAUY,IAAAA,CAAAA,KAAAA,CAAWg9B,MAAAA,CAV3B,CAU2BA,CAAXh9B,CAAhB;AACA,kBAAMX,OAAAA,GAAUW,IAAAA,CAAAA,KAAAA,CAAWg9B,MAAAA,CAX3B,CAW2BA,CAAXh9B,CAAhB;AACA,kBAAM6iC,WAAAA,GAAc7iC,IAAAA,CAAAA,IAAAA,CAAUg9B,MAAAA,CAAVh9B,CAAUg9B,CAAVh9B,IAZpB,OAYA;AACA,kBAAM8iC,YAAAA,GAAe9iC,IAAAA,CAAAA,IAAAA,CAAUg9B,MAAAA,CAAVh9B,CAAUg9B,CAAVh9B,IAbrB,OAaA;AAEA,kBAAMxC,KAAAA,GAAQwC,IAAAA,CAAAA,GAAAA,CACZA,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAAS6iC,WAAAA,GAAcE,aAAAA,CAAdF,CAAcE,CAAdF,GADP7iC,cACFA,CAAVA,CADYA,EAfd,gBAecA,CAAd;AAIA,kBAAMvC,MAAAA,GAASuC,IAAAA,CAAAA,GAAAA,CACbA,IAAAA,CAAAA,IAAAA,CAAUA,IAAAA,CAAAA,GAAAA,CAAS8iC,YAAAA,GAAeC,aAAAA,CAAfD,CAAeC,CAAfD,GADN9iC,cACHA,CAAVA,CADaA,EAnBf,gBAmBeA,CAAf;AAIA,kBAAMk9B,MAAAA,GAAS2F,WAAAA,GAvBf,KAuBA;AACA,kBAAM1F,MAAAA,GAAS2F,YAAAA,GAxBf,MAwBA;AAEA,kBAAMhlC,OAAAA,GAAU;AAAA,cAAA,MAAA;AAAA,cAAA,MAAA;AAGdsB,cAAAA,OAAAA,EAAS,CAHK,OAAA;AAIdC,cAAAA,OAAAA,EAAS,CAJK,OAAA;AAKd69B,cAAAA,MAAAA,EAAQ,IALM,MAAA;AAMdC,cAAAA,MAAAA,EAAQ,IANM;AAAA,aAAhB;AASA,kBAAM6F,WAAAA,GAAcxlC,KAAAA,GAAQolC,WAAAA,GAnC5B,CAmCA;AACA,kBAAMK,YAAAA,GAAexlC,MAAAA,GAASmlC,WAAAA,GApC9B,CAoCA;AAEA,gBAAA,MAAA,EAAA,SAAA,EAAA,CAAA,EAtCA,EAsCA;;AACA,gBAAIzgB,YAAAA,CAAJ,SAAA,EAA4B;AAC1BtkB,cAAAA,MAAAA,GAAS,YAAA,CAAA,WAAA,CAAyB;AAAA,gBAAA,KAAA;AAAA,gBAAA,MAAA;AAAA,gBAAA,eAAA;AAAA,gBAAA,OAAA;AAAA,gBAAA;AAAA,eAAzB,CAATA;AAQAugC,cAAAA,SAAAA,GAAY8E,cAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EATc,KASdA,CAAZ9E;AAMAA,cAAAA,SAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAf0B,WAe1BA;AACAvgC,cAAAA,MAAAA,GAASugC,SAAAA,CAhBiB,MAgB1BvgC;AAhBF,aAAA,MAiBO;AACLugC,cAAAA,SAAAA,GAAY8E,cAAAA,CAAAA,SAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EADP,KACOA,CAAZ9E;AAMA,oBAAMC,MAAAA,GAASD,SAAAA,CAPV,OAOL;AAEA,oBAAMroB,IAAAA,GAAOsoB,MAAAA,CAAAA,eAAAA,CAAAA,KAAAA,EATR,MASQA,CAAb;;AACA,kBAAA,eAAA,EAAqB;AACnB,sBAAMjpB,KAAAA,GAAQW,IAAAA,CADK,IACnB;;AACA,qBAAKzU,CAAAA,GAAAA,CAAAA,EAAOD,EAAAA,GAAK+T,KAAAA,CAAjB,MAAA,EAA+B9T,CAAAA,GAA/B,EAAA,EAAuCA,CAAAA,IAAvC,CAAA,EAA+C;AAC7C8T,kBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAW+tB,eAAAA,CADkC,CAClCA,CAAX/tB;AACAA,kBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAe+tB,eAAAA,CAF8B,CAE9BA,CAAf/tB;AACAA,kBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAAe+tB,eAAAA,CAH8B,CAG9BA,CAAf/tB;AACAA,kBAAAA,KAAAA,CAAM9T,CAAAA,GAAN8T,CAAAA,CAAAA,GAJ6C,GAI7CA;AANiB;AAVhB;;AAmBL,mBAAK9T,CAAAA,GAAL,CAAA,EAAYA,CAAAA,GAAI8hC,OAAAA,CAAhB,MAAA,EAAgC9hC,CAAhC,EAAA,EAAqC;AACnC+hC,gBAAAA,UAAAA,CAAAA,IAAAA,EAAiBD,OAAAA,CAAjBC,CAAiBD,CAAjBC,EADmC,OACnCA,CAAAA;AApBG;;AAsBLhF,cAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAtBK,WAsBLA;AACAxgC,cAAAA,MAAAA,GAASugC,SAAAA,CAvBJ,MAuBLvgC;AA/EF;;AAkFA,mBAAO;AAAA,cAAA,MAAA;AAELuB,cAAAA,OAAAA,EAASA,OAAAA,GAAUwjC,WAAAA,GAFd,MAAA;AAGLvjC,cAAAA,OAAAA,EAASA,OAAAA,GAAUujC,WAAAA,GAHd,MAAA;AAAA,cAAA,MAAA;AAAA,cAAA;AAAA,aAAP;AApQyD;;AA4Q3D,iBA5Q2D,gBA4Q3D;AA5QF,SAA0B,EAA1B;;AA+QAnD,QAAAA,UAAAA,CAAAA,IAAAA,GAAkB;AAChBE,UAAAA,MAAAA,EAAQ,SAAA,WAAA,CAAA,GAAA,EAA0B;AAEhC,kBAAMrO,MAAAA,GAASsO,GAAAA,CAFiB,CAEjBA,CAAf;AACA,kBAAMO,MAAAA,GAASP,GAAAA,CAHiB,CAGjBA,CAAf;AACA,kBAAMwD,OAAAA,GAAUxD,GAAAA,CAJgB,CAIhBA,CAAhB;AACA,kBAAM5C,MAAAA,GAAS4C,GAAAA,CALiB,CAKjBA,CAAf;AACA,kBAAM/C,MAAAA,GAAS+C,GAAAA,CANiB,CAMjBA,CAAf;AACA,kBAAM9C,IAAAA,GAAO8C,GAAAA,CAPmB,CAOnBA,CAAb;AACA,kBAAM/d,UAAAA,GAAa+d,GAAAA,CARa,CAQbA,CAAnB;AACA,mBAAO;AACLG,cAAAA,UAAAA,EAAY,SAAA,eAAA,CAAA,GAAA,EAAA,KAAA,EAAA,WAAA,EAAkD;AAC5DC,gBAAAA,gBAAAA,CAAAA,GAAAA,EAD4D,IAC5DA,CAAAA;AACA,oBAF4D,KAE5D;;AACA,oBAAA,WAAA,EAAiB;AACf7/B,kBAAAA,KAAAA,GAAQuX,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmCkV,GAAAA,CAD5B,mBACPlV,CAARvX;AADF,iBAAA,MAEO;AAELA,kBAAAA,KAAAA,GAAQuX,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmC4rB,KAAAA,CAFtC,aAEG5rB,CAARvX;;AACA,sBAAA,MAAA,EAAY;AACV,0BAAMojC,WAAAA,GAAc7rB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CADV,MACUA,CAApB;;AACAvX,oBAAAA,KAAAA,GAAQ,CAACA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWojC,WAAAA,CAAZ,CAAYA,CAAZ,EAA4BpjC,KAAAA,CAAAA,CAAAA,CAAAA,GAAWojC,WAAAA,CAA/CpjC,CAA+CojC,CAAvC,CAARpjC;AALG;AALqD;;AAgB5D,sBAAMqjC,sBAAAA,GAAyBtD,gBAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAM7B/uB,WAAAA,GAAAA,IAAAA,GAN6B+uB,UAAAA,EAO7BoD,KAAAA,CAP6BpD,cAAAA,EAQ7BoD,KAAAA,CAxB0D,YAgB7BpD,CAA/B;;AAWA,oBAAI,CAAJ,WAAA,EAAkB;AAChBtT,kBAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4B0W,KAAAA,CADZ,aAChB1W;;AACA,sBAAA,MAAA,EAAY;AACVA,oBAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EADU,MACVA;AAHc;AA3B0C;;AAkC5DA,gBAAAA,GAAAA,CAAAA,SAAAA,CACE4W,sBAAAA,CADF5W,OAAAA,EAEE4W,sBAAAA,CApC0D,OAkC5D5W;AAIAA,gBAAAA,GAAAA,CAAAA,KAAAA,CAAU4W,sBAAAA,CAAV5W,MAAAA,EAAyC4W,sBAAAA,CAtCmB,MAsC5D5W;AAEA,uBAAOA,GAAAA,CAAAA,aAAAA,CAAkB4W,sBAAAA,CAAlB5W,MAAAA,EAxCqD,WAwCrDA,CAAP;AAzCG;AAAA,aAAP;AAVc;AAAA,SAAlB6S;AAyDAA,QAAAA,UAAAA,CAAAA,KAAAA,GAAmB;AACjBE,UAAAA,MAAAA,EAAQ,SAAA,YAAA,GAAwB;AAC9B,mBAAO;AACLI,cAAAA,UAAAA,EAAY,SAAA,uBAAA,GAAmC;AAC7C,uBAD6C,SAC7C;AAFG;AAAA,aAAP;AAFe;AAAA,SAAnBN;;AAUA,iBAAA,uBAAA,CAAA,GAAA,EAAsC;AACpC,gBAAMgE,SAAAA,GAAYhE,UAAAA,CAAWG,GAAAA,CADO,CACPA,CAAXH,CAAlB;;AACA,cAAI,CAAJ,SAAA,EAAgB;AACd,kBAAM,IAAA,KAAA,CAAU,oBAAoBG,GAAAA,CADtB,CACsBA,CADtB,EACR,CAAN;AAHkC;;AAKpC,iBAAO6D,SAAAA,CAAAA,MAAAA,CAL6B,GAK7BA,CAAP;AAlZF;;AAwZA,cAAMC,aAAAA,GAAiB,SAAA,oBAAA,GAAgC;AACrD,gBAAMC,SAAAA,GAAY;AAChBC,YAAAA,OAAAA,EADgB,CAAA;AAEhBC,YAAAA,SAAAA,EAFgB;AAAA,WAAlB;AAKA,gBAAMlB,gBAAAA,GAN+C,IAMrD;;AAGA,mBAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA,GAAA,EAAA,qBAAA,EAAA,aAAA,EAA6E;AAC3E,iBAAA,YAAA,GAAoB7G,EAAAA,CADuD,CACvDA,CAApB;AACA,iBAAA,MAAA,GAAcA,EAAAA,CAAAA,CAAAA,CAAAA,IAAS,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAvB,CAAuB,CAAvB;AACA,iBAAA,IAAA,GAAYA,EAAAA,CAH+D,CAG/DA,CAAZ;AACA,iBAAA,KAAA,GAAaA,EAAAA,CAJ8D,CAI9DA,CAAb;AACA,iBAAA,KAAA,GAAaA,EAAAA,CAL8D,CAK9DA,CAAb;AACA,iBAAA,SAAA,GAAiBA,EAAAA,CAN0D,CAM1DA,CAAjB;AACA,iBAAA,UAAA,GAAkBA,EAAAA,CAPyD,CAOzDA,CAAlB;AACA,iBAAA,KAAA,GAR2E,KAQ3E;AACA,iBAAA,qBAAA,GAT2E,qBAS3E;AACA,iBAAA,aAAA,GAV2E,aAU3E;AACA,iBAAA,GAAA,GAX2E,GAW3E;AApBmD;;AAuBrD4H,UAAAA,aAAAA,CAAAA,SAAAA,GAA0B;AACxBI,YAAAA,mBAAAA,EAAqB,SAAA,gCAAA,CAAA,KAAA,EAAiD;AACpE,oBAAM/gB,YAAAA,GAAe,KAD+C,YACpE;AACA,oBAAM+Z,IAAAA,GAAO,KAFuD,IAEpE;AACA,oBAAMiH,KAAAA,GAAQ,KAHsD,KAGpE;AACA,oBAAMC,KAAAA,GAAQ,KAJsD,KAIpE;AACA,oBAAMC,SAAAA,GAAY,KALkD,SAKpE;AACA,oBAAMC,UAAAA,GAAa,KANiD,UAMpE;AACA,oBAAMnI,KAAAA,GAAQ,KAPsD,KAOpE;AACA,oBAAME,qBAAAA,GAAwB,KARsC,qBAQpE;AAEAjV,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,iBAV+D,UAUpEA;AAsBA,oBAAMyV,EAAAA,GAAKK,IAAAA,CAAX,CAAWA,CAAX;AAAA,oBACEJ,EAAAA,GAAKI,IAAAA,CADP,CACOA,CADP;AAAA,oBAEEH,EAAAA,GAAKG,IAAAA,CAFP,CAEOA,CAFP;AAAA,oBAGEF,EAAAA,GAAKE,IAAAA,CAnC6D,CAmC7DA,CAHP;;AAMA,oBAAMyG,WAAAA,GAAc7rB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAAmC,KAtCa,MAsChDA,CAApB;;AACA,oBAAMysB,cAAAA,GAAiBzsB,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CACrB,KAxCkE,aAuC7CA,CAAvB;;AAGA,oBAAM0sB,aAAAA,GAAgB,CACpBb,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBY,cAAAA,CADG,CACHA,CADG,EAEpBZ,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBY,cAAAA,CAFnB,CAEmBA,CAFG,CAAtB;AAQA,oBAAME,IAAAA,GAAO,KAAA,eAAA,CAAA,KAAA,EAEX,KAAA,GAAA,CAAA,MAAA,CAFW,KAAA,EAGXD,aAAAA,CArDkE,CAqDlEA,CAHW,CAAb;AAKA,oBAAME,IAAAA,GAAO,KAAA,eAAA,CAAA,KAAA,EAEX,KAAA,GAAA,CAAA,MAAA,CAFW,MAAA,EAGXF,aAAAA,CA1DkE,CA0DlEA,CAHW,CAAb;AAMA,oBAAMhG,SAAAA,GAAYkF,KAAAA,CAAAA,cAAAA,CAAAA,SAAAA,CAAAA,SAAAA,EAEhBe,IAAAA,CAFgBf,IAAAA,EAGhBgB,IAAAA,CAHgBhB,IAAAA,EA7DkD,IA6DlDA,CAAlB;AAMA,oBAAMjF,MAAAA,GAASD,SAAAA,CAnEqD,OAmEpE;AACA,oBAAMmG,QAAAA,GAAWtI,qBAAAA,CAAAA,oBAAAA,CApEmD,MAoEnDA,CAAjB;AACAsI,cAAAA,QAAAA,CAAAA,UAAAA,GAAsBjB,KAAAA,CArE8C,UAqEpEiB;AAEA,mBAAA,8BAAA,CAAA,QAAA,EAAA,SAAA,EAvEoE,KAuEpE;AAEAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAmBF,IAAAA,CAAnBE,KAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAqCD,IAAAA,CAArCC,KAAAA,EAAAA,CAAAA,EAzEoE,CAyEpEA;AAGAA,cAAAA,QAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA+B,CAA/BA,EAAAA,EAAoC,CA5EgC,EA4EpEA;AAEA,mBAAA,QAAA,CAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EA9EoE,EA8EpE;AAEAA,cAAAA,QAAAA,CAAAA,mBAAAA,CAhFoE,YAgFpEA;AAEA,mBAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAlFoE,EAkFpE;AAIA,mBAAA,GAAA,CAAA,KAAA,CAAe,IAAIF,IAAAA,CAAnB,KAAA,EAA+B,IAAIC,IAAAA,CAtFiC,KAsFpE;AACA,qBAAOlG,SAAAA,CAvF6D,MAuFpE;AAxFsB,aAAA;AA2FxBoG,YAAAA,eAAAA,EAAiB,SAAA,6BAAA,CAAA,IAAA,EAAA,cAAA,EAAA,KAAA,EAIf;AAEAhT,cAAAA,IAAAA,GAAOxxB,IAAAA,CAAAA,GAAAA,CAFP,IAEOA,CAAPwxB;AAKA,oBAAMiT,OAAAA,GAAUzkC,IAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,EAPhB,cAOgBA,CAAhB;AACA,kBAAI0jB,IAAAA,GAAO1jB,IAAAA,CAAAA,IAAAA,CAAUwxB,IAAAA,GARrB,KAQWxxB,CAAX;;AACA,kBAAI0jB,IAAAA,IAAJ,OAAA,EAAqB;AACnBA,gBAAAA,IAAAA,GADmB,OACnBA;AADF,eAAA,MAEO;AACLvjB,gBAAAA,KAAAA,GAAQujB,IAAAA,GADH,IACLvjB;AAZF;;AAcA,qBAAO;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAAP;AA7GsB,aAAA;AAgHxBukC,YAAAA,QAAAA,EAAU,SAAA,QAAA,CAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAkD;AAC1D,kBAAI9tB,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,KAAuBkmB,IAAAA,CAAAA,MAAAA,KAA3B,CAAA,EAA8C;AAC5C,sBAAM6H,SAAAA,GAAYhI,EAAAA,GAD0B,EAC5C;AACA,sBAAMiI,UAAAA,GAAahI,EAAAA,GAFyB,EAE5C;AACA2H,gBAAAA,QAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAH4C,UAG5CA;AACAA,gBAAAA,QAAAA,CAJ4C,IAI5CA;AACAA,gBAAAA,QAAAA,CAL4C,OAK5CA;AANwD;AAhHpC,aAAA;AA0HxBM,YAAAA,8BAAAA,EAAgC,SAAA,8BAAA,CAAA,QAAA,EAAA,SAAA,EAAA,KAAA,EAI9B;AACA,oBAAM/mC,OAAAA,GAAUymC,QAAAA,CAAhB,GAAA;AAAA,oBACEpW,OAAAA,GAAUoW,QAAAA,CAFZ,OACA;;AAEA,sBAAA,SAAA;AACE,qBAAKZ,SAAAA,CAAL,OAAA;AACE,wBAAM/W,GAAAA,GAAM,KADd,GACE;AACA9uB,kBAAAA,OAAAA,CAAAA,SAAAA,GAAoB8uB,GAAAA,CAFtB,SAEE9uB;AACAA,kBAAAA,OAAAA,CAAAA,WAAAA,GAAsB8uB,GAAAA,CAHxB,WAGE9uB;AACAqwB,kBAAAA,OAAAA,CAAAA,SAAAA,GAAoBvB,GAAAA,CAJtB,SAIEuB;AACAA,kBAAAA,OAAAA,CAAAA,WAAAA,GAAsBvB,GAAAA,CALxB,WAKEuB;AANJ;;AAQE,qBAAKwV,SAAAA,CAAL,SAAA;AACE,wBAAMmB,QAAAA,GAAWptB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkBqkB,KAAAA,CAAlBrkB,CAAkBqkB,CAAlBrkB,EAA4BqkB,KAAAA,CAA5BrkB,CAA4BqkB,CAA5BrkB,EAAsCqkB,KAAAA,CADzD,CACyDA,CAAtCrkB,CAAjB;;AACA5Z,kBAAAA,OAAAA,CAAAA,SAAAA,GAFF,QAEEA;AACAA,kBAAAA,OAAAA,CAAAA,WAAAA,GAHF,QAGEA;AAEAqwB,kBAAAA,OAAAA,CAAAA,SAAAA,GALF,QAKEA;AACAA,kBAAAA,OAAAA,CAAAA,WAAAA,GANF,QAMEA;AAdJ;;AAgBE;AACE,wBAAM,IAAA,KAAA,CAAA,WAAA,CAAgB,2BAjB1B,SAAA,EAiBU,CAAN;AAjBJ;AAjIsB,aAAA;AAsJxB4R,YAAAA,UAAAA,EAAY,SAAA,wBAAA,CAAA,GAAA,EAAA,KAAA,EAA8C;AACxDnT,cAAAA,GAAAA,GAAM,KADkD,GACxDA;AAEAA,cAAAA,GAAAA,CAAAA,YAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAA4B,KAH4B,aAGxDA;AACAA,cAAAA,GAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,EAAyB,KAJ+B,MAIxDA;AAEA,oBAAM4W,sBAAAA,GAAyB,KAAA,mBAAA,CANyB,KAMzB,CAA/B;AAEA,qBAAO5W,GAAAA,CAAAA,aAAAA,CAAAA,sBAAAA,EARiD,QAQjDA,CAAP;AA9JsB;AAAA,WAA1B8W;AAkKA,iBAzLqD,aAyLrD;AAzLF,SAAuB,EAAvB;;;;;;;;;;;;;AC7XA,cAAMznB,mBAAAA,GAAsB/Z,MAAAA,CAAAA,MAAAA,CA3B5B,IA2B4BA,CAA5B;;AAEA+Z,QAAAA,mBAAAA,CAAAA,UAAAA,GACEA,mBAAAA,CAAAA,UAAAA,KAAAA,SAAAA,GAAAA,IAAAA,GAEIA,mBAAAA,CAhCN,UA6BAA;AAKAA,QAAAA,mBAAAA,CAAAA,SAAAA,GACEA,mBAAAA,CAAAA,SAAAA,KAAAA,SAAAA,GAAAA,EAAAA,GAEIA,mBAAAA,CArCN,SAkCAA;;;;;;;;;;;;ACnBA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AASA,cAAM8oB,YAAAA,GAAe;AACnBr5B,UAAAA,OAAAA,EADmB,CAAA;AAEnBs5B,UAAAA,IAAAA,EAFmB,CAAA;AAGnBC,UAAAA,KAAAA,EAHmB;AAAA,SAArB;AAMA,cAAMC,UAAAA,GAAa;AACjBx5B,UAAAA,OAAAA,EADiB,CAAA;AAEjBy5B,UAAAA,MAAAA,EAFiB,CAAA;AAGjBC,UAAAA,eAAAA,EAHiB,CAAA;AAIjBC,UAAAA,KAAAA,EAJiB,CAAA;AAKjBC,UAAAA,OAAAA,EALiB,CAAA;AAMjBL,UAAAA,KAAAA,EANiB,CAAA;AAOjBM,UAAAA,IAAAA,EAPiB,CAAA;AAQjBC,UAAAA,aAAAA,EARiB,CAAA;AASjBC,UAAAA,cAAAA,EATiB;AAAA,SAAnB;;AAYA,iBAAA,UAAA,CAAA,MAAA,EAA4B;AAWxB,cAAI,OAAA,MAAA,KAAA,QAAA,IAA8BpnC,MAAAA,KAAlC,IAAA,EAAmD;AACjD,mBADiD,MACjD;AAZsB;;AAe1B,kBAAQA,MAAAA,CAAR,IAAA;AACE,iBAAA,gBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,cAAA,CAAmBA,MAAAA,CAF9B,OAEW,CAAP;;AACF,iBAAA,qBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,mBAAA,CAAwBA,MAAAA,CAJnC,OAIW,CAAP;;AACF,iBAAA,6BAAA;AACE,qBAAO,IAAA,KAAA,CAAA,2BAAA,CAAgCA,MAAAA,CAAhC,OAAA,EAAgDA,MAAAA,CAN3D,MAMW,CAAP;;AACF,iBAAA,uBAAA;AACE,qBAAO,IAAA,KAAA,CAAA,qBAAA,CAA0BA,MAAAA,CAA1B,OAAA,EAA0CA,MAAAA,CARrD,OAQW,CAAP;;AACF;AACE,qBAAO,IAAA,KAAA,CAAA,qBAAA,CAA0BA,MAAAA,CAA1B,OAAA,EAA0CA,MAAAA,CAVrD,QAUqDA,EAA1C,CAAP;AAVJ;AAzDF;;AAuEA,cAAA,cAAA,CAAqB;AACnBlB,UAAAA,WAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAAA,MAAAA,EAA4C;AAC1C,iBAAA,UAAA,GAD0C,UAC1C;AACA,iBAAA,UAAA,GAF0C,UAE1C;AACA,iBAAA,MAAA,GAH0C,MAG1C;AACA,iBAAA,UAAA,GAJ0C,CAI1C;AACA,iBAAA,QAAA,GAL0C,CAK1C;AACA,iBAAA,oBAAA,GAN0C,IAM1C;AACA,iBAAA,WAAA,GAAmB+E,MAAAA,CAAAA,MAAAA,CAPuB,IAOvBA,CAAnB;AACA,iBAAA,iBAAA,GAAyBA,MAAAA,CAAAA,MAAAA,CARiB,IAQjBA,CAAzB;AACA,iBAAA,oBAAA,GAA4BA,MAAAA,CAAAA,MAAAA,CATc,IASdA,CAA5B;AACA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,MAAAA,CAVqB,IAUrBA,CAArB;;AAEA,iBAAA,kBAAA,GAA0BmjB,KAAAA,IAAS;AACjC,oBAAMtP,IAAAA,GAAOsP,KAAAA,CADoB,IACjC;;AACA,kBAAItP,IAAAA,CAAAA,UAAAA,KAAoB,KAAxB,UAAA,EAAyC;AAAA;AAFR;;AAKjC,kBAAIA,IAAAA,CAAJ,MAAA,EAAiB;AACf,qBAAA,qBAAA,CADe,IACf;;AADe;AALgB;;AASjC,kBAAIA,IAAAA,CAAJ,QAAA,EAAmB;AACjB,sBAAM2vB,UAAAA,GAAa3vB,IAAAA,CADF,UACjB;AACA,sBAAM8D,UAAAA,GAAa,KAAA,oBAAA,CAFF,UAEE,CAAnB;;AACA,oBAAI,CAAJ,UAAA,EAAiB;AACf,wBAAM,IAAA,KAAA,CAAU,2BADD,UAAA,EACT,CAAN;AAJe;;AAMjB,uBAAO,KAAA,oBAAA,CANU,UAMV,CAAP;;AAEA,oBAAI9D,IAAAA,CAAAA,QAAAA,KAAkBgvB,YAAAA,CAAtB,IAAA,EAAyC;AACvClrB,kBAAAA,UAAAA,CAAAA,OAAAA,CAAmB9D,IAAAA,CADoB,IACvC8D;AADF,iBAAA,MAEO,IAAI9D,IAAAA,CAAAA,QAAAA,KAAkBgvB,YAAAA,CAAtB,KAAA,EAA0C;AAC/ClrB,kBAAAA,UAAAA,CAAAA,MAAAA,CAAkB8rB,UAAAA,CAAW5vB,IAAAA,CADkB,MAC7B4vB,CAAlB9rB;AADK,iBAAA,MAEA;AACL,wBAAM,IAAA,KAAA,CADD,0BACC,CAAN;AAbe;;AAAA;AATc;;AA0BjC,oBAAM+rB,MAAAA,GAAS,KAAA,aAAA,CAAmB7vB,IAAAA,CA1BD,MA0BlB,CAAf;;AACA,kBAAI,CAAJ,MAAA,EAAa;AACX,sBAAM,IAAA,KAAA,CAAU,+BAA+BA,IAAAA,CADpC,MAAA,EACL,CAAN;AA5B+B;;AA8BjC,kBAAIA,IAAAA,CAAJ,UAAA,EAAqB;AACnB,sBAAM8vB,YAAAA,GAAe,KADF,UACnB;AACA,sBAAMC,YAAAA,GAAe/vB,IAAAA,CAFF,UAEnB;AACA,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BhX,kBAAAA,OAAAA,CAAQ6mC,MAAAA,CAAO7vB,IAAAA,CADc,IACrB6vB,CAAR7mC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAGE,UAAA,MAAA,EAAkB;AAChBgnC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AACjBC,oBAAAA,UAAAA,EADiB,YAAA;AAEjBC,oBAAAA,UAAAA,EAFiB,YAAA;AAGjBrjB,oBAAAA,QAAAA,EAAUmiB,YAAAA,CAHO,IAAA;AAIjBW,oBAAAA,UAAAA,EAAY3vB,IAAAA,CAJK,UAAA;AAKjBA,oBAAAA,IAAAA,EALiB;AAAA,mBAAnBgwB;AAJJ,iBAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AACjBC,oBAAAA,UAAAA,EADiB,YAAA;AAEjBC,oBAAAA,UAAAA,EAFiB,YAAA;AAGjBrjB,oBAAAA,QAAAA,EAAUmiB,YAAAA,CAHO,KAAA;AAIjBW,oBAAAA,UAAAA,EAAY3vB,IAAAA,CAJK,UAAA;AAKjB1X,oBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAbJ,iBAAA;AAHmB;AA9BY;;AAyDjC,kBAAIhwB,IAAAA,CAAJ,QAAA,EAAmB;AACjB,qBAAA,iBAAA,CADiB,IACjB;;AADiB;AAzDc;;AA6DjC6vB,cAAAA,MAAAA,CAAO7vB,IAAAA,CA7D0B,IA6DjC6vB,CAAAA;AA7DF,aAAA;;AA+DAG,YAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAmC,KA3EO,kBA2E1CA;AA5EiB;;AA+EnBG,UAAAA,EAAAA,CAAAA,UAAAA,EAAAA,OAAAA,EAAwB;AAUtB,kBAAMC,EAAAA,GAAK,KAVW,aAUtB;;AACA,gBAAIA,EAAAA,CAAJ,UAAIA,CAAJ,EAAoB;AAClB,oBAAM,IAAA,KAAA,CAAU,0CADE,UAAA,GACZ,CAAN;AAZoB;;AActBA,YAAAA,EAAAA,CAAAA,UAAAA,CAAAA,GAdsB,OActBA;AA7FiB;;AAsGnBC,UAAAA,IAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAAkC;AAChC,iBAAA,YAAA,CACE;AACEJ,cAAAA,UAAAA,EAAY,KADd,UAAA;AAEEC,cAAAA,UAAAA,EAAY,KAFd,UAAA;AAGEL,cAAAA,MAAAA,EAHF,UAAA;AAAA,cAAA;AAAA,aADF,EADgC,SAChC;AAvGiB;;AA0HnBS,UAAAA,eAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA6C;AAC3C,kBAAMX,UAAAA,GAAa,KADwB,UACxB,EAAnB;AACA,kBAAM7rB,UAAAA,GAFqC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAE3C;AACA,iBAAA,oBAAA,CAAA,UAAA,IAH2C,UAG3C;;AACA,gBAAI;AACF,mBAAA,YAAA,CACE;AACEmsB,gBAAAA,UAAAA,EAAY,KADd,UAAA;AAEEC,gBAAAA,UAAAA,EAAY,KAFd,UAAA;AAGEL,gBAAAA,MAAAA,EAHF,UAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA;AAAA,eADF,EADE,SACF;AADF,aAAA,CAWE,OAAA,EAAA,EAAW;AACX/rB,cAAAA,UAAAA,CAAAA,MAAAA,CADW,EACXA;AAhByC;;AAkB3C,mBAAOA,UAAAA,CAlBoC,OAkB3C;AA5IiB;;AAyJnBysB,UAAAA,cAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,EAAAA,SAAAA,EAA8D;AAC5D,kBAAMC,QAAAA,GAAW,KAD2C,QAC3C,EAAjB;AACA,kBAAMP,UAAAA,GAAa,KAFyC,UAE5D;AACA,kBAAMC,UAAAA,GAAa,KAHyC,UAG5D;AACA,kBAAMF,MAAAA,GAAS,KAJ6C,MAI5D;AAEA,mBAAO,IAAA,cAAA,CACL;AACExjC,cAAAA,KAAAA,EAAOikC,UAAAA,IAAc;AACnB,sBAAMC,eAAAA,GADa,CAAA,GAAA,KAAA,CAAA,uBAAA,GACnB;AACA,qBAAA,iBAAA,CAAA,QAAA,IAAmC;AAAA,kBAAA,UAAA;AAEjCC,kBAAAA,SAAAA,EAFiC,eAAA;AAGjCC,kBAAAA,QAAAA,EAHiC,IAAA;AAIjCC,kBAAAA,UAAAA,EAJiC,IAAA;AAKjCC,kBAAAA,QAAAA,EALiC;AAAA,iBAAnC;;AAOA,qBAAA,YAAA,CACE;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGEjB,kBAAAA,MAAAA,EAHF,UAAA;AAAA,kBAAA,QAAA;AAAA,kBAAA,IAAA;AAMEkB,kBAAAA,WAAAA,EAAaN,UAAAA,CANf;AAAA,iBADF,EATmB,SASnB;;AAYA,uBAAOC,eAAAA,CArBY,OAqBnB;AAtBJ,eAAA;AAyBEM,cAAAA,IAAAA,EAAMP,UAAAA,IAAc;AAClB,sBAAMQ,cAAAA,GADY,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,GAFkB,cAElB;AACAjB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,IAAA;AAAA,kBAAA,QAAA;AAKjB4B,kBAAAA,WAAAA,EAAaN,UAAAA,CALI;AAAA,iBAAnBT;AASA,uBAAOiB,cAAAA,CAZW,OAYlB;AArCJ,eAAA;AAwCE3c,cAAAA,MAAAA,EAAQhsB,MAAAA,IAAU;AAChBY,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAOZ,MAAAA,YAAPY,KAAAA,EADgB,iCAChBA;AACA,sBAAMioC,gBAAAA,GAFU,CAAA,GAAA,KAAA,CAAA,uBAAA,GAEhB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,GAHgB,gBAGhB;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,GAJgB,IAIhB;AACAnB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,MAAA;AAAA,kBAAA,QAAA;AAKjB7mC,kBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,iBAAnBI;AAQA,uBAAOmB,gBAAAA,CAbS,OAahB;AArDJ;AAAA,aADK,EANqD,gBAMrD,CAAP;AA/JiB;;AA+NnBC,UAAAA,iBAAAA,CAAAA,IAAAA,EAAwB;AACtB,kBAAMC,IAAAA,GADgB,IACtB;AACA,kBAAMxB,MAAAA,GAAS,KAAA,aAAA,CAAmB7vB,IAAAA,CAFZ,MAEP,CAAf;AACA,kBAAMwwB,QAAAA,GAAWxwB,IAAAA,CAHK,QAGtB;AACA,kBAAMiwB,UAAAA,GAAa,KAJG,UAItB;AACA,kBAAMC,UAAAA,GAAalwB,IAAAA,CALG,UAKtB;AACA,kBAAMgwB,MAAAA,GAAS,KANO,MAMtB;AAEA,kBAAMsB,UAAAA,GAAa;AACjBC,cAAAA,OAAAA,CAAAA,KAAAA,EAAe5jB,IAAAA,GAAf4jB,CAAAA,EAAAA,SAAAA,EAAoC;AAClC,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AADY;;AAIlC,sBAAMC,eAAAA,GAAkB,KAJU,WAIlC;AACA,qBAAA,WAAA,IALkC,IAKlC;;AAIA,oBAAIA,eAAAA,GAAAA,CAAAA,IAAuB,KAAA,WAAA,IAA3B,CAAA,EAAkD;AAChD,uBAAA,cAAA,GADgD,CAAA,GAAA,KAAA,CAAA,uBAAA,GAChD;AACA,uBAAA,KAAA,GAAa,KAAA,cAAA,CAFmC,OAEhD;AAXgC;;AAalCH,gBAAAA,IAAAA,CAAAA,YAAAA,CACE;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGEH,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHV,OAAA;AAAA,kBAAA,QAAA;AAAA,kBAAA;AAAA,iBADFkC,EAbkC,SAalCA;AAde,eAAA;;AA0BjBI,cAAAA,KAAAA,GAAQ;AACN,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AADhB;;AAIN,qBAAA,WAAA,GAJM,IAIN;AACAzB,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,KAAA;AAAA,kBAAA;AAAA,iBAAnBa;AAMA,uBAAOqB,IAAAA,CAAAA,WAAAA,CAXD,QAWCA,CAAP;AArCe,eAAA;;AAwCjB1kB,cAAAA,KAAAA,CAAAA,MAAAA,EAAc;AACZzjB,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAOZ,MAAAA,YAAPY,KAAAA,EADY,gCACZA;;AACA,oBAAI,KAAJ,WAAA,EAAsB;AAAA;AAFV;;AAKZ,qBAAA,WAAA,GALY,IAKZ;AACA8mC,gBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,kBAAA,UAAA;AAAA,kBAAA,UAAA;AAGjBkB,kBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,KAAA;AAAA,kBAAA,QAAA;AAKjB7mC,kBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,iBAAnBI;AA9Ce,eAAA;;AAuDjB0B,cAAAA,cAAAA,EAvDiB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAAA;AAwDjBC,cAAAA,MAAAA,EAxDiB,IAAA;AAyDjBC,cAAAA,QAAAA,EAzDiB,IAAA;AA0DjBC,cAAAA,WAAAA,EA1DiB,KAAA;AA2DjBd,cAAAA,WAAAA,EAAa/wB,IAAAA,CA3DI,WAAA;AA4DjB8xB,cAAAA,KAAAA,EA5DiB;AAAA,aAAnB;AA+DAR,YAAAA,UAAAA,CAAAA,cAAAA,CAvEsB,OAuEtBA;AACAA,YAAAA,UAAAA,CAAAA,KAAAA,GAAmBA,UAAAA,CAAAA,cAAAA,CAxEG,OAwEtBA;AACA,iBAAA,WAAA,CAAA,QAAA,IAzEsB,UAyEtB;AACA,gBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BtoC,cAAAA,OAAAA,CAAQ6mC,MAAAA,CAAO7vB,IAAAA,CAAP6vB,IAAAA,EADqB,UACrBA,CAAR7mC,CAAAA;AADF,aAAA,EAAA,IAAA,CAGE,YAAY;AACVgnC,cAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,gBAAA,UAAA;AAAA,gBAAA,UAAA;AAGjBkB,gBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,cAAA;AAAA,gBAAA,QAAA;AAKjB4C,gBAAAA,OAAAA,EALiB;AAAA,eAAnB/B;AAJJ,aAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,cAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,gBAAA,UAAA;AAAA,gBAAA,UAAA;AAGjBkB,gBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,cAAA;AAAA,gBAAA,QAAA;AAKjB7mC,gBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,eAAnBI;AAbJ,aAAA;AAzSiB;;AAoUnBgC,UAAAA,qBAAAA,CAAAA,IAAAA,EAA4B;AAC1B,kBAAMxB,QAAAA,GAAWxwB,IAAAA,CADS,QAC1B;AACA,kBAAMiwB,UAAAA,GAAa,KAFO,UAE1B;AACA,kBAAMC,UAAAA,GAAalwB,IAAAA,CAHO,UAG1B;AACA,kBAAMgwB,MAAAA,GAAS,KAJW,MAI1B;;AAEA,oBAAQhwB,IAAAA,CAAR,MAAA;AACE,mBAAKmvB,UAAAA,CAAL,cAAA;AACE,oBAAInvB,IAAAA,CAAJ,OAAA,EAAkB;AAChB,uBAAA,iBAAA,CAAA,QAAA,EAAA,SAAA,CADgB,OAChB;AADF,iBAAA,MAEO;AACL,uBAAA,iBAAA,CAAA,QAAA,EAAA,SAAA,CAAA,MAAA,CACE4vB,UAAAA,CAAW5vB,IAAAA,CAFR,MAEH4vB,CADF;AAJJ;;AADF;;AAUE,mBAAKT,UAAAA,CAAL,aAAA;AACE,oBAAInvB,IAAAA,CAAJ,OAAA,EAAkB;AAChB,uBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,CADgB,OAChB;AADF,iBAAA,MAEO;AACL,uBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,CAAA,MAAA,CACE4vB,UAAAA,CAAW5vB,IAAAA,CAFR,MAEH4vB,CADF;AAJJ;;AAVF;;AAmBE,mBAAKT,UAAAA,CAAL,IAAA;AAEE,oBAAI,CAAC,KAAA,WAAA,CAAL,QAAK,CAAL,EAAiC;AAC/Ba,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AAD+B;AAFnC;;AAeE,oBACE,KAAA,WAAA,CAAA,QAAA,EAAA,WAAA,IAAA,CAAA,IACAhwB,IAAAA,CAAAA,WAAAA,GAFF,CAAA,EAGE;AACA,uBAAA,WAAA,CAAA,QAAA,EAAA,cAAA,CADA,OACA;AAnBJ;;AAsBE,qBAAA,WAAA,CAAA,QAAA,EAAA,WAAA,GAAyCA,IAAAA,CAtB3C,WAsBE;AACA,sBAAM;AAAA,kBAAA;AAAA,oBAAa,KAAA,WAAA,CAAiBA,IAAAA,CAvBtC,QAuBqB,CAAnB;AACA,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BhX,kBAAAA,OAAAA,CAAQ2oC,MAAAA,IAAUA,MADW,EAC7B3oC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAGE,YAAY;AACVgnC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AAJJ,iBAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,aAAA;AAAA,oBAAA,QAAA;AAKjB7mC,oBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAbJ,iBAAA;AA3CJ;;AAkEE,mBAAKb,UAAAA,CAAL,OAAA;AACEjmC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KAAA,iBAAA,CADFA,QACE,CADFA,EADF,uCACEA;;AAIA,oBAAI,KAAA,iBAAA,CAAA,QAAA,EAAJ,QAAA,EAA+C;AAAA;AALjD;;AAQE,qBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,CAAA,OAAA,CAAoD8W,IAAAA,CARtD,KAQE;AA1EJ;;AA4EE,mBAAKmvB,UAAAA,CAAL,KAAA;AACEjmC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KAAA,iBAAA,CADFA,QACE,CADFA,EADF,qCACEA;;AAIA,oBAAI,KAAA,iBAAA,CAAA,QAAA,EAAJ,QAAA,EAA+C;AAAA;AALjD;;AAQE,qBAAA,iBAAA,CAAA,QAAA,EAAA,QAAA,GARF,IAQE;AACA,qBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,CATF,KASE;;AACA,qBAAA,uBAAA,CAVF,QAUE;;AAtFJ;;AAwFE,mBAAKimC,UAAAA,CAAL,KAAA;AACEjmC,iBAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,KAAA,iBAAA,CADFA,QACE,CADFA,EADF,qCACEA;AAIA,qBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,CAAA,KAAA,CACE0mC,UAAAA,CAAW5vB,IAAAA,CANf,MAMI4vB,CADF;;AAGA,qBAAA,uBAAA,CARF,QAQE;;AAhGJ;;AAkGE,mBAAKT,UAAAA,CAAL,eAAA;AACE,oBAAInvB,IAAAA,CAAJ,OAAA,EAAkB;AAChB,uBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,CADgB,OAChB;AADF,iBAAA,MAEO;AACL,uBAAA,iBAAA,CAAA,QAAA,EAAA,UAAA,CAAA,MAAA,CACE4vB,UAAAA,CAAW5vB,IAAAA,CAFR,MAEH4vB,CADF;AAJJ;;AAQE,qBAAA,uBAAA,CARF,QAQE;;AA1GJ;;AA4GE,mBAAKT,UAAAA,CAAL,MAAA;AACE,oBAAI,CAAC,KAAA,WAAA,CAAL,QAAK,CAAL,EAAiC;AAAA;AADnC;;AAIE,sBAAM;AAAA,kBAAA;AAAA,oBAAe,KAAA,WAAA,CAAiBnvB,IAAAA,CAJxC,QAIuB,CAArB;AACA,oBAAA,OAAA,CAAY,UAAA,OAAA,EAAmB;AAC7BhX,kBAAAA,OAAAA,CAAQ4oC,QAAAA,IAAYA,QAAAA,CAAShC,UAAAA,CAAW5vB,IAAAA,CADX,MACA4vB,CAATgC,CAApB5oC,CAAAA;AADF,iBAAA,EAAA,IAAA,CAGE,YAAY;AACVgnC,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,eAAA;AAAA,oBAAA,QAAA;AAKjB4C,oBAAAA,OAAAA,EALiB;AAAA,mBAAnB/B;AAJJ,iBAAA,EAYE,UAAA,MAAA,EAAkB;AAChBA,kBAAAA,MAAAA,CAAAA,WAAAA,CAAmB;AAAA,oBAAA,UAAA;AAAA,oBAAA,UAAA;AAGjBkB,oBAAAA,MAAAA,EAAQ/B,UAAAA,CAHS,eAAA;AAAA,oBAAA,QAAA;AAKjB7mC,oBAAAA,MAAAA,EAAQsnC,UAAAA,CALS,MAKTA;AALS,mBAAnBI;AAbJ,iBAAA;AAsBA,qBAAA,WAAA,CAAA,QAAA,EAAA,cAAA,CAAA,MAAA,CACEJ,UAAAA,CAAW5vB,IAAAA,CA5Bf,MA4BI4vB,CADF;AAGA,qBAAA,WAAA,CAAA,QAAA,EAAA,WAAA,GA9BF,IA8BE;AACA,uBAAO,KAAA,WAAA,CA/BT,QA+BS,CAAP;AA3IJ;;AA6IE;AACE,sBAAM,IAAA,KAAA,CA9IV,wBA8IU,CAAN;AA9IJ;AA1UiB;;AA+dnB,gBAAMqC,uBAAN,CAAA,QAAA,EAAwC;AAGtC,kBAAM,OAAA,CAAA,UAAA,CACJ,CACE,KAAA,iBAAA,CAAA,QAAA,EADF,SAAA,EAEE,KAAA,iBAAA,CAAA,QAAA,EAFF,QAAA,EAGE,KAAA,iBAAA,CAAA,QAAA,EAHF,UAAA,EAAA,GAAA,CAIM,UAAA,UAAA,EAAsB;AAC1B,qBAAOnuB,UAAAA,IAAcA,UAAAA,CADK,OAC1B;AANJ,aACE,CADI,CAAN;AASA,mBAAO,KAAA,iBAAA,CAZ+B,QAY/B,CAAP;AA3eiB;;AAofnBouB,UAAAA,YAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAiC;AAC/B,gBAAI/iB,SAAAA,IAAa,KAAjB,oBAAA,EAA4C;AAC1C,mBAAA,MAAA,CAAA,WAAA,CAAA,OAAA,EAD0C,SAC1C;AADF,aAAA,MAEO;AACL,mBAAA,MAAA,CAAA,WAAA,CADK,OACL;AAJ6B;AApfd;;AA4fnBxnB,UAAAA,OAAAA,GAAU;AACR,iBAAA,MAAA,CAAA,mBAAA,CAAA,SAAA,EAA2C,KADnC,kBACR;AA7fiB;;AAAA;;;;;;;;;;;;;;ACvErB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAiBA,cAAA,QAAA,CAAe;AACbP,UAAAA,WAAAA,CAAY;AAAA,YAAA,UAAA;AAAZA,YAAAA;AAAY,WAAZA,EAAqC;AACnC,iBAAA,YAAA,GADmC,UACnC;AACA,iBAAA,KAAA,GAFmC,OAEnC;AAHW;;AAMb+qC,UAAAA,MAAAA,GAAS;AACP,mBAAO,KADA,KACP;AAPW;;AAUbnuB,UAAAA,GAAAA,CAAAA,IAAAA,EAAU;AACR,mBAAO,KAAA,YAAA,CAAA,GAAA,CAAA,IAAA,KADC,IACR;AAXW;;AAcb8U,UAAAA,MAAAA,GAAS;AACP,mBAAOC,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KADd,YACAA,CAAP;AAfW;;AAkBb3E,UAAAA,GAAAA,CAAAA,IAAAA,EAAU;AACR,mBAAO,KAAA,YAAA,CAAA,GAAA,CADC,IACD,CAAP;AAnBW;;AAAA;;;;;;;;;;;;;;ACHf,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAEA,cAAA,oBAAA,CAA2B;AACzBhtB,UAAAA,WAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA0B;AACxB,iBAAA,OAAA,GADwB,IACxB;AACA,iBAAA,IAAA,GAFwB,IAExB;AACA,iBAAA,MAAA,GAHwB,MAGxB;AAJuB;;AAAA;;AAQ3B,cAAA,qBAAA,CAA4B;AAC1BA,UAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,iBAAA,IAAA,GADgB,IAChB;AACA,iBAAA,OAAA,GAFgB,IAEhB;AACA,iBAAA,MAAA,GAHgB,IAGhB;AACA,iBAAA,OAAA,GAAe,IAJC,GAID,EAAf;;AAEA,gBAAI4Y,IAAAA,KAAJ,IAAA,EAAmB;AAAA;AANH;;AAShB,iBAAA,IAAA,GAAYA,IAAAA,CATI,IAShB;AACA,iBAAA,OAAA,GAAeA,IAAAA,CAVC,OAUhB;AACA,iBAAA,MAAA,GAAcA,IAAAA,CAXE,KAWhB;;AACA,iBAAA,MAAA,KAAA,IAAoBA,IAAAA,CAApB,MAAA,EAAiC;AAC/B,mBAAA,OAAA,CAAA,GAAA,CACEgnB,KAAAA,CADF,EAAA,EAEE,IAAA,oBAAA,CAAyBA,KAAAA,CAAzB,IAAA,EAAqCA,KAAAA,CAHR,MAG7B,CAFF;AAbc;;AAmBhB,gBAAIhnB,IAAAA,CAAAA,SAAAA,KAAJ,KAAA,EAA8B;AAC5B,mBAAA,MAAA,KAAA,IAAoB,KAApB,OAAA,EAAkC;AAChCgnB,gBAAAA,KAAAA,CAAAA,OAAAA,GADgC,KAChCA;AAF0B;AAnBd;;AAyBhB,iBAAA,MAAA,EAAA,IAAiBhnB,IAAAA,CAAjB,EAAA,EAA0B;AACxB,mBAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,GADwB,IACxB;AA1Bc;;AA6BhB,iBAAA,MAAA,GAAA,IAAkBA,IAAAA,CAAlB,GAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,GAAA,CAAA,GAAA,EAAA,OAAA,GAD0B,KAC1B;AA9Bc;AADQ;;AAmC1BoyB,UAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,gBAAIpL,KAAAA,CAAAA,IAAAA,KAAJ,KAAA,EAA0B;AACxB,kBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAiBA,KAAAA,CAAtB,EAAK,CAAL,EAAiC;AAC/Bn7B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCAAqCm7B,KAAAA,CADX,EAAA,EAC/Bn7B;AACA,uBAF+B,IAE/B;AAHsB;;AAKxB,qBAAO,KAAA,OAAA,CAAA,GAAA,CAAiBm7B,KAAAA,CAAjB,EAAA,EALiB,OAKxB;AALF,aAAA,MAMO,IAAIA,KAAAA,CAAAA,IAAAA,KAAJ,MAAA,EAA2B;AAGhC,kBAAIA,KAAAA,CAAJ,UAAA,EAAsB;AACpBn7B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADoB,0CACpBA;AAJ8B;;AAMhC,kBAAI,CAACm7B,KAAAA,CAAD,MAAA,IAAiBA,KAAAA,CAAAA,MAAAA,KAArB,OAAA,EAA+C;AAE7C,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzBn7B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAJ,OAAA,EAAkC;AAChC,2BADgC,IAChC;AANwB;AAFiB;;AAW7C,uBAX6C,KAW7C;AAXF,eAAA,MAYO,IAAIm7B,KAAAA,CAAAA,MAAAA,KAAJ,OAAA,EAA8B;AACnC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzBn7B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAL,OAAA,EAAmC;AACjC,2BADiC,KACjC;AANwB;AADO;;AAUnC,uBAVmC,IAUnC;AAVK,eAAA,MAWA,IAAIm7B,KAAAA,CAAAA,MAAAA,KAAJ,QAAA,EAA+B;AACpC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzBn7B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAL,OAAA,EAAmC;AACjC,2BADiC,IACjC;AANwB;AADQ;;AAUpC,uBAVoC,KAUpC;AAVK,eAAA,MAWA,IAAIm7B,KAAAA,CAAAA,MAAAA,KAAJ,QAAA,EAA+B;AACpC,qBAAA,MAAA,EAAA,IAAiBA,KAAAA,CAAjB,GAAA,EAA4B;AAC1B,sBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzBn7B,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AACA,2BAFyB,IAEzB;AAHwB;;AAK1B,sBAAI,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAJ,OAAA,EAAkC;AAChC,2BADgC,KAChC;AANwB;AADQ;;AAUpC,uBAVoC,IAUpC;AAlD8B;;AAoDhCA,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,mCAAmCm7B,KAAAA,CApDR,MAAA,GAoDhCn7B;AACA,qBArDgC,IAqDhC;AA5Da;;AA8DfA,aAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,sBAAsBm7B,KAAAA,CA9DZ,IAAA,GA8Dfn7B;AACA,mBA/De,IA+Df;AAlGwB;;AAqG1BwmC,UAAAA,aAAAA,CAAAA,EAAAA,EAAkBpJ,OAAAA,GAAlBoJ,IAAAA,EAAkC;AAChC,gBAAI,CAAC,KAAA,OAAA,CAAA,GAAA,CAAL,EAAK,CAAL,EAA2B;AACzBxmC,eAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,qCADoB,EAAA,EACzBA;AADyB;AADK;;AAKhC,iBAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,OAAA,GAA+B,CAAC,CALA,OAKhC;AA1GwB;;AA6G1BymC,UAAAA,QAAAA,GAAW;AACT,gBAAI,CAAC,KAAA,OAAA,CAAL,IAAA,EAAwB;AACtB,qBADsB,IACtB;AAFO;;AAIT,gBAAI,KAAJ,MAAA,EAAiB;AACf,qBAAO,KAAA,MAAA,CADQ,KACR,EAAP;AALO;;AAOT,mBAAOzxB,KAAAA,CAAAA,IAAAA,CAAW,KAAA,OAAA,CAPT,IAOS,EAAXA,CAAP;AApHwB;;AAuH1B0xB,UAAAA,SAAAA,GAAY;AACV,mBAAO,KAAA,OAAA,CAAA,IAAA,GAAA,CAAA,GAAwBxZ,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EAAc,KAAtC,OAAwBA,CAAxB,GADG,IACV;AAxHwB;;AA2H1ByZ,UAAAA,QAAAA,CAAAA,EAAAA,EAAa;AACX,mBAAO,KAAA,OAAA,CAAA,GAAA,CAAA,EAAA,KADI,IACX;AA5HwB;;AAAA;;;;;;;;;;;;;;ACT5B,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAfA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAmBA,cAAA,sBAAA,CAA6B;AAC3BprC,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,qBAAAA,EAA2C;AACzC8B,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,qBAAAA,EADyC,6EACzCA;AAKA,iBAAA,aAAA,GANyC,EAMzC;AACA,iBAAA,gBAAA,GAAwBuc,MAAAA,CAAAA,eAAAA,IAPiB,KAOzC;AACA,iBAAA,2BAAA,GACEA,MAAAA,CAAAA,0BAAAA,IATuC,IAQzC;AAGA,kBAAMgB,WAAAA,GAAchB,MAAAA,CAXqB,WAWzC;;AACA,gBAAIgB,CAAAA,WAAAA,SAAAA,IAAAA,WAAAA,WAAAA,YAAAA,WAAAA,CAAAA,MAAAA,IAAJ,CAAA,EAA6B;AAC3B,oBAAM5C,MAAAA,GAAS,IAAA,UAAA,CAAA,WAAA,EADY,MAC3B;;AACA,mBAAA,aAAA,CAAA,IAAA,CAF2B,MAE3B;AAduC;;AAiBzC,iBAAA,sBAAA,GAjByC,qBAiBzC;AACA,iBAAA,qBAAA,GAA6B,CAAC4B,MAAAA,CAlBW,aAkBzC;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAnBe,YAmBzC;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CApBmB,MAoBzC;AAEA,iBAAA,kBAAA,GAtByC,IAsBzC;AACA,iBAAA,aAAA,GAvByC,EAuBzC;;AAEA,iBAAA,sBAAA,CAAA,gBAAA,CAA6C,CAAA,KAAA,EAAA,KAAA,KAAkB;AAC7D,mBAAA,cAAA,CAAoB;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAApB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,mBAAA,CAAgD,CAAA,MAAA,EAAA,KAAA,KAAmB;AACjE,mBAAA,WAAA,CAAiB;AAAA,gBAAA,MAAA;AAAA,gBAAA;AAAA,eAAjB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,0BAAA,CAAuD9F,KAAAA,IAAS;AAC9D,mBAAA,cAAA,CAAoB;AAD0C,gBAAA;AAC1C,eAApB;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAAA,0BAAA,CAAuD,MAAM;AAC3D,mBAD2D,kBAC3D;AADF,aAAA;;AAIA,iBAAA,sBAAA,CAzCyC,cAyCzC;AA1CyB;;AA6C3B8yB,UAAAA,cAAAA,CAAAA,IAAAA,EAAqB;AACnB,kBAAM5uB,MAAAA,GAAS,IAAA,UAAA,CAAegL,IAAAA,CAAf,KAAA,EADI,MACnB;;AACA,gBAAIA,IAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA8B;AAC5B,kBAAI,KAAJ,kBAAA,EAA6B;AAC3B,qBAAA,kBAAA,CAAA,QAAA,CAD2B,MAC3B;AADF,eAAA,MAEO;AACL,qBAAA,aAAA,CAAA,IAAA,CADK,MACL;AAJ0B;AAA9B,aAAA,MAMO;AACL,oBAAM6jB,KAAAA,GAAQ,KAAA,aAAA,CAAA,IAAA,CAAwB,UAAA,WAAA,EAAuB;AAC3D,oBAAIjgB,WAAAA,CAAAA,MAAAA,KAAuB5D,IAAAA,CAA3B,KAAA,EAAuC;AACrC,yBADqC,KACrC;AAFyD;;AAI3D4D,gBAAAA,WAAAA,CAAAA,QAAAA,CAJ2D,MAI3DA;;AACA,uBAL2D,IAK3D;AALF,eAAc,CAAd;;AAOAvpB,eAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EARK,yEAQLA;AAhBiB;AA7CM;;AAoE3B,cAAIypC,sBAAJ,GAA6B;AAAA;;AAC3B,mBAAO,+BAAA,kBAAA,gFAAA,OAAA,KADoB,CAC3B;AArEyB;;AAwE3BC,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,gBAAI7gB,GAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA6B;AAE3B,oBAAM8gB,WAAAA,GAAc,KAAA,aAAA,CAFO,CAEP,CAApB;;AACA,kBAAIA,WAAJ,aAAIA,WAAJ,uBAAIA,WAAAA,CAAJ,UAAA,EAA6B;AAC3BA,gBAAAA,WAAAA,CAAAA,UAAAA,CAAuB;AAAE7gB,kBAAAA,MAAAA,EAAQD,GAAAA,CADN;AACJ,iBAAvB8gB;AAJyB;AAA7B,aAAA,MAMO;AACL,oBAAMxgB,UAAAA,GAAa,KADd,kBACL;;AACA,kBAAIA,UAAJ,aAAIA,UAAJ,uBAAIA,UAAAA,CAAJ,UAAA,EAA4B;AAC1BA,gBAAAA,UAAAA,CAAAA,UAAAA,CAAsB;AAAEL,kBAAAA,MAAAA,EAAQD,GAAAA,CAAV,MAAA;AAAsBE,kBAAAA,KAAAA,EAAOF,GAAAA,CAA7B;AAAA,iBAAtBM;AAHG;AAPQ;AAxEU;;AAuF3BygB,UAAAA,kBAAAA,GAAqB;AACnB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAD2B,eAC3B;AAFiB;;AAInB,iBAAA,gBAAA,GAJmB,IAInB;AA3FyB;;AA8F3BC,UAAAA,kBAAAA,CAAAA,MAAAA,EAA2B;AACzB,kBAAMxnC,CAAAA,GAAI,KAAA,aAAA,CAAA,OAAA,CADe,MACf,CAAV;;AACA,gBAAIA,CAAAA,IAAJ,CAAA,EAAY;AACV,mBAAA,aAAA,CAAA,MAAA,CAAA,CAAA,EADU,CACV;AAHuB;AA9FA;;AAqG3BynC,UAAAA,aAAAA,GAAgB;AACd9pC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,+DACdA;AAIA,kBAAM+pC,YAAAA,GAAe,KALP,aAKd;AACA,iBAAA,aAAA,GANc,IAMd;AACA,mBAAO,IAAA,4BAAA,CAAA,IAAA,EAAA,YAAA,EAGL,KAHK,gBAAA,EAIL,KAXY,2BAOP,CAAP;AA5GyB;;AAoH3BC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAIxnC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAMqiB,MAAAA,GAAS,IAAA,iCAAA,CAAA,IAAA,EAAA,KAAA,EAJU,GAIV,CAAf;;AACA,iBAAA,sBAAA,CAAA,gBAAA,CAAA,KAAA,EALyB,GAKzB;;AACA,iBAAA,aAAA,CAAA,IAAA,CANyB,MAMzB;;AACA,mBAPyB,MAOzB;AA3HyB;;AA8H3BolB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,kBAAMC,OAAAA,GAAU,KAAA,aAAA,CAAA,KAAA,CAJQ,CAIR,CAAhB;;AACAA,YAAAA,OAAAA,CAAAA,OAAAA,CAAgB,UAAA,WAAA,EAAuB;AACrC3gB,cAAAA,WAAAA,CAAAA,MAAAA,CADqC,MACrCA;AADF2gB,aAAAA;;AAGA,iBAAA,sBAAA,CARwB,KAQxB;AAtIyB;;AAAA;;;;AA2I7B,cAAA,4BAAA,CAAmC;AACjChsC,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAGEsf,eAAAA,GAHFtf,KAAAA,EAIEuf,0BAAAA,GAJFvf,IAAAA,EAKE;AACA,iBAAA,OAAA,GADA,MACA;AACA,iBAAA,KAAA,GAAasf,eAAAA,IAFb,KAEA;AACA,iBAAA,SAAA,GAAiB2sB,CAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAAA,0BAAAA,IAAAA,0BAAAA,GAHjB,IAGA;AAGA,iBAAA,aAAA,GAAqBJ,YAAAA,IANrB,EAMA;AACA,iBAAA,OAAA,GAPA,CAOA;;AACA,iBAAA,MAAA,KAAA,IAAoB,KAApB,aAAA,EAAwC;AACtC,mBAAA,OAAA,IAAgBtzB,KAAAA,CADsB,UACtC;AATF;;AAWA,iBAAA,SAAA,GAXA,EAWA;AACA,iBAAA,aAAA,GAAqBwH,OAAAA,CAZrB,OAYqBA,EAArB;AACA+pB,YAAAA,MAAAA,CAAAA,kBAAAA,GAbA,IAaAA;AAEA,iBAAA,UAAA,GAfA,IAeA;AArB+B;;AAwBjCoC,UAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADF;;AAId,gBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,oBAAMC,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAA1Bid;AAFF,aAAA,MAGO;AACL,mBAAA,aAAA,CAAA,IAAA,CADK,KACL;AARY;;AAUd,iBAAA,OAAA,IAAgB5zB,KAAAA,CAVF,UAUd;AAlC+B;;AAqCjC,cAAI6zB,YAAJ,GAAmB;AACjB,mBAAO,KADU,aACjB;AAtC+B;;AAyCjC,cAAI9f,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA1C+B;;AA6CjC,cAAInB,gBAAJ,GAAuB;AACrB,mBAAO,KAAA,OAAA,CADc,iBACrB;AA9C+B;;AAiDjC,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KAAA,OAAA,CADkB,qBACzB;AAlD+B;;AAqDjC,cAAIE,aAAJ,GAAoB;AAClB,mBAAO,KAAA,OAAA,CADW,cAClB;AAtD+B;;AAyDjC,gBAAMihB,IAAN,GAAa;AACX,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AACjC,oBAAM9zB,KAAAA,GAAQ,KAAA,aAAA,CADmB,KACnB,EAAd;;AACA,qBAAO;AAAEQ,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEnW,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AANS;;AAQX,kBAAMid,iBAAAA,GARK,CAAA,GAAA,KAAA,CAAA,uBAAA,GAQX;;AACA,iBAAA,SAAA,CAAA,IAAA,CATW,iBASX;;AACA,mBAAOA,iBAAAA,CAVI,OAUX;AAnE+B;;AAsEjCjf,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDif,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GALa,EAKb;AA3E+B;;AA8EjC7sB,UAAAA,eAAAA,GAAkB;AAChB,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADA;;AAIhB,iBAAA,KAAA,GAJgB,IAIhB;AAlF+B;;AAAA;;AAuFnC,cAAA,iCAAA,CAAwC;AACtCtf,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,iBAAA,OAAA,GAD8B,MAC9B;AACA,iBAAA,MAAA,GAF8B,KAE9B;AACA,iBAAA,IAAA,GAH8B,GAG9B;AACA,iBAAA,YAAA,GAJ8B,IAI9B;AACA,iBAAA,SAAA,GAL8B,EAK9B;AACA,iBAAA,KAAA,GAN8B,KAM9B;AAEA,iBAAA,UAAA,GAR8B,IAQ9B;AAToC;;AAYtCksC,UAAAA,QAAAA,CAAAA,KAAAA,EAAgB;AACd,gBAAI,KAAJ,KAAA,EAAgB;AAAA;AADF;;AAId,gBAAI,KAAA,SAAA,CAAA,MAAA,KAAJ,CAAA,EAAiC;AAC/B,mBAAA,YAAA,GAD+B,KAC/B;AADF,aAAA,MAEO;AACL,oBAAMI,kBAAAA,GAAqB,KAAA,SAAA,CADtB,KACsB,EAA3B;;AACAA,cAAAA,kBAAAA,CAAAA,OAAAA,CAA2B;AAAEvzB,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAA3Bod;;AACA,mBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDH,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,kBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,kBAAAA,IAAAA,EAApB;AAAA,iBAA1Bid;AADF,eAAA;;AAGA,mBAAA,SAAA,GANK,EAML;AAZY;;AAcd,iBAAA,KAAA,GAdc,IAcd;;AACA,iBAAA,OAAA,CAAA,kBAAA,CAfc,IAed;AA3BoC;;AA8BtC,cAAIjhB,oBAAJ,GAA2B;AACzB,mBADyB,KACzB;AA/BoC;;AAkCtC,gBAAMmhB,IAAN,GAAa;AACX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM9zB,KAAAA,GAAQ,KADO,YACrB;AACA,mBAAA,YAAA,GAFqB,IAErB;AACA,qBAAO;AAAEQ,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAJS;;AAMX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEnW,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAPS;;AASX,kBAAMid,iBAAAA,GATK,CAAA,GAAA,KAAA,CAAA,uBAAA,GASX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAVW,iBAUX;;AACA,mBAAOA,iBAAAA,CAXI,OAWX;AA7CoC;;AAgDtCjf,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDif,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GALa,EAKb;;AACA,iBAAA,OAAA,CAAA,kBAAA,CANa,IAMb;AAtDoC;;AAAA;;;;;;;;;;;;;ACrPxC,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAkBA,cAAA,YAAA,CAAmB;AACjBnsC,UAAAA,WAAAA,CAAY;AAAEilB,YAAAA,MAAAA,GAAF;AAAA,WAAZjlB,EAAgC;AAC9B,iBAAA,QAAA,GAAgBilB,MAAAA,KADc,IAC9B;AAFe;;AAKjB,cAAIsnB,SAAJ,GAAgB;AACd,gBAAI1oC,OAAAA,GAAU,KADA,QACd;;AACA,gBAAA,OAAA,EAAa;AACXA,cAAAA,OAAAA,GAAU2oC,UAAAA,CADC,SACDA,EAAV3oC;AAHY;;AAKd,mBAAOuV,CAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EALO,OAKPA,CAAP;AAVe;;AAajBmhB,UAAAA,YAAAA,CAAa;AAAA,YAAA,KAAA;AAAA,YAAA,IAAA;AAAbA,YAAAA;AAAa,WAAbA,EAA0C;AACxC,mBAAOiS,UAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EADiC,UACjCA,CAAP;AAde;;AAiBjBC,UAAAA,WAAAA,CAAY;AAAA,YAAA,KAAA;AAAA,YAAA,MAAA;AAAA,YAAA,eAAA;AAAA,YAAA,OAAA;AAAZA,YAAAA;AAAY,WAAZA,EAAkE;AAChE,mBAAOD,UAAAA,CAAAA,WAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,eAAAA,EAAAA,OAAAA,EADyD,OACzDA,CAAP;AAlBe;;AA2BjBvf,UAAAA,KAAAA,GAAQ;AACNuf,YAAAA,UAAAA,CADM,OACNA;AA5Be;;AAAA;;;;AAgCnB,cAAMA,UAAAA,GAAc,SAAA,iBAAA,GAA6B;AAC/C,mBAAA,UAAA,CAAA,EAAA,EAAA,IAAA,EAAA,UAAA,EAA0C;AACxC,kBAAME,MAAAA,GAASC,EAAAA,CAAAA,YAAAA,CADyB,UACzBA,CAAf;AACAA,YAAAA,EAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAFwC,IAExCA;AACAA,YAAAA,EAAAA,CAAAA,aAAAA,CAHwC,MAGxCA;AACA,kBAAMC,QAAAA,GAAWD,EAAAA,CAAAA,kBAAAA,CAAAA,MAAAA,EAA8BA,EAAAA,CAJP,cAIvBA,CAAjB;;AACA,gBAAI,CAAJ,QAAA,EAAe;AACb,oBAAME,QAAAA,GAAWF,EAAAA,CAAAA,gBAAAA,CADJ,MACIA,CAAjB;AACA,oBAAM,IAAA,KAAA,CAAU,sCAFH,QAEP,CAAN;AAPsC;;AASxC,mBATwC,MASxC;AAV6C;;AAY/C,mBAAA,kBAAA,CAAA,EAAA,EAAA,IAAA,EAAsC;AACpC,mBAAOG,UAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAqBH,EAAAA,CADQ,aAC7BG,CAAP;AAb6C;;AAe/C,mBAAA,oBAAA,CAAA,EAAA,EAAA,IAAA,EAAwC;AACtC,mBAAOA,UAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAqBH,EAAAA,CADU,eAC/BG,CAAP;AAhB6C;;AAkB/C,mBAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAoC;AAClC,kBAAMC,OAAAA,GAAUJ,EAAAA,CADkB,aAClBA,EAAhB;;AACA,iBAAK,IAAIxoC,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK8oC,OAAAA,CAArB,MAAA,EAAqC7oC,CAAAA,GAArC,EAAA,EAA6C,EAA7C,CAAA,EAAkD;AAChDwoC,cAAAA,EAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAAyBK,OAAAA,CADuB,CACvBA,CAAzBL;AAHgC;;AAKlCA,YAAAA,EAAAA,CAAAA,WAAAA,CALkC,OAKlCA;AACA,kBAAMM,MAAAA,GAASN,EAAAA,CAAAA,mBAAAA,CAAAA,OAAAA,EAAgCA,EAAAA,CANb,WAMnBA,CAAf;;AACA,gBAAI,CAAJ,MAAA,EAAa;AACX,oBAAME,QAAAA,GAAWF,EAAAA,CAAAA,iBAAAA,CADN,OACMA,CAAjB;AACA,oBAAM,IAAA,KAAA,CAAU,mCAFL,QAEL,CAAN;AATgC;;AAWlC,mBAXkC,OAWlC;AA7B6C;;AA+B/C,mBAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA,SAAA,EAA6C;AAC3CA,YAAAA,EAAAA,CAAAA,aAAAA,CAD2C,SAC3CA;AACA,kBAAMO,OAAAA,GAAUP,EAAAA,CAF2B,aAE3BA,EAAhB;AACAA,YAAAA,EAAAA,CAAAA,WAAAA,CAAeA,EAAAA,CAAfA,UAAAA,EAH2C,OAG3CA;AAGAA,YAAAA,EAAAA,CAAAA,aAAAA,CAAiBA,EAAAA,CAAjBA,UAAAA,EAAgCA,EAAAA,CAAhCA,cAAAA,EAAmDA,EAAAA,CANR,aAM3CA;AACAA,YAAAA,EAAAA,CAAAA,aAAAA,CAAiBA,EAAAA,CAAjBA,UAAAA,EAAgCA,EAAAA,CAAhCA,cAAAA,EAAmDA,EAAAA,CAPR,aAO3CA;AACAA,YAAAA,EAAAA,CAAAA,aAAAA,CAAiBA,EAAAA,CAAjBA,UAAAA,EAAgCA,EAAAA,CAAhCA,kBAAAA,EAAuDA,EAAAA,CARZ,OAQ3CA;AACAA,YAAAA,EAAAA,CAAAA,aAAAA,CAAiBA,EAAAA,CAAjBA,UAAAA,EAAgCA,EAAAA,CAAhCA,kBAAAA,EAAuDA,EAAAA,CATZ,OAS3CA;AAGAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,UAAAA,EAAAA,CAAAA,EAAgCA,EAAAA,CAAhCA,IAAAA,EAAyCA,EAAAA,CAAzCA,IAAAA,EAAkDA,EAAAA,CAAlDA,aAAAA,EAZ2C,KAY3CA;AACA,mBAb2C,OAa3C;AA5C6C;;AA+C/C,cAAA,SAAA,EA/C+C,aA+C/C;;AACA,mBAAA,UAAA,GAAsB;AACpB,gBAAA,SAAA,EAAe;AAAA;AADK;;AAMpBQ,YAAAA,aAAAA,GAAgB7rC,QAAAA,CAAAA,aAAAA,CANI,QAMJA,CAAhB6rC;AACAC,YAAAA,SAAAA,GAAYD,aAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EAAkC;AAC5CE,cAAAA,kBAAAA,EARkB;AAO0B,aAAlCF,CAAZC;AAvD6C;;AA4D/C,gBAAME,qBAAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7D6C,iEA4D/C;AAgBA,gBAAMC,uBAAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7E6C,iEA4E/C;AA8BA,cAAIC,UAAAA,GA1G2C,IA0G/C;;AAEA,mBAAA,WAAA,GAAuB;AACrBC,YAAAA,UADqB;AAErB,kBAAM/sC,MAAAA,GAFe,aAErB;AACAysC,YAAAA,aAAAA,GAHqB,IAGrBA;AACA,kBAAMR,EAAAA,GAJe,SAIrB;AACAS,YAAAA,SAAAA,GALqB,IAKrBA;AAGA,kBAAMM,YAAAA,GAAeC,kBAAAA,CAAAA,EAAAA,EARA,qBAQAA,CAArB;AACA,kBAAMC,cAAAA,GAAiBC,oBAAAA,CAAAA,EAAAA,EATF,uBASEA,CAAvB;AACA,kBAAMd,OAAAA,GAAU,aAAA,CAAA,EAAA,EAAkB,CAAA,YAAA,EAAlC,cAAkC,CAAlB,CAAhB;AACAJ,YAAAA,EAAAA,CAAAA,UAAAA,CAXqB,OAWrBA;AAEA,kBAAMmB,KAAAA,GAbe,EAarB;AACAA,YAAAA,KAAAA,CAAAA,EAAAA,GAdqB,EAcrBA;AACAA,YAAAA,KAAAA,CAAAA,MAAAA,GAfqB,MAerBA;AACAA,YAAAA,KAAAA,CAAAA,kBAAAA,GAA2BnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAhBN,cAgBMA,CAA3BmB;AACAA,YAAAA,KAAAA,CAAAA,gBAAAA,GAAyBnB,EAAAA,CAAAA,iBAAAA,CAAAA,OAAAA,EAjBJ,YAiBIA,CAAzBmB;AACAA,YAAAA,KAAAA,CAAAA,gBAAAA,GAAyBnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAlBJ,YAkBIA,CAAzBmB;AACAA,YAAAA,KAAAA,CAAAA,eAAAA,GAAwBnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAnBH,WAmBGA,CAAxBmB;AAEA,kBAAMC,gBAAAA,GAAmBpB,EAAAA,CAAAA,iBAAAA,CAAAA,OAAAA,EArBJ,YAqBIA,CAAzB;AACA,kBAAMqB,gBAAAA,GAAmBrB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAtBJ,SAsBIA,CAAzB;AACA,kBAAMsB,eAAAA,GAAkBtB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAvBH,QAuBGA,CAAxB;AAGA,kBAAMuB,cAAAA,GAAiBvB,EAAAA,CA1BF,YA0BEA,EAAvB;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EA3BqB,cA2BrBA;AAEAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAA+B,IAAA,YAAA,CAAiB,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAhDA,GAAgD,CAAjB,CAA/BA,EAMcA,EAAAA,CAnCO,WA6BrBA;AAOAA,YAAAA,EAAAA,CAAAA,uBAAAA,CApCqB,gBAoCrBA;AACAA,YAAAA,EAAAA,CAAAA,mBAAAA,CAAAA,gBAAAA,EAAAA,CAAAA,EAA4CA,EAAAA,CAA5CA,KAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EArCqB,CAqCrBA;AAEAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAAA,gBAAAA,EAvCqB,CAuCrBA;AACAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAAA,eAAAA,EAxCqB,CAwCrBA;AAEAa,YAAAA,UAAAA,GA1CqB,KA0CrBA;AAtJ6C;;AAyJ/C,mBAAA,YAAA,CAAA,KAAA,EAAA,IAAA,EAAA,UAAA,EAA+C;AAC7C,kBAAMntC,KAAAA,GAAQ+3B,KAAAA,CAAd,KAAA;AAAA,kBACE93B,MAAAA,GAAS83B,KAAAA,CAFkC,MAC7C;;AAGA,gBAAI,CAAJ,UAAA,EAAiB;AACf+V,cAAAA,WADe;AAJ4B;;AAO7C,kBAAML,KAAAA,GAAN,UAAA;AAAA,kBACEptC,MAAAA,GAASotC,KAAAA,CADX,MAAA;AAAA,kBAEEnB,EAAAA,GAAKmB,KAAAA,CATsC,EAO7C;AAGAptC,YAAAA,MAAAA,CAAAA,KAAAA,GAV6C,KAU7CA;AACAA,YAAAA,MAAAA,CAAAA,MAAAA,GAX6C,MAW7CA;AACAisC,YAAAA,EAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAkBA,EAAAA,CAAlBA,kBAAAA,EAAyCA,EAAAA,CAZI,mBAY7CA;AACAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAamB,KAAAA,CAAbnB,kBAAAA,EAAAA,KAAAA,EAb6C,MAa7CA;;AAEA,gBAAIhW,UAAAA,CAAJ,QAAA,EAAyB;AACvBgW,cAAAA,EAAAA,CAAAA,SAAAA,CACEmB,KAAAA,CADFnB,kBAAAA,EAEEhW,UAAAA,CAAAA,QAAAA,CAFFgW,CAEEhW,CAFFgW,EAGEhW,UAAAA,CAAAA,QAAAA,CAHFgW,CAGEhW,CAHFgW,EAIEhW,UAAAA,CAAAA,QAAAA,CAJFgW,CAIEhW,CAJFgW,EADuB,CACvBA;AADF,aAAA,MAQO;AACLA,cAAAA,EAAAA,CAAAA,SAAAA,CAAamB,KAAAA,CAAbnB,kBAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EADK,CACLA;AAxB2C;;AA0B7CA,YAAAA,EAAAA,CAAAA,SAAAA,CACEmB,KAAAA,CADFnB,eAAAA,EAEEhW,UAAAA,CAAAA,OAAAA,KAAAA,YAAAA,GAAAA,CAAAA,GA5B2C,CA0B7CgW;AAMA,kBAAMO,OAAAA,GAAUkB,aAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAyBzB,EAAAA,CAhCI,QAgC7ByB,CAAhB;AACA,kBAAMC,WAAAA,GAAcD,aAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAwBzB,EAAAA,CAjCC,QAiCzByB,CAApB;AAIA,kBAAM3xB,MAAAA,GAASkwB,EAAAA,CArC8B,YAqC9BA,EAAf;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAtC6C,MAsC7CA;AAEAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAA+B,IAAA,YAAA,CAAiB,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAAhDA,MAAgD,CAAjB,CAA/BA,EAMmBA,EAAAA,CA9C0B,WAwC7CA;AAOAA,YAAAA,EAAAA,CAAAA,uBAAAA,CAA2BmB,KAAAA,CA/CkB,gBA+C7CnB;AACAA,YAAAA,EAAAA,CAAAA,mBAAAA,CAAuBmB,KAAAA,CAAvBnB,gBAAAA,EAAAA,CAAAA,EAAkDA,EAAAA,CAAlDA,KAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAhD6C,CAgD7CA;AAGAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAnD6C,CAmD7CA;AACAA,YAAAA,EAAAA,CAAAA,MAAAA,CAAUA,EAAAA,CApDmC,KAoD7CA;AACAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAaA,EAAAA,CAAbA,GAAAA,EAAqBA,EAAAA,CArDwB,mBAqD7CA;AACAA,YAAAA,EAAAA,CAAAA,KAAAA,CAASA,EAAAA,CAtDoC,gBAsD7CA;AAEAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,SAAAA,EAAAA,CAAAA,EAxD6C,CAwD7CA;AAEAA,YAAAA,EAAAA,CA1D6C,KA0D7CA;AAEAA,YAAAA,EAAAA,CAAAA,aAAAA,CA5D6C,OA4D7CA;AACAA,YAAAA,EAAAA,CAAAA,aAAAA,CA7D6C,WA6D7CA;AACAA,YAAAA,EAAAA,CAAAA,YAAAA,CA9D6C,MA8D7CA;AAEA,mBAhE6C,MAgE7C;AAzN6C;;AA4N/C,gBAAM2B,uBAAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7N6C,iEA4N/C;AAmBA,gBAAMC,yBAAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhP6C,iEA+O/C;AAUA,cAAIC,YAAAA,GAzP2C,IAyP/C;;AAEA,mBAAA,aAAA,GAAyB;AACvBf,YAAAA,UADuB;AAEvB,kBAAM/sC,MAAAA,GAFiB,aAEvB;AACAysC,YAAAA,aAAAA,GAHuB,IAGvBA;AACA,kBAAMR,EAAAA,GAJiB,SAIvB;AACAS,YAAAA,SAAAA,GALuB,IAKvBA;AAGA,kBAAMM,YAAAA,GAAeC,kBAAAA,CAAAA,EAAAA,EARE,uBAQFA,CAArB;AACA,kBAAMC,cAAAA,GAAiBC,oBAAAA,CAAAA,EAAAA,EATA,yBASAA,CAAvB;AACA,kBAAMd,OAAAA,GAAU,aAAA,CAAA,EAAA,EAAkB,CAAA,YAAA,EAAlC,cAAkC,CAAlB,CAAhB;AACAJ,YAAAA,EAAAA,CAAAA,UAAAA,CAXuB,OAWvBA;AAEA,kBAAMmB,KAAAA,GAbiB,EAavB;AACAA,YAAAA,KAAAA,CAAAA,EAAAA,GAduB,EAcvBA;AACAA,YAAAA,KAAAA,CAAAA,MAAAA,GAfuB,MAevBA;AACAA,YAAAA,KAAAA,CAAAA,kBAAAA,GAA2BnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAhBJ,cAgBIA,CAA3BmB;AACAA,YAAAA,KAAAA,CAAAA,aAAAA,GAAsBnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAjBC,SAiBDA,CAAtBmB;AACAA,YAAAA,KAAAA,CAAAA,cAAAA,GAAuBnB,EAAAA,CAAAA,kBAAAA,CAAAA,OAAAA,EAlBA,UAkBAA,CAAvBmB;AACAA,YAAAA,KAAAA,CAAAA,gBAAAA,GAAyBnB,EAAAA,CAAAA,iBAAAA,CAAAA,OAAAA,EAnBF,YAmBEA,CAAzBmB;AACAA,YAAAA,KAAAA,CAAAA,aAAAA,GAAsBnB,EAAAA,CAAAA,iBAAAA,CAAAA,OAAAA,EApBC,SAoBDA,CAAtBmB;AAEAU,YAAAA,YAAAA,GAtBuB,KAsBvBA;AAjR6C;;AAoR/C,mBAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAAA,eAAA,EAAA,OAAA,EAAA,OAAA,EAAuE;AACrE,gBAAI,CAAJ,YAAA,EAAmB;AACjBC,cAAAA,aADiB;AADkD;;AAIrE,kBAAMX,KAAAA,GAAN,YAAA;AAAA,kBACEptC,MAAAA,GAASotC,KAAAA,CADX,MAAA;AAAA,kBAEEnB,EAAAA,GAAKmB,KAAAA,CAN8D,EAIrE;AAIAptC,YAAAA,MAAAA,CAAAA,KAAAA,GARqE,KAQrEA;AACAA,YAAAA,MAAAA,CAAAA,MAAAA,GATqE,MASrEA;AACAisC,YAAAA,EAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAkBA,EAAAA,CAAlBA,kBAAAA,EAAyCA,EAAAA,CAV4B,mBAUrEA;AACAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAamB,KAAAA,CAAbnB,kBAAAA,EAAAA,KAAAA,EAXqE,MAWrEA;AAGA,gBAAI9Y,KAAAA,GAdiE,CAcrE;;AACA,iBAAK,IAAI1vB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK+hC,OAAAA,CAArB,MAAA,EAAqC9hC,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,sBAAQ8hC,OAAAA,CAAAA,CAAAA,CAAAA,CAAR,IAAA;AACE,qBAAA,SAAA;AACE,wBAAMd,IAAAA,GACHc,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAA2BA,OAAAA,CAAAA,CAAAA,CAAAA,CAA5B,cAACA,GAFL,CACE;AAEApS,kBAAAA,KAAAA,IAAU,CAAA,IAAA,GAAD,CAAC,KAAa,OAAA,CAAA,CAAA,CAAA,CAAA,cAAA,GAAd,CAAC,IAHZ,CAGEA;AAJJ;;AAME,qBAAA,WAAA;AACEA,kBAAAA,KAAAA,IAASoS,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CADX,MACEpS;AAPJ;AAAA;AAhBmE;;AA4BrE,kBAAMM,MAAAA,GAAS,IAAA,YAAA,CAAiBN,KAAAA,GA5BqC,CA4BtD,CAAf;AACA,kBAAMmP,MAAAA,GAAS,IAAA,UAAA,CAAenP,KAAAA,GA7BuC,CA6BtD,CAAf;AACA,kBAAM6a,SAAAA,GAAY/tC,OAAAA,CAAlB,MAAA;AAAA,kBACEguC,SAAAA,GAAYhuC,OAAAA,CA/BuD,MA8BrE;AAEA,gBAAIiuC,MAAAA,GAAJ,CAAA;AAAA,gBACEC,MAAAA,GAjCmE,CAgCrE;;AAEA,iBAAK,IAAI1qC,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK+hC,OAAAA,CAArB,MAAA,EAAqC9hC,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,oBAAM6gC,MAAAA,GAASiB,OAAAA,CAAf,CAAeA,CAAf;AAAA,oBACElB,EAAAA,GAAKC,MAAAA,CADP,MAAA;AAAA,oBAEEC,EAAAA,GAAKD,MAAAA,CAHyC,MAChD;;AAGA,sBAAQA,MAAAA,CAAR,IAAA;AACE,qBAAA,SAAA;AACE,wBAAMI,IAAAA,GAAOJ,MAAAA,CADf,cACE;AACA,wBAAMG,IAAAA,GAAQJ,EAAAA,CAAAA,MAAAA,GAAD,IAACA,GAFhB,CAEE;;AACA,uBAAK,IAAIjN,GAAAA,GAAT,CAAA,EAAkBA,GAAAA,GAAlB,IAAA,EAA8BA,GAA9B,EAAA,EAAqC;AACnC,wBAAIzI,MAAAA,GAASyI,GAAAA,GAAAA,IAAAA,GADsB,CACnC;;AACA,yBAAK,IAAIgX,GAAAA,GAAT,CAAA,EAAkBA,GAAAA,GAAlB,IAAA,EAA8BA,GAAAA,IAAOzf,MAArC,EAAA,EAA+C;AAC7C8E,sBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAiBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GAAAA,IAAAA,GADe,CAClB0V,CAAV2J,CAAjBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GAAAA,IAAAA,GAAH0V,CAAAA,CAAAA,GAFc,CAExB2J,CAArBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GAHW,IAGd0V,CAAV2J,CAArBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GAAH0V,IAAAA,CAAAA,GAJc,CAIxB2J,CAArBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GALW,CAKd0V,CAAV2J,CAArBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAG1V,MAAAA,GAAH0V,CAAAA,CAAAA,GANc,CAMxB2J,CAArBva;AACA6O,sBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAiB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAAA,IAAAA,GAPe,CAOlB4V,CAAV0J,CAAjB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAAA,IAAAA,GAAH4V,CAAAA,CAAAA,GARc,CAQxB0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAAA,IAAAA,GAAH4V,CAAAA,CAAAA,GATc,CASxB0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAVW,IAUd4V,CAAV0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAH4V,IAAAA,CAAAA,GAXc,CAWxB0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAH4V,IAAAA,CAAAA,GAZc,CAYxB0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAbW,CAad4V,CAAV0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAH4V,CAAAA,CAAAA,GAdc,CAcxB0J,CAArB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAG5V,MAAAA,GAAH4V,CAAAA,CAAAA,GAfc,CAexB0J,CAArB3L;AAEA7O,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBA,MAAAA,CAAOya,MAAAA,GAjBiB,CAiBxBza,CAArBA;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBA,MAAAA,CAAOya,MAAAA,GAlBiB,CAkBxBza,CAArBA;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBA,MAAAA,CAAOya,MAAAA,GAnBiB,CAmBxBza,CAArBA;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBA,MAAAA,CAAOya,MAAAA,GApBiB,CAoBxBza,CAArBA;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,EAAAA,CAAAA,GAAsBua,SAAAA,CAAU3J,EAAAA,CArBa,MAqBbA,CAAV2J,CAAtBva;AACAA,sBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,EAAAA,CAAAA,GAAsBua,SAAAA,CAAU3J,EAAAA,CAAAA,MAAAA,CAAAA,GAtBa,CAsBvB2J,CAAtBva;AACA6O,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqBA,MAAAA,CAAO6L,MAAAA,GAvBiB,CAuBxB7L,CAArBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsBA,MAAAA,CAAO6L,MAAAA,GAxBgB,CAwBvB7L,CAAtBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsBA,MAAAA,CAAO6L,MAAAA,GAzBgB,CAyBvB7L,CAAtBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsBA,MAAAA,CAAO6L,MAAAA,GA1BgB,CA0BvB7L,CAAtBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsBA,MAAAA,CAAO6L,MAAAA,GA3BgB,CA2BvB7L,CAAtBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsBA,MAAAA,CAAO6L,MAAAA,GA5BgB,CA4BvB7L,CAAtBA;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsB2L,SAAAA,CAAU1J,EAAAA,CA7Ba,MA6BbA,CAAV0J,CAAtB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsB2L,SAAAA,CAAU1J,EAAAA,CAAAA,MAAAA,CAAAA,GA9Ba,CA8BvB0J,CAAtB3L;AACAA,sBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,EAAAA,CAAAA,GAAsB2L,SAAAA,CAAU1J,EAAAA,CAAAA,MAAAA,CAAAA,GA/Ba,CA+BvB0J,CAAtB3L;AACA4L,sBAAAA,MAAAA,IAhC6C,EAgC7CA;AACAC,sBAAAA,MAAAA,IAjC6C,EAiC7CA;AAnCiC;AAHvC;;AADF;;AA2CE,qBAAA,WAAA;AACE,uBAAK,IAAI/a,CAAAA,GAAJ,CAAA,EAAWib,EAAAA,GAAKhK,EAAAA,CAArB,MAAA,EAAgCjR,CAAAA,GAAhC,EAAA,EAAwCA,CAAxC,EAAA,EAA6C;AAC3CK,oBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAiBua,SAAAA,CAAU3J,EAAAA,CADgB,CAChBA,CAAV2J,CAAjBva;AACAA,oBAAAA,MAAAA,CAAOya,MAAAA,GAAPza,CAAAA,CAAAA,GAAqBua,SAAAA,CAAU3J,EAAAA,CAAAA,CAAAA,CAAAA,GAFY,CAEtB2J,CAArBva;AACA6O,oBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,GAAiB2L,SAAAA,CAAU1J,EAAAA,CAHgB,CAGhBA,CAAV0J,CAAjB3L;AACAA,oBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAAA,CAAAA,CAAAA,GAJY,CAItB0J,CAArB3L;AACAA,oBAAAA,MAAAA,CAAO6L,MAAAA,GAAP7L,CAAAA,CAAAA,GAAqB2L,SAAAA,CAAU1J,EAAAA,CAAAA,CAAAA,CAAAA,GALY,CAKtB0J,CAArB3L;AACA4L,oBAAAA,MAAAA,IAN2C,CAM3CA;AACAC,oBAAAA,MAAAA,IAP2C,CAO3CA;AARJ;;AA3CF;AAAA;AAtCmE;;AAgGrE,gBAAA,eAAA,EAAqB;AACnBlC,cAAAA,EAAAA,CAAAA,UAAAA,CACE3G,eAAAA,CAAAA,CAAAA,CAAAA,GADF2G,GAAAA,EAEE3G,eAAAA,CAAAA,CAAAA,CAAAA,GAFF2G,GAAAA,EAGE3G,eAAAA,CAAAA,CAAAA,CAAAA,GAHF2G,GAAAA,EADmB,GACnBA;AADF,aAAA,MAOO;AACLA,cAAAA,EAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EADK,CACLA;AAxGmE;;AA0GrEA,YAAAA,EAAAA,CAAAA,KAAAA,CAASA,EAAAA,CA1G4D,gBA0GrEA;AAEA,kBAAMqC,YAAAA,GAAerC,EAAAA,CA5GgD,YA4GhDA,EAArB;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EA7GqE,YA6GrEA;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAAAA,MAAAA,EAAuCA,EAAAA,CA9G8B,WA8GrEA;AACAA,YAAAA,EAAAA,CAAAA,uBAAAA,CAA2BmB,KAAAA,CA/G0C,gBA+GrEnB;AACAA,YAAAA,EAAAA,CAAAA,mBAAAA,CAAuBmB,KAAAA,CAAvBnB,gBAAAA,EAAAA,CAAAA,EAAkDA,EAAAA,CAAlDA,KAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAhHqE,CAgHrEA;AAEA,kBAAMsC,YAAAA,GAAetC,EAAAA,CAlHgD,YAkHhDA,EAArB;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAnHqE,YAmHrEA;AACAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,YAAAA,EAAAA,MAAAA,EAAuCA,EAAAA,CApH8B,WAoHrEA;AACAA,YAAAA,EAAAA,CAAAA,uBAAAA,CAA2BmB,KAAAA,CArH0C,aAqHrEnB;AACAA,YAAAA,EAAAA,CAAAA,mBAAAA,CACEmB,KAAAA,CADFnB,aAAAA,EAAAA,CAAAA,EAGEA,EAAAA,CAHFA,aAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAtHqE,CAsHrEA;AASAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAamB,KAAAA,CAAbnB,aAAAA,EAAkChsC,OAAAA,CAAlCgsC,MAAAA,EAAkDhsC,OAAAA,CA/HmB,MA+HrEgsC;AACAA,YAAAA,EAAAA,CAAAA,SAAAA,CAAamB,KAAAA,CAAbnB,cAAAA,EAAmChsC,OAAAA,CAAnCgsC,OAAAA,EAAoDhsC,OAAAA,CAhIiB,OAgIrEgsC;AAEAA,YAAAA,EAAAA,CAAAA,UAAAA,CAAcA,EAAAA,CAAdA,SAAAA,EAAAA,CAAAA,EAlIqE,KAkIrEA;AAEAA,YAAAA,EAAAA,CApIqE,KAoIrEA;AAEAA,YAAAA,EAAAA,CAAAA,YAAAA,CAtIqE,YAsIrEA;AACAA,YAAAA,EAAAA,CAAAA,YAAAA,CAvIqE,YAuIrEA;AAEA,mBAzIqE,MAyIrE;AA7Z6C;;AAga/C,iBAAO;AACLuC,YAAAA,SAAAA,GAAY;AACV,kBAAI;AACFzB,gBAAAA,UADE;AAEF,uBAAO,CAAC,CAFN,SAEF;AAFF,eAAA,CAGE,OAAA,EAAA,EAJQ,CAAA;;AAKV,qBALU,KAKV;AANG,aAAA;;AAAA,YAAA,YAAA;AAAA,YAAA,WAAA;;AAaLtqB,YAAAA,OAAAA,GAAU;AAAA;;AACR,iCAAIqqB,UAAJ,gDAAIA,YAAJ,MAAA,EAAwB;AACtBA,gBAAAA,UAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GADsB,CACtBA;AACAA,gBAAAA,UAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAFsB,CAEtBA;AAHM;;AAKR,mCAAIgB,YAAJ,kDAAIA,cAAJ,MAAA,EAA0B;AACxBA,gBAAAA,YAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GADwB,CACxBA;AACAA,gBAAAA,YAAAA,CAAAA,MAAAA,CAAAA,MAAAA,GAFwB,CAExBA;AAPM;;AASRhB,cAAAA,UAAAA,GATQ,IASRA;AACAgB,cAAAA,YAAAA,GAVQ,IAURA;AAvBG;;AAAA,WAAP;AAhaF,SAAoB,EAApB;;;;;;;;;;;;;ACnCA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAOA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAtBA,YAAA,mBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,gBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAoDA,cAAA,wBAAA,CAA+B;AAK7B,iBAAOtuC,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMw3B,OAAAA,GAAUyX,UAAAA,CAAAA,IAAAA,CADQ,cACxB;;AAEA,oBAAA,OAAA;AACE,mBAAK7mC,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CAFX,UAEW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CALX,UAKW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,sBAAM8mC,SAAAA,GAAYD,UAAAA,CAAAA,IAAAA,CADpB,SACE;;AAEA,wBAAA,SAAA;AACE,uBAAA,IAAA;AACE,2BAAO,IAAA,2BAAA,CAFX,UAEW,CAAP;;AACF,uBAAA,KAAA;AACE,wBAAIA,UAAAA,CAAAA,IAAAA,CAAJ,WAAA,EAAiC;AAC/B,6BAAO,IAAA,kCAAA,CADwB,UACxB,CAAP;AADF,qBAAA,MAEO,IAAIA,UAAAA,CAAAA,IAAAA,CAAJ,QAAA,EAA8B;AACnC,6BAAO,IAAA,+BAAA,CAD4B,UAC5B,CAAP;AAJJ;;AAME,2BAAO,IAAA,iCAAA,CATX,UASW,CAAP;;AACF,uBAAA,IAAA;AACE,2BAAO,IAAA,6BAAA,CAXX,UAWW,CAAP;AAXJ;;AAaA,uBAAO,IAAA,uBAAA,CAvBX,UAuBW,CAAP;;AAEF,mBAAK7mC,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CA1BX,UA0BW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CA7BX,UA6BW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,IAAA;AACE,uBAAO,IAAA,qBAAA,CAhCX,UAgCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,uBAAO,IAAA,uBAAA,CAnCX,UAmCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,MAAA;AACE,uBAAO,IAAA,uBAAA,CAtCX,UAsCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CAzCX,UAyCW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CA5CX,UA4CW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,GAAA;AACE,uBAAO,IAAA,oBAAA,CA/CX,UA+CW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,OAAA;AACE,uBAAO,IAAA,wBAAA,CAlDX,UAkDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CArDX,UAqDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CAxDX,UAwDW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,QAAA;AACE,uBAAO,IAAA,yBAAA,CA3DX,UA2DW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,SAAA;AACE,uBAAO,IAAA,0BAAA,CA9DX,UA8DW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,KAAA;AACE,uBAAO,IAAA,sBAAA,CAjEX,UAiEW,CAAP;;AAEF,mBAAKA,KAAAA,CAAAA,cAAAA,CAAL,cAAA;AACE,uBAAO,IAAA,+BAAA,CApEX,UAoEW,CAAP;;AAEF;AACE,uBAAO,IAAA,iBAAA,CAvEX,UAuEW,CAAP;AAvEJ;AAR2B;;AAAA;;AAoF/B,cAAA,iBAAA,CAAwB;AACtBtI,UAAAA,WAAAA,CAAAA,UAAAA,EAEE;AACEqvC,YAAAA,YAAAA,GADF,KAAA;AAEEC,YAAAA,YAAAA,GAFF,KAAA;AAGEC,YAAAA,oBAAAA,GAHF;AAAA,cAFFvvC,EAAAA,EAOE;AACA,iBAAA,YAAA,GADA,YACA;AACA,iBAAA,IAAA,GAAYmvC,UAAAA,CAFZ,IAEA;AACA,iBAAA,KAAA,GAAaA,UAAAA,CAHb,KAGA;AACA,iBAAA,IAAA,GAAYA,UAAAA,CAJZ,IAIA;AACA,iBAAA,QAAA,GAAgBA,UAAAA,CALhB,QAKA;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CANnB,WAMA;AACA,iBAAA,eAAA,GAAuBA,UAAAA,CAPvB,eAOA;AACA,iBAAA,kBAAA,GAA0BA,UAAAA,CAR1B,kBAQA;AACA,iBAAA,sBAAA,GAA8BA,UAAAA,CAT9B,sBASA;AACA,iBAAA,UAAA,GAAkBA,UAAAA,CAVlB,UAUA;AACA,iBAAA,iBAAA,GAAyBA,UAAAA,CAXzB,iBAWA;AACA,iBAAA,eAAA,GAAuBA,UAAAA,CAZvB,eAYA;AACA,iBAAA,YAAA,GAAoBA,UAAAA,CAbpB,YAaA;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CAdnB,UAcA;;AAEA,gBAAA,YAAA,EAAkB;AAChB,mBAAA,SAAA,GAAiB,KAAA,gBAAA,CADD,YACC,CAAjB;AAjBF;;AAmBA,gBAAA,oBAAA,EAA0B;AACxB,mBAAA,cAAA,GAAsB,KAAA,qBAAA,CADE,YACF,CAAtB;AApBF;AARoB;;AAwCtBK,UAAAA,gBAAAA,CAAiBF,YAAAA,GAAjBE,KAAAA,EAAuC;AACrC,kBAAM52B,IAAAA,GAAO,KAAb,IAAA;AAAA,kBACE0R,IAAAA,GAAO,KADT,IAAA;AAAA,kBAEEuO,QAAAA,GAAW,KAHwB,QACrC;AAGA,kBAAM4W,SAAAA,GAAYnuC,QAAAA,CAAAA,aAAAA,CAJmB,SAInBA,CAAlB;AACA,gBAAIjB,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CALU,CAKVA,CAA3B;AACA,gBAAItY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CANS,CAMTA,CAA5B;AAEA62B,YAAAA,SAAAA,CAAAA,YAAAA,CAAAA,oBAAAA,EAA6C72B,IAAAA,CARR,EAQrC62B;;AAIA,kBAAMrsC,IAAAA,GAAO,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAC9BwV,IAAAA,CAAAA,IAAAA,CAD8B,CAC9BA,CAD8B,EAE9B0R,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe1R,IAAAA,CAAAA,IAAAA,CAAf0R,CAAe1R,CAAf0R,GAA8BA,IAAAA,CAAAA,IAAAA,CAFA,CAEAA,CAFA,EAG9B1R,IAAAA,CAAAA,IAAAA,CAH8B,CAG9BA,CAH8B,EAI9B0R,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe1R,IAAAA,CAAAA,IAAAA,CAAf0R,CAAe1R,CAAf0R,GAA8BA,IAAAA,CAAAA,IAAAA,CAJhC,CAIgCA,CAJA,CAAnB,CAAb;;AAOAmlB,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAA4B,UAAU5W,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAnBD,GAmBCA,CAnBD,GAmBrC4W;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,eAAAA,GAAkC,GAAG,CAACrsC,IAAAA,CAAJ,CAAIA,CAAJ,MAAiB,CAACA,IAAAA,CApBf,CAoBeA,CApBf,IAoBrCqsC;;AAEA,gBAAI,CAAA,YAAA,IAAiB72B,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,GAArB,CAAA,EAAiD;AAC/C62B,cAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAA8B,GAAG72B,IAAAA,CAAAA,WAAAA,CADc,KAAA,IAC/C62B;;AACA,kBAAI72B,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,KAA2BlM,KAAAA,CAAAA,yBAAAA,CAA/B,SAAA,EAAoE;AAIlErM,gBAAAA,KAAAA,GAAQA,KAAAA,GAAQ,IAAIuY,IAAAA,CAAAA,WAAAA,CAJ8C,KAIlEvY;AACAC,gBAAAA,MAAAA,GAASA,MAAAA,GAAS,IAAIsY,IAAAA,CAAAA,WAAAA,CAL4C,KAKlEtY;AAP6C;;AAU/C,oBAAMovC,gBAAAA,GAAmB92B,IAAAA,CAAAA,WAAAA,CAVsB,sBAU/C;AACA,oBAAM+2B,cAAAA,GAAiB/2B,IAAAA,CAAAA,WAAAA,CAXwB,oBAW/C;;AACA,kBAAI82B,gBAAAA,GAAAA,CAAAA,IAAwBC,cAAAA,GAA5B,CAAA,EAAgD;AAC9C,sBAAMC,MAAAA,GAAS,GAAA,gBAAA,QAD+B,cAAA,IAC9C;AACAH,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,YAAAA,GAF8C,MAE9CA;AAd6C;;AAiB/C,sBAAQ72B,IAAAA,CAAAA,WAAAA,CAAR,KAAA;AACE,qBAAKlM,KAAAA,CAAAA,yBAAAA,CAAL,KAAA;AACE+iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GADF,OACEA;AAFJ;;AAKE,qBAAK/iC,KAAAA,CAAAA,yBAAAA,CAAL,MAAA;AACE+iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GADF,QACEA;AANJ;;AASE,qBAAK/iC,KAAAA,CAAAA,yBAAAA,CAAL,OAAA;AACEjI,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,qCACEA;AAVJ;;AAaE,qBAAKiI,KAAAA,CAAAA,yBAAAA,CAAL,KAAA;AACEjI,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,mCACEA;AAdJ;;AAiBE,qBAAKiI,KAAAA,CAAAA,yBAAAA,CAAL,SAAA;AACE+iC,kBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,iBAAAA,GADF,OACEA;AAlBJ;;AAqBE;AArBF;AAAA;;AAyBA,kBAAI72B,IAAAA,CAAJ,KAAA,EAAgB;AACd62B,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAA8Bl1B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAC5B3B,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAD4B2B,CAAAA,EAE5B3B,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAF4B2B,CAAAA,EAG5B3B,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAJY,CACgB2B,CAA9Bk1B;AADF,eAAA,MAMO;AAELA,gBAAAA,SAAAA,CAAAA,KAAAA,CAAAA,WAAAA,GAFK,CAELA;AAlD6C;AAtBZ;;AA4ErCA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAuB,GAAGrsC,IAAAA,CA5EW,CA4EXA,CA5EW,IA4ErCqsC;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAsB,GAAGrsC,IAAAA,CA7EY,CA6EZA,CA7EY,IA6ErCqsC;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAwB,GA9Ea,KAAA,IA8ErCA;AACAA,YAAAA,SAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAyB,GA/EY,MAAA,IA+ErCA;AACA,mBAhFqC,SAgFrC;AAxHoB;;AAmItBI,UAAAA,qBAAAA,CAAsBP,YAAAA,GAAtBO,KAAAA,EAA4C;AAC1C,gBAAI,CAAC,KAAA,IAAA,CAAL,UAAA,EAA2B;AACzB,qBADyB,IACzB;AAFwC;;AAK1C,kBAAMC,cAAAA,GALoC,EAK1C;AACA,kBAAMC,SAAAA,GAAY,KAAA,IAAA,CANwB,IAM1C;;AACA,iBAAA,MAAA,SAAA,IAAwB,KAAA,IAAA,CAAxB,UAAA,EAA8C;AAC5C,mBAAA,IAAA,CAAA,IAAA,GAAiB,CACfC,SAAAA,CAAAA,CAAAA,CAAAA,CADe,CAAA,EAEfA,SAAAA,CAAAA,CAAAA,CAAAA,CAFe,CAAA,EAGfA,SAAAA,CAAAA,CAAAA,CAAAA,CAHe,CAAA,EAIfA,SAAAA,CAAAA,CAAAA,CAAAA,CAJF,CAAiB,CAAjB;AAMAF,cAAAA,cAAAA,CAAAA,IAAAA,CAAoB,KAAA,gBAAA,CAPwB,YAOxB,CAApBA;AAdwC;;AAgB1C,iBAAA,IAAA,CAAA,IAAA,GAhB0C,SAgB1C;AACA,mBAjB0C,cAiB1C;AApJoB;;AAiKtBG,UAAAA,YAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAA4B;AAC1B,gBAAIR,SAAAA,GAAY,KADU,SAC1B;;AACA,gBAAI,KAAJ,cAAA,EAAyB;AACvBS,cAAAA,OAAAA,GAAUA,OAAAA,IAAW,KADE,cACvBA;AACAT,cAAAA,SAAAA,GAAY,KAAA,cAAA,CAFW,CAEX,CAAZA;AAJwB;;AAQ1B,gBAAI,CAAJ,OAAA,EAAc;AACZS,cAAAA,OAAAA,GAAU5uC,QAAAA,CAAAA,aAAAA,CADE,KACFA,CAAV4uC;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAuBT,SAAAA,CAAAA,KAAAA,CAFX,MAEZS;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAsBT,SAAAA,CAAAA,KAAAA,CAHV,KAGZS;AACAT,cAAAA,SAAAA,CAAAA,WAAAA,CAJY,OAIZA;AAZwB;;AAe1B,kBAAMU,YAAAA,GAAe,IAAA,YAAA,CAAiB;AAAA,cAAA,SAAA;AAAA,cAAA,OAAA;AAGpCvR,cAAAA,KAAAA,EAAOhmB,IAAAA,CAH6B,KAAA;AAIpCw3B,cAAAA,KAAAA,EAAOx3B,IAAAA,CAJ6B,KAAA;AAKpCy3B,cAAAA,gBAAAA,EAAkBz3B,IAAAA,CALkB,gBAAA;AAMpC03B,cAAAA,QAAAA,EAAU13B,IAAAA,CAN0B,QAAA;AAOpC23B,cAAAA,WAAAA,EAPoC;AAAA,aAAjB,CAArB;AASA,kBAAMC,KAAAA,GAAQL,YAAAA,CAxBY,MAwBZA,EAAd;AAGAK,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAmBf,SAAAA,CAAAA,KAAAA,CA3BO,KA2B1Be;AAEAf,YAAAA,SAAAA,CAAAA,WAAAA,CA7B0B,KA6B1BA;AA9LoB;;AAyMtBgB,UAAAA,qBAAAA,CAAAA,SAAAA,EAAiC;AAQ/B,iBAAA,cAAA,CAAA,OAAA,CAA4BC,aAAAA,IAAiB;AAC3CA,cAAAA,aAAAA,CAAAA,SAAAA,GAD2C,SAC3CA;AADF,aAAA;AAGA,mBAAO,KAXwB,cAW/B;AApNoB;;AA8NtBrsB,UAAAA,MAAAA,GAAS;AACPpkB,aAAAA,GAAAA,KAAAA,CAAAA,WAAAA,EADO,mDACPA;AA/NoB;;AAAA;;AAmOxB,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDD,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,GAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,IAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAFA,MAAA,IAGAA,UAAAA,CAAAA,IAAAA,CAHA,aAAA,IAICA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,KACE,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA,MAAA,IACCA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CADD,UACCA,CADD,IAECA,UAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CATgB,YAShBA,CAHHA,CALmB,CAAtB;AAUA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBI,cAAAA,oBAAAA,EAAhB;AAAA,aAAlB;AAZkD;;AAepDlrB,UAAAA,MAAAA,GAAS;AACP,kBAAM;AAAA,cAAA,IAAA;AAAA,cAAA;AAAA,gBADC,IACP;AACA,kBAAMrgB,IAAAA,GAAO1C,QAAAA,CAAAA,aAAAA,CAFN,GAEMA,CAAb;;AAEA,gBAAIsX,IAAAA,CAAJ,GAAA,EAAc;AACZ+3B,eAAAA,GAAAA,cAAAA,CAAAA,iBAAAA,EAAAA,IAAAA,EAAwB;AACtB5vC,gBAAAA,GAAAA,EAAK6X,IAAAA,CADiB,GAAA;AAEtBg4B,gBAAAA,MAAAA,EAAQh4B,IAAAA,CAAAA,SAAAA,GACJrV,cAAAA,CAAAA,UAAAA,CADIqV,KAAAA,GAEJi4B,WAAAA,CAJkB,kBAAA;AAKtBC,gBAAAA,GAAAA,EAAKD,WAAAA,CALiB,eAAA;AAMtBhtC,gBAAAA,OAAAA,EAASgtC,WAAAA,CANa;AAAA,eAAxBF;AADF,aAAA,MASO,IAAI/3B,IAAAA,CAAJ,MAAA,EAAiB;AACtB,mBAAA,gBAAA,CAAA,IAAA,EAA4BA,IAAAA,CADN,MACtB;AADK,aAAA,MAEA,IAAIA,IAAAA,CAAJ,IAAA,EAAe;AACpB,mBAAA,SAAA,CAAA,IAAA,EAAqBA,IAAAA,CADD,IACpB;AADK,aAAA,MAEA,IACLA,IAAAA,CAAAA,OAAAA,KACC,IAAA,CAAA,OAAA,CAAA,MAAA,IACCA,IAAAA,CAAAA,OAAAA,CADD,UACCA,CADD,IAECA,IAAAA,CAAAA,OAAAA,CAHFA,YAGEA,CAHFA,KAIA,KAJAA,eAAAA,IAKA,KANK,YAAA,EAOL;AACA,mBAAA,aAAA,CAAA,IAAA,EADA,IACA;AARK,aAAA,MASA;AACL,mBAAA,SAAA,CAAA,IAAA,EADK,EACL;AA3BK;;AA8BP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CAAA,gBAAA,EAAA,GAAA,CACL,CAAA,aAAA,EAAA,KAAA,KAA0B;AACxB,sBAAMm4B,WAAAA,GAAcC,KAAAA,KAAAA,CAAAA,GAAAA,IAAAA,GAAqBhtC,IAAAA,CADjB,SACiBA,EAAzC;AACA0sC,gBAAAA,aAAAA,CAAAA,WAAAA,CAFwB,WAExBA;AACA,uBAHwB,aAGxB;AAJJ,eAAO,CAAP;AA/BK;;AAwCP,iBAAA,SAAA,CAAA,SAAA,GAxCO,gBAwCP;AACA,iBAAA,SAAA,CAAA,WAAA,CAzCO,IAyCP;AACA,mBAAO,KA1CA,SA0CP;AAzDkD;;AAoEpDO,UAAAA,SAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA6B;AAC3BjtC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,kBAAA,CADe,WACf,CAAZA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,kBAAA,WAAA,EAAiB;AACf,qBAAA,WAAA,CAAA,eAAA,CADe,WACf;AAFiB;;AAInB,qBAJmB,KAInB;AAJFA,aAAAA;;AAMA,gBAAIktC,WAAAA,IAAeA,WAAAA,KAAnB,EAAA,EAA6D;AAC3DltC,cAAAA,IAAAA,CAAAA,SAAAA,GAD2D,cAC3DA;AATyB;AApEuB;;AAyFpDmtC,UAAAA,gBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA+B;AAC7BntC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,YAAA,CADiB,EACjB,CAAZA;;AACAA,YAAAA,IAAAA,CAAAA,OAAAA,GAAe,MAAM;AACnB,mBAAA,WAAA,CAAA,kBAAA,CADmB,MACnB;AACA,qBAFmB,KAEnB;AAFFA,aAAAA;;AAIAA,YAAAA,IAAAA,CAAAA,SAAAA,GAN6B,cAM7BA;AA/FkD;;AA0GpDotC,UAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA0B;AACxBptC,YAAAA,IAAAA,CAAAA,IAAAA,GAAY,KAAA,WAAA,CAAA,YAAA,CADY,EACZ,CAAZA;AACA,kBAAM28B,GAAAA,GAAM,IAAA,GAAA,CAAQ,CAClB,CAAA,QAAA,EADkB,SAClB,CADkB,EAElB,CAAA,UAAA,EAFkB,WAElB,CAFkB,EAGlB,CAAA,YAAA,EAHF,aAGE,CAHkB,CAAR,CAAZ;;AAKA,iBAAA,MAAA,IAAA,IAAmB57B,MAAAA,CAAAA,IAAAA,CAAY6T,IAAAA,CAA/B,OAAmB7T,CAAnB,EAA8C;AAC5C,oBAAMssC,MAAAA,GAAS1Q,GAAAA,CAAAA,GAAAA,CAD6B,IAC7BA,CAAf;;AACA,kBAAI,CAAJ,MAAA,EAAa;AAAA;AAF+B;;AAK5C38B,cAAAA,IAAAA,CAAAA,MAAAA,CAAAA,GAAe,MAAM;AAAA;;AACnB,8CAAA,WAAA,CAAA,QAAA,gFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dka,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,kBAAAA,MAAAA,EAAQ;AACNrnB,oBAAAA,EAAAA,EAAIrR,IAAAA,CADE,EAAA;AAAA,oBAAA;AAAA;AAFoD,iBAA9D;AAOA,uBARmB,KAQnB;AARF5U,eAAAA;AAZsB;;AAuBxBA,YAAAA,IAAAA,CAAAA,SAAAA,GAvBwB,cAuBxBA;AAjIkD;;AAAA;;AAqItD,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDhE,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AANI,cAAA;AAMJ,aAAlB;AAPkD;;AAUpD9qB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,gBACP;AAEA,kBAAMoc,KAAAA,GAAQn/B,QAAAA,CAAAA,aAAAA,CAHP,KAGOA,CAAd;AACAm/B,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAqB,KAAA,SAAA,CAAA,KAAA,CAJd,MAIPA;AACAA,YAAAA,KAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAoB,KAAA,SAAA,CAAA,KAAA,CALb,KAKPA;AACAA,YAAAA,KAAAA,CAAAA,GAAAA,GACE,KAAA,kBAAA,GAAA,aAAA,GAEA,KAAA,IAAA,CAAA,IAAA,CAFA,WAEA,EAFA,GAPK,MAMPA;AAKAA,YAAAA,KAAAA,CAAAA,GAAAA,GAXO,uBAWPA;AACAA,YAAAA,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAZO,sBAYPA;AACAA,YAAAA,KAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAAyB8Q,IAAAA,CAAAA,SAAAA,CAAe;AAAEv0B,cAAAA,IAAAA,EAAM,KAAA,IAAA,CAbzC;AAaiC,aAAfu0B,CAAzB9Q;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,KAAA,EAAyB,KADF,IACvB;AAhBK;;AAmBP,iBAAA,SAAA,CAAA,WAAA,CAnBO,KAmBP;AACA,mBAAO,KApBA,SAoBP;AA9BkD;;AAAA;;AAkCtD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtDpc,UAAAA,MAAAA,GAAS;AAEP,gBAAI,KAAA,IAAA,CAAJ,eAAA,EAA+B;AAC7B,mBAAA,SAAA,CAAA,KAAA,GAAuB,KAAA,IAAA,CADM,eAC7B;AAHK;;AAMP,mBAAO,KANA,SAMP;AAPoD;;AAUtDmtB,UAAAA,eAAAA,CAAAA,KAAAA,EAAuB;AACrB,mBACGziB,SAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,KAAAA,KAAsC7G,KAAAA,CAAvC,OAAC6G,IACAA,SAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,KAAAA,KAAsC7G,KAAAA,CAHpB,OACrB;AAXoD;;AAiBtDupB,UAAAA,iBAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,WAAAA,EAA6D;AAC3D,gBAAIC,QAAAA,CAAAA,QAAAA,CAAJ,OAAIA,CAAJ,EAAgC;AAE9BC,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCzpB,KAAAA,IAAS;AAAA;;AAC1C,+CAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5DhK,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,kBAAAA,MAAAA,EAAQ;AACNrnB,oBAAAA,EAAAA,EAAI,KAAA,IAAA,CADE,EAAA;AAENhlB,oBAAAA,IAAAA,EAFM,SAAA;AAGN8T,oBAAAA,KAAAA,EAAO64B,WAAAA,CAHD,KAGCA,CAHD;AAINC,oBAAAA,KAAAA,EAAO3pB,KAAAA,CAJD,QAAA;AAKN4pB,oBAAAA,QAAAA,EAAU,KAAA,eAAA,CALJ,KAKI;AALJ;AAFoD,iBAA9D;AADFH,eAAAA;AAFF,aAAA,MAcO;AAELA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCzpB,KAAAA,IAAS;AAAA;;AAC1C,+CAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5DhK,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,kBAAAA,MAAAA,EAAQ;AACNrnB,oBAAAA,EAAAA,EAAI,KAAA,IAAA,CADE,EAAA;AAENhlB,oBAAAA,IAAAA,EAFM,SAAA;AAGN8T,oBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CAHD;AAAA;AAFoD,iBAA9D;AADFypB,eAAAA;AAjByD;AAjBP;;AA+CtDI,UAAAA,kBAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAA2C;AACzC,iBAAA,MAAW,CAAA,QAAA,EAAX,SAAW,CAAX,IAAA,KAAA,EAA2C;AAAA;;AACzC,kBAAIC,SAAAA,KAAAA,QAAAA,2BAA0B,KAAA,IAAA,CAAA,OAA1BA,uDAA0B,mBAA9B,SAA8B,CAA1BA,CAAJ,EAA8D;AAC5D,qBAAA,iBAAA,CAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAD4D,MAC5D;AAFuC;AADF;AA/CW;;AAuDtDC,UAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,kBAAM;AAAA,cAAA,MAAA;AAAA,cAAA;AAAA,gBADS,KACf;AACA,kBAAM;AAAA,cAAA;AAAA,gBAFS,MAEf;;AACA,iBAAA,MAAA,IAAA,IAAmB,CAAA,SAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,aAAA,EAAnB,aAAmB,CAAnB,EAOG;AACD,kBAAIrT,KAAAA,GAAQ0S,MAAAA,CADX,IACWA,CAAZ;;AACA,kBAAI,CAAJ,KAAA,EAAY;AAAA;AAFX;;AAKD1S,cAAAA,KAAAA,GAAQsT,gBAAAA,CAAAA,eAAAA,CAAgB,GAAGtT,KAAAA,CAAnBsT,CAAmBtT,CAAnBsT,OAAAA,EAAoCtT,KAAAA,CAAAA,KAAAA,CAL3C,CAK2CA,CAApCsT,CAARtT;;AACA,sBAAA,IAAA;AACE,qBADF,SACE;AACA,qBAAA,WAAA;AACEuT,kBAAAA,KAAAA,CAAAA,eAAAA,GADF,KACEA;AAHJ;;AAKE,qBALF,SAKE;AACA,qBAAA,WAAA;AACEA,kBAAAA,KAAAA,CAAAA,KAAAA,GADF,KACEA;AAPJ;;AASE,qBATF,aASE;AACA,qBAAA,aAAA;AACEA,kBAAAA,KAAAA,CAAAA,WAAAA,GADF,KACEA;AAXJ;AAAA;AAhBa;AAvDqC;;AAAA;;AAyFxD,cAAA,2BAAA,SAAA,uBAAA,CAAkE;AAChEnyC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GACJF,UAAAA,CAAAA,sBAAAA,IACC,CAACA,UAAAA,CAAAA,IAAAA,CAAD,aAAA,IAAkC,CAAC,CAACA,UAAAA,CAAAA,IAAAA,CAHjB,UACtB;AAGA,kBAAA,UAAA,EAAkB;AAJI,cAAA;AAIJ,aAAlB;AAL8D;;AAQhE9qB,UAAAA,MAAAA,GAAS;AACP,kBAAM+tB,OAAAA,GAAU,KADT,iBACP;AACA,kBAAMnoB,EAAAA,GAAK,KAAA,IAAA,CAFJ,EAEP;AAEA,iBAAA,SAAA,CAAA,SAAA,GAJO,sBAIP;AAEA,gBAAI0nB,OAAAA,GANG,IAMP;;AACA,gBAAI,KAAJ,sBAAA,EAAiC;AAI/B,oBAAMU,UAAAA,GAAa,OAAA,CAAA,QAAA,CAAA,EAAA,EAAqB;AACtCt5B,gBAAAA,KAAAA,EAAO,KAAA,IAAA,CAD+B,UAAA;AAEtCu5B,gBAAAA,aAAAA,EAAe,KAAA,IAAA,CAFuB;AAAA,eAArB,CAAnB;AAIA,oBAAM9rB,WAAAA,GAAc6rB,UAAAA,CAAAA,aAAAA,IAA4BA,UAAAA,CAA5BA,KAAAA,IARW,EAQ/B;AACA,oBAAME,WAAAA,GAAc;AAClBC,gBAAAA,SAAAA,EADkB,IAAA;AAElBC,gBAAAA,cAAAA,EAFkB,IAAA;AAGlBC,gBAAAA,yBAAAA,EAHkB,IAAA;AAIlBC,gBAAAA,gBAAAA,EAJkB;AAAA,eAApB;;AAOA,kBAAI,KAAA,IAAA,CAAJ,SAAA,EAAyB;AACvBhB,gBAAAA,OAAAA,GAAUrwC,QAAAA,CAAAA,aAAAA,CADa,UACbA,CAAVqwC;AACAA,gBAAAA,OAAAA,CAAAA,WAAAA,GAFuB,WAEvBA;AAFF,eAAA,MAGO;AACLA,gBAAAA,OAAAA,GAAUrwC,QAAAA,CAAAA,aAAAA,CADL,OACKA,CAAVqwC;AACAA,gBAAAA,OAAAA,CAAAA,IAAAA,GAFK,MAELA;AACAA,gBAAAA,OAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAHK,WAGLA;AAtB6B;;AAyB/BY,cAAAA,WAAAA,CAAAA,SAAAA,GAzB+B,WAyB/BA;AACAZ,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EA1B+B,EA0B/BA;AAEAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkC,UAAA,KAAA,EAAiB;AACjDS,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,kBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CADmB;AAC5B,iBAArBkqB;AADFT,eAAAA;;AAIA,kBAAIiB,YAAAA,GAAe1qB,KAAAA,IAAS;AAC1B,oBAAIqqB,WAAAA,CAAJ,cAAA,EAAgC;AAC9BrqB,kBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBqqB,WAAAA,CADS,cAC9BrqB;AAFwB;;AAI1BA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,CAAAA,EAJ0B,CAI1BA;AACAqqB,gBAAAA,WAAAA,CAAAA,yBAAAA,GAL0B,IAK1BA;AALF,eAAA;;AAQA,kBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAAA;;AAC7CZ,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCzpB,KAAAA,IAAS;AACzC,sBAAIqqB,WAAAA,CAAJ,SAAA,EAA2B;AACzBrqB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBqqB,WAAAA,CADI,SACzBrqB;AAFuC;AAA3CypB,iBAAAA;AAMAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8CzpB,KAAAA,IAAS;AACrD,wBAAM;AAAA,oBAAA;AAAA,sBAD+C,KACrD;AACA,wBAAM2qB,OAAAA,GAAU;AACd95B,oBAAAA,KAAAA,GAAQ;AACNw5B,sBAAAA,WAAAA,CAAAA,SAAAA,GAAwBjB,MAAAA,CAAAA,KAAAA,IADlB,EACNiB;AACAH,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,wBAAAA,KAAAA,EAAOw5B,WAAAA,CAAAA,SAAAA,CAFxB,QAEwBA;AAAT,uBAArBH;;AACA,0BAAI,CAACG,WAAAA,CAAL,cAAA,EAAiC;AAC/BrqB,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBqqB,WAAAA,CADU,SAC/BrqB;AAJI;AADM,qBAAA;;AAQdoqB,oBAAAA,aAAAA,GAAgB;AACdC,sBAAAA,WAAAA,CAAAA,cAAAA,GAA6BjB,MAAAA,CAAAA,aAAAA,IADf,EACdiB;;AACA,0BAAIrqB,KAAAA,CAAAA,MAAAA,KAAiB5mB,QAAAA,CAArB,aAAA,EAA6C;AAE3C4mB,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBqqB,WAAAA,CAFsB,cAE3CrqB;AAJY;;AAMdkqB,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBK,wBAAAA,cAAAA,EAAgBF,WAAAA,CAPJ;AAMO,uBAArBH;AAdY,qBAAA;;AAkBdU,oBAAAA,KAAAA,GAAQ;AACN7jB,sBAAAA,UAAAA,CAAW,MAAM/G,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAmB;AAAE6qB,wBAAAA,aAAAA,EAAtC9jB;AAAoC,uBAAnB/G,CAAjB+G,EADM,CACNA,CAAAA;AAnBY,qBAAA;;AAqBd+jB,oBAAAA,QAAAA,GAAW;AAET9qB,sBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAqBopB,MAAAA,CAFZ,QAETppB;AAvBY,qBAAA;;AAyBd+qB,oBAAAA,MAAAA,GAAS;AACP/qB,sBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgCopB,MAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GADzB,SACPppB;AAGAkqB,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEa,wBAAAA,MAAAA,EAAQ3B,MAAAA,CAJxB;AAIc,uBAArBc;AA7BY,qBAAA;;AA+Bdc,oBAAAA,QAAAA,GAAW;AACThrB,sBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,GAAwB,CAACopB,MAAAA,CADhB,QACTppB;AAhCY,qBAAA;;AAkCdirB,oBAAAA,QAAAA,GAAW;AACT,4BAAM,CAAA,QAAA,EAAA,MAAA,IAAqB7B,MAAAA,CADlB,QACT;;AACA,0BAAI8B,QAAAA,IAAAA,CAAAA,IAAiBC,MAAAA,GAASnrB,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAA9B,MAAA,EAAyD;AACvDA,wBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,CAAAA,QAAAA,EADuD,MACvDA;AAHO;AAlCG;;AAAA,mBAAhB;AAyCAnjB,kBAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACUE,IAAAA,IAAQA,IAAAA,IADlBF,OAAAA,EAAAA,OAAAA,CAEWE,IAAAA,IAAQ4tC,OAAAA,CA7CkC,IA6ClCA,CAAAA,EAFnB9tC;;AAGA,uBAAA,SAAA,CA9CqD,KA8CrD;AA9CF4sC,iBAAAA;AAmDAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAoCzpB,KAAAA,IAAS;AAAA;;AAC3CqqB,kBAAAA,WAAAA,CAAAA,gBAAAA,GAA+BrqB,KAAAA,CAAAA,MAAAA,CADY,KAC3CqqB;AAGA,sBAAIe,SAAAA,GAAY,CAJ2B,CAI3C;;AACA,sBAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,QAAA,EAA4B;AAC1BorB,oBAAAA,SAAAA,GAD0B,CAC1BA;AADF,mBAAA,MAEO,IAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,OAAA,EAA2B;AAChCorB,oBAAAA,SAAAA,GADgC,CAChCA;AADK,mBAAA,MAEA,IAAIprB,KAAAA,CAAAA,GAAAA,KAAJ,KAAA,EAAyB;AAC9BorB,oBAAAA,SAAAA,GAD8B,CAC9BA;AAVyC;;AAY3C,sBAAIA,SAAAA,KAAc,CAAlB,CAAA,EAAsB;AAAA;AAZqB;;AAgB3Cf,kBAAAA,WAAAA,CAAAA,SAAAA,GAAwBrqB,KAAAA,CAAAA,MAAAA,CAhBmB,KAgB3CqqB;AACA,iDAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dr0B,oBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,oBAAAA,MAAAA,EAAQ;AAAA,sBAAA,EAAA;AAENrsC,sBAAAA,IAAAA,EAFM,WAAA;AAGN8T,sBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CAHD,KAAA;AAINqrB,sBAAAA,UAAAA,EAJM,IAAA;AAAA,sBAAA,SAAA;AAMNH,sBAAAA,QAAAA,EAAUlrB,KAAAA,CAAAA,MAAAA,CANJ,cAAA;AAONmrB,sBAAAA,MAAAA,EAAQnrB,KAAAA,CAAAA,MAAAA,CAPF;AAAA;AAFoD,mBAA9D;AAjBFypB,iBAAAA;AA8BA,sBAAM6B,aAAAA,GAxFuC,YAwF7C;AACAZ,gBAAAA,YAAAA,GAzF6C,IAyF7CA;AACAjB,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,MAAAA,EAAiCzpB,KAAAA,IAAS;AACxC,sBAAI,KAAA,WAAA,CAAJ,MAAA,EAA6B;AAAA;;AAE3BqqB,oBAAAA,WAAAA,CAAAA,SAAAA,GAAwBrqB,KAAAA,CAAAA,MAAAA,CAFG,KAE3BqqB;AACA,mDAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dr0B,sBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,sBAAAA,MAAAA,EAAQ;AAAA,wBAAA,EAAA;AAENrsC,wBAAAA,IAAAA,EAFM,WAAA;AAGN8T,wBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CAHD,KAAA;AAINqrB,wBAAAA,UAAAA,EAJM,IAAA;AAKND,wBAAAA,SAAAA,EALM,CAAA;AAMNF,wBAAAA,QAAAA,EAAUlrB,KAAAA,CAAAA,MAAAA,CANJ,cAAA;AAONmrB,wBAAAA,MAAAA,EAAQnrB,KAAAA,CAAAA,MAAAA,CAPF;AAAA;AAFoD,qBAA9D;AAJsC;;AAiBxCsrB,kBAAAA,aAAAA,CAjBwC,KAiBxCA,CAAAA;AAjBF7B,iBAAAA;AAmBAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsCzpB,KAAAA,IAAS;AAC7CqqB,kBAAAA,WAAAA,CAAAA,gBAAAA,GAA+BrqB,KAAAA,CAAAA,MAAAA,CADc,KAC7CqqB;AACAA,kBAAAA,WAAAA,CAAAA,yBAAAA,GAF6C,IAE7CA;AAFFZ,iBAAAA;AAIAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCzpB,KAAAA,IAAS;AAEzC,sBAAIA,KAAAA,CAAAA,MAAAA,CAAAA,cAAAA,KAAgCA,KAAAA,CAAAA,MAAAA,CAApC,YAAA,EAA+D;AAC7DqqB,oBAAAA,WAAAA,CAAAA,yBAAAA,GAD6D,IAC7DA;AAHuC;AAA3CZ,iBAAAA;AAMAA,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmCzpB,KAAAA,IAAS;AAC1CqqB,kBAAAA,WAAAA,CAAAA,yBAAAA,GAAwC,CACtCrqB,KAAAA,CAAAA,MAAAA,CADsC,cAAA,EAEtCA,KAAAA,CAAAA,MAAAA,CAFFqqB,YAAwC,CAAxCA;AADFZ,iBAAAA;;AAOA,2CAAI,KAAA,IAAA,CAAA,OAAJ,wDAAI,oBAAJ,SAAA,EAAkC;AAGhCA,kBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkCzpB,KAAAA,IAAS;AAAA;;AACzC,wBAAIkrB,QAAAA,GAAW,CAD0B,CACzC;AACA,wBAAIC,MAAAA,GAAS,CAF4B,CAEzC;;AACA,wBAAId,WAAAA,CAAJ,yBAAA,EAA2C;AACzC,uBAAA,QAAA,EAAA,MAAA,IAAqBA,WAAAA,CADoB,yBACzC;AAJuC;;AAMzC,mDAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dr0B,sBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,sBAAAA,MAAAA,EAAQ;AAAA,wBAAA,EAAA;AAENrsC,wBAAAA,IAAAA,EAFM,WAAA;AAGN8T,wBAAAA,KAAAA,EAAOw5B,WAAAA,CAHD,gBAAA;AAINkB,wBAAAA,MAAAA,EAAQvrB,KAAAA,CAJF,IAAA;AAKNqrB,wBAAAA,UAAAA,EALM,KAAA;AAAA,wBAAA,QAAA;AAAA,wBAAA;AAAA;AAFoD,qBAA9D;AANF5B,mBAAAA;AAjI2C;;AAsJ7C,qBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,OAAA,EADF,OACE,CADF,EAEE,CAAA,MAAA,EAFF,MAEE,CAFF,EAGE,CAAA,WAAA,EAHF,YAGE,CAHF,EAIE,CAAA,YAAA,EAJF,aAIE,CAJF,EAKE,CAAA,YAAA,EALF,YAKE,CALF,EAME,CAAA,SAAA,EARJ,UAQI,CANF,CAFF,EAUEzpB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CAhKkC,KAsJ7C;AA9L6B;;AA4M/B,kBAAA,YAAA,EAAkB;AAChBypB,gBAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,MAAAA,EADgB,YAChBA;AA7M6B;;AAgN/BA,cAAAA,OAAAA,CAAAA,QAAAA,GAAmB,KAAA,IAAA,CAhNY,QAgN/BA;AACAA,cAAAA,OAAAA,CAAAA,IAAAA,GAAe,KAAA,IAAA,CAjNgB,SAiN/BA;;AAEA,kBAAI,KAAA,IAAA,CAAA,MAAA,KAAJ,IAAA,EAA+B;AAC7BA,gBAAAA,OAAAA,CAAAA,SAAAA,GAAoB,KAAA,IAAA,CADS,MAC7BA;AApN6B;;AAuN/B,kBAAI,KAAA,IAAA,CAAJ,IAAA,EAAoB;AAClB,sBAAM+B,UAAAA,GAAa,KAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAoB,KAAA,IAAA,CAAA,IAAA,CADrB,CACqB,CAAvC;AACA,sBAAMC,SAAAA,GAAYD,UAAAA,GAAa,KAAA,IAAA,CAFb,MAElB;AAEA/B,gBAAAA,OAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAJkB,MAIlBA;AACAA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAA8B,QALZ,SAAA,WAKlBA;AA5N6B;AAAjC,aAAA,MA8NO;AACLA,cAAAA,OAAAA,GAAUrwC,QAAAA,CAAAA,aAAAA,CADL,KACKA,CAAVqwC;AACAA,cAAAA,OAAAA,CAAAA,WAAAA,GAAsB,KAAA,IAAA,CAFjB,UAELA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,GAHK,QAGLA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GAJK,YAILA;AAzOK;;AA4OP,iBAAA,aAAA,CA5OO,OA4OP;;AAEA,iBAAA,SAAA,CAAA,WAAA,CA9OO,OA8OP;AACA,mBAAO,KA/OA,SA+OP;AAvP8D;;AAiQhEiC,UAAAA,aAAAA,CAAAA,OAAAA,EAAuB;AACrB,kBAAMC,cAAAA,GAAiB,CAAA,MAAA,EAAA,QAAA,EAAvB,OAAuB,CAAvB;AACA,kBAAM;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,gBAA0B,KAAA,IAAA,CAFX,qBAErB;AACA,kBAAM1B,KAAAA,GAAQR,OAAAA,CAHO,KAGrB;;AAKA,gBAAA,QAAA,EAAc;AACZQ,cAAAA,KAAAA,CAAAA,QAAAA,GAAiB,GADL,QAAA,IACZA;AATmB;;AAYrBA,YAAAA,KAAAA,CAAAA,KAAAA,GAAc53B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkBu5B,SAAAA,CAAlBv5B,CAAkBu5B,CAAlBv5B,EAAgCu5B,SAAAA,CAAhCv5B,CAAgCu5B,CAAhCv5B,EAA8Cu5B,SAAAA,CAZvC,CAYuCA,CAA9Cv5B,CAAd43B;;AAEA,gBAAI,KAAA,IAAA,CAAA,aAAA,KAAJ,IAAA,EAAsC;AACpCA,cAAAA,KAAAA,CAAAA,SAAAA,GAAkB0B,cAAAA,CAAe,KAAA,IAAA,CADG,aAClBA,CAAlB1B;AAfmB;AAjQyC;;AAAA;;AAqRlE,cAAA,+BAAA,SAAA,uBAAA,CAAsE;AACpEnyC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEqvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFkE;;AAKpE9qB,UAAAA,MAAAA,GAAS;AACP,kBAAM+tB,OAAAA,GAAU,KADT,iBACP;AACA,kBAAMx5B,IAAAA,GAAO,KAFN,IAEP;AACA,kBAAMqR,EAAAA,GAAKrR,IAAAA,CAHJ,EAGP;AACA,kBAAMG,KAAAA,GAAQq5B,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACjCr5B,cAAAA,KAAAA,EACEH,IAAAA,CAAAA,UAAAA,KACEA,IAAAA,CAAAA,WAAAA,IAAoBA,IAAAA,CAAAA,WAAAA,KAAqBA,IAAAA,CAA1C,UAACA,IACC,CAACA,IAAAA,CAAD,WAAA,IAAqBA,IAAAA,CAAAA,UAAAA,KAJdw5B,KAEVx5B;AAF+B,aAArBw5B,EAJP,KAIP;AAOA,iBAAA,SAAA,CAAA,SAAA,GAXO,iCAWP;AAEA,kBAAMT,OAAAA,GAAUrwC,QAAAA,CAAAA,aAAAA,CAbT,OAaSA,CAAhB;AACAqwC,YAAAA,OAAAA,CAAAA,QAAAA,GAAmB/4B,IAAAA,CAdZ,QAcP+4B;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAfO,UAePA;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAAe,KAAA,IAAA,CAhBR,SAgBPA;;AACA,gBAAA,KAAA,EAAW;AACTA,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EADS,IACTA;AAlBK;;AAoBPA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EApBO,EAoBPA;AAEAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmC,UAAA,KAAA,EAAiB;AAClD,oBAAM1sC,IAAAA,GAAOijB,KAAAA,CAAAA,MAAAA,CADqC,IAClD;;AACA,mBAAA,MAAA,QAAA,IAAuB5mB,QAAAA,CAAAA,iBAAAA,CAAvB,IAAuBA,CAAvB,EAAyD;AACvD,oBAAIyyC,QAAAA,KAAa7rB,KAAAA,CAAjB,MAAA,EAA+B;AAC7B6rB,kBAAAA,QAAAA,CAAAA,OAAAA,GAD6B,KAC7BA;AACA3B,kBAAAA,OAAAA,CAAAA,QAAAA,CACE2B,QAAAA,CAAAA,UAAAA,CAAAA,YAAAA,CADF3B,oBACE2B,CADF3B,EAEE;AAAEr5B,oBAAAA,KAAAA,EAJyB;AAI3B,mBAFFq5B;AAHqD;AAFP;;AAWlDA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,gBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CAXoB;AAW7B,eAArBkqB;AAXFT,aAAAA;;AAcA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7CA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8CzpB,KAAAA,IAAS;AACrD,sBAAM;AAAA,kBAAA;AAAA,oBAD+C,KACrD;AACA,sBAAM2qB,OAAAA,GAAU;AACd95B,kBAAAA,KAAAA,GAAQ;AACNmP,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,OAAAA,GAAuBopB,MAAAA,CAAAA,KAAAA,KADjB,KACNppB;AACAkqB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,sBAAAA,KAAAA,EAAOmP,KAAAA,CAAAA,MAAAA,CAFxB;AAEe,qBAArBkqB;AAHY,mBAAA;;AAKdU,kBAAAA,KAAAA,GAAQ;AACN7jB,oBAAAA,UAAAA,CAAW,MAAM/G,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAmB;AAAE6qB,sBAAAA,aAAAA,EAAtC9jB;AAAoC,qBAAnB/G,CAAjB+G,EADM,CACNA,CAAAA;AANY,mBAAA;;AAQdgkB,kBAAAA,MAAAA,GAAS;AACP/qB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgCopB,MAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GADzB,SACPppB;AAGAkqB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEa,sBAAAA,MAAAA,EAAQ3B,MAAAA,CAJxB;AAIc,qBAArBc;AAZY,mBAAA;;AAcdc,kBAAAA,QAAAA,GAAW;AACThrB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,GAAwB,CAACopB,MAAAA,CADhB,QACTppB;AAfY;;AAAA,iBAAhB;AAkBAnjB,gBAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACUE,IAAAA,IAAQA,IAAAA,IADlBF,OAAAA,EAAAA,OAAAA,CAEWE,IAAAA,IAAQ4tC,OAAAA,CAtBkC,IAsBlCA,CAAAA,EAFnB9tC;;AAGA,qBAAA,SAAA,CAvBqD,KAuBrD;AAvBF4sC,eAAAA;;AA0BA,mBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,QAAA,EADF,UACE,CADF,EAEE,CAAA,QAAA,EAFF,QAEE,CAFF,EAGE,CAAA,OAAA,EAHF,OAGE,CAHF,EAIE,CAAA,MAAA,EAJF,MAIE,CAJF,EAKE,CAAA,WAAA,EALF,YAKE,CALF,EAME,CAAA,YAAA,EANF,aAME,CANF,EAOE,CAAA,YAAA,EAPF,YAOE,CAPF,EAQE,CAAA,SAAA,EAVJ,UAUI,CARF,CAFF,EAYEzpB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CAvCkC,OA2B7C;AA/DK;;AA+EP,iBAAA,SAAA,CAAA,WAAA,CA/EO,OA+EP;AACA,mBAAO,KAhFA,SAgFP;AArFkE;;AAAA;;AAyFtE,cAAA,kCAAA,SAAA,uBAAA,CAAyE;AACvEloB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEqvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFqE;;AAKvE9qB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,oCACP;AACA,kBAAM+tB,OAAAA,GAAU,KAFT,iBAEP;AACA,kBAAMx5B,IAAAA,GAAO,KAHN,IAGP;AACA,kBAAMqR,EAAAA,GAAKrR,IAAAA,CAJJ,EAIP;AACA,kBAAMG,KAAAA,GAAQq5B,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACjCr5B,cAAAA,KAAAA,EAAOH,IAAAA,CAAAA,UAAAA,KAAoBA,IAAAA,CADfw5B;AAAqB,aAArBA,EALP,KAKP;AAIA,kBAAMT,OAAAA,GAAUrwC,QAAAA,CAAAA,aAAAA,CATT,OASSA,CAAhB;AACAqwC,YAAAA,OAAAA,CAAAA,QAAAA,GAAmB/4B,IAAAA,CAVZ,QAUP+4B;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAXO,OAWPA;AACAA,YAAAA,OAAAA,CAAAA,IAAAA,GAAe/4B,IAAAA,CAZR,SAYP+4B;;AACA,gBAAA,KAAA,EAAW;AACTA,cAAAA,OAAAA,CAAAA,YAAAA,CAAAA,SAAAA,EADS,IACTA;AAdK;;AAgBPA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAhBO,EAgBPA;AAEAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAmC,UAAA,KAAA,EAAiB;AAClD,oBAAM;AAAA,gBAAA;AAAA,kBAD4C,KAClD;;AACA,mBAAA,MAAA,KAAA,IAAoBrwC,QAAAA,CAAAA,iBAAAA,CAA2BsvC,MAAAA,CAA/C,IAAoBtvC,CAApB,EAA6D;AAC3D,oBAAI0yC,KAAAA,KAAJ,MAAA,EAAsB;AACpB5B,kBAAAA,OAAAA,CAAAA,QAAAA,CAAiB4B,KAAAA,CAAAA,YAAAA,CAAjB5B,IAAiB4B,CAAjB5B,EAA2C;AAAEr5B,oBAAAA,KAAAA,EADzB;AACuB,mBAA3Cq5B;AAFyD;AAFX;;AAOlDA,cAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,gBAAAA,KAAAA,EAAO63B,MAAAA,CAPoB;AAO7B,eAArBwB;AAPFT,aAAAA;;AAUA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7C,oBAAMsC,cAAAA,GAAiBr7B,IAAAA,CADsB,WAC7C;AACA+4B,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAA8CzpB,KAAAA,IAAS;AACrD,sBAAM;AAAA,kBAAA;AAAA,oBAD+C,KACrD;AACA,sBAAM2qB,OAAAA,GAAU;AACd95B,kBAAAA,KAAAA,GAAQ;AACN,0BAAMm7B,OAAAA,GAAUD,cAAAA,KAAmB3C,MAAAA,CAD7B,KACN;;AACA,yBAAA,MAAA,KAAA,IAAoBhwC,QAAAA,CAAAA,iBAAAA,CAA2B4mB,KAAAA,CAAAA,MAAAA,CAA/C,IAAoB5mB,CAApB,EAAmE;AACjE,4BAAM6yC,OAAAA,GAAUH,KAAAA,CAAAA,YAAAA,CADiD,IACjDA,CAAhB;AACAA,sBAAAA,KAAAA,CAAAA,OAAAA,GAAgBG,OAAAA,KAAAA,EAAAA,IAFiD,OAEjEH;AACA5B,sBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,OAAAA,EAA0B;AAAEr5B,wBAAAA,KAAAA,EAAOi7B,KAAAA,CAH8B;AAGvC,uBAA1B5B;AALI;AADM,mBAAA;;AASdU,kBAAAA,KAAAA,GAAQ;AACN7jB,oBAAAA,UAAAA,CAAW,MAAM/G,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAmB;AAAE6qB,sBAAAA,aAAAA,EAAtC9jB;AAAoC,qBAAnB/G,CAAjB+G,EADM,CACNA,CAAAA;AAVY,mBAAA;;AAYdgkB,kBAAAA,MAAAA,GAAS;AACP/qB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgCopB,MAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GADzB,SACPppB;AAGAkqB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEa,sBAAAA,MAAAA,EAAQ3B,MAAAA,CAJxB;AAIc,qBAArBc;AAhBY,mBAAA;;AAkBdc,kBAAAA,QAAAA,GAAW;AACThrB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,GAAwB,CAACopB,MAAAA,CADhB,QACTppB;AAnBY;;AAAA,iBAAhB;AAsBAnjB,gBAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACUE,IAAAA,IAAQA,IAAAA,IADlBF,OAAAA,EAAAA,OAAAA,CAEWE,IAAAA,IAAQ4tC,OAAAA,CA1BkC,IA0BlCA,CAAAA,EAFnB9tC;;AAGA,qBAAA,SAAA,CA3BqD,KA2BrD;AA3BF4sC,eAAAA;;AA8BA,mBAAA,kBAAA,CAAA,OAAA,EAEE,CACE,CAAA,QAAA,EADF,UACE,CADF,EAEE,CAAA,QAAA,EAFF,QAEE,CAFF,EAGE,CAAA,OAAA,EAHF,OAGE,CAHF,EAIE,CAAA,MAAA,EAJF,MAIE,CAJF,EAKE,CAAA,WAAA,EALF,YAKE,CALF,EAME,CAAA,YAAA,EANF,aAME,CANF,EAOE,CAAA,YAAA,EAPF,YAOE,CAPF,EAQE,CAAA,SAAA,EAVJ,UAUI,CARF,CAFF,EAYEzpB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CA5CkC,OAgC7C;AA5DK;;AA4EP,iBAAA,SAAA,CAAA,WAAA,CA5EO,OA4EP;AACA,mBAAO,KA7EA,SA6EP;AAlFqE;;AAAA;;AAsFzE,cAAA,iCAAA,SAAA,qBAAA,CAAsE;AACpE7D,UAAAA,MAAAA,GAAS;AAIP,kBAAMorB,SAAAA,GAAY,MAJX,MAIW,EAAlB;AACAA,YAAAA,SAAAA,CAAAA,SAAAA,GALO,mCAKPA;;AAEA,gBAAI,KAAA,IAAA,CAAJ,eAAA,EAA+B;AAC7BA,cAAAA,SAAAA,CAAAA,KAAAA,GAAkB,KAAA,IAAA,CADW,eAC7BA;AARK;;AAWP,mBAXO,SAWP;AAZkE;;AAAA;;AAgBtE,cAAA,6BAAA,SAAA,uBAAA,CAAoE;AAClEzvC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAA,UAAA,EAAkB;AAAEqvC,cAAAA,YAAAA,EAAcF,UAAAA,CADZ;AACJ,aAAlB;AAFgE;;AAKlE9qB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,wBACP;AACA,kBAAM+tB,OAAAA,GAAU,KAFT,iBAEP;AACA,kBAAMnoB,EAAAA,GAAK,KAAA,IAAA,CAHJ,EAGP;AASAmoB,YAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,cAAAA,KAAAA,EACE,KAAA,IAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,GAAkC,KAAA,IAAA,CAAA,UAAA,CAAlC,CAAkC,CAAlC,GAdG;AAYc,aAArBq5B;AAKA,kBAAMgC,aAAAA,GAAgB9yC,QAAAA,CAAAA,aAAAA,CAjBf,QAiBeA,CAAtB;AACA8yC,YAAAA,aAAAA,CAAAA,QAAAA,GAAyB,KAAA,IAAA,CAlBlB,QAkBPA;AACAA,YAAAA,aAAAA,CAAAA,IAAAA,GAAqB,KAAA,IAAA,CAnBd,SAmBPA;AACAA,YAAAA,aAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EApBO,EAoBPA;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,KAAA,EAAsB;AAEpBA,cAAAA,aAAAA,CAAAA,IAAAA,GAAqB,KAAA,IAAA,CAAA,OAAA,CAFD,MAEpBA;;AACA,kBAAI,KAAA,IAAA,CAAJ,WAAA,EAA2B;AACzBA,gBAAAA,aAAAA,CAAAA,QAAAA,GADyB,IACzBA;AAJkB;AAtBf;;AA+BP,iBAAA,MAAA,MAAA,IAAqB,KAAA,IAAA,CAArB,OAAA,EAAwC;AACtC,oBAAMC,aAAAA,GAAgB/yC,QAAAA,CAAAA,aAAAA,CADgB,QAChBA,CAAtB;AACA+yC,cAAAA,aAAAA,CAAAA,WAAAA,GAA4BC,MAAAA,CAFU,YAEtCD;AACAA,cAAAA,aAAAA,CAAAA,KAAAA,GAAsBC,MAAAA,CAHgB,WAGtCD;;AACA,kBAAI,KAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAA8BC,MAAAA,CAAlC,WAAI,CAAJ,EAAuD;AACrDD,gBAAAA,aAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EADqD,IACrDA;AALoC;;AAOtCD,cAAAA,aAAAA,CAAAA,WAAAA,CAPsC,aAOtCA;AAtCK;;AAyCP,kBAAM9iB,QAAAA,GAAW,CAAA,KAAA,EAAA,QAAA,KAAqB;AACpC,oBAAMrsB,IAAAA,GAAOsvC,QAAAA,GAAAA,OAAAA,GADuB,aACpC;AACA,oBAAMC,OAAAA,GAAUtsB,KAAAA,CAAAA,MAAAA,CAFoB,OAEpC;;AACA,kBAAI,CAACA,KAAAA,CAAAA,MAAAA,CAAL,QAAA,EAA4B;AAC1B,uBAAOssB,OAAAA,CAAAA,aAAAA,KAA0B,CAA1BA,CAAAA,GAAAA,IAAAA,GAEHA,OAAAA,CAAQA,OAAAA,CAARA,aAAAA,CAAAA,CAHsB,IAGtBA,CAFJ;AAJkC;;AAQpC,qBAAO/6B,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EACU66B,MAAAA,IAAUA,MAAAA,CADpB76B,QAAAA,EAAAA,GAAAA,CAEA66B,MAAAA,IAAUA,MAAAA,CAVmB,IAUnBA,CAFV76B,CAAP;AARF,aAAA;;AAaA,kBAAMg7B,QAAAA,GAAWvsB,KAAAA,IAAS;AACxB,oBAAMssB,OAAAA,GAAUtsB,KAAAA,CAAAA,MAAAA,CADQ,OACxB;AACA,qBAAO,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA,EAAkCosB,MAAAA,IAAU;AACjD,uBAAO;AAAEI,kBAAAA,YAAAA,EAAcJ,MAAAA,CAAhB,WAAA;AAAoCK,kBAAAA,WAAAA,EAAaL,MAAAA,CAAjD;AAAA,iBAAP;AADF,eAAO,CAAP;AAFF,aAAA;;AAOA,gBAAI,KAAA,eAAA,IAAwB,KAA5B,YAAA,EAA+C;AAC7CF,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAAoDlsB,KAAAA,IAAS;AAC3D,sBAAM;AAAA,kBAAA;AAAA,oBADqD,KAC3D;AACA,sBAAM2qB,OAAAA,GAAU;AACd95B,kBAAAA,KAAAA,GAAQ;AACN,0BAAMy7B,OAAAA,GAAUJ,aAAAA,CADV,OACN;AACA,0BAAMr7B,KAAAA,GAAQu4B,MAAAA,CAFR,KAEN;AACA,0BAAMsD,MAAAA,GAAS,IAAA,GAAA,CAAQn7B,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CAHhD,KAGgD,CAAvC,CAAf;AACAA,oBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAsC66B,MAAAA,IAAU;AAC9CA,sBAAAA,MAAAA,CAAAA,QAAAA,GAAkBM,MAAAA,CAAAA,GAAAA,CAAWN,MAAAA,CADiB,KAC5BM,CAAlBN;AADF76B,qBAAAA;AAGA24B,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,sBAAAA,KAAAA,EAAOuY,QAAAA,CAAAA,KAAAA,EARH,IAQGA;AADY,qBAArB8gB;AARY,mBAAA;;AAYdyC,kBAAAA,iBAAAA,GAAoB;AAClBT,oBAAAA,aAAAA,CAAAA,QAAAA,GADkB,IAClBA;AAbY,mBAAA;;AAedU,kBAAAA,MAAAA,GAAS;AACP,0BAAMN,OAAAA,GAAUJ,aAAAA,CADT,OACP;AACA,0BAAMpD,KAAAA,GAAQM,MAAAA,CAFP,MAEP;AACAkD,oBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,CAAAA,QAAAA,GAHO,KAGPA;AACAJ,oBAAAA,aAAAA,CAAAA,MAAAA,CAJO,KAIPA;;AACA,wBAAII,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAwB;AACtB,4BAAMrwC,CAAAA,GAAIsV,KAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAER66B,MAAAA,IAAUA,MAAAA,CAHU,QACZ76B,CAAV;;AAIA,0BAAItV,CAAAA,KAAM,CAAV,CAAA,EAAc;AACZqwC,wBAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,GADY,IACZA;AANoB;AALjB;;AAcPpC,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,sBAAAA,KAAAA,EAAOuY,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBzK,sBAAAA,KAAAA,EAAO4tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBrC;AA7BY,mBAAA;;AAkCdnlB,kBAAAA,KAAAA,GAAQ;AACN,2BAAOmnB,aAAAA,CAAAA,MAAAA,KAAP,CAAA,EAAmC;AACjCA,sBAAAA,aAAAA,CAAAA,MAAAA,CADiC,CACjCA;AAFI;;AAINhC,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,sBAAAA,KAAAA,EAAF,IAAA;AAAe8N,sBAAAA,KAAAA,EAAf;AAAA,qBAArBurB;AAtCY,mBAAA;;AAwCd2C,kBAAAA,MAAAA,GAAS;AACP,0BAAM;AAAA,sBAAA,KAAA;AAAA,sBAAA,YAAA;AAAA,sBAAA;AAAA,wBAAuCzD,MAAAA,CADtC,MACP;AACA,0BAAM+C,aAAAA,GAAgB/yC,QAAAA,CAAAA,aAAAA,CAFf,QAEeA,CAAtB;AACA+yC,oBAAAA,aAAAA,CAAAA,WAAAA,GAHO,YAGPA;AACAA,oBAAAA,aAAAA,CAAAA,KAAAA,GAJO,WAIPA;AACAD,oBAAAA,aAAAA,CAAAA,YAAAA,CAAAA,aAAAA,EAEEA,aAAAA,CAAAA,QAAAA,CAPK,KAOLA,CAFFA;AAIAhC,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,sBAAAA,KAAAA,EAAOuY,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBzK,sBAAAA,KAAAA,EAAO4tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBrC;AAjDY,mBAAA;;AAsDdvrB,kBAAAA,KAAAA,GAAQ;AACN,0BAAM;AAAA,sBAAA;AAAA,wBADA,MACN;;AACA,2BAAOutB,aAAAA,CAAAA,MAAAA,KAAP,CAAA,EAAmC;AACjCA,sBAAAA,aAAAA,CAAAA,MAAAA,CADiC,CACjCA;AAHI;;AAKN,yBAAA,MAAA,IAAA,IAAA,KAAA,EAA0B;AACxB,4BAAM;AAAA,wBAAA,YAAA;AAAA,wBAAA;AAAA,0BADkB,IACxB;AACA,4BAAMC,aAAAA,GAAgB/yC,QAAAA,CAAAA,aAAAA,CAFE,QAEFA,CAAtB;AACA+yC,sBAAAA,aAAAA,CAAAA,WAAAA,GAHwB,YAGxBA;AACAA,sBAAAA,aAAAA,CAAAA,KAAAA,GAJwB,WAIxBA;AACAD,sBAAAA,aAAAA,CAAAA,WAAAA,CALwB,aAKxBA;AAVI;;AAYN,wBAAIA,aAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAsC;AACpCA,sBAAAA,aAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EAAAA,QAAAA,GADoC,IACpCA;AAbI;;AAeNhC,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,sBAAAA,KAAAA,EAAOuY,QAAAA,CAAAA,KAAAA,EADY,IACZA,CADY;AAEnBzK,sBAAAA,KAAAA,EAAO4tB,QAAAA,CAFY,KAEZA;AAFY,qBAArBrC;AArEY,mBAAA;;AA0Ed4C,kBAAAA,OAAAA,GAAU;AACR,0BAAMA,OAAAA,GAAU,IAAA,GAAA,CAAQ1D,MAAAA,CADhB,OACQ,CAAhB;AACA,0BAAMkD,OAAAA,GAAUtsB,KAAAA,CAAAA,MAAAA,CAFR,OAER;AACAzO,oBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAsC,CAAA,MAAA,EAAA,CAAA,KAAe;AACnD66B,sBAAAA,MAAAA,CAAAA,QAAAA,GAAkBU,OAAAA,CAAAA,GAAAA,CADiC,CACjCA,CAAlBV;AADF76B,qBAAAA;AAGA24B,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AACnBr5B,sBAAAA,KAAAA,EAAOuY,QAAAA,CAAAA,KAAAA,EAPD,IAOCA;AADY,qBAArB8gB;AAhFY,mBAAA;;AAoFdU,kBAAAA,KAAAA,GAAQ;AACN7jB,oBAAAA,UAAAA,CAAW,MAAM/G,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAmB;AAAE6qB,sBAAAA,aAAAA,EAAtC9jB;AAAoC,qBAAnB/G,CAAjB+G,EADM,CACNA,CAAAA;AArFY,mBAAA;;AAuFdgkB,kBAAAA,MAAAA,GAAS;AACP/qB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAAgCopB,MAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GADzB,SACPppB;AAGAkqB,oBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEa,sBAAAA,MAAAA,EAAQ3B,MAAAA,CAJxB;AAIc,qBAArBc;AA3FY,mBAAA;;AA6Fdc,kBAAAA,QAAAA,GAAW;AACThrB,oBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,QAAAA,GAAwB,CAACopB,MAAAA,CADhB,QACTppB;AA9FY;;AAAA,iBAAhB;AAiGAnjB,gBAAAA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACUE,IAAAA,IAAQA,IAAAA,IADlBF,OAAAA,EAAAA,OAAAA,CAEWE,IAAAA,IAAQ4tC,OAAAA,CArGwC,IAqGxCA,CAAAA,EAFnB9tC;;AAGA,qBAAA,SAAA,CAtG2D,KAsG3D;AAtGFqvC,eAAAA;AAyGAA,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAwClsB,KAAAA,IAAS;AAAA;;AAC/C,sBAAMysB,WAAAA,GAAcrjB,QAAAA,CAAAA,KAAAA,EAD2B,IAC3BA,CAApB;AACA,sBAAMvY,KAAAA,GAAQuY,QAAAA,CAAAA,KAAAA,EAFiC,KAEjCA,CAAd;AACA8gB,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,kBAAAA,KAAAA,EAHwB;AAG1B,iBAArBq5B;AAEA,+CAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,wBAAA,EAA8D;AAC5Dl0B,kBAAAA,MAAAA,EAD4D,IAAA;AAE5DozB,kBAAAA,MAAAA,EAAQ;AAAA,oBAAA,EAAA;AAENrsC,oBAAAA,IAAAA,EAFM,WAAA;AAAA,oBAAA,KAAA;AAINgwC,oBAAAA,QAAAA,EAJM,WAAA;AAKN1B,oBAAAA,UAAAA,EALM,IAAA;AAMND,oBAAAA,SAAAA,EANM,CAAA;AAON4B,oBAAAA,OAAAA,EAPM;AAAA;AAFoD,iBAA9D;AALFd,eAAAA;;AAmBA,mBAAA,kBAAA,CAAA,aAAA,EAEE,CACE,CAAA,OAAA,EADF,OACE,CADF,EAEE,CAAA,MAAA,EAFF,MAEE,CAFF,EAGE,CAAA,WAAA,EAHF,YAGE,CAHF,EAIE,CAAA,YAAA,EAJF,aAIE,CAJF,EAKE,CAAA,YAAA,EALF,YAKE,CALF,EAME,CAAA,SAAA,EANF,UAME,CANF,EAOE,CAAA,OAAA,EATJ,QASI,CAPF,CAFF,EAWElsB,KAAAA,IAASA,KAAAA,CAAAA,MAAAA,CAxIkC,OA6H7C;AA7HF,aAAA,MA0IO;AACLksB,cAAAA,aAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAwC,UAAA,KAAA,EAAiB;AACvDhC,gBAAAA,OAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAqB;AAAEr5B,kBAAAA,KAAAA,EAAOuY,QAAAA,CADyB,KACzBA;AAAT,iBAArB8gB;AADFgC,eAAAA;AAxMK;;AA6MP,iBAAA,SAAA,CAAA,WAAA,CA7MO,aA6MP;AACA,mBAAO,KA9MA,SA8MP;AAnNgE;;AAAA;;AAuNpE,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDp0C,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EAAE,UAAA,CAAA,IAAA,CAAA,KAAA,IAAyBF,UAAAA,CAAAA,IAAAA,CAD3B,QACA,CAAtB;AACA,kBAAA,UAAA,EAAkB;AAFI,cAAA;AAEJ,aAAlB;AAHmD;;AAMrD9qB,UAAAA,MAAAA,GAAS;AAGP,kBAAM8wB,YAAAA,GAAe,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAArB,KAAqB,CAArB;AASA,iBAAA,SAAA,CAAA,SAAA,GAZO,iBAYP;;AAEA,gBAAIA,YAAAA,CAAAA,QAAAA,CAAsB,KAAA,IAAA,CAA1B,UAAIA,CAAJ,EAAiD;AAC/C,qBAAO,KADwC,SAC/C;AAfK;;AAkBP,kBAAMC,QAAAA,GAAW,wBAAwB,KAAA,IAAA,CAlBlC,QAAA,IAkBP;AACA,kBAAMC,cAAAA,GAAiB,KAAA,KAAA,CAAA,gBAAA,CAnBhB,QAmBgB,CAAvB;;AACA,gBAAIA,cAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAiC;AAC/B,qBAAO,KADwB,SAC/B;AArBK;;AAwBP,kBAAM7E,KAAAA,GAAQ,IAAA,YAAA,CAAiB;AAC7Bf,cAAAA,SAAAA,EAAW,KADkB,SAAA;AAE7BS,cAAAA,OAAAA,EAASz2B,KAAAA,CAAAA,IAAAA,CAFoB,cAEpBA,CAFoB;AAG7BmlB,cAAAA,KAAAA,EAAO,KAAA,IAAA,CAHsB,KAAA;AAI7BwR,cAAAA,KAAAA,EAAO,KAAA,IAAA,CAJsB,KAAA;AAK7BC,cAAAA,gBAAAA,EAAkB,KAAA,IAAA,CALW,gBAAA;AAM7BC,cAAAA,QAAAA,EAAU,KAAA,IAAA,CANmB;AAAA,aAAjB,CAAd;AAWA,kBAAMhmB,IAAAA,GAAO,KAnCN,IAmCP;;AACA,kBAAMlnB,IAAAA,GAAO,KAAA,CAAA,IAAA,CAAA,aAAA,CAAmB,CAC9B,KAAA,IAAA,CAAA,UAAA,CAD8B,CAC9B,CAD8B,EAE9BknB,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe,KAAA,IAAA,CAAA,UAAA,CAAfA,CAAe,CAAfA,GAAyCA,IAAAA,CAAAA,IAAAA,CAFX,CAEWA,CAFX,EAG9B,KAAA,IAAA,CAAA,UAAA,CAH8B,CAG9B,CAH8B,EAI9BA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe,KAAA,IAAA,CAAA,UAAA,CAAfA,CAAe,CAAfA,GAAyCA,IAAAA,CAAAA,IAAAA,CAJ3C,CAI2CA,CAJX,CAAnB,CAAb;;AAMA,kBAAMgrB,SAAAA,GACJlyC,IAAAA,CAAAA,CAAAA,CAAAA,GAAU,KAAA,IAAA,CAAA,UAAA,CAAVA,CAAU,CAAVA,GAAoC,KAAA,IAAA,CAAA,UAAA,CA3C/B,CA2C+B,CADtC;AAEA,kBAAMmyC,QAAAA,GAAWnyC,IAAAA,CA5CV,CA4CUA,CAAjB;AAEA,iBAAA,SAAA,CAAA,KAAA,CAAA,eAAA,GAAuC,GAAG,CAAH,SAAA,MAAmB,CA9CnD,QAAA,IA8CP;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,IAAA,GAA4B,GA/CrB,SAAA,IA+CP;AACA,iBAAA,SAAA,CAAA,KAAA,CAAA,GAAA,GAA2B,GAhDpB,QAAA,IAgDP;AAEA,iBAAA,SAAA,CAAA,WAAA,CAA2BotC,KAAAA,CAlDpB,MAkDoBA,EAA3B;AACA,mBAAO,KAnDA,SAmDP;AAzDmD;;AAAA;;AA6DvD,cAAA,YAAA,CAAmB;AACjBxwC,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,iBAAA,SAAA,GAAiBmvC,UAAAA,CADK,SACtB;AACA,iBAAA,OAAA,GAAeA,UAAAA,CAFO,OAEtB;AACA,iBAAA,KAAA,GAAaA,UAAAA,CAHS,KAGtB;AACA,iBAAA,KAAA,GAAaA,UAAAA,CAJS,KAItB;AACA,iBAAA,gBAAA,GAAwBA,UAAAA,CALF,gBAKtB;AACA,iBAAA,QAAA,GAAgBA,UAAAA,CANM,QAMtB;AACA,iBAAA,WAAA,GAAmBA,UAAAA,CAAAA,WAAAA,IAPG,KAOtB;AAEA,iBAAA,MAAA,GATsB,KAStB;AAVe;;AAajB9qB,UAAAA,MAAAA,GAAS;AACP,kBAAMmxB,kBAAAA,GADC,GACP;AAEA,kBAAMrsB,OAAAA,GAAU7nB,QAAAA,CAAAA,aAAAA,CAHT,KAGSA,CAAhB;AACA6nB,YAAAA,OAAAA,CAAAA,SAAAA,GAJO,cAIPA;AAMA,iBAAA,WAAA,GAAmB,KAAA,WAAA,GAAA,OAAA,GAA6B,KAVzC,SAUP;AACA,iBAAA,WAAA,CAAA,MAAA,GAXO,IAWP;AAEA,kBAAMqnB,KAAAA,GAAQlvC,QAAAA,CAAAA,aAAAA,CAbP,KAaOA,CAAd;AACAkvC,YAAAA,KAAAA,CAAAA,SAAAA,GAdO,OAcPA;AAEA,kBAAM5R,KAAAA,GAAQ,KAhBP,KAgBP;;AACA,gBAAA,KAAA,EAAW;AAET,oBAAMnkB,CAAAA,GAAI+6B,kBAAAA,IAAsB,MAAM5W,KAAAA,CAA5B4W,CAA4B5W,CAA5B4W,CAAAA,GAAwC5W,KAAAA,CAFzC,CAEyCA,CAAlD;AACA,oBAAM6W,CAAAA,GAAID,kBAAAA,IAAsB,MAAM5W,KAAAA,CAA5B4W,CAA4B5W,CAA5B4W,CAAAA,GAAwC5W,KAAAA,CAHzC,CAGyCA,CAAlD;AACA,oBAAM1jB,CAAAA,GAAIs6B,kBAAAA,IAAsB,MAAM5W,KAAAA,CAA5B4W,CAA4B5W,CAA5B4W,CAAAA,GAAwC5W,KAAAA,CAJzC,CAIyCA,CAAlD;AACA4R,cAAAA,KAAAA,CAAAA,KAAAA,CAAAA,eAAAA,GAA8Bj2B,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkBE,CAAAA,GAAlBF,CAAAA,EAAyBk7B,CAAAA,GAAzBl7B,CAAAA,EAAgCW,CAAAA,GALrD,CAKqBX,CAA9Bi2B;AAtBK;;AAyBP,kBAAMJ,KAAAA,GAAQ9uC,QAAAA,CAAAA,aAAAA,CAzBP,IAyBOA,CAAd;AACA8uC,YAAAA,KAAAA,CAAAA,WAAAA,GAAoB,KA1Bb,KA0BPA;AACAI,YAAAA,KAAAA,CAAAA,WAAAA,CA3BO,KA2BPA;;AAKA,kBAAMkF,UAAAA,GAAaC,cAAAA,CAAAA,aAAAA,CAAAA,YAAAA,CAA2B,KAhCvC,gBAgCYA,CAAnB;;AACA,gBAAA,UAAA,EAAgB;AACd,oBAAMtF,gBAAAA,GAAmB/uC,QAAAA,CAAAA,aAAAA,CADX,MACWA,CAAzB;AACA+uC,cAAAA,gBAAAA,CAAAA,WAAAA,GAFc,oBAEdA;AACAA,cAAAA,gBAAAA,CAAAA,OAAAA,CAAAA,MAAAA,GAHc,wBAGdA;AACAA,cAAAA,gBAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAAoC,IAAA,CAAA,SAAA,CAAe;AACjD7zB,gBAAAA,IAAAA,EAAMk5B,UAAAA,CAD2C,kBAC3CA,EAD2C;AAEjD1wC,gBAAAA,IAAAA,EAAM0wC,UAAAA,CAF2C,kBAE3CA;AAF2C,eAAf,CAApCrF;AAIAG,cAAAA,KAAAA,CAAAA,WAAAA,CARc,gBAQdA;AAzCK;;AA4CP,kBAAMF,QAAAA,GAAW,KAAA,eAAA,CAAqB,KA5C/B,QA4CU,CAAjB;;AACAE,YAAAA,KAAAA,CAAAA,WAAAA,CA7CO,QA6CPA;;AAEA,gBAAI,CAAC/2B,KAAAA,CAAAA,OAAAA,CAAc,KAAnB,OAAKA,CAAL,EAAkC;AAChC,mBAAA,OAAA,GAAe,CAAC,KADgB,OACjB,CAAf;AAhDK;;AAoDP,iBAAA,OAAA,CAAA,OAAA,CAAqBk4B,OAAAA,IAAW;AAC9BA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAkC,KAAA,OAAA,CAAA,IAAA,CADJ,IACI,CAAlCA;AACAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAAsC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAFR,KAEQ,CAAtCA;AACAA,cAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,UAAAA,EAAqC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAHP,KAGO,CAArCA;AAHF,aAAA;AAKAnB,YAAAA,KAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAAgC,KAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAzDzB,IAyDyB,CAAhCA;AAEArnB,YAAAA,OAAAA,CAAAA,WAAAA,CA3DO,KA2DPA;AACA,mBA5DO,OA4DP;AAzEe;;AAoFjBysB,UAAAA,eAAAA,CAAAA,QAAAA,EAA0B;AACxB,kBAAM57B,CAAAA,GAAI1Y,QAAAA,CAAAA,aAAAA,CADc,GACdA,CAAV;AACA,kBAAMu0C,KAAAA,GAAQvF,QAAAA,CAAAA,KAAAA,CAFU,cAEVA,CAAd;;AACA,iBAAK,IAAInsC,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK2xC,KAAAA,CAArB,MAAA,EAAmC1xC,CAAAA,GAAnC,EAAA,EAA2C,EAA3C,CAAA,EAAgD;AAC9C,oBAAM2xC,IAAAA,GAAOD,KAAAA,CADiC,CACjCA,CAAb;AACA77B,cAAAA,CAAAA,CAAAA,WAAAA,CAAc1Y,QAAAA,CAAAA,cAAAA,CAFgC,IAEhCA,CAAd0Y;;AACA,kBAAI7V,CAAAA,GAAID,EAAAA,GAAR,CAAA,EAAgB;AACd8V,gBAAAA,CAAAA,CAAAA,WAAAA,CAAc1Y,QAAAA,CAAAA,aAAAA,CADA,IACAA,CAAd0Y;AAJ4C;AAHxB;;AAUxB,mBAVwB,CAUxB;AA9Fe;;AAuGjB+7B,UAAAA,OAAAA,GAAU;AACR,gBAAI,KAAJ,MAAA,EAAiB;AACf,mBAAA,KAAA,CADe,IACf;AADF,aAAA,MAEO;AACL,mBAAA,KAAA,CADK,IACL;AAJM;AAvGO;;AAsHjBC,UAAAA,KAAAA,CAAMC,GAAAA,GAAND,KAAAA,EAAmB;AACjB,gBAAA,GAAA,EAAS;AACP,mBAAA,MAAA,GADO,IACP;AAFe;;AAIjB,gBAAI,KAAA,WAAA,CAAJ,MAAA,EAA6B;AAC3B,mBAAA,WAAA,CAAA,MAAA,GAD2B,KAC3B;AACA,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,IAF2B,CAE3B;AANe;AAtHF;;AAuIjBE,UAAAA,KAAAA,CAAMC,KAAAA,GAAND,IAAAA,EAAoB;AAClB,gBAAA,KAAA,EAAW;AACT,mBAAA,MAAA,GADS,KACT;AAFgB;;AAIlB,gBAAI,CAAC,KAAA,WAAA,CAAD,MAAA,IAA4B,CAAC,KAAjC,MAAA,EAA8C;AAC5C,mBAAA,WAAA,CAAA,MAAA,GAD4C,IAC5C;AACA,mBAAA,SAAA,CAAA,KAAA,CAAA,MAAA,IAF4C,CAE5C;AANgB;AAvIH;;AAAA;;AAkJnB,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxDl2C,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPsD;;AAUxDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,oBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBsD;;AAAA;;AAoB1D,cAAA,qBAAA,SAAA,iBAAA,CAAsD;AACpDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPkD;;AAUpDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,gBACP;AAKA,kBAAMzL,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMvY,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMtY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAM7W,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAIA,kBAAM+zC,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAbN,UAaM,CAAb;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBl9B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAdhC,CAcgCA,CAAvCk9B;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBl9B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAfhC,CAegCA,CAAvCk9B;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBl9B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAhBhC,CAgBgCA,CAAvCk9B;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAAwBl9B,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,eAAAA,CAjBhC,CAiBgCA,CAAvCk9B;AAGAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAkCl9B,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IApB3B,CAoBPk9B;AACAA,YAAAA,IAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EArBO,aAqBPA;AAEA/zC,YAAAA,GAAAA,CAAAA,WAAAA,CAvBO,IAuBPA;AACA,iBAAA,SAAA,CAAA,MAAA,CAxBO,GAwBP;;AAIA,iBAAA,YAAA,CAAA,IAAA,EA5BO,IA4BP;;AAEA,mBAAO,KA9BA,SA8BP;AAxCkD;;AAAA;;AA4CtD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtD/B,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPoD;;AAUtDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,kBACP;AAKA,kBAAMzL,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMvY,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMtY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAM7W,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAKA,kBAAMq0C,WAAAA,GAAcx9B,IAAAA,CAAAA,WAAAA,CAdb,KAcP;AACA,kBAAMy9B,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAfR,UAeQ,CAAf;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAyBD,WAAAA,GAhBlB,CAgBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAyBD,WAAAA,GAjBlB,CAiBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA6Bh2C,KAAAA,GAlBtB,WAkBPg2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAA8B/1C,MAAAA,GAnBvB,WAmBP+1C;AAGAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAoCD,WAAAA,IAtB7B,CAsBPC;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAvBO,aAuBPA;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAxBO,MAwBPA;AAEAt0C,YAAAA,GAAAA,CAAAA,WAAAA,CA1BO,MA0BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CA3BO,GA2BP;;AAIA,iBAAA,YAAA,CAAA,MAAA,EA/BO,IA+BP;;AAEA,mBAAO,KAjCA,SAiCP;AA3CoD;;AAAA;;AA+CxD,cAAA,uBAAA,SAAA,iBAAA,CAAwD;AACtD/B,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPoD;;AAUtDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,kBACP;AAKA,kBAAMzL,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMvY,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMtY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAM7W,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAKA,kBAAMq0C,WAAAA,GAAcx9B,IAAAA,CAAAA,WAAAA,CAdb,KAcP;AACA,kBAAM09B,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAfR,aAeQ,CAAf;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bj2C,KAAAA,GAhBnB,CAgBPi2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bh2C,MAAAA,GAjBnB,CAiBPg2C;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bj2C,KAAAA,GAAAA,CAAAA,GAAY+1C,WAAAA,GAlB/B,CAkBPE;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,IAAAA,EAA0Bh2C,MAAAA,GAAAA,CAAAA,GAAa81C,WAAAA,GAnBhC,CAmBPE;AAGAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAoCF,WAAAA,IAtB7B,CAsBPE;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAvBO,aAuBPA;AACAA,YAAAA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAxBO,MAwBPA;AAEAv0C,YAAAA,GAAAA,CAAAA,WAAAA,CA1BO,MA0BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CA3BO,GA2BP;;AAIA,iBAAA,YAAA,CAAA,MAAA,EA/BO,IA+BP;;AAEA,mBAAO,KAjCA,SAiCP;AA3CoD;;AAAA;;AA+CxD,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxD/B,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAEA,iBAAA,kBAAA,GARsB,oBAQtB;AACA,iBAAA,cAAA,GATsB,cAStB;AAVsD;;AAaxDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GAA2B,KADpB,kBACP;AAKA,kBAAMzL,IAAAA,GAAO,KANN,IAMP;AACA,kBAAMvY,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPtB,CAOsBA,CAA7B;AACA,kBAAMtY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CARvB,CAQuBA,CAA9B;AACA,kBAAM7W,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EATL,MASK,CAAZ;AAMA,gBAAIwxB,MAAAA,GAfG,EAeP;;AACA,iBAAA,MAAA,UAAA,IAAyB3a,IAAAA,CAAzB,QAAA,EAAwC;AACtC,oBAAM+hB,CAAAA,GAAI4b,UAAAA,CAAAA,CAAAA,GAAe39B,IAAAA,CAAAA,IAAAA,CADa,CACbA,CAAzB;AACA,oBAAM2e,CAAAA,GAAI3e,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe29B,UAAAA,CAFa,CAEtC;AACAhjB,cAAAA,MAAAA,CAAAA,IAAAA,CAAYoH,CAAAA,GAAAA,GAAAA,GAH0B,CAGtCpH;AAnBK;;AAqBPA,YAAAA,MAAAA,GAASA,MAAAA,CAAAA,IAAAA,CArBF,GAqBEA,CAATA;AAEA,kBAAMijB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAA8B,KAvBxC,cAuBU,CAAjB;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAxBO,MAwBPA;AAGAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAsC59B,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IA3B/B,CA2BP49B;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EA5BO,aA4BPA;AACAA,YAAAA,QAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EA7BO,MA6BPA;AAEAz0C,YAAAA,GAAAA,CAAAA,WAAAA,CA/BO,QA+BPA;AACA,iBAAA,SAAA,CAAA,MAAA,CAhCO,GAgCP;;AAIA,iBAAA,YAAA,CAAA,QAAA,EApCO,IAoCP;;AAEA,mBAAO,KAtCA,SAsCP;AAnDsD;;AAAA;;AAuD1D,cAAA,wBAAA,SAAA,yBAAA,CAAiE;AAC/D/B,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AAEtB,kBAFsB,UAEtB;AAEA,iBAAA,kBAAA,GAJsB,mBAItB;AACA,iBAAA,cAAA,GALsB,aAKtB;AAN6D;;AAAA;;AAUjE,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDA,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPmD;;AAUrDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,iBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBmD;;AAAA;;AAoBvD,cAAA,oBAAA,SAAA,iBAAA,CAAqD;AACnDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAEA,iBAAA,kBAAA,GARsB,eAQtB;AAIA,iBAAA,cAAA,GAZsB,cAYtB;AAbiD;;AAgBnDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GAA2B,KADpB,kBACP;AAIA,kBAAMzL,IAAAA,GAAO,KALN,IAKP;AACA,kBAAMvY,KAAAA,GAAQuY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CANtB,CAMsBA,CAA7B;AACA,kBAAMtY,MAAAA,GAASsY,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAeA,IAAAA,CAAAA,IAAAA,CAPvB,CAOuBA,CAA9B;AACA,kBAAM7W,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAA,KAAA,EARL,MAQK,CAAZ;;AAEA,iBAAA,MAAA,OAAA,IAAsB6W,IAAAA,CAAtB,QAAA,EAAqC;AAKnC,kBAAI2a,MAAAA,GAL+B,EAKnC;;AACA,mBAAA,MAAA,UAAA,IAAA,OAAA,EAAkC;AAChC,sBAAMoH,CAAAA,GAAI4b,UAAAA,CAAAA,CAAAA,GAAe39B,IAAAA,CAAAA,IAAAA,CADO,CACPA,CAAzB;AACA,sBAAM2e,CAAAA,GAAI3e,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAe29B,UAAAA,CAFO,CAEhC;AACAhjB,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY,GAAA,CAAA,IAHoB,CAAA,EAGhCA;AATiC;;AAWnCA,cAAAA,MAAAA,GAASA,MAAAA,CAAAA,IAAAA,CAX0B,GAW1BA,CAATA;AAEA,oBAAMijB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAA8B,KAbZ,cAalB,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAdmC,MAcnCA;AAGAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,cAAAA,EAAsC59B,IAAAA,CAAAA,WAAAA,CAAAA,KAAAA,IAjBH,CAiBnC49B;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAlBmC,aAkBnCA;AACAA,cAAAA,QAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAnBmC,MAmBnCA;;AAIA,mBAAA,YAAA,CAAA,QAAA,EAvBmC,IAuBnC;;AAEAz0C,cAAAA,GAAAA,CAAAA,WAAAA,CAzBmC,QAyBnCA;AAnCK;;AAsCP,iBAAA,SAAA,CAAA,MAAA,CAtCO,GAsCP;AACA,mBAAO,KAvCA,SAuCP;AAvDiD;;AAAA;;AA2DrD,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzD/B,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDlrB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDlrB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,yBAAA,SAAA,iBAAA,CAA0D;AACxDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPsD;;AAcxDlrB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,oBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,oBASP;AACA,mBAAO,KAVA,SAUP;AAxBsD;;AAAA;;AA4B1D,cAAA,0BAAA,SAAA,iBAAA,CAA2D;AACzDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAEhBG,cAAAA,YAAAA,EAFgB,IAAA;AAGhBC,cAAAA,oBAAAA,EAHgB;AAAA,aAAlB;AAPuD;;AAczDlrB,UAAAA,MAAAA,GAAS;AACP,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAFK;;AAKP,gBAAI,KAAJ,cAAA,EAAyB;AACvB,qBAAO,KAAA,qBAAA,CADgB,qBAChB,CAAP;AANK;;AASP,iBAAA,SAAA,CAAA,SAAA,GATO,qBASP;AACA,mBAAO,KAVA,SAUP;AAxBuD;;AAAA;;AA4B3D,cAAA,sBAAA,SAAA,iBAAA,CAAuD;AACrDrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AACtB,kBAAMqvC,YAAAA,GAAe,CAAC,EACpB,UAAA,CAAA,IAAA,CAAA,QAAA,IACAF,UAAAA,CAAAA,IAAAA,CADA,KAAA,IAEAA,UAAAA,CAAAA,IAAAA,CAJoB,QACA,CAAtB;AAKA,kBAAA,UAAA,EAAkB;AAAA,cAAA,YAAA;AAAgBG,cAAAA,YAAAA,EAAhB;AAAA,aAAlB;AAPmD;;AAUrDjrB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,iBACP;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAL,QAAA,EAAyB;AACvB,mBAAA,YAAA,CAAA,IAAA,EAAwB,KADD,IACvB;AAJK;;AAMP,mBAAO,KANA,SAMP;AAhBmD;;AAAA;;AAoBvD,cAAA,+BAAA,SAAA,iBAAA,CAAgE;AAC9DrkB,UAAAA,WAAAA,CAAAA,UAAAA,EAAwB;AAAA;;AACtB,kBAAA,UAAA,EAAkB;AAAEqvC,cAAAA,YAAAA,EADE;AACJ,aAAlB;AAEA,kBAAM;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,gBAAwB,KAAA,IAAA,CAHR,IAGtB;AACA,iBAAA,QAAA,GAAgBoH,CAAAA,GAAAA,cAAAA,CAAAA,kBAAAA,EAJM,QAINA,CAAhB;AACA,iBAAA,OAAA,GALsB,OAKtB;AAEA,2CAAA,WAAA,CAAA,QAAA,kFAAA,QAAA,CAAA,0BAAA,EAAgE;AAC9Dv4B,cAAAA,MAAAA,EAD8D,IAAA;AAE9D+L,cAAAA,EAAAA,EAAIysB,CAAAA,GAAAA,KAAAA,CAAAA,iBAAAA,EAF0D,QAE1DA,CAF0D;AAAA,cAAA,QAAA;AAAA,cAAA;AAAA,aAAhE;AAR4D;;AAgB9DryB,UAAAA,MAAAA,GAAS;AACP,iBAAA,SAAA,CAAA,SAAA,GADO,0BACP;AAEA,kBAAM6rB,OAAAA,GAAU5uC,QAAAA,CAAAA,aAAAA,CAHT,KAGSA,CAAhB;AACA4uC,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,MAAAA,GAAuB,KAAA,SAAA,CAAA,KAAA,CAJhB,MAIPA;AACAA,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,GAAsB,KAAA,SAAA,CAAA,KAAA,CALf,KAKPA;AACAA,YAAAA,OAAAA,CAAAA,gBAAAA,CAAAA,UAAAA,EAAqC,KAAA,SAAA,CAAA,IAAA,CAN9B,IAM8B,CAArCA;;AAEA,gBAAI,CAAC,KAAA,IAAA,CAAD,QAAA,KAAwB,KAAA,IAAA,CAAA,KAAA,IAAmB,KAAA,IAAA,CAA/C,QAAI,CAAJ,EAAoE;AAClE,mBAAA,YAAA,CAAA,OAAA,EAA2B,KADuC,IAClE;AATK;;AAYP,iBAAA,SAAA,CAAA,WAAA,CAZO,OAYP;AACA,mBAAO,KAbA,SAaP;AA7B4D;;AAsC9DyG,UAAAA,SAAAA,GAAY;AAAA;;AACV,0CAAA,eAAA,gFAAA,kBAAA,CACE,KADF,SAAA,EAEE,KAFF,OAAA,EAGE,KAJQ,QACV;AAvC4D;;AAAA;;AA+DhE,cAAA,eAAA,CAAsB;AAQpB,iBAAOtyB,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMuyB,iBAAAA,GAAN,EAAA;AAAA,kBACEC,gBAAAA,GAFsB,EACxB;;AAKA,iBAAA,MAAA,IAAA,IAAmB1H,UAAAA,CAAnB,WAAA,EAA2C;AACzC,kBAAI,CAAJ,IAAA,EAAW;AAAA;AAD8B;;AAIzC,kBAAIv2B,IAAAA,CAAAA,cAAAA,KAAwBtQ,KAAAA,CAAAA,cAAAA,CAA5B,KAAA,EAAkD;AAChDuuC,gBAAAA,gBAAAA,CAAAA,IAAAA,CADgD,IAChDA;AADgD;AAJT;;AAQzCD,cAAAA,iBAAAA,CAAAA,IAAAA,CARyC,IAQzCA;AAdsB;;AAgBxB,gBAAIC,gBAAAA,CAAJ,MAAA,EAA6B;AAC3BD,cAAAA,iBAAAA,CAAAA,IAAAA,CAAuB,GADI,gBAC3BA;AAjBsB;;AAoBxB,iBAAA,MAAA,IAAA,IAAA,iBAAA,EAAsC;AACpC,oBAAMjF,OAAAA,GAAU,wBAAA,CAAA,MAAA,CAAgC;AAAA,gBAAA,IAAA;AAE9CvZ,gBAAAA,KAAAA,EAAO+W,UAAAA,CAFuC,GAAA;AAG9C7kB,gBAAAA,IAAAA,EAAM6kB,UAAAA,CAHwC,IAAA;AAI9CtW,gBAAAA,QAAAA,EAAUsW,UAAAA,CAJoC,QAAA;AAK9C0B,gBAAAA,WAAAA,EAAa1B,UAAAA,CALiC,WAAA;AAM9C2H,gBAAAA,eAAAA,EAAiB3H,UAAAA,CAN6B,eAAA;AAO9C4H,gBAAAA,kBAAAA,EAAoB5H,UAAAA,CAAAA,kBAAAA,IAP0B,EAAA;AAQ9C5qB,gBAAAA,sBAAAA,EAAwB4qB,UAAAA,CAAAA,sBAAAA,KARsB,KAAA;AAS9C6H,gBAAAA,UAAAA,EAAY,IATkC,cAAA,CAAA,aASlC,EATkC;AAU9Cr1B,gBAAAA,iBAAAA,EACEwtB,UAAAA,CAAAA,iBAAAA,IAAgC,IAXY,mBAAA,CAAA,iBAWZ,EAXY;AAY9C8H,gBAAAA,eAAAA,EAAiB9H,UAAAA,CAZ6B,eAAA;AAa9C1rB,gBAAAA,YAAAA,EAAc0rB,UAAAA,CAbgC,YAAA;AAc9C+H,gBAAAA,UAAAA,EAAY/H,UAAAA,CAAAA,UAAAA,IAAyB;AAAEgI,kBAAAA,MAAAA,EAdO;AAcT;AAdS,eAAhC,CAAhB;;AAgBA,kBAAIxF,OAAAA,CAAJ,YAAA,EAA0B;AACxB,sBAAMyF,QAAAA,GAAWzF,OAAAA,CADO,MACPA,EAAjB;;AACA,oBAAI/4B,IAAAA,CAAJ,MAAA,EAAiB;AACfw+B,kBAAAA,QAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GADe,QACfA;AAHsB;;AAKxB,oBAAI39B,KAAAA,CAAAA,OAAAA,CAAJ,QAAIA,CAAJ,EAA6B;AAC3B,uBAAA,MAAA,eAAA,IAAA,QAAA,EAAwC;AACtC01B,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,WAAAA,CADsC,eACtCA;AAFyB;AAA7B,iBAAA,MAIO;AACL,sBAAIwC,OAAAA,YAAJ,sBAAA,EAA+C;AAG7CxC,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,OAAAA,CAH6C,QAG7CA;AAHF,mBAAA,MAIO;AACLA,oBAAAA,UAAAA,CAAAA,GAAAA,CAAAA,WAAAA,CADK,QACLA;AANG;AATiB;AAjBU;AApBd;AARN;;AA0EpB,iBAAOkI,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMvmC,SAAAA,GAAY,UAAUq+B,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CADJ,GACIA,CADJ,GACxB;;AACA,iBAAA,MAAA,IAAA,IAAmBA,UAAAA,CAAnB,WAAA,EAA2C;AACzC,oBAAMmI,QAAAA,GAAWnI,UAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,CACf,wBAAwBv2B,IAAAA,CAFe,EAAA,IACxBu2B,CAAjB;;AAGA,kBAAA,QAAA,EAAc;AACZmI,gBAAAA,QAAAA,CAAAA,OAAAA,CAAiB3F,OAAAA,IAAW;AAC1BA,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAD0B,SAC1BA;AADF2F,iBAAAA;AALuC;AAFnB;;AAYxBnI,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAZwB,KAYxBA;AAtFkB;;AAAA;;;;;;;;;;;;;;ACh8DtB,iBAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,iBAAOtsC,IAAAA,CAAAA,KAAAA,CAAWA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAYA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAZA,CAAYA,CAAZA,IAAXA,GAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EADiB,GACjBA,CAAP;AAvBF;;AA6BA,cAAA,eAAA,CAAsB;AACpB,iBAAO00C,MAAP,CAAc,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAd,CAAc,CAAd,EAA4B;AAC1B,mBAAO,CAAA,GAAA,EAAM,IAAI10C,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAY,MAAA,CAAA,GAAU,OAAV,CAAA,GAAqB,OAArB,CAAA,GAA7B,CAAiBA,CAAV,CAAP;AAFkB;;AAKpB,iBAAO20C,MAAP,CAAc,CAAd,CAAc,CAAd,EAAmB;AACjB,mBAAO,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAkB,IAAzB,CAAO,CAAP;AANkB;;AASpB,iBAAOC,KAAP,CAAa,CAAb,CAAa,CAAb,EAAkB;AAChB,mBAAO,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AAVkB;;AAapB,iBAAOC,MAAP,CAAc,CAAd,CAAc,CAAd,EAAmB;AACjB,kBAAMC,CAAAA,GAAIC,aAAAA,CADO,CACPA,CAAV;AACA,mBAAO,IAAA,CAAA,GAAA,CAAA,GAFU,CAAA,EAEjB;AAfkB;;AAkBpB,iBAAOC,KAAP,CAAa,CAAA,CAAA,EAAA,CAAA,EAAb,CAAa,CAAb,EAAwB;AACtB,mBAAO,CAAA,GAAA,EAAM,MAAA,CAAA,GAAU,OAAV,CAAA,GAAqB,OAAlC,CAAO,CAAP;AAnBkB;;AAsBpB,iBAAOC,QAAP,CAAgB,CAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAhB,EAA2B;AACzB,kBAAMC,CAAAA,GAAIH,aAAAA,CADe,CACfA,CAAV;AACA,kBAAMD,CAAAA,GAAIC,aAAAA,CAFe,CAEfA,CAAV;AACA,kBAAMI,CAAAA,GAAIJ,aAAAA,CAHe,CAGfA,CAAV;AACA,mBAAO,IAAA,CAAA,GAAA,CAAA,GAJkB,CAAA,EAIzB;AA1BkB;;AA6BpB,iBAAOK,MAAP,GAAgB;AACd,mBADc,WACd;AA9BkB;;AAiCpB,iBAAOC,QAAP,CAAgB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAhB,EAA8B;AAC5B,mBAAO,CAAA,KAAA,EAEL,IAAIr1C,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAYsY,CAAAA,GAFX,CAEDtY,CAFC,EAGL,IAAIA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAYoX,CAAAA,GAHX,CAGDpX,CAHC,EAIL,IAAIA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAY00B,CAAAA,GAJlB,CAIM10B,CAJC,CAAP;AAlCkB;;AA0CpB,iBAAOs1C,SAAP,CAAA,UAAA,EAA6B;AAC3B,mBAAO,KAAA,QAAA,CAAc,KAAA,QAAA,CADM,UACN,CAAd,CAAP;AA3CkB;;AA8CpB,iBAAOC,QAAP,CAAgB,CAAA,CAAA,EAAA,CAAA,EAAhB,CAAgB,CAAhB,EAA2B;AACzB,kBAAMj9B,CAAAA,GAAI,IADe,CACzB;AACA,kBAAMlB,CAAAA,GAAI,IAFe,CAEzB;AACA,kBAAMsd,CAAAA,GAAI,IAHe,CAGzB;AACA,kBAAM/C,CAAAA,GAAI3xB,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAJe,CAIfA,CAAV;AACA,mBAAO,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AAnDkB;;AAAA;;;;;;;;;;;;;;ACdtB,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAuCA,cAAMw1C,eAAAA,GAAmB,SAAA,sBAAA,GAAkC;AACzD,gBAAMC,uBAAAA,GADmD,MACzD;AACA,gBAAMC,iBAAAA,GAFmD,EAEzD;AACA,gBAAMC,mBAAAA,GAHmD,GAGzD;AACA,gBAAMC,WAAAA,GAAc,IAJqC,GAIrC,EAApB;AAEA,gBAAMC,mBAAAA,GANmD,IAMzD;;AAEA,mBAAA,eAAA,CAAA,GAAA,EAA8B;AAC5B,mBAAO,CAACA,mBAAAA,CAAAA,IAAAA,CADoB,GACpBA,CAAR;AATuD;;AAYzD,mBAAA,SAAA,CAAA,UAAA,EAAA,GAAA,EAAoC;AAClC,kBAAMC,YAAAA,GAAeF,WAAAA,CAAAA,GAAAA,CADa,UACbA,CAArB;;AACA,gBAAA,YAAA,EAAkB;AAChB,qBADgB,YAChB;AAHgC;;AAMlChpB,YAAAA,GAAAA,CANkC,IAMlCA;AACAA,YAAAA,GAAAA,CAAAA,IAAAA,GAAW,GAAA,iBAAA,MAPuB,UAAA,EAOlCA;AACA,kBAAMmpB,OAAAA,GAAUnpB,GAAAA,CAAAA,WAAAA,CARkB,EAQlBA,CAAhB;AAGA,gBAAIopB,MAAAA,GAASD,OAAAA,CAXqB,qBAWlC;AACA,gBAAIE,OAAAA,GAAUj2C,IAAAA,CAAAA,GAAAA,CAAS+1C,OAAAA,CAZW,sBAYpB/1C,CAAd;;AACA,gBAAA,MAAA,EAAY;AACV4sB,cAAAA,GAAAA,CADU,OACVA;AACA,oBAAMspB,KAAAA,GAAQF,MAAAA,IAAU,MAAA,GAFd,OAEIA,CAAd;AACAJ,cAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAHU,KAGVA;AACA,qBAJU,KAIV;AAjBgC;;AAwBlChpB,YAAAA,GAAAA,CAAAA,WAAAA,GAxBkC,KAwBlCA;AACAA,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAzBkC,iBAyBlCA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EA1BkC,CA0BlCA;AACA,gBAAIupB,MAAAA,GAASvpB,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAAAA,iBAAAA,EA3BqB,IA2BlC;AAEAqpB,YAAAA,OAAAA,GA7BkC,CA6BlCA;;AACA,iBAAK,IAAI30C,CAAAA,GAAI60C,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GAAb,CAAA,EAAoC70C,CAAAA,IAApC,CAAA,EAA4CA,CAAAA,IAA5C,CAAA,EAAoD;AAClD,kBAAI60C,MAAAA,CAAAA,CAAAA,CAAAA,GAAJ,CAAA,EAAmB;AACjBF,gBAAAA,OAAAA,GAAUj2C,IAAAA,CAAAA,IAAAA,CAAUsB,CAAAA,GAAAA,CAAAA,GADH,iBACPtB,CAAVi2C;AADiB;AAD+B;AA9BlB;;AAwClCrpB,YAAAA,GAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAxCkC,iBAwClCA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAzCkC,iBAyClCA;AACAupB,YAAAA,MAAAA,GAASvpB,GAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,iBAAAA,EAAAA,iBAAAA,EA1CyB,IA0ClCupB;AACAH,YAAAA,MAAAA,GA3CkC,CA2ClCA;;AACA,iBAAK,IAAI10C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK80C,MAAAA,CAArB,MAAA,EAAoC70C,CAAAA,GAApC,EAAA,EAA4CA,CAAAA,IAA5C,CAAA,EAAoD;AAClD,kBAAI60C,MAAAA,CAAAA,CAAAA,CAAAA,GAAJ,CAAA,EAAmB;AACjBH,gBAAAA,MAAAA,GAASN,iBAAAA,GAAoB11C,IAAAA,CAAAA,KAAAA,CAAWsB,CAAAA,GAAAA,CAAAA,GADvB,iBACYtB,CAA7Bg2C;AADiB;AAD+B;AA5ClB;;AAmDlCppB,YAAAA,GAAAA,CAnDkC,OAmDlCA;;AAEA,gBAAA,MAAA,EAAY;AACV,oBAAMspB,KAAAA,GAAQF,MAAAA,IAAU,MAAA,GADd,OACIA,CAAd;AACAJ,cAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAFU,KAEVA;AACA,qBAHU,KAGV;AAxDgC;;AA2DlCA,YAAAA,WAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EA3DkC,mBA2DlCA;AACA,mBA5DkC,mBA4DlC;AAxEuD;;AA2EzD,mBAAA,UAAA,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAA6C;AAE3C,kBAAMQ,OAAAA,GAAU33C,QAAAA,CAAAA,aAAAA,CAF2B,MAE3BA,CAAhB;AACA,kBAAM43C,iBAAAA,GAAoB;AACxBC,cAAAA,KAAAA,EADwB,CAAA;AAExBC,cAAAA,WAAAA,EAFwB,CAAA;AAGxBC,cAAAA,YAAAA,EAHwB,KAAA;AAIxBC,cAAAA,iBAAAA,EAJwB,IAAA;AAKxBC,cAAAA,aAAAA,EALwB,CAAA;AAMxBC,cAAAA,WAAAA,EANwB,CAAA;AAOxBC,cAAAA,YAAAA,EAPwB,CAAA;AAQxBC,cAAAA,UAAAA,EARwB,CAAA;AASxB12C,cAAAA,KAAAA,EATwB;AAAA,aAA1B;;AAYAgb,YAAAA,IAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAf2C,OAe3CA;;AACA,gBAAI27B,eAAAA,CAAgBC,IAAAA,CAApB,GAAID,CAAJ,EAA+B;AAC7BT,cAAAA,iBAAAA,CAAAA,YAAAA,GAD6B,IAC7BA;;AACAl7B,cAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAF6B,iBAE7BA;;AAF6B;AAhBY;;AAsB3C,kBAAM67B,EAAAA,GAAKt/B,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAeyD,IAAAA,CAAAA,SAAAA,CAAfzD,SAAAA,EAAyCq/B,IAAAA,CAtBT,SAsBhCr/B,CAAX;;AACA,gBAAI4+B,KAAAA,GAAQt2C,IAAAA,CAAAA,KAAAA,CAAWg3C,EAAAA,CAAXh3C,CAAWg3C,CAAXh3C,EAAkBg3C,EAAAA,CAvBa,CAuBbA,CAAlBh3C,CAAZ;AACA,kBAAMsvC,KAAAA,GAAQrrB,MAAAA,CAAO8yB,IAAAA,CAxBsB,QAwB7B9yB,CAAd;;AACA,gBAAIqrB,KAAAA,CAAJ,QAAA,EAAoB;AAClBgH,cAAAA,KAAAA,IAASt2C,IAAAA,CAAAA,EAAAA,GADS,CAClBs2C;AA1ByC;;AA4B3C,kBAAMW,UAAAA,GAAaj3C,IAAAA,CAAAA,KAAAA,CAAWg3C,EAAAA,CAAXh3C,CAAWg3C,CAAXh3C,EAAkBg3C,EAAAA,CA5BM,CA4BNA,CAAlBh3C,CAAnB;AACA,kBAAMk3C,UAAAA,GAAaD,UAAAA,GAAaE,SAAAA,CAAU7H,KAAAA,CAAV6H,UAAAA,EA7BW,GA6BXA,CAAhC;AAEA,gBAAA,IAAA,EA/B2C,GA+B3C;;AACA,gBAAIb,KAAAA,KAAJ,CAAA,EAAiB;AACfzX,cAAAA,IAAAA,GAAOmY,EAAAA,CADQ,CACRA,CAAPnY;AACAC,cAAAA,GAAAA,GAAMkY,EAAAA,CAAAA,CAAAA,CAAAA,GAFS,UAEflY;AAFF,aAAA,MAGO;AACLD,cAAAA,IAAAA,GAAOmY,EAAAA,CAAAA,CAAAA,CAAAA,GAAQE,UAAAA,GAAal3C,IAAAA,CAAAA,GAAAA,CADvB,KACuBA,CAA5B6+B;AACAC,cAAAA,GAAAA,GAAMkY,EAAAA,CAAAA,CAAAA,CAAAA,GAAQE,UAAAA,GAAal3C,IAAAA,CAAAA,GAAAA,CAFtB,KAEsBA,CAA3B8+B;AArCyC;;AAyC3CsX,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,IAAAA,GAAqB,GAzCsB,IAAA,IAyC3CA;AACAA,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,GAAAA,GAAoB,GA1CuB,GAAA,IA0C3CA;AACAA,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,QAAAA,GAAyB,GA3CkB,UAAA,IA2C3CA;AACAA,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,UAAAA,GAA2B9G,KAAAA,CA5CgB,UA4C3C8G;AAEAA,YAAAA,OAAAA,CAAAA,WAAAA,GAAsBW,IAAAA,CA9CqB,GA8C3CX;AAEAA,YAAAA,OAAAA,CAAAA,GAAAA,GAAcW,IAAAA,CAhD6B,GAgD3CX;;AAIA,gBAAIj7B,IAAAA,CAAJ,qBAAA,EAAgC;AAC9Bi7B,cAAAA,OAAAA,CAAAA,OAAAA,CAAAA,QAAAA,GAA2BW,IAAAA,CADG,QAC9BX;AArDyC;;AAuD3C,gBAAIE,KAAAA,KAAJ,CAAA,EAAiB;AACfD,cAAAA,iBAAAA,CAAAA,KAAAA,GAA0BC,KAAAA,IAAS,MAAMt2C,IAAAA,CAD1B,EACWs2C,CAA1BD;AAxDyC;;AA6D3C,gBAAIe,eAAAA,GA7DuC,KA6D3C;;AACA,gBAAIL,IAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAAyB;AACvBK,cAAAA,eAAAA,GADuB,IACvBA;AADF,aAAA,MAEO,IAAIL,IAAAA,CAAAA,SAAAA,CAAAA,CAAAA,MAAsBA,IAAAA,CAAAA,SAAAA,CAA1B,CAA0BA,CAA1B,EAA6C;AAClD,oBAAMM,SAAAA,GAAYr3C,IAAAA,CAAAA,GAAAA,CAAS+2C,IAAAA,CAAAA,SAAAA,CAA3B,CAA2BA,CAAT/2C,CAAlB;AAAA,oBACEs3C,SAAAA,GAAYt3C,IAAAA,CAAAA,GAAAA,CAAS+2C,IAAAA,CAAAA,SAAAA,CAF2B,CAE3BA,CAAT/2C,CADd;;AAIA,kBACEq3C,SAAAA,KAAAA,SAAAA,IACAr3C,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAAA,SAAAA,IAAiCA,IAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAjCA,SAAiCA,CAAjCA,GAFF,GAAA,EAGE;AACAo3C,gBAAAA,eAAAA,GADA,IACAA;AATgD;AAhET;;AA4E3C,gBAAA,eAAA,EAAqB;AACnB,kBAAI9H,KAAAA,CAAJ,QAAA,EAAoB;AAClB+G,gBAAAA,iBAAAA,CAAAA,WAAAA,GAAgCU,IAAAA,CAAAA,MAAAA,GAAc57B,IAAAA,CAAAA,SAAAA,CAD5B,KAClBk7B;AADF,eAAA,MAEO;AACLA,gBAAAA,iBAAAA,CAAAA,WAAAA,GAAgCU,IAAAA,CAAAA,KAAAA,GAAa57B,IAAAA,CAAAA,SAAAA,CADxC,KACLk7B;AAJiB;AA5EsB;;AAmF3Cl7B,YAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAnF2C,iBAmF3CA;;AACA,gBAAIA,IAAAA,CAAJ,kBAAA,EAA6B;AAC3BA,cAAAA,IAAAA,CAAAA,WAAAA,CAD2B,OAC3BA;AArFyC;;AAwF3C,gBAAIA,IAAAA,CAAJ,qBAAA,EAAgC;AAC9B,kBAAIo8B,QAAAA,GAAJ,CAAA;AAAA,kBACEC,QAAAA,GAF4B,CAC9B;;AAEA,kBAAIlB,KAAAA,KAAJ,CAAA,EAAiB;AACfiB,gBAAAA,QAAAA,GAAWv3C,IAAAA,CAAAA,GAAAA,CADI,KACJA,CAAXu3C;AACAC,gBAAAA,QAAAA,GAAWx3C,IAAAA,CAAAA,GAAAA,CAFI,KAEJA,CAAXw3C;AAL4B;;AAO9B,oBAAMC,QAAAA,GACH,CAAA,KAAA,CAAA,QAAA,GAAiBV,IAAAA,CAAjB,MAAA,GAA+BA,IAAAA,CAAhC,KAAC,IAA6C57B,IAAAA,CAAAA,SAAAA,CARlB,KAO9B;AAEA,oBAAMu8B,SAAAA,GATwB,UAS9B;AAEA,kBAAA,CAAA,EAX8B,CAW9B;;AACA,kBAAIpB,KAAAA,KAAJ,CAAA,EAAiB;AACfl/B,gBAAAA,CAAAA,GAAI,CAAA,QAAA,EAAA,QAAA,EAAqB,CAArB,QAAA,EAAA,QAAA,EAAA,IAAA,EAAJA,GAAI,CAAJA;AACAiB,gBAAAA,CAAAA,GAAI,KAAA,CAAA,IAAA,CAAA,0BAAA,CAAgC,CAAA,CAAA,EAAA,CAAA,EAAA,QAAA,EAAhC,SAAgC,CAAhC,EAFW,CAEX,CAAJA;AAFF,eAAA,MAGO;AACLA,gBAAAA,CAAAA,GAAI,CAAA,IAAA,EAAA,GAAA,EAAYwmB,IAAAA,GAAZ,QAAA,EAA6BC,GAAAA,GAAjCzmB,SAAI,CAAJA;AAhB4B;;AAmB9B8C,cAAAA,IAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAkB;AAChB0jB,gBAAAA,IAAAA,EAAMxmB,CAAAA,CADU,CACVA,CADU;AAEhBymB,gBAAAA,GAAAA,EAAKzmB,CAAAA,CAFW,CAEXA,CAFW;AAGhBs/B,gBAAAA,KAAAA,EAAOt/B,CAAAA,CAHS,CAGTA,CAHS;AAIhBu/B,gBAAAA,MAAAA,EAAQv/B,CAAAA,CAJQ,CAIRA,CAJQ;AAKhBqV,gBAAAA,GAAAA,EALgB,OAAA;AAMhBhK,gBAAAA,IAAAA,EAAM,CAAA,QAAA,EANU,SAMV,CANU;AAAA,gBAAA;AAAA,eAAlBvI;AA3GyC;AA3EY;;AAkMzD,mBAAA,MAAA,CAAA,IAAA,EAAsB;AACpB,gBAAIA,IAAAA,CAAJ,SAAA,EAAoB;AAAA;AADA;;AAIpB,kBAAM08B,QAAAA,GAAW18B,IAAAA,CAJG,SAIpB;AACA,kBAAMtB,UAAAA,GAAasB,IAAAA,CALC,WAKpB;AACA,kBAAM28B,cAAAA,GAAiBD,QAAAA,CANH,MAMpB;;AAIA,gBAAIC,cAAAA,GAAJ,uBAAA,EAA8C;AAC5C38B,cAAAA,IAAAA,CAAAA,cAAAA,GAD4C,IAC5CA;AACAtB,cAAAA,UAAAA,CAF4C,OAE5CA;AAF4C;AAV1B;;AAgBpB,gBAAI,CAACsB,IAAAA,CAAL,kBAAA,EAA8B;AAC5B,mBAAK,IAAI7Z,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,cAAA,EAAoCA,CAApC,EAAA,EAAyC;AACvC6Z,gBAAAA,IAAAA,CAAAA,WAAAA,CAAiB08B,QAAAA,CADsB,CACtBA,CAAjB18B;AAF0B;AAhBV;;AAsBpBA,YAAAA,IAAAA,CAAAA,cAAAA,GAtBoB,IAsBpBA;AACAtB,YAAAA,UAAAA,CAvBoB,OAuBpBA;AAzNuD;;AA4NzD,mBAAA,eAAA,CAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAA4C;AAC1C,gBAAIb,MAAAA,GADsC,CAC1C;;AACA,iBAAK,IAAI1X,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAC9B,oBAAMy2C,CAAAA,GAAIC,EAAAA,CAAGxrB,MADiB,EACpBwrB,CAAV;;AACA,kBAAID,CAAAA,GAAJ,CAAA,EAAW;AACT/+B,gBAAAA,MAAAA,GAASA,MAAAA,GAAShZ,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAATgZ,MAAShZ,CAATgZ,GADA,CACTA;AAH4B;AAFU;;AAQ1C,mBAR0C,MAQ1C;AApOuD;;AAuOzD,mBAAA,MAAA,CAAA,IAAA,EAAsB;AACpB,kBAAMgkB,MAAAA,GAAS7hB,IAAAA,CADK,OACpB;AACA,kBAAM6a,QAAAA,GAAW7a,IAAAA,CAFG,SAEpB;AAEA,kBAAM88B,QAAAA,GAAWC,YAAAA,CAAaliB,QAAAA,CAAbkiB,KAAAA,EAA6BliB,QAAAA,CAA7BkiB,MAAAA,EAJG,MAIHA,CAAjB;;AACA,iBAAK,IAAI52C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI22C,QAAAA,CAApB,MAAA,EAAqC32C,CAArC,EAAA,EAA0C;AACxC,oBAAMosB,GAAAA,GAAMsP,MAAAA,CAAAA,CAAAA,CAAAA,CAD4B,GACxC;;AACA,oBAAMmb,aAAAA,GAAgBh9B,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAFkB,GAElBA,CAAtB;;AACA,kBAAIg9B,aAAAA,CAAAA,KAAAA,KAAJ,CAAA,EAA+B;AAC7BA,gBAAAA,aAAAA,CAAAA,WAAAA,GAA4Bnb,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,GAAiBib,QAAAA,CAAAA,CAAAA,CAAAA,CADhB,IAC7BE;AACAA,gBAAAA,aAAAA,CAAAA,UAAAA,GAA2Bnb,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgBib,QAAAA,CAAAA,CAAAA,CAAAA,CAFd,GAE7BE;AACAA,gBAAAA,aAAAA,CAAAA,YAAAA,GAA6BF,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAoBjb,MAAAA,CAAAA,CAAAA,CAAAA,CAHpB,KAG7Bmb;AACAA,gBAAAA,aAAAA,CAAAA,aAAAA,GAA8BF,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAqBjb,MAAAA,CAAAA,CAAAA,CAAAA,CAJtB,MAI7Bmb;;AACAh9B,gBAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAL6B,aAK7BA;;AAL6B;AAHS;;AAaxC,oBAAMwU,CAAAA,GAAIsoB,QAAAA,CAAV,CAAUA,CAAV;AAAA,oBACE5/B,CAAAA,GAAI2kB,MAAAA,CAdkC,CAclCA,CADN;AAEA,oBAAM5lB,CAAAA,GAAIiB,CAAAA,CAAV,CAAA;AAAA,oBACEC,CAAAA,GAAIlB,CAAAA,CADN,CACMA,CADN;AAAA,oBAEEsV,CAAAA,GAAItV,CAAAA,CAjBkC,CAiBlCA,CAFN;AAIA,oBAAMsZ,MAAAA,GAAS,CAAC,CAAA,CAAA,EAAD,CAAC,CAAD,EAAS,CAAA,CAAA,EAAIrY,CAAAA,CAAAA,IAAAA,CAAb,CAAaA,CAAJ,CAAT,EAAyB,CAACA,CAAAA,CAAAA,IAAAA,CAAD,CAACA,CAAD,EAAzB,CAAyB,CAAzB,EAAyCA,CAAAA,CAAxD,IAAe,CAAf;AACA,oBAAM2/B,EAAAA,GAAK,IAAA,YAAA,CApB6B,EAoB7B,CAAX;AACAtnB,cAAAA,MAAAA,CAAAA,OAAAA,CAAe,UAAA,CAAA,EAAA,CAAA,EAAgB;AAC7B,sBAAMqnB,CAAAA,GAAIrgC,KAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EADmB,CACnBA,CAAV;;AACAsgC,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,CAAAA,CAAAA,GAAY1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASy/B,CAAAA,CAAV,CAAUA,CAAT,IAFW,CAE7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,CAAAA,CAAAA,GAAYtrB,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQqrB,CAAAA,CAAT,CAASA,CAAR,IAHW,CAG7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,CAAAA,CAAAA,GAAY1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUy/B,CAAAA,CAAX,CAAWA,CAAV,IAJW,CAI7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWqrB,CAAAA,CAAZ,CAAYA,CAAX,IALU,CAK7BC;AAEAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASqrB,CAAAA,CAAV,CAAUA,CAAT,IAAiB,CAPP,CAO7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQy/B,CAAAA,CAAT,CAASA,CAAR,IARU,CAQ7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUqrB,CAAAA,CAAX,CAAWA,CAAV,IAAkB,CATR,CAS7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWy/B,CAAAA,CAAZ,CAAYA,CAAX,IAVU,CAU7BC;AAEAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASy/B,CAAAA,CAAV,CAAUA,CAAT,IAAiB,CAZP,CAY7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQqrB,CAAAA,CAAT,CAASA,CAAR,IAAgB,CAbN,CAa7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUy/B,CAAAA,CAAX,CAAWA,CAAV,IAAkB,CAdR,CAc7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWqrB,CAAAA,CAAZ,CAAYA,CAAX,IAAmB,CAfT,CAe7BC;AAEAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,IAAA,GAASqrB,CAAAA,CAAV,CAAUA,CAAT,IAjBU,CAiB7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,GAAA,GAAQy/B,CAAAA,CAAT,CAASA,CAAR,IAAgB,CAlBN,CAkB7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAatrB,CAAAA,IAAM,CAAA,CAAA,CAAA,KAAA,GAAUqrB,CAAAA,CAAX,CAAWA,CAAV,IAnBU,CAmB7BC;AACAA,gBAAAA,EAAAA,CAAG/mB,CAAAA,GAAH+mB,EAAAA,CAAAA,GAAa1/B,CAAAA,IAAM,CAAA,CAAA,CAAA,MAAA,GAAWy/B,CAAAA,CAAZ,CAAYA,CAAX,IAAmB,CApBT,CAoB7BC;AApBFtnB,eAAAA;AAwBA,oBAAM0nB,QAAAA,GAAW,IAAIp4C,IAAAA,CAAAA,GAAAA,CAASA,IAAAA,CAAAA,GAAAA,CAATA,CAASA,CAATA,EAAsBA,IAAAA,CAAAA,GAAAA,CA7CH,CA6CGA,CAAtBA,CAArB;AACAm4C,cAAAA,aAAAA,CAAAA,WAAAA,GAA4BE,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GA9CY,QA8CxCF;AACAA,cAAAA,aAAAA,CAAAA,UAAAA,GAA2BE,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GA/Ca,QA+CxCF;AACAA,cAAAA,aAAAA,CAAAA,YAAAA,GAA6BE,eAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAhDW,QAgDxCF;AACAA,cAAAA,aAAAA,CAAAA,aAAAA,GAA8BE,eAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GAjDU,QAiDxCF;;AACAh9B,cAAAA,IAAAA,CAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAlDwC,aAkDxCA;AAvDkB;AAvOmC;;AAkSzD,mBAAA,YAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAA4C;AAC1C,kBAAM6hB,MAAAA,GAAS,KAAA,CAAA,GAAA,CAAU,UAAA,GAAA,EAAA,CAAA,EAAkB;AACzC,qBAAO;AACLL,gBAAAA,EAAAA,EAAI2b,GAAAA,CADC,IAAA;AAEL1b,gBAAAA,EAAAA,EAAI0b,GAAAA,CAFC,GAAA;AAGL7X,gBAAAA,EAAAA,EAAI6X,GAAAA,CAHC,KAAA;AAIL5X,gBAAAA,EAAAA,EAAI4X,GAAAA,CAJC,MAAA;AAKLnK,gBAAAA,KAAAA,EALK,CAAA;AAMLoK,gBAAAA,KAAAA,EANK,SAAA;AAOLC,gBAAAA,KAAAA,EAPK;AAAA,eAAP;AADF,aAAe,CAAf;AAWAC,YAAAA,eAAAA,CAAAA,KAAAA,EAZ0C,MAY1CA,CAAAA;AACA,kBAAMR,QAAAA,GAAW,IAAA,KAAA,CAAUS,KAAAA,CAbe,MAazB,CAAjB;AACA1b,YAAAA,MAAAA,CAAAA,OAAAA,CAAe,UAAA,CAAA,EAAa;AAC1B,oBAAM17B,CAAAA,GAAI+W,CAAAA,CADgB,KAC1B;AACA4/B,cAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAAc;AACZpZ,gBAAAA,IAAAA,EAAMxmB,CAAAA,CADM,KAAA;AAEZymB,gBAAAA,GAAAA,EAFY,CAAA;AAGZ6Y,gBAAAA,KAAAA,EAAOt/B,CAAAA,CAHK,KAAA;AAIZu/B,gBAAAA,MAAAA,EAJY;AAAA,eAAdK;AAFFjb,aAAAA;AAYA0b,YAAAA,KAAAA,CAAAA,GAAAA,CAAU,UAAA,GAAA,EAAA,CAAA,EAAkB;AAC1B,oBAAM/oB,CAAAA,GAAIsoB,QAAAA,CAAV,CAAUA,CAAV;AAAA,oBACE5/B,CAAAA,GAAI2kB,MAAAA,CAFoB,CAEpBA,CADN;AAEA3kB,cAAAA,CAAAA,CAAAA,EAAAA,GAAOigC,GAAAA,CAHmB,GAG1BjgC;AACAA,cAAAA,CAAAA,CAAAA,EAAAA,GAAO7a,KAAAA,GAAQmyB,CAAAA,CAJW,KAI1BtX;AACAA,cAAAA,CAAAA,CAAAA,EAAAA,GAAOigC,GAAAA,CALmB,MAK1BjgC;AACAA,cAAAA,CAAAA,CAAAA,EAAAA,GAAO7a,KAAAA,GAAQmyB,CAAAA,CANW,IAM1BtX;AACAA,cAAAA,CAAAA,CAAAA,KAAAA,GAP0B,CAO1BA;AACAA,cAAAA,CAAAA,CAAAA,KAAAA,GAR0B,SAQ1BA;AACAA,cAAAA,CAAAA,CAAAA,KAAAA,GAT0B,SAS1BA;AATFqgC,aAAAA;AAWAD,YAAAA,eAAAA,CAAAA,MAAAA,EArC0C,MAqC1CA,CAAAA;AAEAzb,YAAAA,MAAAA,CAAAA,OAAAA,CAAe,UAAA,CAAA,EAAa;AAC1B,oBAAM17B,CAAAA,GAAI+W,CAAAA,CADgB,KAC1B;AACA4/B,cAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAkB5/B,CAAAA,CAFQ,KAE1B4/B;AACAA,cAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAqB5/B,CAAAA,CAHK,KAG1B4/B;AAHFjb,aAAAA;AAKA,mBA5C0C,QA4C1C;AA9UuD;;AAiVzD,mBAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAwC;AAEtCA,YAAAA,MAAAA,CAAAA,IAAAA,CAAY,UAAA,CAAA,EAAA,CAAA,EAAgB;AAC1B,qBAAO5kB,CAAAA,CAAAA,EAAAA,GAAOC,CAAAA,CAAPD,EAAAA,IAAeA,CAAAA,CAAAA,KAAAA,GAAUC,CAAAA,CADN,KAC1B;AADF2kB,aAAAA;AAKA,kBAAM2b,YAAAA,GAAe;AACnBhc,cAAAA,EAAAA,EAAI,CADe,QAAA;AAEnBC,cAAAA,EAAAA,EAAI,CAFe,QAAA;AAGnB6D,cAAAA,EAAAA,EAHmB,CAAA;AAInBC,cAAAA,EAAAA,EAJmB,QAAA;AAKnByN,cAAAA,KAAAA,EAAO,CALY,CAAA;AAMnBoK,cAAAA,KAAAA,EANmB,CAAA;AAOnBC,cAAAA,KAAAA,EAPmB;AAAA,aAArB;AASA,kBAAMI,OAAAA,GAAU,CACd;AACEr2C,cAAAA,KAAAA,EAAO,CADT,QAAA;AAEEd,cAAAA,GAAAA,EAFF,QAAA;AAGEo3C,cAAAA,QAAAA,EAHF;AAAA,aADc,CAAhB;AAQA7b,YAAAA,MAAAA,CAAAA,OAAAA,CAAe,UAAA,QAAA,EAAoB;AAGjC,kBAAI17B,CAAAA,GAH6B,CAGjC;;AACA,qBAAOA,CAAAA,GAAIs3C,OAAAA,CAAJt3C,MAAAA,IAAsBs3C,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,IAAkBC,QAAAA,CAA/C,EAAA,EAA4D;AAC1Dv3C,gBAAAA,CAD0D;AAJ3B;;AAOjC,kBAAI2vB,CAAAA,GAAI2nB,OAAAA,CAAAA,MAAAA,GAPyB,CAOjC;;AACA,qBAAO3nB,CAAAA,IAAAA,CAAAA,IAAU2nB,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAoBC,QAAAA,CAArC,EAAA,EAAkD;AAChD5nB,gBAAAA,CADgD;AARjB;;AAYjC,kBAAA,WAAA,EAZiC,gBAYjC;AACA,kBAAA,CAAA;AAAA,kBAAA,CAAA;AAAA,kBAEE6nB,OAAAA,GAAU,CAfqB,QAajC;;AAGA,mBAAKtW,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvBuW,gBAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,gBAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;AACA,oBAHuB,IAGvB;;AACA,oBAAIA,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAA1B,EAAA,EAAuC;AAIrCI,kBAAAA,IAAAA,GACED,gBAAAA,CAAAA,KAAAA,GAAyBH,QAAAA,CAAzBG,KAAAA,GACIA,gBAAAA,CADJA,KAAAA,GAEIH,QAAAA,CAP+B,EAIrCI;AAJF,iBAAA,MAQO,IAAID,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAG/CC,kBAAAA,IAAAA,GAAQ,CAAA,gBAAA,CAAA,EAAA,GAAsBJ,QAAAA,CAAvB,EAAC,IAHuC,CAG/CI;AAHK,iBAAA,MAIA;AAELA,kBAAAA,IAAAA,GAAOD,gBAAAA,CAFF,KAELC;AAlBqB;;AAoBvB,oBAAIA,IAAAA,GAAJ,OAAA,EAAoB;AAClBH,kBAAAA,OAAAA,GADkB,IAClBA;AArBqB;AAhBQ;;AA0CjCD,cAAAA,QAAAA,CAAAA,KAAAA,GA1CiC,OA0CjCA;;AAGA,mBAAKrW,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvBuW,gBAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,gBAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;;AACA,oBAAIA,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAExC,sBAAIA,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAA1B,EAAA,EAAuC;AAGrC,wBAAIG,gBAAAA,CAAAA,KAAAA,GAAyBH,QAAAA,CAA7B,KAAA,EAA6C;AAC3CG,sBAAAA,gBAAAA,CAAAA,KAAAA,GAAyBA,gBAAAA,CADkB,EAC3CA;AAJmC;AAAvC,mBAAA,MAMO;AACLA,oBAAAA,gBAAAA,CAAAA,KAAAA,GADK,OACLA;AATsC;AAA1C,iBAAA,MAWO,IAAIA,gBAAAA,CAAAA,KAAAA,GAAJ,OAAA,EAAsC;AAE3CA,kBAAAA,gBAAAA,CAAAA,KAAAA,GAAyBh5C,IAAAA,CAAAA,GAAAA,CAAAA,OAAAA,EAAkBg5C,gBAAAA,CAFA,EAElBh5C,CAAzBg5C;AAhBqB;AA7CQ;;AAkEjC,oBAAME,cAAAA,GAlE2B,EAkEjC;AACA,kBAAIC,YAAAA,GAnE6B,IAmEjC;;AACA,mBAAK3W,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvBuW,gBAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,gBAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;AAEA,sBAAMI,WAAAA,GACJJ,gBAAAA,CAAAA,EAAAA,GAAsBH,QAAAA,CAAtBG,EAAAA,GAAAA,gBAAAA,GALqB,QAIvB;;AAEA,oBAAIG,YAAAA,KAAJ,WAAA,EAAkC;AAEhCD,kBAAAA,cAAAA,CAAeA,cAAAA,CAAAA,MAAAA,GAAfA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgDH,WAAAA,CAFhB,GAEhCG;AAFF,iBAAA,MAGO;AACLA,kBAAAA,cAAAA,CAAAA,IAAAA,CAAoB;AAClB32C,oBAAAA,KAAAA,EAAOw2C,WAAAA,CADW,KAAA;AAElBt3C,oBAAAA,GAAAA,EAAKs3C,WAAAA,CAFa,GAAA;AAGlBF,oBAAAA,QAAAA,EAHkB;AAAA,mBAApBK;AAKAC,kBAAAA,YAAAA,GANK,WAMLA;AAfqB;AApEQ;;AAsFjC,kBAAIP,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAmBC,QAAAA,CAAvB,EAAA,EAAoC;AAClCK,gBAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAA0BL,QAAAA,CADQ,EAClCK;AACAA,gBAAAA,cAAAA,CAAAA,OAAAA,CAAuB;AACrB32C,kBAAAA,KAAAA,EAAOq2C,OAAAA,CAAAA,CAAAA,CAAAA,CADc,KAAA;AAErBn3C,kBAAAA,GAAAA,EAAKo3C,QAAAA,CAFgB,EAAA;AAGrBA,kBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,CAHW;AAAA,iBAAvBM;AAxF+B;;AA8FjC,kBAAIL,QAAAA,CAAAA,EAAAA,GAAcD,OAAAA,CAAAA,CAAAA,CAAAA,CAAlB,GAAA,EAAkC;AAChCM,gBAAAA,cAAAA,CAAeA,cAAAA,CAAAA,MAAAA,GAAfA,CAAAA,CAAAA,CAAAA,GAAAA,GAAgDL,QAAAA,CADhB,EAChCK;AACAA,gBAAAA,cAAAA,CAAAA,IAAAA,CAAoB;AAClB32C,kBAAAA,KAAAA,EAAOs2C,QAAAA,CADW,EAAA;AAElBp3C,kBAAAA,GAAAA,EAAKm3C,OAAAA,CAAAA,CAAAA,CAAAA,CAFa,GAAA;AAGlBC,kBAAAA,QAAAA,EAAUD,OAAAA,CAAAA,CAAAA,CAAAA,CAHQ;AAAA,iBAApBM;AAhG+B;;AA0GjC,mBAAK1W,CAAAA,GAAL,CAAA,EAAYA,CAAAA,IAAZ,CAAA,EAAoBA,CAApB,EAAA,EAAyB;AACvBuW,gBAAAA,WAAAA,GAAcH,OAAAA,CADS,CACTA,CAAdG;AACAC,gBAAAA,gBAAAA,GAAmBD,WAAAA,CAFI,QAEvBC;;AACA,oBAAIA,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AAAA;AAHnB;;AAMvB,oBAAIK,IAAAA,GANmB,KAMvB;;AACA,qBACE1nB,CAAAA,GAAIrwB,CAAAA,GADN,CAAA,EAEE,CAAA,IAAA,IAASqwB,CAAAA,IAAT,CAAA,IAAmBinB,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAoBI,gBAAAA,CAFzC,EAAA,EAGErnB,CAHF,EAAA,EAIE;AACA0nB,kBAAAA,IAAAA,GAAOT,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KADP,gBACAS;AAZqB;;AAcvB,qBACE1nB,CAAAA,GAAIV,CAAAA,GADN,CAAA,EAEE,CAAA,IAAA,IAASU,CAAAA,GAAIinB,OAAAA,CAAb,MAAA,IAA+BA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,IAAkBI,gBAAAA,CAFnD,EAAA,EAGErnB,CAHF,EAAA,EAIE;AACA0nB,kBAAAA,IAAAA,GAAOT,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KADP,gBACAS;AAnBqB;;AAqBvB,qBAAK1nB,CAAAA,GAAL,CAAA,EAAY,CAAA,IAAA,IAASA,CAAAA,GAAIunB,cAAAA,CAAzB,MAAA,EAAgDvnB,CAAhD,EAAA,EAAqD;AACnD0nB,kBAAAA,IAAAA,GAAOH,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,QAAAA,KAD4C,gBACnDG;AAtBqB;;AAwBvB,oBAAI,CAAJ,IAAA,EAAW;AACTL,kBAAAA,gBAAAA,CAAAA,KAAAA,GADS,OACTA;AAzBqB;AA1GQ;;AAuIjCpiC,cAAAA,KAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,OAAAA,EAEE,CAAA,CAAA,EAAIqa,CAAAA,GAAAA,CAAAA,GAAJ,CAAA,EAAA,MAAA,CAzI+B,cAyI/B,CAFFra;AAvIFomB,aAAAA;AA8IA4b,YAAAA,OAAAA,CAAAA,OAAAA,CAAgB,UAAA,WAAA,EAAuB;AACrC,oBAAMI,gBAAAA,GAAmBD,WAAAA,CADY,QACrC;;AACA,kBAAIC,gBAAAA,CAAAA,KAAAA,KAAJ,SAAA,EAA0C;AACxCA,gBAAAA,gBAAAA,CAAAA,KAAAA,GAAyBh5C,IAAAA,CAAAA,GAAAA,CAAAA,KAAAA,EAAgBg5C,gBAAAA,CADD,EACfh5C,CAAzBg5C;AAHmC;AAAvCJ,aAAAA;AAvfuD;;AAygBzD,mBAAA,mBAAA,CAA6B;AAAA,YAAA,WAAA;AAAA,YAAA,iBAAA;AAAA,YAAA,SAAA;AAAA,YAAA,QAAA;AAAA,YAAA,QAAA;AAAA,YAAA,mBAAA;AAA7B,YAAA;AAA6B,WAA7B,EAQG;AAAA;;AACD,iBAAA,YAAA,GADC,WACD;AACA,iBAAA,kBAAA,GAFC,iBAED;AACA,iBAAA,UAAA,GAHC,SAGD;AACA,iBAAA,SAAA,GAAiBhM,SAAAA,CAJhB,aAID;AACA,iBAAA,SAAA,GALC,QAKD;AACA,iBAAA,SAAA,GAAiBiL,QAAAA,IANhB,EAMD;AACA,iBAAA,oBAAA,GAA4ByB,mBAAAA,IAP3B,EAOD;AACA,iBAAA,qBAAA,GAA6B,CAAC,CAR7B,oBAQD;AACA,iBAAA,qBAAA,GAA6B,CAAC,4BAAC17C,UAAAA,CAAAA,aAAD,2DAACA,uBAT9B,OAS6B,CAA9B;AAEA,iBAAA,OAAA,GAXC,IAWD;AACA,iBAAA,uBAAA,GAZC,IAYD;AACA,iBAAA,yBAAA,GAbC,IAaD;AACA,iBAAA,cAAA,GAdC,IAcD;AACA,iBAAA,kBAAA,GAA0B,IAfzB,OAeyB,EAA1B;AACA,iBAAA,cAAA,GAhBC,KAgBD;AACA,iBAAA,SAAA,GAjBC,KAiBD;AACA,iBAAA,WAAA,GAlBC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAkBD;AACA,iBAAA,YAAA,GAnBC,IAmBD;AACA,iBAAA,OAAA,GApBC,EAoBD;;AAGA,iBAAA,WAAA,CAAA,OAAA,CAAA,OAAA,CACW,MAAM;AACb,kBAAI,KAAJ,cAAA,EAAyB;AAGvB,qBAAA,cAAA,CAAA,MAAA,CAAA,KAAA,GAHuB,CAGvB;AACA,qBAAA,cAAA,CAAA,MAAA,CAAA,MAAA,GAJuB,CAIvB;AACA,qBAAA,cAAA,GALuB,IAKvB;AANW;AADjB,aAAA,EAAA,KAAA,CAUS,MAjCR,CAuBD,CAAA;AAxiBuD;;AAsjBzD27C,UAAAA,mBAAAA,CAAAA,SAAAA,GAAgC;AAC9B,gBAAA,OAAA,GAAc;AACZ,qBAAO,KAAA,WAAA,CADK,OACZ;AAF4B,aAAA;;AAK9BlvB,YAAAA,MAAAA,EAAQ,SAAA,gBAAA,GAA4B;AAClC,mBAAA,SAAA,GADkC,IAClC;;AACA,kBAAI,KAAJ,OAAA,EAAkB;AAChB,qBAAA,OAAA,CAAA,MAAA,CAAoB,IAAA,KAAA,CAAA,cAAA,CADJ,2BACI,CAApB;;AACA,qBAAA,OAAA,GAFgB,IAEhB;AAJgC;;AAMlC,kBAAI,KAAA,YAAA,KAAJ,IAAA,EAAgC;AAC9BpI,gBAAAA,YAAAA,CAAa,KADiB,YAC9BA,CAAAA;AACA,qBAAA,YAAA,GAF8B,IAE9B;AARgC;;AAUlC,mBAAA,WAAA,CAAA,MAAA,CAAwB,IAAA,KAAA,CAVU,2BAUV,CAAxB;AAf4B,aAAA;;AAkB9Bu3B,YAAAA,aAAAA,CAAAA,KAAAA,EAAAA,UAAAA,EAAiC;AAC/B,mBAAK,IAAIl4C,CAAAA,GAAJ,CAAA,EAAWm4C,GAAAA,GAAMz1B,KAAAA,CAAtB,MAAA,EAAoC1iB,CAAAA,GAApC,GAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,qBAAA,oBAAA,CAAA,IAAA,CAA+B0iB,KAAAA,CAAAA,CAAAA,CAAAA,CADiB,GAChD;;AACA01B,gBAAAA,UAAAA,CAAAA,IAAAA,EAAiB11B,KAAAA,CAAjB01B,CAAiB11B,CAAjB01B,EAAAA,UAAAA,EAAuC,KAFS,cAEhDA,CAAAA;AAH6B;AAlBH,aAAA;;AAyB9BC,YAAAA,WAAAA,CAAAA,OAAAA,EAAqB;AACnB,oBAAMtD,iBAAAA,GAAoB,KAAA,kBAAA,CAAA,GAAA,CADP,OACO,CAA1B;;AACA,kBAAIA,iBAAAA,CAAJ,YAAA,EAAoC;AAAA;AAFjB;;AAMnB,kBAAIpoC,SAAAA,GANe,EAMnB;;AACA,kBAAIooC,iBAAAA,CAAAA,WAAAA,KAAJ,CAAA,EAAyC;AACvC,sBAAM;AAAA,kBAAA,QAAA;AAAA,kBAAA;AAAA,oBAA2BD,OAAAA,CADM,KACvC;;AAGA,oBACEld,QAAAA,KAAa,KAAbA,uBAAAA,IACA0gB,UAAAA,KAAe,KAFjB,yBAAA,EAGE;AACA,uBAAA,cAAA,CAAA,IAAA,GAA2B,GAAA,QAAA,IAD3B,UAAA,EACA;AACA,uBAAA,uBAAA,GAFA,QAEA;AACA,uBAAA,yBAAA,GAHA,UAGA;AAVqC;;AAavC,sBAAM;AAAA,kBAAA;AAAA,oBAAY,KAAA,cAAA,CAAA,WAAA,CAAgCxD,OAAAA,CAbX,WAarB,CAAlB;;AAEA,oBAAI54C,KAAAA,GAAJ,CAAA,EAAe;AACb64C,kBAAAA,iBAAAA,CAAAA,KAAAA,GAA0BA,iBAAAA,CAAAA,WAAAA,GADb,KACbA;AACApoC,kBAAAA,SAAAA,GAAY,UAAUooC,iBAAAA,CAFT,KAAA,GAEbpoC;AAjBqC;AAPtB;;AA2BnB,kBAAIooC,iBAAAA,CAAAA,KAAAA,KAAJ,CAAA,EAAmC;AACjCpoC,gBAAAA,SAAAA,GAAY,UAAUooC,iBAAAA,CAAV,KAAA,QADqB,SAAA,EACjCpoC;AA5BiB;;AA8BnB,kBAAIA,SAAAA,CAAAA,MAAAA,GAAJ,CAAA,EAA0B;AACxB,oBAAI,KAAJ,qBAAA,EAAgC;AAC9BooC,kBAAAA,iBAAAA,CAAAA,iBAAAA,GAD8B,SAC9BA;AAFsB;;AAIxBD,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAJwB,SAIxBA;AAlCiB;;AAoCnB,mBAAA,kBAAA,CAAA,GAAA,CAAA,OAAA,EApCmB,iBAoCnB;;AACA,mBAAA,UAAA,CAAA,WAAA,CArCmB,OAqCnB;AA9D4B,aAAA;;AAiE9ByD,YAAAA,OAAAA,EAAS,SAAA,gBAAA,CAAA,OAAA,EAAmC;AAC1C,oBAAMhgC,UAAAA,GADoC,CAAA,GAAA,KAAA,CAAA,uBAAA,GAC1C;AACA,kBAAIigC,UAAAA,GAAa53C,MAAAA,CAAAA,MAAAA,CAFyB,IAEzBA,CAAjB;;AAGA,oBAAMrE,MAAAA,GAAS,KAAA,SAAA,CAAA,aAAA,CAL2B,QAK3B,CAAf;;AACAA,cAAAA,MAAAA,CAAAA,MAAAA,GAAgBA,MAAAA,CAAAA,KAAAA,GAN0B,iBAM1CA;AAMEA,cAAAA,MAAAA,CAAAA,SAAAA,GAZwC,IAYxCA;AAEF,mBAAA,cAAA,GAAsBA,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EAAwB;AAAEq2B,gBAAAA,KAAAA,EAdN;AAcI,eAAxBr2B,CAAtB;;AAEA,kBAAI,KAAJ,YAAA,EAAuB;AACrB,sBAAMk8C,SAAAA,GAAY,KAAA,YAAA,CADG,KACrB;AACA,sBAAMC,UAAAA,GAAa,KAAA,YAAA,CAFE,MAErB;;AACA,qBAAA,aAAA,CAAA,SAAA,EAHqB,UAGrB;;AACAngC,gBAAAA,UAAAA,CAJqB,OAIrBA;AAJF,eAAA,MAKO,IAAI,KAAJ,kBAAA,EAA6B;AAClC,sBAAMkK,IAAAA,GAAO,MAAM;AACjB,uBAAA,OAAA,CAAA,IAAA,GAAA,IAAA,CAAyB,CAAC;AAAA,oBAAA,KAAA;AAAD,oBAAA;AAAC,mBAAD,KAAqB;AAC5C,wBAAA,IAAA,EAAU;AACRlK,sBAAAA,UAAAA,CADQ,OACRA;AADQ;AADkC;;AAM5C3X,oBAAAA,MAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAA0BgU,KAAAA,CANkB,MAM5ChU;;AACA,yBAAA,aAAA,CAAmBgU,KAAAA,CAAnB,KAAA,EAP4C,UAO5C;;AACA6N,oBAAAA,IAR4C;AAA9C,mBAAA,EASGlK,UAAAA,CAVc,MACjB;AADF,iBAAA;;AAaA,qBAAA,OAAA,GAAe,KAAA,kBAAA,CAdmB,SAcnB,EAAf;AACAkK,gBAAAA,IAfkC;AAA7B,eAAA,MAgBA;AACL,sBAAM,IAAA,KAAA,CACJ,kDAFG,wBACC,CAAN;AAtCwC;;AA4C1ClK,cAAAA,UAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAwB,MAAM;AAC5BigC,gBAAAA,UAAAA,GAD4B,IAC5BA;;AACA,oBAAI,CAAJ,OAAA,EAAc;AAEZt4B,kBAAAA,MAAAA,CAFY,IAEZA,CAAAA;AAFF,iBAAA,MAGO;AAEL,uBAAA,YAAA,GAAoB,UAAA,CAAW,MAAM;AACnCA,oBAAAA,MAAAA,CADmC,IACnCA,CAAAA;AACA,yBAAA,YAAA,GAFmC,IAEnC;AAFkB,mBAAA,EAFf,OAEe,CAApB;AAP0B;AAA9B3H,eAAAA,EAYG,KAAA,WAAA,CAxDuC,MA4C1CA;AA7G4B,aAAA;AA4H9BogC,YAAAA,cAAAA,EAAgB,SAAA,wBAAA,CAAA,UAAA,EAA8C;AAC5D,kBAAI,CAAC,KAAD,qBAAA,IAA+B,CAAC,KAApC,cAAA,EAAyD;AAAA;AADG;;AAI5D,kBAAI,KAAA,OAAA,KAAJ,IAAA,EAA2B;AACzBC,gBAAAA,MAAAA,CADyB,IACzBA,CAAAA;AACA,qBAAA,OAAA,GAFyB,IAEzB;AAN0D;;AAQ5D,oBAAMC,YAAAA,GAAN,EAAA;AAAA,oBACEC,UAAAA,GAT0D,EAQ5D;;AAGA,mBAAK,IAAI94C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAK,KAAA,SAAA,CAArB,MAAA,EAA4CC,CAAAA,GAA5C,EAAA,EAAoDA,CAApD,EAAA,EAAyD;AACvD,sBAAMosB,GAAAA,GAAM,KAAA,SAAA,CAD2C,CAC3C,CAAZ;;AACA,sBAAM2sB,QAAAA,GAAW,KAAA,kBAAA,CAAA,GAAA,CAFsC,GAEtC,CAAjB;;AAEA,oBAAIA,QAAAA,CAAJ,YAAA,EAA2B;AAAA;AAJ4B;;AAOvD,oBAAA,UAAA,EAAgB;AACdF,kBAAAA,YAAAA,CAAAA,MAAAA,GADc,CACdA;AACAC,kBAAAA,UAAAA,CAAAA,MAAAA,GAFc,CAEdA;;AAEA,sBAAIC,QAAAA,CAAJ,iBAAA,EAAgC;AAC9BF,oBAAAA,YAAAA,CAAAA,IAAAA,CAAkBE,QAAAA,CADY,iBAC9BF;AALY;;AAOd,sBAAIE,QAAAA,CAAAA,UAAAA,GAAJ,CAAA,EAA6B;AAC3BD,oBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CADQ,UAAA,IAC3BD;AACAD,oBAAAA,YAAAA,CAAAA,IAAAA,CAAkB,cAAc,CAACE,QAAAA,CAFN,UAAA,KAE3BF;AAFF,mBAAA,MAGO;AACLC,oBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AAXY;;AAad,sBAAIC,QAAAA,CAAAA,YAAAA,GAAJ,CAAA,EAA+B;AAC7BD,oBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CAAAA,YAAAA,GAAwBA,QAAAA,CADd,KAAA,IAC7BD;AADF,mBAAA,MAEO;AACLA,oBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AAhBY;;AAkBd,sBAAIC,QAAAA,CAAAA,aAAAA,GAAJ,CAAA,EAAgC;AAC9BD,oBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CADW,aAAA,IAC9BD;AADF,mBAAA,MAEO;AACLA,oBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AArBY;;AAuBd,sBAAIC,QAAAA,CAAAA,WAAAA,GAAJ,CAAA,EAA8B;AAC5BD,oBAAAA,UAAAA,CAAAA,IAAAA,CAAgB,GAAGC,QAAAA,CAAAA,WAAAA,GAAuBA,QAAAA,CADd,KAAA,IAC5BD;AACAD,oBAAAA,YAAAA,CAAAA,IAAAA,CACE,cAAc,CAACE,QAAAA,CAAD,WAAA,GAAwBA,QAAAA,CAHZ,KAAA,KAE5BF;AAFF,mBAAA,MAKO;AACLC,oBAAAA,UAAAA,CAAAA,IAAAA,CADK,CACLA;AA7BY;;AAgCd1sB,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GAAoB0sB,UAAAA,CAAAA,IAAAA,CAhCN,GAgCMA,CAApB1sB;;AACA,sBAAIysB,YAAAA,CAAJ,MAAA,EAAyB;AACvBzsB,oBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAAsBysB,YAAAA,CAAAA,IAAAA,CADC,GACDA,CAAtBzsB;AAlCY;AAAhB,iBAAA,MAoCO;AACLA,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,OAAAA,GADK,IACLA;AACAA,kBAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAAsB2sB,QAAAA,CAFjB,iBAEL3sB;AA7CqD;AAXG;AA5HhC;AAAA,WAAhC6rB;;AA2LA,mBAAA,eAAA,CAAA,gBAAA,EAA2C;AACzC,kBAAMp+B,IAAAA,GAAO,IAAA,mBAAA,CAAwB;AACnCwI,cAAAA,WAAAA,EAAa22B,gBAAAA,CADsB,WAAA;AAEnCC,cAAAA,iBAAAA,EAAmBD,gBAAAA,CAFgB,iBAAA;AAGnC1N,cAAAA,SAAAA,EAAW0N,gBAAAA,CAHwB,SAAA;AAInCtkB,cAAAA,QAAAA,EAAUskB,gBAAAA,CAJyB,QAAA;AAKnCzC,cAAAA,QAAAA,EAAUyC,gBAAAA,CALyB,QAAA;AAMnChB,cAAAA,mBAAAA,EAAqBgB,gBAAAA,CANc,mBAAA;AAOnCE,cAAAA,oBAAAA,EAAsBF,gBAAAA,CAPa;AAAA,aAAxB,CAAb;;AASAn/B,YAAAA,IAAAA,CAAAA,OAAAA,CAAam/B,gBAAAA,CAV4B,OAUzCn/B;;AACA,mBAXyC,IAWzC;AA5vBuD;;AA+vBzD,iBA/vByD,eA+vBzD;AA/vBF,SAAyB,EAAzB;;;;;;;;;;;;;;ACtCA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAhBA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,QAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AA+BA,YAAIs/B,WAAAA,GAAc,YAAY;AAC5B,gBAAM,IAAA,KAAA,CADsB,8BACtB,CAAN;AADF,SAAA;;;AAIiE;AAC/D,gBAAMC,YAAAA,GAAe;AACnBC,YAAAA,SAAAA,EADmB,QAAA;AAEnBC,YAAAA,UAAAA,EAFmB,QAAA;AAGnBtiB,YAAAA,SAAAA,EAHmB;AAAA,WAArB;AAKA,gBAAMuiB,MAAAA,GANyD,sCAM/D;AACA,gBAAMC,QAAAA,GAPyD,8BAO/D;AACA,gBAAMrlB,eAAAA,GAAkB,CAAA,MAAA,EAAA,OAAA,EAAxB,QAAwB,CAAxB;AACA,gBAAMC,gBAAAA,GAAmB,CAAA,OAAA,EAAA,OAAA,EAAzB,OAAyB,CAAzB;;AAEA,gBAAMqlB,mBAAAA,GAAuB,YAAY;AACvC,kBAAMC,UAAAA,GAAa,IAAA,UAAA,CAAe,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAlC,IAAkC,CAAf,CAAnB;AAUA,kBAAMC,kBAAAA,GAXiC,EAWvC;AAEA,kBAAMC,QAAAA,GAAW,IAAA,UAAA,CAbsB,GAatB,CAAjB;;AACA,iBAAK,IAAI55C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,GAAA,EAAyBA,CAAzB,EAAA,EAA8B;AAC5B,kBAAIgX,CAAAA,GADwB,CAC5B;;AACA,mBAAK,IAAI0lB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,CAAA,EAAuBA,CAAvB,EAAA,EAA4B;AAC1B,oBAAI1lB,CAAAA,GAAJ,CAAA,EAAW;AACTA,kBAAAA,CAAAA,GAAI,aAAeA,CAAAA,IAAD,CAACA,GADV,UACTA;AADF,iBAAA,MAEO;AACLA,kBAAAA,CAAAA,GAAKA,CAAAA,IAAD,CAACA,GADA,UACLA;AAJwB;AAFA;;AAS5B4iC,cAAAA,QAAAA,CAAAA,CAAAA,CAAAA,GAT4B,CAS5BA;AAvBqC;;AA0BvC,qBAAA,KAAA,CAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAiC;AAC/B,kBAAIC,GAAAA,GAAM,CADqB,CAC/B;;AACA,mBAAK,IAAI75C,CAAAA,GAAT,KAAA,EAAoBA,CAAAA,GAApB,GAAA,EAA6BA,CAA7B,EAAA,EAAkC;AAChC,sBAAM8W,CAAAA,GAAK,CAAA,GAAA,GAAMrC,IAAAA,CAAP,CAAOA,CAAN,IADqB,IAChC;AACA,sBAAMsC,CAAAA,GAAI6iC,QAAAA,CAFsB,CAEtBA,CAAV;AACAC,gBAAAA,GAAAA,GAAOA,GAAAA,KAAD,CAACA,GAHyB,CAGhCA;AAL6B;;AAO/B,qBAAOA,GAAAA,GAAM,CAPkB,CAO/B;AAjCqC;;AAoCvC,qBAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAiD;AAC/C,kBAAIhkC,CAAAA,GAD2C,MAC/C;AACA,oBAAMsiC,GAAAA,GAAM2B,IAAAA,CAFmC,MAE/C;AAEArlC,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAW0jC,GAAAA,IAAD,EAACA,GAJoC,IAI/C1jC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAe0jC,GAAAA,IAAD,EAACA,GALgC,IAK/C1jC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAe0jC,GAAAA,IAAD,CAACA,GANgC,IAM/C1jC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAc0jC,GAAAA,GAPiC,IAO/C1jC;AACAoB,cAAAA,CAAAA,IAR+C,CAQ/CA;AAEApB,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAUoE,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAVqC,IAU/CpE;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAcoE,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAXiC,IAW/CpE;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAcoE,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAZiC,IAY/CpE;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAcoE,IAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IAbiC,IAa/CpE;AACAoB,cAAAA,CAAAA,IAd+C,CAc/CA;AAEApB,cAAAA,IAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAhB+C,CAgB/CA;AACAoB,cAAAA,CAAAA,IAAKikC,IAAAA,CAjB0C,MAiB/CjkC;AAEA,oBAAMgkC,GAAAA,GAAME,KAAAA,CAAAA,IAAAA,EAAY7uB,MAAAA,GAAZ6uB,CAAAA,EAnBmC,CAmBnCA,CAAZ;AACAtlC,cAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAWolC,GAAAA,IAAD,EAACA,GApBoC,IAoB/CplC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAeolC,GAAAA,IAAD,EAACA,GArBgC,IAqB/CplC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAeolC,GAAAA,IAAD,CAACA,GAtBgC,IAsB/CplC;AACAA,cAAAA,IAAAA,CAAKoB,CAAAA,GAALpB,CAAAA,CAAAA,GAAcolC,GAAAA,GAvBiC,IAuB/CplC;AA3DqC;;AA8DvC,qBAAA,OAAA,CAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAmC;AACjC,kBAAIqC,CAAAA,GAD6B,CACjC;AACA,kBAAIC,CAAAA,GAF6B,CAEjC;;AACA,mBAAK,IAAI/W,CAAAA,GAAT,KAAA,EAAoBA,CAAAA,GAApB,GAAA,EAA6B,EAA7B,CAAA,EAAkC;AAChC8W,gBAAAA,CAAAA,GAAK,CAAA,CAAA,IAAK,IAAA,CAAA,CAAA,CAAA,GAAN,IAAC,CAAA,IAD2B,KAChCA;AACAC,gBAAAA,CAAAA,GAAK,CAAA,CAAA,GAAD,CAAC,IAF2B,KAEhCA;AAL+B;;AAOjC,qBAAQA,CAAAA,IAAD,EAACA,GAPyB,CAOjC;AArEqC;;AA8EvC,qBAAA,WAAA,CAAA,QAAA,EAA+B;AAC7B,kBAAI,CAAJ,QAAA,CAAA,QAAA,EAAe;AAIb,uBAAOijC,uBAAAA,CAJM,QAINA,CAAP;AAL2B;;AAO7B,kBAAI;AAUF,oBAVE,KAUF;;AAEA,oBAAIh4C,QAAAA,CAASuX,OAAAA,CAAAA,QAAAA,CAATvX,IAAAA,CAAAA,IAAJ,CAAA,EAA0C;AACxCi4C,kBAAAA,KAAAA,GADwC,QACxCA;AADF,iBAAA,MAEO;AAELA,kBAAAA,KAAAA,GAAQC,MAAAA,CAAAA,IAAAA,CAFH,QAEGA,CAARD;AAhBA;;AAkBF,sBAAME,MAAAA,GAASltB,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,WAAAA,CAAAA,KAAAA,EAAmD;AAChEmtB,kBAAAA,KAAAA,EAnBA;AAkBgE,iBAAnDntB,CAAf;;AAGA,uBAAOktB,MAAAA,YAAAA,UAAAA,GAAAA,MAAAA,GAAwC,IAAA,UAAA,CArB7C,MAqB6C,CAA/C;AArBF,eAAA,CAsBE,OAAA,CAAA,EAAU;AACV75C,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EACE,kEAFQ,CACVA;AA9B2B;;AAmC7B,qBAAO05C,uBAAAA,CAnCsB,QAmCtBA,CAAP;AAjHqC;;AAqHvC,qBAAA,uBAAA,CAAA,QAAA,EAA2C;AACzC,kBAAI7B,GAAAA,GAAMkC,QAAAA,CAD+B,MACzC;AACA,oBAAMC,cAAAA,GAFmC,MAEzC;AAEA,oBAAMC,aAAAA,GAAgB77C,IAAAA,CAAAA,IAAAA,CAAUy5C,GAAAA,GAJS,cAInBz5C,CAAtB;AACA,oBAAM87C,IAAAA,GAAO,IAAA,UAAA,CAAe,IAAA,GAAA,GAAUD,aAAAA,GAAV,CAAA,GALa,CAK5B,CAAb;AACA,kBAAIE,EAAAA,GANqC,CAMzC;AACAD,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAPyC,IAOzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GARyC,IAQzCA;AAEA,kBAAIhmC,GAAAA,GAVqC,CAUzC;;AACA,qBAAO2jC,GAAAA,GAAP,cAAA,EAA6B;AAE3BqC,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAF2B,IAE3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAH2B,IAG3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAJ2B,IAI3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAL2B,IAK3BA;AACAA,gBAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAN2B,IAM3BA;AACAA,gBAAAA,IAAAA,CAAAA,GAAAA,CAASH,QAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAAuB7lC,GAAAA,GAAhCgmC,cAASH,CAATG,EAP2B,EAO3BA;AACAC,gBAAAA,EAAAA,IAR2B,cAQ3BA;AACAjmC,gBAAAA,GAAAA,IAT2B,cAS3BA;AACA2jC,gBAAAA,GAAAA,IAV2B,cAU3BA;AArBuC;;AAyBzCqC,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAzByC,IAyBzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAarC,GAAAA,GA1B4B,IA0BzCqC;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcrC,GAAAA,IAAD,CAACA,GA3B2B,IA2BzCqC;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAa,CAAA,GAAA,GAAA,MAAA,GA5B4B,IA4BzCA;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAe,CAAA,CAAA,GAAA,GAAD,MAAC,KAAF,CAAE,GA7B0B,IA6BzCA;AACAA,cAAAA,IAAAA,CAAAA,GAAAA,CAASH,QAAAA,CAAAA,QAAAA,CAATG,GAASH,CAATG,EA9ByC,EA8BzCA;AACAC,cAAAA,EAAAA,IAAMJ,QAAAA,CAAAA,MAAAA,GA/BmC,GA+BzCI;AAEA,oBAAMC,KAAAA,GAAQC,OAAAA,CAAAA,QAAAA,EAAAA,CAAAA,EAAqBN,QAAAA,CAjCM,MAiC3BM,CAAd;AACAH,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,EAACA,GAlC2B,IAkCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,EAACA,GAnC2B,IAmCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAcE,KAAAA,IAAD,CAACA,GApC2B,IAoCzCF;AACAA,cAAAA,IAAAA,CAAKC,EAALD,EAAAA,CAAAA,GAAaE,KAAAA,GArC4B,IAqCzCF;AACA,qBAtCyC,IAsCzC;AA3JqC;;AA8JvC,qBAAA,MAAA,CAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAwD;AACtD,oBAAMt+C,KAAAA,GAAQgzB,OAAAA,CADwC,KACtD;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CAFuC,MAEtD;AACA,kBAAA,QAAA,EAAA,SAAA,EAHsD,QAGtD;AACA,oBAAMpb,KAAAA,GAAQob,OAAAA,CAJwC,IAItD;;AAEA,sBAAA,IAAA;AACE,qBAAKnrB,KAAAA,CAAAA,SAAAA,CAAL,cAAA;AACE62C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAvrB,kBAAAA,QAAAA,GAAYpzB,KAAAA,GAAD,CAACA,IAHd,CAGEozB;AAJJ;;AAME,qBAAKvrB,KAAAA,CAAAA,SAAAA,CAAL,SAAA;AACE62C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAvrB,kBAAAA,QAAAA,GAAWpzB,KAAAA,GAHb,CAGEozB;AATJ;;AAWE,qBAAKvrB,KAAAA,CAAAA,SAAAA,CAAL,UAAA;AACE62C,kBAAAA,SAAAA,GADF,CACEA;AACAC,kBAAAA,QAAAA,GAFF,CAEEA;AACAvrB,kBAAAA,QAAAA,GAAWpzB,KAAAA,GAHb,CAGEozB;AAdJ;;AAgBE;AACE,wBAAM,IAAA,KAAA,CAjBV,gBAiBU,CAAN;AAjBJ;;AAqBA,oBAAM+qB,QAAAA,GAAW,IAAA,UAAA,CAAgB,CAAA,IAAD,QAAC,IA3BqB,MA2BrC,CAAjB;AACA,kBAAIS,cAAAA,GAAJ,CAAA;AAAA,kBACEC,WAAAA,GA7BoD,CA4BtD;;AAEA,mBAAK,IAAI3nB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4B,EAA5B,CAAA,EAAiC;AAC/BinB,gBAAAA,QAAAA,CAASS,cAATT,EAAAA,CAAAA,GAD+B,CAC/BA;AACAA,gBAAAA,QAAAA,CAAAA,GAAAA,CACEvmC,KAAAA,CAAAA,QAAAA,CAAAA,WAAAA,EAA4BinC,WAAAA,GAD9BV,QACEvmC,CADFumC,EAF+B,cAE/BA;AAIAU,gBAAAA,WAAAA,IAN+B,QAM/BA;AACAD,gBAAAA,cAAAA,IAP+B,QAO/BA;AArCoD;;AAwCtD,kBAAIE,IAAAA,KAASj3C,KAAAA,CAAAA,SAAAA,CAATi3C,cAAAA,IAAJ,MAAA,EAAiD;AAE/CF,gBAAAA,cAAAA,GAF+C,CAE/CA;;AACA,qBAAK,IAAI1nB,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B0nB,kBAAAA,cAD+B;;AAE/B,uBAAK,IAAI96C,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAhB,QAAA,EAA8BA,CAA9B,EAAA,EAAmC;AACjCq6C,oBAAAA,QAAAA,CAASS,cAATT,EAAAA,CAAAA,IADiC,IACjCA;AAH6B;AAHc;AAxCK;;AAmDtD,oBAAMY,IAAAA,GAAO,IAAA,UAAA,CAAe,CACzB/+C,KAAAA,IAAD,EAACA,GADyB,IAAA,EAEzBA,KAAAA,IAAD,EAACA,GAFyB,IAAA,EAGzBA,KAAAA,IAAD,CAACA,GAHyB,IAAA,EAI1BA,KAAAA,GAJ0B,IAAA,EAKzBC,MAAAA,IAAD,EAACA,GALyB,IAAA,EAMzBA,MAAAA,IAAD,EAACA,GANyB,IAAA,EAOzBA,MAAAA,IAAD,CAACA,GAPyB,IAAA,EAQ1BA,MAAAA,GAR0B,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAA5B,IAA4B,CAAf,CAAb;AAeA,oBAAMq+C,IAAAA,GAAOU,WAAAA,CAlEyC,QAkEzCA,CAAb;AAGA,oBAAMC,SAAAA,GACJzB,UAAAA,CAAAA,MAAAA,GAAoBC,kBAAAA,GAApBD,CAAAA,GAA6CuB,IAAAA,CAA7CvB,MAAAA,GAA2Dc,IAAAA,CAtEP,MAqEtD;AAEA,oBAAM/lC,IAAAA,GAAO,IAAA,UAAA,CAvEyC,SAuEzC,CAAb;AACA,kBAAIyW,MAAAA,GAxEkD,CAwEtD;AACAzW,cAAAA,IAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAzEsD,MAyEtDA;AACAyW,cAAAA,MAAAA,IAAUwuB,UAAAA,CA1E4C,MA0EtDxuB;AACAkwB,cAAAA,aAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EA3EsD,MA2EtDA,CAAAA;AACAlwB,cAAAA,MAAAA,IAAUyuB,kBAAAA,GAAqBsB,IAAAA,CA5EuB,MA4EtD/vB;AACAkwB,cAAAA,aAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EA7EsD,MA6EtDA,CAAAA;AACAlwB,cAAAA,MAAAA,IAAUyuB,kBAAAA,GAAqBa,IAAAA,CA9EuB,MA8EtDtvB;AACAkwB,cAAAA,aAAAA,CAAAA,MAAAA,EAAsB,IAAA,UAAA,CAAtBA,CAAsB,CAAtBA,EAAAA,IAAAA,EA/EsD,MA+EtDA,CAAAA;AAEA,qBAAOC,CAAAA,GAAAA,KAAAA,CAAAA,eAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAjF+C,eAiF/CA,CAAP;AA/OqC;;AAmPvC,mBAAO,SAAA,mBAAA,CAAA,OAAA,EAAA,eAAA,EAAA,MAAA,EAA+D;AACpE,oBAAML,IAAAA,GACJ9rB,OAAAA,CAAAA,IAAAA,KAAAA,SAAAA,GAA6BnrB,KAAAA,CAAAA,SAAAA,CAA7BmrB,cAAAA,GAAwDA,OAAAA,CAFU,IACpE;AAEA,qBAAOosB,MAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAAA,eAAAA,EAH6D,MAG7DA,CAAP;AAHF,aAAA;AAnPF,WAA6B,EAA7B;;AA0PA,gBAAA,aAAA,CAAoB;AAClBz/C,YAAAA,WAAAA,GAAc;AACZ,mBAAA,aAAA,GADY,CACZ;AACA,mBAAA,UAAA,GAAkBu9C,YAAAA,CAFN,UAEZ;AACA,mBAAA,QAAA,GAHY,CAGZ;AAEA,mBAAA,UAAA,GALY,KAAA,CAAA,eAKZ;AACA,mBAAA,UAAA,GANY,KAAA,CAAA,oBAMZ;AACA,mBAAA,OAAA,GAPY,CAOZ;AACA,mBAAA,iBAAA,GAAyBh2C,KAAAA,CAAAA,iBAAAA,CARb,IAQZ;AACA,mBAAA,eAAA,GATY,CASZ;AAGA,mBAAA,CAAA,GAZY,CAYZ;AACA,mBAAA,CAAA,GAbY,CAaZ;AAGA,mBAAA,KAAA,GAhBY,CAgBZ;AACA,mBAAA,KAAA,GAjBY,CAiBZ;AAGA,mBAAA,WAAA,GApBY,CAoBZ;AACA,mBAAA,WAAA,GArBY,CAqBZ;AACA,mBAAA,UAAA,GAtBY,CAsBZ;AACA,mBAAA,QAAA,GAvBY,CAuBZ;AAGA,mBAAA,SAAA,GAAiBg2C,YAAAA,CA1BL,SA0BZ;AACA,mBAAA,WAAA,GA3BY,SA2BZ;AAEA,mBAAA,SAAA,GA7BY,CA6BZ;AACA,mBAAA,WAAA,GA9BY,CA8BZ;AACA,mBAAA,SAAA,GA/BY,CA+BZ;AACA,mBAAA,QAAA,GAhCY,EAgCZ;AACA,mBAAA,OAAA,GAjCY,EAiCZ;AACA,mBAAA,UAAA,GAlCY,CAkCZ;AAEA,mBAAA,SAAA,GApCY,EAoCZ;AACA,mBAAA,SAAA,GArCY,CAqCZ;AAEA,mBAAA,YAAA,GAvCY,EAuCZ;AAGA,mBAAA,aAAA,GA1CY,IA0CZ;AACA,mBAAA,SAAA,GA3CY,IA2CZ;AAEA,mBAAA,MAAA,GA7CY,EA6CZ;AA9CgB;;AAiDlBx6C,YAAAA,KAAAA,GAAQ;AACN,qBAAOgC,MAAAA,CAAAA,MAAAA,CADD,IACCA,CAAP;AAlDgB;;AAqDlB+vB,YAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAsB;AACpB,mBAAA,CAAA,GADoB,CACpB;AACA,mBAAA,CAAA,GAFoB,CAEpB;AAvDgB;;AAAA;;AA4DpB,mBAAA,YAAA,CAAA,MAAA,EAA8B;AAC5B,gBAAI4qB,MAAAA,GADwB,EAC5B;AACA,kBAAMxc,GAAAA,GAFsB,EAE5B;;AAEA,iBAAA,MAAA,aAAA,IAAA,MAAA,EAAoC;AAClC,kBAAIyc,aAAAA,CAAAA,EAAAA,KAAJ,MAAA,EAAiC;AAC/BD,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAEtmB,kBAAAA,IAAAA,EAAF,EAAA;AAAYwmB,kBAAAA,EAAAA,EAAZ,OAAA;AAAyB/4B,kBAAAA,KAAAA,EAAzB;AAAA,iBAAZ64B;AACAxc,gBAAAA,GAAAA,CAAAA,IAAAA,CAF+B,MAE/BA;AACAwc,gBAAAA,MAAAA,GAASA,MAAAA,CAAOA,MAAAA,CAAAA,MAAAA,GAAPA,CAAAA,CAAAA,CAHsB,KAG/BA;AAH+B;AADC;;AAQlC,kBAAIC,aAAAA,CAAAA,EAAAA,KAAJ,SAAA,EAAoC;AAClCD,gBAAAA,MAAAA,GAASxc,GAAAA,CADyB,GACzBA,EAATwc;AADF,eAAA,MAEO;AACLA,gBAAAA,MAAAA,CAAAA,IAAAA,CADK,aACLA;AAXgC;AAJR;;AAkB5B,mBAlB4B,MAkB5B;AAnV6D;;AA6V/D,mBAAA,EAAA,CAAA,KAAA,EAAmB;AACjB,gBAAIpoC,MAAAA,CAAAA,SAAAA,CAAJ,KAAIA,CAAJ,EAA6B;AAC3B,qBAAOyB,KAAAA,CADoB,QACpBA,EAAP;AAFe;;AAIjB,kBAAMwW,CAAAA,GAAIxW,KAAAA,CAAAA,OAAAA,CAJO,EAIPA,CAAV;AACA,gBAAI5U,CAAAA,GAAIorB,CAAAA,CAAAA,MAAAA,GALS,CAKjB;;AACA,gBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAJ,GAAA,EAAkB;AAChB,qBADgB,CAChB;AAPe;;AAWjB,eAAG;AACDprB,cAAAA,CADC;AAAH,aAAA,QAESorB,CAAAA,CAAAA,CAAAA,CAAAA,KAbQ,GAWjB;;AAGA,mBAAOA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAeA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAmBprB,CAAAA,GAdxB,CAcVorB,CAAP;AA3W6D;;AAuX/D,mBAAA,EAAA,CAAA,CAAA,EAAe;AACb,gBAAItV,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,kBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,oBAAIA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAlB,CAAA,EAA8B;AAC5B,yBAD4B,EAC5B;AAF0B;;AAI5B,uBAAO,SAAS4lC,EAAAA,CAAG5lC,CAAAA,CAAZ,CAAYA,CAAH4lC,CAAT,IAAqBA,EAAAA,CAAG5lC,CAAAA,CAJH,CAIGA,CAAH4lC,CAJA,GAI5B;AAL0B;;AAO5B,kBAAI5lC,CAAAA,CAAAA,CAAAA,CAAAA,KAASA,CAAAA,CAATA,CAASA,CAATA,IAAiBA,CAAAA,CAAAA,CAAAA,CAAAA,KAAS,CAACA,CAAAA,CAA/B,CAA+BA,CAA/B,EAAqC;AACnC,sBAAMgB,CAAAA,GAAKpY,IAAAA,CAAAA,IAAAA,CAAUoX,CAAAA,CAAVpX,CAAUoX,CAAVpX,IAAD,GAACA,GAAyBA,IAAAA,CADD,EACnC;AACA,uBAAO,UAAUg9C,EAAAA,CAFkB,CAElBA,CAFkB,GAEnC;AAT0B;AAA9B,aAAA,MAWO;AACL,kBAAI5lC,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAcA,CAAAA,CAAAA,CAAAA,CAAAA,KAAdA,CAAAA,IAA4BA,CAAAA,CAAAA,CAAAA,CAAAA,KAA5BA,CAAAA,IAA0CA,CAAAA,CAAAA,CAAAA,CAAAA,KAA9C,CAAA,EAA0D;AACxD,uBAAO,aAAa4lC,EAAAA,CAAG5lC,CAAAA,CAAhB,CAAgBA,CAAH4lC,CAAb,IAAyBA,EAAAA,CAAG5lC,CAAAA,CADqB,CACrBA,CAAH4lC,CADwB,GACxD;AAFG;AAZM;;AAiBb,mBACE,UAAUA,EAAAA,CAAG5lC,CAAAA,CAAb,CAAaA,CAAH4lC,CAAV,IAAsBA,EAAAA,CAAG5lC,CAAAA,CAAzB,CAAyBA,CAAH4lC,CAAtB,IAAkCA,EAAAA,CAAG5lC,CAAAA,CAArC,CAAqCA,CAAH4lC,CAAlC,IAA8CA,EAAAA,CAAG5lC,CAAAA,CAAjD,CAAiDA,CAAH4lC,CAA9C,IAA0DA,EAAAA,CAAG5lC,CAAAA,CAA7D,CAA6DA,CAAH4lC,CAA1D,GAAA,GACA,GAAGA,EAAAA,CAAG5lC,CAAAA,CAnBK,CAmBLA,CAAH4lC,CAnBQ,GAiBb;AAxY6D;;AAiZ/D,cAAIC,SAAAA,GAjZ2D,CAiZ/D;AACA,cAAIC,SAAAA,GAlZ2D,CAkZ/D;AACA,cAAIC,YAAAA,GAnZ2D,CAmZ/D;AAGA1C,UAAAA,OAAAA,CAAAA,WAAAA,GAAAA,WAAAA,GAAc,MAAA,WAAA,CAAkB;AAC9Bt9C,YAAAA,WAAAA,CAAAA,UAAAA,EAAAA,IAAAA,EAA8B8c,eAAAA,GAA9B9c,KAAAA,EAAuD;AACrD,mBAAA,UAAA,GAAkB,IADmC,cAAA,CAAA,aACnC,EAAlB;AAEA,mBAAA,OAAA,GAAe,IAHsC,aAGtC,EAAf;AACA,mBAAA,eAAA,GAJqD,KAAA,CAAA,eAIrD;AACA,mBAAA,cAAA,GALqD,EAKrD;AACA,mBAAA,UAAA,GANqD,EAMrD;AACA,mBAAA,UAAA,GAPqD,UAOrD;AACA,mBAAA,IAAA,GARqD,IAQrD;AACA,mBAAA,WAAA,GATqD,IASrD;AACA,mBAAA,aAAA,GAVqD,KAUrD;AAEA,mBAAA,UAAA,GAZqD,KAYrD;AACA,mBAAA,aAAA,GAAqB+E,MAAAA,CAAAA,MAAAA,CAbgC,IAahCA,CAArB;AACA,mBAAA,QAAA,GAdqD,IAcrD;AACA,mBAAA,eAAA,GAAuB,CAAC,CAf6B,eAerD;AAKA,mBAAA,kBAAA,GApBqD,EAoBrD;;AACA,mBAAA,MAAA,EAAA,IAAA,KAAA,CAAA,GAAA,EAAsB;AACpB,qBAAA,kBAAA,CAAwBmL,KAAAA,CAAAA,GAAAA,CAAxB,EAAwBA,CAAxB,IADoB,EACpB;AAtBmD;AADzB;;AA2B9BU,YAAAA,IAAAA,GAAO;AACL,mBAAA,cAAA,CAAA,IAAA,CAAyB,KADpB,eACL;AACA,oBAAMgiB,GAAAA,GAAM,KAFP,OAEL;AACA,mBAAA,UAAA,CAAA,IAAA,CAHK,GAGL;AACA,mBAAA,OAAA,GAAeA,GAAAA,CAJV,KAIUA,EAAf;AA/B4B;;AAkC9B/hB,YAAAA,OAAAA,GAAU;AACR,mBAAA,eAAA,GAAuB,KAAA,cAAA,CADf,GACe,EAAvB;AACA,mBAAA,OAAA,GAAe,KAAA,UAAA,CAFP,GAEO,EAAf;AACA,mBAAA,WAAA,GAHQ,IAGR;AACA,mBAAA,IAAA,GAJQ,IAIR;AAtC4B;;AAyC9B+uB,YAAAA,KAAAA,CAAAA,KAAAA,EAAa;AACX,mBADW,IACX;AACA,mBAAA,aAAA,CAFW,KAEX;AACA,mBAHW,OAGX;AA5C4B;;AA+C9BqgB,YAAAA,gBAAAA,CAAAA,YAAAA,EAA+B;AAC7B,oBAAM/6B,OAAAA,GAAUU,YAAAA,CADa,OAC7B;AACA,oBAAMT,SAAAA,GAAYS,YAAAA,CAFW,SAE7B;;AAEA,mBAAK,IAAIzhB,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKghB,OAAAA,CAArB,MAAA,EAAqC/gB,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,oBAAI+gB,OAAAA,CAAAA,CAAAA,CAAAA,KAAehV,KAAAA,CAAAA,GAAAA,CAAnB,UAAA,EAAmC;AAAA;AADa;;AAKhD,qBAAA,MAAA,GAAA,IAAkBiV,SAAAA,CAAlB,CAAkBA,CAAlB,EAAgC;AAC9B,wBAAMkU,QAAAA,GAAWrgB,GAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IAAuB,KAAvBA,UAAAA,GAAyC,KAD5B,IAC9B;AACA,wBAAM6H,OAAAA,GAAU,IAAA,OAAA,CAAYjf,OAAAA,IAAW;AACrCy3B,oBAAAA,QAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EADqC,OACrCA;AADF,mBAAgB,CAAhB;AAGA,uBAAA,OAAA,CAAA,YAAA,CAAA,IAAA,CAL8B,OAK9B;AAV8C;AAJrB;;AAiB7B,qBAAOtZ,OAAAA,CAAAA,GAAAA,CAAY,KAAA,OAAA,CAjBU,YAiBtBA,CAAP;AAhE4B;;AAmE9BjP,YAAAA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA4B;AAC1B,oBAAMovC,eAAAA,GAAkB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAxB,CAAwB,CAAxB;AACA,mBAAA,eAAA,GAAuB3lC,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CACrB,KADqBA,eAAAA,EAFG,eAEHA,CAAvB;AAIA,mBAAA,IAAA,GAN0B,IAM1B;AAzE4B;;AA4E9B4lC,YAAAA,MAAAA,CAAAA,YAAAA,EAAAA,QAAAA,EAA+B;AAC7B,mBAAA,QAAA,GAD6B,QAC7B;;AAEA,oBAAMC,UAAAA,GAAa,KAAA,WAAA,CAHU,QAGV,CAAnB;;AACA,qBAAO,KAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,CAAyC,MAAM;AACpD,qBAAA,eAAA,GADoD,KAAA,CAAA,eACpD;AACA,qBAAA,aAAA,CAAmB,KAAA,aAAA,CAFiC,YAEjC,CAAnB;AACA,uBAHoD,UAGpD;AAHF,eAAO,CAAP;AAhF4B;;AAuF9BC,YAAAA,aAAAA,CAAAA,YAAAA,EAA4B;AAC1B,oBAAMC,iBAAAA,GAAoB,KADA,kBAC1B;AACA,oBAAMn7B,SAAAA,GAAYS,YAAAA,CAFQ,SAE1B;AACA,oBAAMV,OAAAA,GAAUU,YAAAA,CAHU,OAG1B;AACA,oBAAM26B,MAAAA,GAJoB,EAI1B;;AACA,mBAAK,IAAIp8C,CAAAA,GAAJ,CAAA,EAAWD,EAAAA,GAAKghB,OAAAA,CAArB,MAAA,EAAqC/gB,CAAAA,GAArC,EAAA,EAA6CA,CAA7C,EAAA,EAAkD;AAChD,sBAAMi1B,IAAAA,GAAOlU,OAAAA,CADmC,CACnCA,CAAb;AACAq7B,gBAAAA,MAAAA,CAAAA,IAAAA,CAAY;AAAA,kBAAA,IAAA;AAEVX,kBAAAA,EAAAA,EAAIU,iBAAAA,CAFM,IAENA,CAFM;AAGV74B,kBAAAA,IAAAA,EAAMtC,SAAAA,CAHI,CAGJA;AAHI,iBAAZo7B;AAPwB;;AAa1B,qBAAOC,YAAAA,CAbmB,MAanBA,CAAP;AApG4B;;AAuG9BC,YAAAA,aAAAA,CAAAA,MAAAA,EAAsB;AACpB,mBAAA,MAAA,aAAA,IAAA,MAAA,EAAoC;AAClC,sBAAMb,EAAAA,GAAKc,aAAAA,CADuB,EAClC;AACA,sBAAMtnB,IAAAA,GAAOsnB,aAAAA,CAFqB,IAElC;AACA,sBAAMj5B,IAAAA,GAAOi5B,aAAAA,CAHqB,IAGlC;;AAEA,wBAAQtnB,IAAAA,GAAR,CAAA;AACE,uBAAKlpB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBADF,SACE;AAFJ;;AAIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AAJF;;AAOE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBAAA,UAAA,CADF,IACE;AARJ;;AAUE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,kBAAA;AACE,yBAAA,kBAAA,CAAwBuX,IAAAA,CAAxB,CAAwBA,CAAxB,EAAiCA,IAAAA,CADnC,CACmCA,CAAjC;AAXJ;;AAaE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBAAA,OAAA,CADF,IACE;AAdJ;;AAgBE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBAAA,QAAA,CAAcuX,IAAAA,CADhB,CACgBA,CAAd;AAjBJ;;AAmBE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,QAAA,CAAcuX,IAAAA,CADhB,CACgBA,CAAd;AApBJ;;AAsBE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBADF,OACE;AAvBJ;;AAyBE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBAAA,QAAA,CAAcuX,IAAAA,CAAd,CAAcA,CAAd,EAAuBA,IAAAA,CADzB,CACyBA,CAAvB;AA1BJ;;AA4BE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,cAAA,CAAoBuX,IAAAA,CADtB,CACsBA,CAApB;AA7BJ;;AA+BE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,cAAA;AACE,yBAAA,cAAA,CAAoBuX,IAAAA,CADtB,CACsBA,CAApB;AAhCJ;;AAkCE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CAAeuX,IAAAA,CADjB,CACiBA,CAAf;AAnCJ;;AAqCE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CACEuX,IAAAA,CADF,CACEA,CADF,EAEEA,IAAAA,CAFF,CAEEA,CAFF,EAGEA,IAAAA,CAHF,CAGEA,CAHF,EAIEA,IAAAA,CAJF,CAIEA,CAJF,EAKEA,IAAAA,CALF,CAKEA,CALF,EAMEA,IAAAA,CAPJ,CAOIA,CANF;AAtCJ;;AA+CE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBuX,IAAAA,CADnB,CACmBA,CAAjB;AAhDJ;;AAkDE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,oBAAA;AACE,yBAAA,oBAAA,CAA0BuX,IAAAA,CAD5B,CAC4BA,CAA1B;AAnDJ;;AAqDE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,YAAA;AACE,yBAAA,YAAA,CAAkBuX,IAAAA,CADpB,CACoBA,CAAlB;AAtDJ;;AAwDE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBuX,IAAAA,CADnB,CACmBA,CAAjB;AAzDJ;;AA2DE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBAAA,UAAA,CAAgBuX,IAAAA,CADlB,CACkBA,CAAhB;AA5DJ;;AA8DE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CAAmBuX,IAAAA,CADrB,CACqBA,CAAnB;AA/DJ;;AAiEE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBAAA,eAAA,CAAqBuX,IAAAA,CAArB,CAAqBA,CAArB,EAA8BA,IAAAA,CAA9B,CAA8BA,CAA9B,EAAuCA,IAAAA,CADzC,CACyCA,CAAvC;AAlEJ;;AAoEE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBAAA,iBAAA,CAAuBuX,IAAAA,CAAvB,CAAuBA,CAAvB,EAAgCA,IAAAA,CAAhC,CAAgCA,CAAhC,EAAyCA,IAAAA,CAD3C,CAC2CA,CAAzC;AArEJ;;AAuEE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBAAA,eAAA,CADF,IACE;AAxEJ;;AA0EE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CADF,IACE;AA3EJ;;AA6EE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBuX,IAAAA,CADnB,CACmBA,CAAjB;AA9EJ;;AAgFE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBAAA,OAAA,CAAauX,IAAAA,CAAb,CAAaA,CAAb,EAAsBA,IAAAA,CADxB,CACwBA,CAAtB;AAjFJ;;AAmFE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,kBAAA;AACE,yBAAA,kBAAA,CAAwBuX,IAAAA,CAD1B,CAC0BA,CAAxB;AApFJ;;AAsFE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBAAA,WAAA,CAAiBuX,IAAAA,CADnB,CACmBA,CAAjB;AAvFJ;;AAyFE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CAAeuX,IAAAA,CADjB,CACiBA,CAAf;AA1FJ;;AA4FE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,IAAA;AACE,yBADF,IACE;AA7FJ;;AA+FE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBADF,MACE;AAhGJ;;AAkGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBADF,MACE;AAnGJ;;AAqGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,UAAA;AACE,yBADF,UACE;AAtGJ;;AAwGE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,YAAA;AACE,yBADF,YACE;AAzGJ;;AA2GE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,IAAA;AACE,yBAAA,IAAA,CADF,SACE;AA5GJ;;AA8GE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACE,yBAAA,IAAA,CADF,SACE;AA/GJ;;AAiHE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,wBAAA;AACE,yBADF,wBACE;AAlHJ;;AAoHE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBAAA,iBAAA,CAAuBuX,IAAAA,CADzB,CACyBA,CAAvB;AArHJ;;AAuHE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,uBAAA;AACE,yBAAA,uBAAA,CAA6BuX,IAAAA,CAD/B,CAC+BA,CAA7B;AAxHJ;;AA0HE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,qBAAA;AACE,yBAAA,qBAAA,CAA2BuX,IAAAA,CAD7B,CAC6BA,CAA3B;AA3HJ;;AA6HE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,qBAAA;AACE,yBAAA,qBAAA,CAA2BuX,IAAAA,CAA3B,CAA2BA,CAA3B,EAAoCA,IAAAA,CADtC,CACsCA,CAApC;AA9HJ;;AAgIE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,mBAAA;AACE,yBADF,mBACE;AAjIJ;;AAmIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBADF,SACE;AApIJ;;AAsIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,WAAA;AACE,yBADF,WACE;AAvIJ;;AAyIE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,eAAA;AACE,yBADF,eACE;AA1IJ;;AA4IE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,iBAAA;AACE,yBADF,iBACE;AA7IJ;;AA+IE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACE,yBADF,QACE;AAhJJ;;AAkJE,uBAAKA,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACE,yBAAA,SAAA,CACEuX,IAAAA,CADF,CACEA,CADF,EAEEA,IAAAA,CAFF,CAEEA,CAFF,EAGEA,IAAAA,CAHF,CAGEA,CAHF,EAIEA,IAAAA,CAJF,CAIEA,CAJF,EAKEA,IAAAA,CALF,CAKEA,CALF,EAMEA,IAAAA,CAPJ,CAOIA,CANF;AAnJJ;;AA4JE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,aAAA;AACE,yBAAA,aAAA,CAAmBuX,IAAAA,CAAnB,CAAmBA,CAAnB,EAA4BA,IAAAA,CAD9B,CAC8BA,CAA5B;AA7JJ;;AA+JE,uBAAKvX,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACE,yBADF,OACE;AAhKJ;;AAkKE,uBAAA,EAAA;AACE,yBAAA,KAAA,CAAWwwC,aAAAA,CADb,KACE;AAnKJ;;AAqKE;AACEj8C,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,0BADP,EAAA,EACEA;AAtKJ;AAAA;AANkB;AAvGQ;;AAyR9B2N,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA1R4B;;AA6R9BD,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA9R4B;;AAiS9BU,YAAAA,QAAAA,GAAW;AACT,mBAAA,QAAA,CAAA,CAAA,EAAiB,KAAA,OAAA,CADR,OACT;AAlS4B;;AAqS9BD,YAAAA,aAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAgC;AAC9B,oBAAMoe,OAAAA,GAAU,KADc,OAC9B;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqBA,OAAAA,CAAAA,UAAAA,GAAqB,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA1CA,CAA0C,CAA1CA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,GAA0BnuB,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAHI,CAGJA,CAA1BmuB;AAEAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GALkB,CAK9BA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GANkB,CAM9BA;AAEAA,cAAAA,OAAAA,CAAAA,OAAAA,GAR8B,EAQ9BA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAT8B,EAS9BA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAVc,WAUd,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CAXpB,UAW9BA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAG6uB,EAAAA,CAAG7uB,OAAAA,CAfsB,QAezB6uB,CAfyB,IAY9B7uB;AAKAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwC6uB,EAAAA,CAAG,CAAC7uB,OAAAA,CAjBd,CAiBU6uB,CAAxC7uB;AAEAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CAnBS,UAmBT,CAArBA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,WAAAA,CAA+BA,OAAAA,CApBD,KAoB9BA;AAzT4B;;AA4T9B/e,YAAAA,SAAAA,GAAY;AACV,oBAAM+e,OAAAA,GAAU,KADN,OACV;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GAFF,CAEVA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,GAHF,CAGVA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAJU,KAAA,CAAA,eAIVA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GALU,KAAA,CAAA,eAKVA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,GANU,CAMVA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAPN,WAOM,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CARX,UAQW,CAArBA;AACAA,cAAAA,OAAAA,CAAAA,MAAAA,GAAiB,KAAA,UAAA,CAAA,aAAA,CATP,OASO,CAAjBA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAVU,EAUVA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAXU,EAWVA;AAvU4B;;AA0U9Bte,YAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAe;AACb,oBAAMse,OAAAA,GAAU,KADH,OACb;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,IAFC,CAEbA;AACAA,cAAAA,OAAAA,CAAAA,CAAAA,GAAYA,OAAAA,CAAAA,KAAAA,IAHC,CAGbA;AAEAA,cAAAA,OAAAA,CAAAA,OAAAA,GALa,EAKbA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GANa,EAMbA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAPH,WAOG,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CARrC,UAQbA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAG6uB,EAAAA,CAAG7uB,OAAAA,CAZK,QAYR6uB,CAZQ,IASb7uB;AAKAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwC6uB,EAAAA,CAAG,CAAC7uB,OAAAA,CAd/B,CAc2B6uB,CAAxC7uB;AAxV4B;;AA2V9Ble,YAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,oBAAMke,OAAAA,GAAU,KADD,OACf;AACA,oBAAM5a,IAAAA,GAAO4a,OAAAA,CAFE,IAEf;AACA,oBAAM+K,QAAAA,GAAW/K,OAAAA,CAHF,QAGf;;AACA,kBAAI+K,QAAAA,KAAJ,CAAA,EAAoB;AAAA;AAJL;;AAQf,oBAAMK,aAAAA,GAAgBpL,OAAAA,CARP,aAQf;AACA,oBAAMqL,WAAAA,GAAcrL,OAAAA,CATL,WASf;AACA,oBAAMsL,WAAAA,GAActL,OAAAA,CAVL,WAUf;AACA,oBAAMuL,aAAAA,GAAgBvL,OAAAA,CAXP,aAWf;AACA,oBAAMwL,UAAAA,GAAaxL,OAAAA,CAAAA,UAAAA,GAZJ,aAYf;AACA,oBAAM2L,QAAAA,GAAWvmB,IAAAA,CAbF,QAaf;AACA,oBAAMwmB,UAAAA,GAAaD,QAAAA,GAAAA,CAAAA,GAAe,CAdnB,CAcf;AACA,oBAAME,eAAAA,GAAkBzmB,IAAAA,CAfT,eAef;AACA,oBAAM0mB,iBAAAA,GAAoBf,QAAAA,GAAW/K,OAAAA,CAAAA,UAAAA,CAhBtB,CAgBsBA,CAArC;AAEA,kBAAI2J,CAAAA,GAlBW,CAkBf;;AACA,mBAAA,MAAA,KAAA,IAAA,MAAA,EAA4B;AAC1B,oBAAIwC,KAAAA,KAAJ,IAAA,EAAoB;AAElBxC,kBAAAA,CAAAA,IAAK4B,aAAAA,GAFa,WAElB5B;AAFkB;AAApB,iBAAA,MAIO,IAAIyC,CAAAA,GAAAA,KAAAA,CAAAA,KAAAA,EAAJ,KAAIA,CAAJ,EAAkB;AACvBzC,kBAAAA,CAAAA,IAAMiC,UAAAA,GAAAA,KAAAA,GAAD,QAACA,GADiB,IACvBjC;AADuB;AALC;;AAU1B,sBAAM2C,OAAAA,GAAW,CAAA,KAAA,CAAA,OAAA,GAAA,WAAA,GAAD,CAAC,IAVS,WAU1B;AACA,sBAAMC,SAAAA,GAAYJ,KAAAA,CAXQ,QAW1B;AACA,oBAAA,OAAA,EAZ0B,OAY1B;AACA,oBAAI98B,KAAAA,GAAQ88B,KAAAA,CAbc,KAa1B;;AACA,oBAAA,QAAA,EAAc;AACZ,sBADY,EACZ;AACA,wBAAMM,OAAAA,GAAUN,KAAAA,CAAAA,OAAAA,IAFJ,eAEZ;AACAO,kBAAAA,EAAAA,GAAKP,KAAAA,CAAAA,OAAAA,GAAgBM,OAAAA,CAAhBN,CAAgBM,CAAhBN,GAA6B98B,KAAAA,GAHtB,GAGZq9B;AACAA,kBAAAA,EAAAA,GAAK,CAAA,EAAA,GAJO,iBAIZA;AACA,wBAAMC,EAAAA,GAAKF,OAAAA,CAAAA,CAAAA,CAAAA,GALC,iBAKZ;AAEAp9B,kBAAAA,KAAAA,GAAQo9B,OAAAA,GAAU,CAACA,OAAAA,CAAXA,CAAWA,CAAXA,GAPI,KAOZp9B;AACAu9B,kBAAAA,OAAAA,GAAUF,EAAAA,GARE,aAQZE;AACAC,kBAAAA,OAAAA,GAAW,CAAA,CAAA,GAAD,EAAC,IATC,aASZA;AATF,iBAAA,MAUO;AACLD,kBAAAA,OAAAA,GAAUjD,CAAAA,GADL,aACLiD;AACAC,kBAAAA,OAAAA,GAFK,CAELA;AA1BwB;;AA6B1B,oBAAIV,KAAAA,CAAAA,QAAAA,IAAkB/mB,IAAAA,CAAtB,WAAA,EAAwC;AACtC4a,kBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAqBA,OAAAA,CAAAA,CAAAA,GADiB,OACtCA;;AACA,sBAAA,QAAA,EAAc;AACZA,oBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAqB,CAACA,OAAAA,CAAD,CAAA,GADT,OACZA;AAHoC;;AAKtCA,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,WAAAA,IALsC,SAKtCA;AALF,iBAAA,MA7B0B,CAAA;;AA0C1B,oBA1C0B,SA0C1B;;AACA,oBAAA,QAAA,EAAc;AACZkN,kBAAAA,SAAAA,GAAY79B,KAAAA,GAAAA,iBAAAA,GAA4Bi9B,OAAAA,GAD5B,aACZY;AADF,iBAAA,MAEO;AACLA,kBAAAA,SAAAA,GAAY79B,KAAAA,GAAAA,iBAAAA,GAA4Bi9B,OAAAA,GADnC,aACLY;AA9CwB;;AAiD1BvD,gBAAAA,CAAAA,IAjD0B,SAiD1BA;AApEa;;AAsEf3J,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAGEA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAzEa,GAyEbA,CAHFA;;AAKA,kBAAA,QAAA,EAAc;AACZA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAGEA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAJU,GAIVA,CAHFA;AADF,eAAA,MAMO;AACLA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwC6uB,EAAAA,CAAG,CAAC7uB,OAAAA,CADvC,CACmC6uB,CAAxC7uB;AAlFa;;AAqFf,kBAAA,QAAA,EAAc;AACZA,gBAAAA,OAAAA,CAAAA,CAAAA,IADY,CACZA;AADF,eAAA,MAEO;AACLA,gBAAAA,OAAAA,CAAAA,CAAAA,IAAa2J,CAAAA,GADR,UACL3J;AAxFa;;AA2FfA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CA3FnC,UA2FfA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAG6uB,EAAAA,CAAG7uB,OAAAA,CA/FO,QA+FV6uB,CA/FU,IA4Ff7uB;;AAKA,kBAAIA,OAAAA,CAAAA,SAAAA,KAAsBusB,YAAAA,CAA1B,SAAA,EAAkD;AAChDvsB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiDA,OAAAA,CADD,SAChDA;AAlGa;;AAoGf,kBAAIA,OAAAA,CAAAA,UAAAA,KAAuBusB,YAAAA,CAA3B,UAAA,EAAoD;AAClDvsB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAkDA,OAAAA,CADA,UAClDA;AArGa;;AAwGf,oBAAMgL,cAAAA,GACJhL,OAAAA,CAAAA,iBAAAA,GAA4BzpB,KAAAA,CAAAA,iBAAAA,CAzGf,gBAwGf;;AAEA,kBACEy0B,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,IAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,oBAAIypB,OAAAA,CAAAA,SAAAA,KAAsBusB,YAAAA,CAA1B,SAAA,EAAkD;AAChDvsB,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA2CA,OAAAA,CADK,SAChDA;AAFF;;AAIA,oBAAIA,OAAAA,CAAAA,SAAAA,GAAJ,CAAA,EAA2B;AACzBA,kBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAmDA,OAAAA,CAD1B,SACzBA;AALF;AAHF,eAAA,MAUO,IAAIA,OAAAA,CAAAA,iBAAAA,KAA8BzpB,KAAAA,CAAAA,iBAAAA,CAAlC,WAAA,EAAiE;AAGtEypB,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAHsE,aAGtEA;AAHK,eAAA,MAIA;AACLA,gBAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EADK,MACLA;AAzHa;;AA4Hf,kBACEgL,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAAnBy0B,MAAAA,IACAA,cAAAA,KAAmBz0B,KAAAA,CAAAA,iBAAAA,CAFrB,WAAA,EAGE;AACA,sBAAMo5C,cAAAA,GAAiB,KAAK,OAAA,CAAA,eAAA,IAD5B,CACuB,CAAvB;;AACA,qBAAA,oBAAA,CAA0B3vB,OAAAA,CAA1B,KAAA,EAFA,cAEA;AAjIa;;AAuIf,kBAAI4vB,UAAAA,GAAa5vB,OAAAA,CAvIF,UAuIf;;AACA,kBAAIA,OAAAA,CAAAA,QAAAA,KAAJ,CAAA,EAA4B;AAC1B4vB,gBAAAA,UAAAA,GAAaA,UAAAA,CADa,KACbA,EAAbA;AACAA,gBAAAA,UAAAA,CAAAA,CAAAA,CAAAA,IAAiB5vB,OAAAA,CAFS,QAE1B4vB;AA1Ia;;AA6If5vB,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,GAAG6vB,EAAAA,CAAH,UAAGA,CAAH,UAA2BhB,EAAAA,CAhJd,UAgJcA,CAhJd,OA6If7uB;AAKAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,cAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAlJe,UAkJfA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,CAAAA,WAAAA,CAA+BA,OAAAA,CAnJhB,KAmJfA;AACAA,cAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAA2BA,OAAAA,CApJZ,UAoJfA;;AAEA,mBAAA,qBAAA,GAAA,WAAA,CAAyCA,OAAAA,CAtJ1B,UAsJf;AAjf4B;;AAof9Bre,YAAAA,kBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,mBAAA,UAAA,CAAgB,CADO,CACvB;AACA,mBAAA,QAAA,CAAA,CAAA,EAFuB,CAEvB;AAtf4B;;AAyf9BmuC,YAAAA,YAAAA,CAAAA,OAAAA,EAAsB;AACpB,kBAAI,CAACtlB,OAAAA,CAAL,IAAA,EAAmB;AACjB,sBAAM,IAAA,KAAA,CACJ,2CAFe,6DACX,CAAN;AAFkB;;AAOpB,kBAAI,CAAC,KAAL,QAAA,EAAoB;AAClB,qBAAA,QAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CADE,WACF,CAAhB;AACA,qBAAA,QAAA,CAAA,cAAA,CAAA,IAAA,EAAA,MAAA,EAFkB,UAElB;AACA,qBAAA,IAAA,CAAA,WAAA,CAAsB,KAHJ,QAGlB;AAVkB;;AAapB,oBAAMz6B,GAAAA,GAAMy+C,CAAAA,GAAAA,KAAAA,CAAAA,eAAAA,EACVhkB,OAAAA,CADUgkB,IAAAA,EAEVhkB,OAAAA,CAFUgkB,QAAAA,EAGV,KAhBkB,eAaRA,CAAZ;AAKA,mBAAA,QAAA,CAAA,WAAA,IACE,8BAA8BhkB,OAAAA,CAA9B,UAAA,IAAA,GACA,aApBkB,GAAA,QAkBpB;AA3gB4B;;AAghB9BjpB,YAAAA,OAAAA,CAAAA,OAAAA,EAAiB;AACf,oBAAMye,OAAAA,GAAU,KADD,OACf;AACA,oBAAMwK,OAAAA,GAAU,KAAA,UAAA,CAAA,GAAA,CAAoBulB,OAAAA,CAFrB,CAEqBA,CAApB,CAAhB;AACA,kBAAIx6B,IAAAA,GAAOw6B,OAAAA,CAHI,CAGJA,CAAX;AACA/vB,cAAAA,OAAAA,CAAAA,IAAAA,GAJe,OAIfA;;AAEA,kBACE,KAAA,UAAA,IACA,CAACwK,OAAAA,CADD,WAAA,IAEA,CAAC,KAAA,aAAA,CAAmBA,OAAAA,CAHtB,UAGG,CAHH,EAIE;AACA,qBAAA,YAAA,CADA,OACA;AACA,qBAAA,aAAA,CAAmBA,OAAAA,CAAnB,UAAA,IAFA,OAEA;AAZa;;AAcfxK,cAAAA,OAAAA,CAAAA,UAAAA,GAAqBwK,OAAAA,CAAAA,UAAAA,IAdN,KAAA,CAAA,oBAcfxK;AAEA,kBAAIyK,IAAAA,GAhBW,QAgBf;;AACA,kBAAID,OAAAA,CAAJ,KAAA,EAAmB;AACjBC,gBAAAA,IAAAA,GADiB,KACjBA;AADF,eAAA,MAEO,IAAID,OAAAA,CAAJ,IAAA,EAAkB;AACvBC,gBAAAA,IAAAA,GADuB,MACvBA;AApBa;;AAsBf,oBAAMC,MAAAA,GAASF,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA,GAtBA,QAsBf;;AAEA,kBAAIjV,IAAAA,GAAJ,CAAA,EAAc;AACZA,gBAAAA,IAAAA,GAAO,CADK,IACZA;AACAyK,gBAAAA,OAAAA,CAAAA,aAAAA,GAAwB,CAFZ,CAEZA;AAFF,eAAA,MAGO;AACLA,gBAAAA,OAAAA,CAAAA,aAAAA,GADK,CACLA;AA5Ba;;AA8BfA,cAAAA,OAAAA,CAAAA,QAAAA,GA9Be,IA8BfA;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAAqBwK,OAAAA,CA/BN,UA+BfxK;AACAA,cAAAA,OAAAA,CAAAA,UAAAA,GAhCe,IAgCfA;AACAA,cAAAA,OAAAA,CAAAA,SAAAA,GAjCe,MAiCfA;AAEAA,cAAAA,OAAAA,CAAAA,KAAAA,GAAgB,KAAA,UAAA,CAAA,aAAA,CAnCD,WAmCC,CAAhBA;AACAA,cAAAA,OAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAwC6uB,EAAAA,CAAG,CAAC7uB,OAAAA,CApC7B,CAoCyB6uB,CAAxC7uB;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GArCe,EAqCfA;AACAA,cAAAA,OAAAA,CAAAA,OAAAA,GAtCe,EAsCfA;AAtjB4B;;AAyjB9B9e,YAAAA,OAAAA,GAAU;AAAA;;AACR,oBAAM8e,OAAAA,GAAU,KADR,OACR;;AACA,kBACEA,OAAAA,CAAAA,iBAAAA,GAA4BzpB,KAAAA,CAAAA,iBAAAA,CAA5BypB,gBAAAA,4BACAA,OAAAA,CAAAA,UADAA,wDACAA,oBAFF,aAEEA,EADAA,CADF,EAGE;AAEAA,gBAAAA,OAAAA,CAAAA,OAAAA,GAAkBA,OAAAA,CAFlB,UAEAA;AACA,qBAAA,IAAA,CAHA,SAGA;AACA,qBAJA,OAIA;AATM;AAzjBoB;;AAukB9B5gB,YAAAA,YAAAA,CAAAA,KAAAA,EAAoB;AAClB,kBAAI/P,KAAAA,GAAJ,CAAA,EAAe;AACb,qBAAA,OAAA,CAAA,SAAA,GADa,KACb;AAFgB;AAvkBU;;AA6kB9BgQ,YAAAA,UAAAA,CAAAA,KAAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,OAAA,GAAuBioB,eAAAA,CADP,KACOA,CAAvB;AA9kB4B;;AAilB9BhoB,YAAAA,WAAAA,CAAAA,KAAAA,EAAmB;AACjB,mBAAA,OAAA,CAAA,QAAA,GAAwBioB,gBAAAA,CADP,KACOA,CAAxB;AAllB4B;;AAqlB9BhoB,YAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnB,mBAAA,OAAA,CAAA,UAAA,GADmB,KACnB;AAtlB4B;;AAylB9BywC,YAAAA,cAAAA,CAAAA,WAAAA,EAA4B;AAC1B,mBAAA,OAAA,CAAA,WAAA,GAD0B,WAC1B;AA1lB4B;;AA6lB9BptC,YAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAA2B;AACzB,mBAAA,OAAA,CAAA,WAAA,GAA2B2G,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADF,CACEA,CAA3B;AA9lB4B;;AAimB9B0mC,YAAAA,YAAAA,CAAAA,SAAAA,EAAwB;AACtB,mBAAA,OAAA,CAAA,SAAA,GADsB,SACtB;AAlmB4B;;AAqmB9BptC,YAAAA,eAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAyB;AACvB,mBAAA,OAAA,CAAA,SAAA,GAAyB0G,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EADF,CACEA,CAAzB;AACA,mBAAA,OAAA,CAAA,KAAA,GAAqB,KAAA,UAAA,CAAA,aAAA,CAFE,WAEF,CAArB;AACA,mBAAA,OAAA,CAAA,OAAA,GAHuB,EAGvB;AACA,mBAAA,OAAA,CAAA,OAAA,GAJuB,EAIvB;AAzmB4B;;AA4mB9BhH,YAAAA,eAAAA,CAAAA,IAAAA,EAAsB;AACpB,mBAAA,OAAA,CAAA,WAAA,GAA2B,KAAA,mBAAA,CADP,IACO,CAA3B;AA7mB4B;;AAgnB9BE,YAAAA,aAAAA,CAAAA,IAAAA,EAAoB;AAClB,mBAAA,OAAA,CAAA,SAAA,GAAyB,KAAA,mBAAA,CADP,IACO,CAAzB;AAjnB4B;;AAonB9BO,YAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,oBAAM3T,KAAAA,GAAQ,KAAA,QAAA,CADE,KAChB;AACA,oBAAMC,MAAAA,GAAS,KAAA,QAAA,CAFC,MAEhB;;AACA,oBAAM2+B,GAAAA,GAAM1kB,KAAAA,CAAAA,IAAAA,CAAAA,gBAAAA,CAAsB,KAHlB,eAGJA,CAAZ;;AACA,oBAAM2kB,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,CAAoB,CAApB,EAJK,GAIL,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,CAAA,EAApB,MAAoB,CAApB,EALK,GAKL,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,CAAoB,CAApB,EANK,GAML,CAAX;;AACA,oBAAMC,EAAAA,GAAK,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,KAAA,EAApB,MAAoB,CAApB,EAPK,GAOL,CAAX;;AACA,oBAAMC,EAAAA,GAAKz8B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CARzB,CAQyBA,CAA9Bx8B,CAAX;AACA,oBAAM08B,EAAAA,GAAK18B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CATzB,CASyBA,CAA9Bx8B,CAAX;AACA,oBAAM28B,EAAAA,GAAK38B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAVzB,CAUyBA,CAA9Bx8B,CAAX;AACA,oBAAM48B,EAAAA,GAAK58B,IAAAA,CAAAA,GAAAA,CAASq8B,EAAAA,CAATr8B,CAASq8B,CAATr8B,EAAgBs8B,EAAAA,CAAhBt8B,CAAgBs8B,CAAhBt8B,EAAuBu8B,EAAAA,CAAvBv8B,CAAuBu8B,CAAvBv8B,EAA8Bw8B,EAAAA,CAXzB,CAWyBA,CAA9Bx8B,CAAX;AAEA,oBAAMO,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAbG,UAaH,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAdgB,EAchBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAfgB,EAehBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAmCo8B,EAAAA,GAhBnB,EAgBhBp8B;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoCq8B,EAAAA,GAjBpB,EAiBhBr8B;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,KAAA,mBAAA,CAlBlB,IAkBkB,CAAlCA;;AACA,kBAAI,KAAA,OAAA,CAAA,SAAA,GAAJ,CAAA,EAAgC;AAC9BA,gBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAA0C,KAAA,OAAA,CADZ,SAC9BA;AApBc;;AAsBhB,mBAAA,qBAAA,GAAA,WAAA,CAtBgB,IAsBhB;AA1oB4B;;AAgpB9B89C,YAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,kBAAIz5B,IAAAA,CAAAA,CAAAA,CAAAA,KAAJ,eAAA,EAAiC;AAC/B,uBAAO,KAAA,kBAAA,CADwB,IACxB,CAAP;AAFsB;;AAIxB,qBAAO,KAAA,mBAAA,CAJiB,IAIjB,CAAP;AAppB4B;;AA0pB9B05B,YAAAA,kBAAAA,CAAAA,IAAAA,EAAyB;AACvB,oBAAMviB,KAAAA,GAAQnX,IAAAA,CADS,CACTA,CAAd;AACA,oBAAM7B,YAAAA,GAAe6B,IAAAA,CAFE,CAEFA,CAArB;AACA,oBAAMiY,MAAAA,GAASjY,IAAAA,CAAAA,CAAAA,CAAAA,IAHQ,KAAA,CAAA,eAGvB;AACA,oBAAM,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAmBA,IAAAA,CAJF,CAIEA,CAAzB;AACA,oBAAMmf,KAAAA,GAAQnf,IAAAA,CALS,CAKTA,CAAd;AACA,oBAAMof,KAAAA,GAAQpf,IAAAA,CANS,CAMTA,CAAd;AACA,oBAAMqf,SAAAA,GAAYrf,IAAAA,CAPK,CAOLA,CAAlB;AAEA,oBAAM25B,QAAAA,GAAW,UAAUpB,YATJ,EAAA,EASvB;;AACA,oBAAM,CAAA,GAAA,EAAA,GAAA,IAAa,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,EAAA,EAApB,EAAoB,CAApB,EAVI,MAUJ,CAAnB;;AACA,oBAAM,CAAA,GAAA,EAAA,GAAA,IAAa,KAAA,CAAA,IAAA,CAAA,cAAA,CAAoB,CAAA,EAAA,EAApB,EAAoB,CAApB,EAXI,MAWJ,CAAnB;;AACA,oBAAM,CAAA,MAAA,EAAA,MAAA,IAAmBzlC,KAAAA,CAAAA,IAAAA,CAAAA,6BAAAA,CAZF,MAYEA,CAAzB;;AACA,oBAAM8mC,MAAAA,GAASza,KAAAA,GAbQ,MAavB;AACA,oBAAM0a,MAAAA,GAASza,KAAAA,GAdQ,MAcvB;AAEA,oBAAM0a,MAAAA,GAAS,KAAA,UAAA,CAAA,aAAA,CAhBQ,aAgBR,CAAf;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAjBuB,QAiBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAlBuB,gBAkBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAnBuB,MAmBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EApBuB,MAoBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAiC,GArBV,GAAA,EAqBvBA;AACAA,cAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAiC,GAtBV,GAAA,EAsBvBA;AAGA,oBAAMx/C,GAAAA,GAAM,KAzBW,GAyBvB;AACA,oBAAMm+C,eAAAA,GAAkB,KA1BD,eA0BvB;AACA,oBAAM/kB,SAAAA,GAAY,KAAA,OAAA,CA3BK,SA2BvB;AACA,oBAAMH,WAAAA,GAAc,KAAA,OAAA,CA5BG,WA4BvB;AAEA,oBAAM2E,IAAAA,GAAO,KAAA,UAAA,CAAA,MAAA,CAAuB6hB,GAAAA,GAAvB,GAAA,EAAkCC,GAAAA,GA9BxB,GA8BV,CAAb;AACA,mBAAA,GAAA,GA/BuB,IA+BvB;AACA,mBAAA,eAAA,GAhCuB,MAgCvB;;AACA,kBAAI3a,SAAAA,KAAJ,CAAA,EAAqB;AACnB,sBAAMa,QAAAA,GAAWptB,KAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAkB,GADhB,KACFA,CAAjB;;AACA,qBAAA,OAAA,CAAA,SAAA,GAFmB,QAEnB;AACA,qBAAA,OAAA,CAAA,WAAA,GAHmB,QAGnB;AApCqB;;AAsCvB,mBAAA,aAAA,CAAmB,KAAA,aAAA,CAtCI,YAsCJ,CAAnB;AAGA,mBAAA,GAAA,GAzCuB,GAyCvB;AACA,mBAAA,eAAA,GA1CuB,eA0CvB;AACA,mBAAA,OAAA,CAAA,SAAA,GA3CuB,SA2CvB;AACA,mBAAA,OAAA,CAAA,WAAA,GA5CuB,WA4CvB;AAEAgnC,cAAAA,MAAAA,CAAAA,WAAAA,CAAmB5hB,IAAAA,CAAAA,UAAAA,CA9CI,CA8CJA,CAAnB4hB;AACA,mBAAA,IAAA,CAAA,WAAA,CA/CuB,MA+CvB;AACA,qBAAO,QAhDgB,QAAA,GAgDvB;AA1sB4B;;AAgtB9BG,YAAAA,mBAAAA,CAAAA,IAAAA,EAA0B;AACxB,sBAAQj6B,IAAAA,CAAR,CAAQA,CAAR;AACE,qBAAA,aAAA;AACE,wBAAMk6B,SAAAA,GAAY,UAAU3B,YAD9B,EAAA,EACE;AACA,wBAAMtd,UAAAA,GAAajb,IAAAA,CAFrB,CAEqBA,CAAnB;AACA,sBAHF,QAGE;;AAEA,0BAAQA,IAAAA,CAAR,CAAQA,CAAR;AACE,yBAAA,OAAA;AACE,4BAAMm6B,MAAAA,GAASn6B,IAAAA,CADjB,CACiBA,CAAf;AACA,4BAAMo6B,MAAAA,GAASp6B,IAAAA,CAFjB,CAEiBA,CAAf;AACAq6B,sBAAAA,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAHb,oBAGa,CAAXA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAJF,SAIEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EALF,gBAKEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCF,MAAAA,CANtC,CAMsCA,CAApCE;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCF,MAAAA,CAPtC,CAOsCA,CAApCE;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCD,MAAAA,CARtC,CAQsCA,CAApCC;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCD,MAAAA,CATtC,CASsCA,CAApCC;AAVJ;;AAYE,yBAAA,QAAA;AACE,4BAAMC,UAAAA,GAAat6B,IAAAA,CADrB,CACqBA,CAAnB;AACA,4BAAMu6B,WAAAA,GAAcv6B,IAAAA,CAFtB,CAEsBA,CAApB;AACA,4BAAMw6B,WAAAA,GAAcx6B,IAAAA,CAHtB,CAGsBA,CAApB;AACA,4BAAMy6B,YAAAA,GAAez6B,IAAAA,CAJvB,CAIuBA,CAArB;AACAq6B,sBAAAA,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CALb,oBAKa,CAAXA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EANF,SAMEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EAPF,gBAOEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCE,WAAAA,CARtC,CAQsCA,CAApCF;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCE,WAAAA,CATtC,CASsCA,CAApCF;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAVF,YAUEA;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCC,UAAAA,CAXtC,CAWsCA,CAApCD;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoCC,UAAAA,CAZtC,CAYsCA,CAApCD;AACAA,sBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAbF,WAaEA;AAzBJ;;AA2BE;AACE,4BAAM,IAAA,KAAA,CAAU,6BAA6Br6B,IAAAA,CA5BjD,CA4BiDA,CA5BjD,EA4BU,CAAN;AA5BJ;;AA8BA,uBAAA,MAAA,SAAA,IAAA,UAAA,EAAoC;AAClC,0BAAM06B,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CADqB,UACrB,CAAb;AACAA,oBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoCC,SAAAA,CAFF,CAEEA,CAApCD;AACAA,oBAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAwCC,SAAAA,CAHN,CAGMA,CAAxCD;AACAL,oBAAAA,QAAAA,CAAAA,WAAAA,CAJkC,IAIlCA;AAvCJ;;AAyCE,uBAAA,IAAA,CAAA,WAAA,CAzCF,QAyCE;AACA,yBAAO,QA3CX,SAAA,GA2CI;;AACF,qBAAA,MAAA;AACEr9C,mBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EADF,4BACEA;AACA,yBA9CJ,IA8CI;;AACF,qBAAA,OAAA;AACE,yBAhDJ,SAgDI;;AACF;AACE,wBAAM,IAAA,KAAA,CAAU,oBAAoBgjB,IAAAA,CAlDxC,CAkDwCA,CAlDxC,EAkDU,CAAN;AAlDJ;AAjtB4B;;AAuwB9BjX,YAAAA,OAAAA,CAAAA,SAAAA,EAAAA,SAAAA,EAA8B;AAC5B,mBAAA,OAAA,CAAA,SAAA,GAD4B,SAC5B;AACA,mBAAA,OAAA,CAAA,SAAA,GAF4B,SAE5B;AAzwB4B;;AA4wB9BqF,YAAAA,aAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAyB;AACvB,oBAAMmb,OAAAA,GAAU,KADO,OACvB;AACA,kBAAI2J,CAAAA,GAAI3J,OAAAA,CAAR,CAAA;AAAA,kBACEuG,CAAAA,GAAIvG,OAAAA,CAHiB,CAEvB;AAEA,kBAAI5W,CAAAA,GAJmB,EAIvB;AACA,kBAAI0Z,CAAAA,GALmB,CAKvB;;AAEA,mBAAA,MAAA,EAAA,IAAA,GAAA,EAAsB;AACpB,wBAAQuuB,EAAAA,GAAR,CAAA;AACE,uBAAKnyC,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACA,0BAAMl3B,KAAAA,GAAQonB,IAAAA,CAAKqM,CAHrB,EAGgBrM,CAAd;AACA,0BAAMnnB,MAAAA,GAASmnB,IAAAA,CAAKqM,CAJtB,EAIiBrM,CAAf;AACA,0BAAMoT,EAAAA,GAAKF,CAAAA,GALb,KAKE;AACA,0BAAMG,EAAAA,GAAKvD,CAAAA,GANb,MAME;AACAnd,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEylC,EAAAA,CAFFzlC,CAEEylC,CAFFzlC,EAGEylC,EAAAA,CAHFzlC,CAGEylC,CAHFzlC,EAAAA,GAAAA,EAKEylC,EAAAA,CALFzlC,EAKEylC,CALFzlC,EAMEylC,EAAAA,CANFzlC,CAMEylC,CANFzlC,EAAAA,GAAAA,EAQEylC,EAAAA,CARFzlC,EAQEylC,CARFzlC,EASEylC,EAAAA,CATFzlC,EASEylC,CATFzlC,EAAAA,GAAAA,EAWEylC,EAAAA,CAXFzlC,CAWEylC,CAXFzlC,EAYEylC,EAAAA,CAZFzlC,EAYEylC,CAZFzlC,EAPF,GAOEA;AARJ;;AAwBE,uBAAKlK,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACAnd,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAYylC,EAAAA,CAAZzlC,CAAYylC,CAAZzlC,EAAmBylC,EAAAA,CAHrB,CAGqBA,CAAnBzlC;AA3BJ;;AA6BE,uBAAKlK,KAAAA,CAAAA,GAAAA,CAAL,MAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CADX,EACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAFX,EAEMrM,CAAJ8P;AACAnd,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAYylC,EAAAA,CAAZzlC,CAAYylC,CAAZzlC,EAAmBylC,EAAAA,CAHrB,CAGqBA,CAAnBzlC;AAhCJ;;AAkCE,uBAAKlK,KAAAA,CAAAA,GAAAA,CAAL,OAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GADX,CACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAFX,CAEMrM,CAAJ8P;AACAnd,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEylC,EAAAA,CAAGp4B,IAAAA,CAFLrN,CAEKqN,CAAHo4B,CAFFzlC,EAGEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GAHV1Z,CAGKqN,CAAHo4B,CAHFzlC,EAIEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GAJV1Z,CAIKqN,CAAHo4B,CAJFzlC,EAKEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GALV1Z,CAKKqN,CAAHo4B,CALFzlC,EAMEylC,EAAAA,CANFzlC,CAMEylC,CANFzlC,EAOEylC,EAAAA,CAVJ,CAUIA,CAPFzlC;AASA0Z,oBAAAA,CAAAA,IAZF,CAYEA;AA9CJ;;AAgDE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEkK,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEylC,EAAAA,CAFFzlC,CAEEylC,CAFFzlC,EAGEylC,EAAAA,CAHFzlC,CAGEylC,CAHFzlC,EAIEylC,EAAAA,CAAGp4B,IAAAA,CAJLrN,CAIKqN,CAAHo4B,CAJFzlC,EAKEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GALV1Z,CAKKqN,CAAHo4B,CALFzlC,EAMEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GANV1Z,CAMKqN,CAAHo4B,CANFzlC,EAOEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GARZ,CAQOrM,CAAHo4B,CAPFzlC;AASAugB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GAVX,CAUMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAXX,CAWMrM,CAAJ8P;AACAzD,oBAAAA,CAAAA,IAZF,CAYEA;AA5DJ;;AA8DE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,QAAA;AACEyqB,oBAAAA,CAAAA,GAAIlT,IAAAA,CAAKqM,CAAAA,GADX,CACMrM,CAAJkT;AACApD,oBAAAA,CAAAA,GAAI9P,IAAAA,CAAKqM,CAAAA,GAFX,CAEMrM,CAAJ8P;AACAnd,oBAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAEEylC,EAAAA,CAAGp4B,IAAAA,CAFLrN,CAEKqN,CAAHo4B,CAFFzlC,EAGEylC,EAAAA,CAAGp4B,IAAAA,CAAKqM,CAAAA,GAHV1Z,CAGKqN,CAAHo4B,CAHFzlC,EAIEylC,EAAAA,CAJFzlC,CAIEylC,CAJFzlC,EAKEylC,EAAAA,CALFzlC,CAKEylC,CALFzlC,EAMEylC,EAAAA,CANFzlC,CAMEylC,CANFzlC,EAOEylC,EAAAA,CAVJ,CAUIA,CAPFzlC;AASA0Z,oBAAAA,CAAAA,IAZF,CAYEA;AA1EJ;;AA4EE,uBAAK5jB,KAAAA,CAAAA,GAAAA,CAAL,SAAA;AACEkK,oBAAAA,CAAAA,CAAAA,IAAAA,CADF,GACEA;AA7EJ;AAAA;AARqB;;AA0FvBA,cAAAA,CAAAA,GAAIA,CAAAA,CAAAA,IAAAA,CA1FmB,GA0FnBA,CAAJA;;AAEA,kBACE4W,OAAAA,CAAAA,IAAAA,IACA4J,GAAAA,CAAAA,MAAAA,GADA5J,CAAAA,IAEA4J,GAAAA,CAAAA,CAAAA,CAAAA,KAAW1qB,KAAAA,CAAAA,GAAAA,CAFX8gB,SAAAA,IAGA4J,GAAAA,CAAAA,CAAAA,CAAAA,KAAW1qB,KAAAA,CAAAA,GAAAA,CAJb,MAAA,EAKE;AAIAkK,gBAAAA,CAAAA,GAAI4W,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,IAJJ,CAIA5W;AATF,eAAA,MAUO;AACL4W,gBAAAA,OAAAA,CAAAA,IAAAA,GAAe,KAAA,UAAA,CAAA,aAAA,CADV,UACU,CAAfA;;AACA,qBAAA,qBAAA,GAAA,WAAA,CAAyCA,OAAAA,CAFpC,IAEL;AAxGqB;;AA2GvBA,cAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EA3GuB,CA2GvBA;AACAA,cAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EA5GuB,MA4GvBA;AAIAA,cAAAA,OAAAA,CAAAA,OAAAA,GAAkBA,OAAAA,CAhHK,IAgHvBA;AACAA,cAAAA,OAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAjHuB,CAiHvBA;AA73B4B;;AAg4B9Blf,YAAAA,OAAAA,GAAU;AACR,oBAAMkf,OAAAA,GAAU,KADR,OACR;AAGAA,cAAAA,OAAAA,CAAAA,IAAAA,GAJQ,IAIRA;;AAEA,kBAAI,CAAC,KAAL,WAAA,EAAuB;AAAA;AANf;;AASR,kBAAI,CAACA,OAAAA,CAAL,OAAA,EAAsB;AACpB,qBAAA,WAAA,GADoB,IACpB;AADoB;AATd;;AAeR,oBAAMsxB,MAAAA,GAAS,WAAWxC,SAflB,EAAA,EAeR;AACA,oBAAMyC,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAhBT,cAgBS,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAjBQ,MAiBRA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA2C1B,EAAAA,CAAG,KAlBtC,eAkBmCA,CAA3C0B;AAGA,oBAAMC,WAAAA,GAAcxxB,OAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CArBZ,IAqBYA,CAApB;;AACA,kBAAI,KAAA,WAAA,KAAJ,SAAA,EAAoC;AAClCwxB,gBAAAA,WAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EADkC,SAClCA;AADF,eAAA,MAEO;AACLA,gBAAAA,WAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EADK,SACLA;AAzBM;;AA2BR,mBAAA,WAAA,GA3BQ,IA2BR;AACAD,cAAAA,QAAAA,CAAAA,WAAAA,CA5BQ,WA4BRA;AACA,mBAAA,IAAA,CAAA,WAAA,CA7BQ,QA6BR;;AAEA,kBAAIvxB,OAAAA,CAAJ,aAAA,EAA2B;AAGzBA,gBAAAA,OAAAA,CAAAA,SAAAA,GAHyB,IAGzBA;AACA,qBAAA,UAAA,CAAA,OAAA,CAAwB,UAAA,IAAA,EAAgB;AACtC6B,kBAAAA,IAAAA,CAAAA,SAAAA,GADsC,IACtCA;AADF,iBAAA;AAIA0vB,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA2CvxB,OAAAA,CARlB,aAQzBuxB;AAvCM;;AAyCRvxB,cAAAA,OAAAA,CAAAA,aAAAA,GAAwB,QAzChB,MAAA,GAyCRA;AAEA,mBAAA,IAAA,GA3CQ,IA2CR;AA36B4B;;AA86B9Bjf,YAAAA,IAAAA,CAAAA,IAAAA,EAAW;AACT,mBAAA,WAAA,GADS,IACT;AA/6B4B;;AAk7B9BX,YAAAA,SAAAA,GAAY;AACV,oBAAM4f,OAAAA,GAAU,KADN,OACV;;AACA,kBAAIA,OAAAA,CAAJ,IAAA,EAAkB;AAChB,sBAAM5W,CAAAA,GAAI,GAAG4W,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EADG,GACHA,CADG,GAChB;AACAA,gBAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAFgB,CAEhBA;AAJQ;AAl7BkB;;AA07B9B1e,YAAAA,UAAAA,CAAAA,OAAAA,EAAoB;AAClB,mBAAA,OAAA,CAAA,OAAA,GAAuB,CADL,OAClB;AA37B4B;;AA87B9BG,YAAAA,WAAAA,CAAAA,QAAAA,EAAsB;AACpB,mBAAA,OAAA,CAAA,QAAA,GADoB,QACpB;AA/7B4B;;AAk8B9BD,YAAAA,oBAAAA,CAAAA,iBAAAA,EAAwC;AACtC,mBAAA,OAAA,CAAA,iBAAA,GADsC,iBACtC;AAn8B4B;;AAs8B9BH,YAAAA,SAAAA,CAAAA,KAAAA,EAAiB;AACf,mBAAA,OAAA,CAAA,UAAA,GAA0BrP,KAAAA,GADX,GACf;AAv8B4B;;AA08B9ByN,YAAAA,kBAAAA,CAAAA,MAAAA,EA18B8B,CAAA;;AA88B9BC,YAAAA,WAAAA,CAAAA,QAAAA,EA98B8B,CAAA;;AAk9B9BC,YAAAA,SAAAA,CAAAA,MAAAA,EAAkB;AAChB,mBAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAAA,MAAA,EAAmC;AACjC,wBAAA,GAAA;AACE,uBAAA,IAAA;AACE,yBAAA,YAAA,CADF,KACE;AAFJ;;AAIE,uBAAA,IAAA;AACE,yBAAA,UAAA,CADF,KACE;AALJ;;AAOE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AARJ;;AAUE,uBAAA,IAAA;AACE,yBAAA,aAAA,CADF,KACE;AAXJ;;AAaE,uBAAA,GAAA;AACE,yBAAA,OAAA,CAAaoI,KAAAA,CAAb,CAAaA,CAAb,EAAuBA,KAAAA,CADzB,CACyBA,CAAvB;AAdJ;;AAgBE,uBAAA,IAAA;AACE,yBAAA,kBAAA,CADF,KACE;AAjBJ;;AAmBE,uBAAA,IAAA;AACE,yBAAA,WAAA,CADF,KACE;AApBJ;;AAsBE,uBAAA,MAAA;AACE,yBAAA,OAAA,CADF,KACE;AAvBJ;;AAyBE,uBAAA,IAAA;AACE,yBAAA,cAAA,CADF,KACE;AA1BJ;;AA4BE,uBAAA,IAAA;AACE,yBAAA,YAAA,CADF,KACE;AA7BJ;;AA+BE;AACEtU,qBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,wCADP,GAAA,EACEA;AAhCJ;AAAA;AAFc;AAl9BY;;AA0/B9B+M,YAAAA,IAAAA,GAAO;AACL,oBAAMwf,OAAAA,GAAU,KADX,OACL;;AACA,kBAAIA,OAAAA,CAAJ,OAAA,EAAqB;AACnBA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA6CA,OAAAA,CAD1B,SACnBA;AACAA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAqDA,OAAAA,CAFlC,SAEnBA;AACA,qBAHmB,OAGnB;AALG;AA1/BuB;;AAmgC9B1f,YAAAA,MAAAA,GAAS;AACP,oBAAM0f,OAAAA,GAAU,KADT,OACP;;AACA,kBAAIA,OAAAA,CAAJ,OAAA,EAAqB;AACnB,qBAAA,oBAAA,CAA0BA,OAAAA,CADP,OACnB;;AACAA,gBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAFmB,MAEnBA;AACA,qBAHmB,OAGnB;AALK;AAngCqB;;AA+gC9ByxB,YAAAA,oBAAAA,CAAAA,OAAAA,EAA8B9B,cAAAA,GAA9B8B,CAAAA,EAAkD;AAChD,oBAAMzxB,OAAAA,GAAU,KADgC,OAChD;AACA,kBAAI0xB,SAAAA,GAAY1xB,OAAAA,CAFgC,SAEhD;;AACA,kBAAI2vB,cAAAA,KAAAA,CAAAA,IAAwB+B,SAAAA,CAAAA,MAAAA,GAA5B,CAAA,EAAkD;AAChDA,gBAAAA,SAAAA,GAAY,SAAA,CAAA,GAAA,CAAc,UAAA,KAAA,EAAiB;AACzC,yBAAO/B,cAAAA,GADkC,KACzC;AADF+B,iBAAY,CAAZA;AAJ8C;;AAQhD/Q,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAuC3gB,OAAAA,CARS,WAQhD2gB;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAA+C3gB,OAAAA,CATC,WAShD2gB;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAAkDkO,EAAAA,CAAG7uB,OAAAA,CAVL,UAUE6uB,CAAlDlO;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAA+C3gB,OAAAA,CAXC,OAWhD2gB;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,iBAAAA,EAAgD3gB,OAAAA,CAZA,QAYhD2gB;AACAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAGEkO,EAAAA,CAAGc,cAAAA,GAAiB3vB,OAAAA,CAApB6uB,SAAAA,CAAAA,GAhB8C,IAahDlO;AAKAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAGE+Q,SAAAA,CAAAA,GAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CArB8C,GAqB9CA,CAHF/Q;AAKAA,cAAAA,OAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EAGEkO,EAAAA,CAAGc,cAAAA,GAAiB3vB,OAAAA,CAApB6uB,SAAAA,CAAAA,GA1B8C,IAuBhDlO;AAtiC4B;;AA6iC9BlgC,YAAAA,MAAAA,GAAS;AACP,kBAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxB,qBAAA,OAAA,CAAA,OAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EADwB,SACxB;AAFK;;AAIP,mBAJO,IAIP;AAjjC4B;;AAojC9BC,YAAAA,UAAAA,GAAa;AAGX,mBAHW,MAGX;AACA,mBAJW,IAIX;AAxjC4B;;AA2jC9BC,YAAAA,YAAAA,GAAe;AACb,kBAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxB,qBAAA,OAAA,CAAA,OAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EADwB,SACxB;AAFW;;AAIb,mBAJa,UAIb;AA/jC4B;;AAkkC9BJ,YAAAA,WAAAA,GAAc;AACZ,mBADY,SACZ;AACA,mBAFY,MAEZ;AApkC4B;;AAukC9BK,YAAAA,eAAAA,GAAkB;AAChB,mBADgB,SAChB;AACA,mBAFgB,UAEhB;AAzkC4B;;AA4kC9BC,YAAAA,iBAAAA,GAAoB;AAClB,mBADkB,SAClB;AACA,mBAFkB,YAElB;AA9kC4B;;AAilC9B+D,YAAAA,wBAAAA,GAA2B;AACzB,oBAAMxS,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CADY,UACZ,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAFyB,GAEzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAHyB,GAGzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAJyB,KAIzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EALyB,KAKzBA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,KAAA,OAAA,CANT,SAMzBA;;AAEA,mBAAA,qBAAA,GAAA,WAAA,CARyB,IAQzB;AAzlC4B;;AA4lC9BmS,YAAAA,iBAAAA,CAAAA,KAAAA,EAAyB;AACvB,oBAAM8d,OAAAA,GAAUqN,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA,IACZ,KAAA,UAAA,CAAA,GAAA,CADYA,KACZ,CADYA,GAEZ,KAAA,IAAA,CAAA,GAAA,CAHmB,KAGnB,CAFJ;;AAGA,kBAAI,CAAJ,OAAA,EAAc;AACZj8B,iBAAAA,GAAAA,KAAAA,CAAAA,IAAAA,EAAK,kCADO,KAAA,mBACZA;AADY;AAJS;;AAQvB,mBAAA,uBAAA,CARuB,OAQvB;AApmC4B;;AAumC9B+Q,YAAAA,uBAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EAAuC;AACrC,oBAAMnV,KAAAA,GAAQgzB,OAAAA,CADuB,KACrC;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CAFsB,MAErC;AAEA,oBAAMsvB,MAAAA,GAAS/E,mBAAAA,CAAAA,OAAAA,EAA6B,KAA7BA,eAAAA,EAAmD,CAAC,CAJ9B,IAItBA,CAAf;AACA,oBAAMgF,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CALoB,UAKpB,CAAjB;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EANqC,GAMrCA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAPqC,GAOrCA;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAuC/C,EAAAA,CARF,KAQEA,CAAvC+C;AACAA,cAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC/C,EAAAA,CATH,MASGA,CAAxC+C;AACA,mBAAA,OAAA,CAAA,OAAA,GAVqC,QAUrC;AACA,mBAAA,IAAA,CAXqC,SAWrC;AAEA,oBAAMC,KAAAA,GAAQ,KAAA,UAAA,CAAA,aAAA,CAbuB,WAavB,CAAd;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,QAAAA,EAAAA,YAAAA,EAdqC,MAcrCA;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAfqC,GAerCA;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAgChD,EAAAA,CAAG,CAhBE,MAgBLA,CAAhCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAoChD,EAAAA,CAAAA,KAAAA,CAAAA,GAjBC,IAiBrCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAqChD,EAAAA,CAAAA,MAAAA,CAAAA,GAlBA,IAkBrCgD;AACAA,cAAAA,KAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAGE,SAAShD,EAAAA,CAAG,IAAZ,KAASA,CAAT,IAA0BA,EAAAA,CAAG,CAAA,CAAA,GAtBM,MAsBTA,CAtBS,GAmBrCgD;;AAKA,kBAAA,IAAA,EAAU;AACRjvB,gBAAAA,IAAAA,CAAAA,WAAAA,CADQ,KACRA;AADF,eAAA,MAEO;AACL,qBAAA,qBAAA,GAAA,WAAA,CADK,KACL;AA3BmC;AAvmCT;;AAsoC9Bve,YAAAA,qBAAAA,CAAAA,OAAAA,EAA+B;AAC7B,oBAAM2b,OAAAA,GAAU,KADa,OAC7B;AACA,oBAAM3wB,KAAAA,GAAQgzB,OAAAA,CAFe,KAE7B;AACA,oBAAM/yB,MAAAA,GAAS+yB,OAAAA,CAHc,MAG7B;AACA,oBAAM8H,SAAAA,GAAYnK,OAAAA,CAJW,SAI7B;AAEAA,cAAAA,OAAAA,CAAAA,MAAAA,GAAiB,OAAO+uB,SANK,EAAA,EAM7B/uB;AACA,oBAAM4C,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAPgB,UAOhB,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAgC5C,OAAAA,CARH,MAQ7B4C;AAEA,oBAAMxwB,IAAAA,GAAO,KAAA,UAAA,CAAA,aAAA,CAVgB,UAUhB,CAAb;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAX6B,GAW7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAZ6B,GAY7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAmCy8C,EAAAA,CAbN,KAaMA,CAAnCz8C;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAoCy8C,EAAAA,CAdP,MAcOA,CAApCz8C;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAf6B,SAe7BA;AACAA,cAAAA,IAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAkC,QAAQ4tB,OAAAA,CAhBb,MAAA,GAgB7B5tB;AAEA,mBAAA,IAAA,CAAA,WAAA,CAlB6B,IAkB7B;;AACA,mBAAA,qBAAA,GAAA,WAAA,CAnB6B,IAmB7B;;AAEA,mBAAA,uBAAA,CAAA,OAAA,EArB6B,IAqB7B;AA3pC4B;;AA8pC9BwR,YAAAA,qBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAoC;AAClC,kBAAI6E,KAAAA,CAAAA,OAAAA,CAAAA,MAAAA,KAAyBimB,MAAAA,CAAAA,MAAAA,KAA7B,CAAA,EAAkD;AAChD,qBAAA,SAAA,CACEA,MAAAA,CADF,CACEA,CADF,EAEEA,MAAAA,CAFF,CAEEA,CAFF,EAGEA,MAAAA,CAHF,CAGEA,CAHF,EAIEA,MAAAA,CAJF,CAIEA,CAJF,EAKEA,MAAAA,CALF,CAKEA,CALF,EAMEA,MAAAA,CAP8C,CAO9CA,CANF;AAFgC;;AAYlC,kBAAA,IAAA,EAAU;AACR,sBAAMr/B,KAAAA,GAAQs/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CADhB,CACgBA,CAAxB;AACA,sBAAMr/B,MAAAA,GAASq/B,IAAAA,CAAAA,CAAAA,CAAAA,GAAUA,IAAAA,CAFjB,CAEiBA,CAAzB;AAEA,sBAAMijB,QAAAA,GAAW,KAAA,UAAA,CAAA,aAAA,CAJT,UAIS,CAAjB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAmCjjB,IAAAA,CAL3B,CAK2BA,CAAnCijB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAmCjjB,IAAAA,CAN3B,CAM2BA,CAAnCijB;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAuC/C,EAAAA,CAP/B,KAO+BA,CAAvC+C;AACAA,gBAAAA,QAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC/C,EAAAA,CARhC,MAQgCA,CAAxC+C;AACA,qBAAA,OAAA,CAAA,OAAA,GATQ,QASR;AACA,qBAAA,IAAA,CAVQ,SAUR;AACA,qBAXQ,OAWR;AAvBgC;AA9pCN;;AAyrC9B/tC,YAAAA,mBAAAA,GAzrC8B,CAAA;;AA8rC9BwU,YAAAA,WAAAA,CAAAA,QAAAA,EAAsB;AACpB,oBAAMtnB,GAAAA,GAAM,KAAA,UAAA,CAAA,MAAA,CAAuB82B,QAAAA,CAAvB,KAAA,EAAuCA,QAAAA,CAD/B,MACR,CAAZ;AAGA,oBAAMiqB,WAAAA,GAAc,KAAA,UAAA,CAAA,aAAA,CAJA,UAIA,CAApB;AACA/gD,cAAAA,GAAAA,CAAAA,WAAAA,CALoB,WAKpBA;AACA,mBAAA,IAAA,GANoB,WAMpB;AAIA,oBAAMghD,SAAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CAVE,OAUF,CAAlB;AACAA,cAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA4ClC,EAAAA,CAAGhoB,QAAAA,CAX3B,SAWwBgoB,CAA5CkC;AACAhhD,cAAAA,GAAAA,CAAAA,WAAAA,CAZoB,SAYpBA;AAKA,mBAAA,GAAA,GAjBoB,SAiBpB;AAEA,qBAnBoB,GAmBpB;AAjtC4B;;AAutC9BihD,YAAAA,gBAAAA,GAAmB;AACjB,kBAAI,CAAC,KAAA,OAAA,CAAL,SAAA,EAA6B;AAC3B,sBAAMC,SAAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CADS,OACT,CAAlB;AACAA,gBAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAA4C,KAAA,OAAA,CAFjB,aAE3BA;AACA,qBAAA,GAAA,CAAA,WAAA,CAH2B,SAG3B;AACA,qBAAA,OAAA,CAAA,SAAA,GAJ2B,SAI3B;AALe;;AAOjB,qBAAO,KAAA,OAAA,CAPU,SAOjB;AA9tC4B;;AAouC9BC,YAAAA,qBAAAA,GAAwB;AACtB,kBAAI,CAAC,KAAL,IAAA,EAAgB;AACd,qBAAA,IAAA,GAAY,KAAA,UAAA,CAAA,aAAA,CADE,OACF,CAAZ;AACA,qBAAA,IAAA,CAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAA4CrC,EAAAA,CAAG,KAFjC,eAE8BA,CAA5C;;AACA,oBAAI,KAAA,OAAA,CAAJ,aAAA,EAAgC;AAC9B,uBAAA,gBAAA,GAAA,WAAA,CAAoC,KADN,IAC9B;AADF,iBAAA,MAEO;AACL,uBAAA,GAAA,CAAA,WAAA,CAAqB,KADhB,IACL;AANY;AADM;;AAUtB,qBAAO,KAVe,IAUtB;AA9uC4B;;AAAA,WAAhCvD;;;;;;;;;;;;;AC1aF,cAAA,QAAA,CAAe;AACb,iBAAO6F,aAAP,CAAA,IAAA,EAAA,KAAA,EAAkC;AAChC,iBAAA,MAAW,CAAA,GAAA,EAAX,KAAW,CAAX,IAA2Bp+C,MAAAA,CAAAA,OAAAA,CAA3B,KAA2BA,CAA3B,EAAkD;AAChD,kBAAIgU,KAAAA,KAAAA,IAAAA,IAAkBA,KAAAA,KAAtB,SAAA,EAA2C;AAAA;AADK;;AAKhD,kBAAI4gB,GAAAA,KAAJ,OAAA,EAAqB;AACnBypB,gBAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EADmB,KACnBA;AADF,eAAA,MAEO;AACLr+C,gBAAAA,MAAAA,CAAAA,MAAAA,CAAcq+C,IAAAA,CAAdr+C,KAAAA,EADK,KACLA;AAR8C;AADlB;AADrB;;AAeb,iBAAOsf,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMg/B,IAAAA,GAAOlU,UAAAA,CADW,GACxB;AACA,kBAAMmU,QAAAA,GAAWhiD,QAAAA,CAAAA,aAAAA,CAAuB+hD,IAAAA,CAFhB,IAEP/hD,CAAjB;;AACA,gBAAI+hD,IAAAA,CAAJ,UAAA,EAAqB;AACnBE,cAAAA,QAAAA,CAAAA,aAAAA,CAAAA,QAAAA,EAAiCF,IAAAA,CADd,UACnBE;AAJsB;;AAMxB,kBAAMC,KAAAA,GAAQ,CAAC,CAAA,IAAA,EAAO,CAAP,CAAA,EAAf,QAAe,CAAD,CAAd;AAEA,kBAAMC,OAAAA,GAAUtU,UAAAA,CARQ,GAQxB;AACAsU,YAAAA,OAAAA,CAAAA,WAAAA,CATwB,QASxBA;AACA,kBAAMC,MAAAA,GAASvU,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAVS,GAUTA,CAAf;AACAsU,YAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAA0B,UAXF,MAAA,GAWxBA;AAGAA,YAAAA,OAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAdwB,kBAcxBA;;AAEA,mBAAOD,KAAAA,CAAAA,MAAAA,GAAP,CAAA,EAAyB;AACvB,oBAAM,CAAA,MAAA,EAAA,CAAA,EAAA,IAAA,IAAoBA,KAAAA,CAAMA,KAAAA,CAAAA,MAAAA,GADT,CACGA,CAA1B;;AACA,kBAAIr/C,CAAAA,GAAAA,CAAAA,KAAUw/C,MAAAA,CAAAA,QAAAA,CAAd,MAAA,EAAsC;AACpCH,gBAAAA,KAAAA,CADoC,GACpCA;AADoC;AAFf;;AAOvB,oBAAMI,KAAAA,GAAQD,MAAAA,CAAAA,QAAAA,CAAgB,EAAEH,KAAAA,CAAMA,KAAAA,CAAAA,MAAAA,GAANA,CAAAA,CAAAA,CAPT,CAOSA,CAAlBG,CAAd;;AACA,kBAAIC,KAAAA,KAAJ,IAAA,EAAoB;AAAA;AARG;;AAYvB,oBAAM;AAAA,gBAAA;AAAA,kBAZiB,KAYvB;;AACA,kBAAI3+C,IAAAA,KAAJ,OAAA,EAAsB;AACpBm+C,gBAAAA,IAAAA,CAAAA,WAAAA,CAAiB9hD,QAAAA,CAAAA,cAAAA,CAAwBsiD,KAAAA,CADrB,KACHtiD,CAAjB8hD;AADoB;AAbC;;AAkBvB,oBAAMS,SAAAA,GAAYviD,QAAAA,CAAAA,aAAAA,CAlBK,IAkBLA,CAAlB;AACA8hD,cAAAA,IAAAA,CAAAA,WAAAA,CAnBuB,SAmBvBA;;AACA,kBAAIQ,KAAAA,CAAJ,UAAA,EAAsB;AACpBL,gBAAAA,QAAAA,CAAAA,aAAAA,CAAAA,SAAAA,EAAkCK,KAAAA,CADd,UACpBL;AArBqB;;AAwBvB,kBAAIK,KAAAA,CAAAA,QAAAA,IAAkBA,KAAAA,CAAAA,QAAAA,CAAAA,MAAAA,GAAtB,CAAA,EAAiD;AAC/CJ,gBAAAA,KAAAA,CAAAA,IAAAA,CAAW,CAAA,KAAA,EAAQ,CAAR,CAAA,EAAXA,SAAW,CAAXA;AADF,eAAA,MAEO,IAAII,KAAAA,CAAJ,KAAA,EAAiB;AACtBC,gBAAAA,SAAAA,CAAAA,WAAAA,CAAsBviD,QAAAA,CAAAA,cAAAA,CAAwBsiD,KAAAA,CADxB,KACAtiD,CAAtBuiD;AA3BqB;AAhBD;AAfb;;AAsEb,iBAAOxM,MAAP,CAAA,UAAA,EAA0B;AACxB,kBAAMvmC,SAAAA,GAAY,UAAUq+B,UAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CADJ,GACIA,CADJ,GACxB;AACAA,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,SAAAA,GAFwB,SAExBA;AACAA,YAAAA,UAAAA,CAAAA,GAAAA,CAAAA,MAAAA,GAHwB,KAGxBA;AAzEW;;AAAA;;;;;;;;;;;;;;ACCf,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAMA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAtBA;;AAiCA,cAAM9d,EAAAA,GAAKD,OAAAA,CAjCX,IAiCWA,CAAX;;AACA,cAAM0yB,IAAAA,GAAO1yB,OAAAA,CAlCb,MAkCaA,CAAb;;AACA,cAAM2yB,KAAAA,GAAQ3yB,OAAAA,CAnCd,OAmCcA,CAAd;;AACA,cAAMrwB,GAAAA,GAAMqwB,OAAAA,CApCZ,KAoCYA,CAAZ;;AAEA,cAAM4yB,YAAAA,GAtCN,yBAsCA;;AAEA,iBAAA,QAAA,CAAA,SAAA,EAA6B;AAC3B,gBAAMC,SAAAA,GAAYljD,GAAAA,CAAAA,KAAAA,CADS,SACTA,CAAlB;;AACA,cAAIkjD,SAAAA,CAAAA,QAAAA,KAAAA,OAAAA,IAAkCA,SAAAA,CAAtC,IAAA,EAAsD;AACpD,mBADoD,SACpD;AAHyB;;AAM3B,cAAI,gBAAA,IAAA,CAAJ,SAAI,CAAJ,EAAqC;AACnC,mBAAOljD,GAAAA,CAAAA,KAAAA,CAAU,WADkB,SAAA,EAC5BA,CAAP;AAPyB;;AAU3B,cAAI,CAACkjD,SAAAA,CAAL,IAAA,EAAqB;AACnBA,YAAAA,SAAAA,CAAAA,QAAAA,GADmB,OACnBA;AAXyB;;AAa3B,iBAb2B,SAa3B;AArDF;;AAwDA,cAAA,aAAA,CAAoB;AAClBjkD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,MAAA,GADkB,MAClB;AACA,iBAAA,GAAA,GAAWkkD,QAAAA,CAAShmC,MAAAA,CAFF,GAEPgmC,CAAX;AACA,iBAAA,MAAA,GACE,KAAA,GAAA,CAAA,QAAA,KAAA,OAAA,IAAiC,KAAA,GAAA,CAAA,QAAA,KAJjB,QAGlB;AAGA,iBAAA,OAAA,GAAe,KAAA,GAAA,CAAA,QAAA,KANG,OAMlB;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAehmC,MAAAA,CAAhB,WAAC,IAPF,EAOlB;AAEA,iBAAA,kBAAA,GATkB,IASlB;AACA,iBAAA,oBAAA,GAVkB,EAUlB;AAXgB;;AAclB,cAAIqtB,sBAAJ,GAA6B;AAAA;;AAC3B,mBAAO,gCAAA,kBAAA,kFAAA,OAAA,KADoB,CAC3B;AAfgB;;AAkBlBK,UAAAA,aAAAA,GAAgB;AACd9pC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,sDACdA;AAIA,iBAAA,kBAAA,GAA0B,KAAA,OAAA,GACtB,IAAA,yBAAA,CADsB,IACtB,CADsB,GAEtB,IAAA,uBAAA,CAPU,IAOV,CAFJ;AAGA,mBAAO,KARO,kBAQd;AA1BgB;;AA6BlBgqC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAIxnC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAM+mB,WAAAA,GAAc,KAAA,OAAA,GAChB,IAAA,0BAAA,CAAA,IAAA,EAAA,KAAA,EADgB,GAChB,CADgB,GAEhB,IAAA,wBAAA,CAAA,IAAA,EAAA,KAAA,EANqB,GAMrB,CAFJ;;AAGA,iBAAA,oBAAA,CAAA,IAAA,CAPyB,WAOzB;;AACA,mBARyB,WAQzB;AArCgB;;AAwClB0gB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAKxB,kBAAMC,OAAAA,GAAU,KAAA,oBAAA,CAAA,KAAA,CALQ,CAKR,CAAhB;;AACAA,YAAAA,OAAAA,CAAAA,OAAAA,CAAgB,UAAA,MAAA,EAAkB;AAChCrlB,cAAAA,MAAAA,CAAAA,MAAAA,CADgC,MAChCA;AADFqlB,aAAAA;AA9CgB;;AAAA;;;;AAoDpB,cAAA,cAAA,CAAqB;AACnBhsC,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,IAAA,GAAY8pC,MAAAA,CADM,GAClB;AACA,iBAAA,KAAA,GAFkB,KAElB;AACA,iBAAA,YAAA,GAHkB,IAGlB;AACA,iBAAA,UAAA,GAJkB,IAIlB;AACA,kBAAM5rB,MAAAA,GAAS4rB,MAAAA,CALG,MAKlB;AACA,iBAAA,cAAA,GAAsB5rB,MAAAA,CANJ,MAMlB;AACA,iBAAA,OAAA,GAPkB,CAOlB;AACA,iBAAA,SAAA,GARkB,IAQlB;AAEA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,YAAAA,IAVH,KAUlB;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAXL,cAWlB;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAbgB;;AAgBlB,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAhBZ,aAgBlB;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAjBR,YAiBlB;AAEA,iBAAA,eAAA,GAnBkB,IAmBlB;AACA,iBAAA,eAAA,GApBkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAoBlB;AACA,iBAAA,kBAAA,GArBkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAqBlB;AAtBiB;;AAyBnB,cAAIkuB,YAAJ,GAAmB;AACjB,mBAAO,KAAA,kBAAA,CADU,OACjB;AA1BiB;;AA6BnB,cAAI9f,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA9BiB;;AAiCnB,cAAIlB,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AAlCiB;;AAqCnB,cAAID,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AAtCiB;;AAyCnB,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AA1CiB;;AA6CnB,gBAAMmhB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;;AACA,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEtzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AANS;;AASX,kBAAM3W,KAAAA,GAAQ,KAAA,eAAA,CATH,IASG,EAAd;;AACA,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,mBAAA,eAAA,GADkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAO,KAFW,IAEX,EAAP;AAZS;;AAcX,iBAAA,OAAA,IAAgBA,KAAAA,CAdL,MAcX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AACdqS,gBAAAA,MAAAA,EAAQ,KADM,OAAA;AAEdC,gBAAAA,KAAAA,EAAO,KAFO;AAAA,eAAhB;AAhBS;;AAsBX,kBAAMpO,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAtBJ,MAsBX;AACA,mBAAO;AAAE1D,cAAAA,KAAAA,EAAF,MAAA;AAAiBmW,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AApEiB;;AAuEnBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AAGb,gBAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,mBAAA,MAAA,CADyB,MACzB;;AADyB;AAHd;;AAOb,iBAAA,eAAA,CAAA,OAAA,CAPa,MAOb;AA9EiB;;AAiFnBi3B,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,YAAA,GADa,MACb;;AACA,iBAAA,eAAA,CAFa,OAEb;AAnFiB;;AAsFnBC,UAAAA,kBAAAA,CAAAA,cAAAA,EAAmC;AACjC,iBAAA,eAAA,GADiC,cACjC;AACA19B,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA8B,MAAM;AAClC,mBAAA,eAAA,CADkC,OAClC;AADFA,aAAAA;AAIAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyB,MAAM;AAE7BA,cAAAA,cAAAA,CAF6B,OAE7BA;AACA,mBAAA,KAAA,GAH6B,IAG7B;;AACA,mBAAA,eAAA,CAJ6B,OAI7B;AAJFA,aAAAA;AAOAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2BxlB,MAAAA,IAAU;AACnC,mBAAA,MAAA,CADmC,MACnC;AADFwlB,aAAAA;;AAMA,gBAAI,CAAC,KAAD,qBAAA,IAA+B,KAAnC,iBAAA,EAA2D;AACzD,mBAAA,MAAA,CAAY,IAAA,KAAA,CAAA,cAAA,CAD6C,uBAC7C,CAAZ;AApB+B;;AAwBjC,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,eAAA,CAAA,OAAA,CAA6B,KADR,YACrB;AAzB+B;AAtFhB;;AAAA;;AAoHrB,cAAA,eAAA,CAAsB;AACpB1mB,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,IAAA,GAAY8pC,MAAAA,CADM,GAClB;AACA,iBAAA,KAAA,GAFkB,KAElB;AACA,iBAAA,YAAA,GAHkB,IAGlB;AACA,iBAAA,UAAA,GAJkB,IAIlB;AACA,iBAAA,OAAA,GALkB,CAKlB;AACA,iBAAA,eAAA,GANkB,IAMlB;AACA,iBAAA,eAAA,GAPkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAOlB;AACA,kBAAM5rB,MAAAA,GAAS4rB,MAAAA,CARG,MAQlB;AACA,iBAAA,qBAAA,GAA6B,CAAC5rB,MAAAA,CATZ,aASlB;AAVkB;;AAapB,cAAIgN,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AAdkB;;AAiBpB,gBAAMmhB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;;AACA,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEtzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAHS;;AAKX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AANS;;AASX,kBAAM3W,KAAAA,GAAQ,KAAA,eAAA,CATH,IASG,EAAd;;AACA,gBAAIA,KAAAA,KAAJ,IAAA,EAAoB;AAClB,mBAAA,eAAA,GADkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAClB;AACA,qBAAO,KAFW,IAEX,EAAP;AAZS;;AAcX,iBAAA,OAAA,IAAgBA,KAAAA,CAdL,MAcX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AAAEqS,gBAAAA,MAAAA,EAAQ,KADP;AACH,eAAhB;AAhBS;;AAmBX,kBAAMnO,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAnBJ,MAmBX;AACA,mBAAO;AAAE1D,cAAAA,KAAAA,EAAF,MAAA;AAAiBmW,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AArCkB;;AAwCpBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AAGb,gBAAI,CAAC,KAAL,eAAA,EAA2B;AACzB,mBAAA,MAAA,CADyB,MACzB;;AADyB;AAHd;;AAOb,iBAAA,eAAA,CAAA,OAAA,CAPa,MAOb;AA/CkB;;AAkDpBi3B,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,YAAA,GADa,MACb;;AACA,iBAAA,eAAA,CAFa,OAEb;AApDkB;;AAuDpBC,UAAAA,kBAAAA,CAAAA,cAAAA,EAAmC;AACjC,iBAAA,eAAA,GADiC,cACjC;AACA19B,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA8B,MAAM;AAClC,mBAAA,eAAA,CADkC,OAClC;AADFA,aAAAA;AAIAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAyB,MAAM;AAE7BA,cAAAA,cAAAA,CAF6B,OAE7BA;AACA,mBAAA,KAAA,GAH6B,IAG7B;;AACA,mBAAA,eAAA,CAJ6B,OAI7B;AAJFA,aAAAA;AAOAA,YAAAA,cAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAA2BxlB,MAAAA,IAAU;AACnC,mBAAA,MAAA,CADmC,MACnC;AADFwlB,aAAAA;;AAKA,gBAAI,KAAJ,YAAA,EAAuB;AACrB,mBAAA,eAAA,CAAA,OAAA,CAA6B,KADR,YACrB;AAnB+B;AAvDf;;AAAA;;AA+EtB,iBAAA,oBAAA,CAAA,SAAA,EAAA,OAAA,EAAkD;AAChD,iBAAO;AACLhhB,YAAAA,QAAAA,EAAUu+C,SAAAA,CADL,QAAA;AAELI,YAAAA,IAAAA,EAAMJ,SAAAA,CAFD,IAAA;AAGLK,YAAAA,IAAAA,EAAML,SAAAA,CAHD,QAAA;AAILplC,YAAAA,IAAAA,EAAMolC,SAAAA,CAJD,IAAA;AAKL1oB,YAAAA,IAAAA,EAAM0oB,SAAAA,CALD,IAAA;AAMLM,YAAAA,MAAAA,EANK,KAAA;AAAA,YAAA;AAAA,WAAP;AAhTF;;AA2TA,cAAA,uBAAA,SAAA,cAAA,CAAqD;AACnDvkD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,kBADkB,MAClB;;AAEA,kBAAMwkD,cAAAA,GAAiBjjD,QAAAA,IAAY;AACjC,kBAAIA,QAAAA,CAAAA,UAAAA,KAAJ,GAAA,EAAiC;AAC/B,sBAAMgkB,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBAAgB,KADvB,IAAA,IACjB,CAAd;AACA,qBAAA,YAAA,GAF+B,KAE/B;;AACA,qBAAA,kBAAA,CAAA,MAAA,CAH+B,KAG/B;;AAH+B;AADA;;AAOjC,mBAAA,kBAAA,CAPiC,OAOjC;;AACA,mBAAA,kBAAA,CARiC,QAQjC;;AAEA,oBAAMk/B,iBAAAA,GAAoBx/C,IAAAA,IAAQ;AAGhC,uBAAO,KAAA,eAAA,CAAA,OAAA,CAA6BA,IAAAA,CAHJ,WAGIA,EAA7B,CAAP;AAHF,eAAA;;AAKA,oBAAM;AAAA,gBAAA,kBAAA;AAAA,gBAAA;AAAA,kBAGF,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,gBAAA,iBAAA;AAEnCy/C,gBAAAA,MAAAA,EAAQ5a,MAAAA,CAF2B,MAAA;AAGnClqB,gBAAAA,cAAAA,EAAgB,KAHmB,eAAA;AAInCJ,gBAAAA,YAAAA,EAAc,KAJqB;AAAA,eAAjC,CAHJ;AAUA,mBAAA,iBAAA,GAzBiC,kBAyBjC;AAEA,mBAAA,cAAA,GAAsBmlC,eAAAA,IAAmB,KA3BR,cA2BjC;AAEA,mBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EA7BgB,iBA6BhBA,CAAjB;AA7BF,aAAA;;AAgCA,iBAAA,QAAA,GAnCkB,IAmClB;;AACA,gBAAI,KAAA,IAAA,CAAA,QAAA,KAAJ,OAAA,EAAoC;AAClC,mBAAA,QAAA,GAAgBd,IAAAA,CAAAA,OAAAA,CACde,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC/a,MAAAA,CADlBga,WACde,CADcf,EADkB,cAClBA,CAAhB;AADF,aAAA,MAKO;AACL,mBAAA,QAAA,GAAgBC,KAAAA,CAAAA,OAAAA,CACdc,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC/a,MAAAA,CADlBia,WACdc,CADcd,EADX,cACWA,CAAhB;AA1CgB;;AAgDlB,iBAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAA0B7iD,MAAAA,IAAU;AAClC,mBAAA,YAAA,GADkC,MAClC;;AACA,mBAAA,kBAAA,CAAA,MAAA,CAFkC,MAElC;AAFF,aAAA;;AAOA,iBAAA,QAAA,CAvDkB,GAuDlB;AAxDiD;;AAAA;;AA4DrD,cAAA,wBAAA,SAAA,eAAA,CAAuD;AACrDlB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,kBAD8B,MAC9B;AAEA,iBAAA,YAAA,GAH8B,EAG9B;;AACA,iBAAA,MAAA,QAAA,IAAuB8pC,MAAAA,CAAvB,WAAA,EAA2C;AACzC,oBAAM/wB,KAAAA,GAAQ+wB,MAAAA,CAAAA,WAAAA,CAD2B,QAC3BA,CAAd;;AACA,kBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFO;;AAKzC,mBAAA,YAAA,CAAA,QAAA,IALyC,KAKzC;AAT4B;;AAW9B,iBAAA,YAAA,CAAA,KAAA,GAA0B,SAAA,KAAA,IAAkBxlC,GAAAA,GAXd,CAAA,EAW9B;;AAEA,kBAAMkgD,cAAAA,GAAiBjjD,QAAAA,IAAY;AACjC,kBAAIA,QAAAA,CAAAA,UAAAA,KAAJ,GAAA,EAAiC;AAC/B,sBAAMgkB,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBAAgB,KADvB,IAAA,IACjB,CAAd;AACA,qBAAA,YAAA,GAF+B,KAE/B;AAF+B;AADA;;AAMjC,mBAAA,kBAAA,CANiC,QAMjC;AANF,aAAA;;AASA,iBAAA,QAAA,GAtB8B,IAsB9B;;AACA,gBAAI,KAAA,IAAA,CAAA,QAAA,KAAJ,OAAA,EAAoC;AAClC,mBAAA,QAAA,GAAgBu+B,IAAAA,CAAAA,OAAAA,CACde,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC,KADlBf,YACde,CADcf,EADkB,cAClBA,CAAhB;AADF,aAAA,MAKO;AACL,mBAAA,QAAA,GAAgBC,KAAAA,CAAAA,OAAAA,CACdc,oBAAAA,CAAqB,KAArBA,IAAAA,EAAgC,KADlBd,YACdc,CADcd,EADX,cACWA,CAAhB;AA7B4B;;AAmC9B,iBAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAA0B7iD,MAAAA,IAAU;AAClC,mBAAA,YAAA,GADkC,MAClC;AADF,aAAA;;AAGA,iBAAA,QAAA,CAtC8B,GAsC9B;AAvCmD;;AAAA;;AA2CvD,cAAA,yBAAA,SAAA,cAAA,CAAuD;AACrDlB,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,kBADkB,MAClB;AAEA,gBAAIu7B,IAAAA,GAAOz2B,kBAAAA,CAAmB,KAAA,IAAA,CAHZ,IAGPA,CAAX;;AAGA,gBAAIk/C,YAAAA,CAAAA,IAAAA,CAAkB,KAAA,IAAA,CAAtB,IAAIA,CAAJ,EAAuC;AACrCzoB,cAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAD8B,EAC9BA,CAAPA;AAPgB;;AAUlBlK,YAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAe,CAAA,KAAA,EAAA,IAAA,KAAiB;AAC9B,kBAAA,KAAA,EAAW;AACT,oBAAI9L,KAAAA,CAAAA,IAAAA,KAAJ,QAAA,EAA6B;AAC3BA,kBAAAA,KAAAA,GAAQ,IAAA,KAAA,CAAA,mBAAA,CAAwB,gBADL,IAAA,IACnB,CAARA;AAFO;;AAIT,qBAAA,YAAA,GAJS,KAIT;;AACA,qBAAA,kBAAA,CAAA,MAAA,CALS,KAKT;;AALS;AADmB;;AAU9B,mBAAA,cAAA,GAAsBu/B,IAAAA,CAVQ,IAU9B;;AAEA,mBAAA,kBAAA,CAAwBzzB,EAAAA,CAAAA,gBAAAA,CAZM,IAYNA,CAAxB;;AACA,mBAAA,kBAAA,CAb8B,OAa9B;AAbFA,aAAAA;AAXmD;;AAAA;;AA6BvD,cAAA,0BAAA,SAAA,eAAA,CAAyD;AACvDrxB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,kBAD8B,MAC9B;AAEA,gBAAIu7B,IAAAA,GAAOz2B,kBAAAA,CAAmB,KAAA,IAAA,CAHA,IAGnBA,CAAX;;AAGA,gBAAIk/C,YAAAA,CAAAA,IAAAA,CAAkB,KAAA,IAAA,CAAtB,IAAIA,CAAJ,EAAuC;AACrCzoB,cAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAD8B,EAC9BA,CAAPA;AAP4B;;AAU9B,iBAAA,kBAAA,CAAwB,EAAA,CAAA,gBAAA,CAAA,IAAA,EAA0B;AAAA,cAAA,KAAA;AAASj3B,cAAAA,GAAAA,EAAKA,GAAAA,GAAd;AAAA,aAA1B,CAAxB;AAXqD;;AAAA;;;;;;;;;;;;;;;;AChbzD,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAfA,YAAA,oBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAuBA,iBAAA,gCAAA,CAA0C;AAAA,UAAA,iBAAA;AAAA,UAAA,MAAA;AAAA,UAAA,cAAA;AAA1C,UAAA;AAA0C,SAA1C,EAKG;AACDxC,WAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EAAO8d,cAAAA,GAAP9d,CAAAA,EADC,2CACDA;AACA,gBAAMijD,YAAAA,GAAe;AACnBC,YAAAA,kBAAAA,EADmB,KAAA;AAEnBL,YAAAA,eAAAA,EAFmB;AAAA,WAArB;AAKA,gBAAMzsC,MAAAA,GAAS/R,QAAAA,CAASs+C,iBAAAA,CAATt+C,gBAASs+C,CAATt+C,EAPd,EAOcA,CAAf;;AACA,cAAI,CAACmR,MAAAA,CAAAA,SAAAA,CAAL,MAAKA,CAAL,EAA+B;AAC7B,mBAD6B,YAC7B;AATD;;AAYDytC,UAAAA,YAAAA,CAAAA,eAAAA,GAZC,MAYDA;;AAEA,cAAI7sC,MAAAA,IAAU,IAAd,cAAA,EAAkC;AAGhC,mBAHgC,YAGhC;AAjBD;;AAoBD,cAAIsH,YAAAA,IAAgB,CAApB,MAAA,EAA6B;AAC3B,mBAD2B,YAC3B;AArBD;;AAuBD,cAAIilC,iBAAAA,CAAAA,eAAAA,CAAAA,KAAJ,OAAA,EAAoD;AAClD,mBADkD,YAClD;AAxBD;;AA2BD,gBAAMQ,eAAAA,GAAkBR,iBAAAA,CAAAA,kBAAAA,CAAAA,IA3BvB,UA2BD;;AACA,cAAIQ,eAAAA,KAAJ,UAAA,EAAoC;AAClC,mBADkC,YAClC;AA7BD;;AAgCDF,UAAAA,YAAAA,CAAAA,kBAAAA,GAhCC,IAgCDA;AACA,iBAjCC,YAiCD;AA7DF;;AAgEA,iBAAA,yBAAA,CAAA,iBAAA,EAAsD;AACpD,gBAAMG,kBAAAA,GAAqBT,iBAAAA,CADyB,qBACzBA,CAA3B;;AACA,cAAA,kBAAA,EAAwB;AACtB,gBAAIn4B,QAAAA,GAAW64B,CAAAA,GAAAA,oBAAAA,CAAAA,uCAAAA,EADO,kBACPA,CAAf;;AACA,gBAAI74B,QAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAA4B;AAC1B,kBAAI;AACFA,gBAAAA,QAAAA,GAAWxnB,kBAAAA,CADT,QACSA,CAAXwnB;AADF,eAAA,CAEE,OAAA,EAAA,EAHwB,CAAA;AAFN;;AAOtB,gBAAI2f,CAAAA,GAAAA,cAAAA,CAAAA,SAAAA,EAAJ,QAAIA,CAAJ,EAAyB;AACvB,qBADuB,QACvB;AARoB;AAF4B;;AAapD,iBAboD,IAapD;AA7EF;;AAgFA,iBAAA,yBAAA,CAAA,MAAA,EAAA,GAAA,EAAgD;AAC9C,cAAImZ,MAAAA,KAAAA,GAAAA,IAAmBA,MAAAA,KAAAA,CAAAA,IAAgBrkD,GAAAA,CAAAA,UAAAA,CAAvC,OAAuCA,CAAvC,EAAiE;AAC/D,mBAAO,IAAA,KAAA,CAAA,mBAAA,CAAwB,kBAAA,GAAA,GADgC,IACxD,CAAP;AAF4C;;AAI9C,iBAAO,IAAA,KAAA,CAAA,2BAAA,CACL,+BAAA,MAAA,2BADK,GAAA,IAAA,EAJuC,MAIvC,CAAP;AApFF;;AA0FA,iBAAA,sBAAA,CAAA,MAAA,EAAwC;AACtC,iBAAOqkD,MAAAA,KAAAA,GAAAA,IAAkBA,MAAAA,KADa,GACtC;;;;;;;;;;;;;;AC9DF,iBAAA,uCAAA,CAAA,kBAAA,EAAqE;AACnE,cAAIC,kBAAAA,GAD+D,IACnE;AAGA,cAAIniB,GAAAA,GAAMoiB,aAAAA,CAAAA,aAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAJyD,kBAIzDA,CAAV;;AACA,cAAA,GAAA,EAAS;AACPpiB,YAAAA,GAAAA,GAAMA,GAAAA,CADC,CACDA,CAANA;AACA,gBAAI5W,QAAAA,GAAWi5B,cAAAA,CAFR,GAEQA,CAAf;AACAj5B,YAAAA,QAAAA,GAAWlQ,QAAAA,CAHJ,QAGIA,CAAXkQ;AACAA,YAAAA,QAAAA,GAAWk5B,aAAAA,CAJJ,QAIIA,CAAXl5B;AACAA,YAAAA,QAAAA,GAAWm5B,aAAAA,CALJ,QAKIA,CAAXn5B;AACA,mBAAOo5B,aAAAA,CANA,QAMAA,CAAP;AAXiE;;AAiBnExiB,UAAAA,GAAAA,GAAMyiB,eAAAA,CAjB6D,kBAiB7DA,CAANziB;;AACA,cAAA,GAAA,EAAS;AAEP,kBAAM5W,QAAAA,GAAWm5B,aAAAA,CAFV,GAEUA,CAAjB;AACA,mBAAOC,aAAAA,CAHA,QAGAA,CAAP;AArBiE;;AAyBnExiB,UAAAA,GAAAA,GAAMoiB,aAAAA,CAAAA,UAAAA,EAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAzB6D,kBAyB7DA,CAANpiB;;AACA,cAAA,GAAA,EAAS;AACPA,YAAAA,GAAAA,GAAMA,GAAAA,CADC,CACDA,CAANA;AACA,gBAAI5W,QAAAA,GAAWi5B,cAAAA,CAFR,GAEQA,CAAf;AACAj5B,YAAAA,QAAAA,GAAWm5B,aAAAA,CAHJ,QAGIA,CAAXn5B;AACA,mBAAOo5B,aAAAA,CAJA,QAIAA,CAAP;AA9BiE;;AAoCnE,mBAAA,aAAA,CAAA,gBAAA,EAAA,KAAA,EAAgD;AAC9C,mBAAO,IAAA,MAAA,CACL,gBAAA,gBAAA,GAAA,WAAA,GAAA,GAAA,GAAA,kBAAA,GAAA,GAAA,GAAA,yBAAA,GADK,GAAA,EADuC,KACvC,CAAP;AArCiE;;AAmDnE,mBAAA,UAAA,CAAA,QAAA,EAAA,KAAA,EAAqC;AACnC,gBAAA,QAAA,EAAc;AACZ,kBAAI,CAAC,iBAAA,IAAA,CAAL,KAAK,CAAL,EAAmC;AACjC,uBADiC,KACjC;AAFU;;AAIZ,kBAAI;AACF,sBAAME,OAAAA,GAAU,IAAA,WAAA,CAAA,QAAA,EAA0B;AAAEC,kBAAAA,KAAAA,EAD1C;AACwC,iBAA1B,CAAhB;AACA,sBAAM5tC,KAAAA,GAAQ,KAAA,CAAA,IAAA,CAAA,KAAA,EAAkB,UAAA,EAAA,EAAc;AAC5C,yBAAO6tC,EAAAA,CAAAA,UAAAA,CAAAA,CAAAA,IADqC,IAC5C;AADF,iBAAc,CAAd;AAGA/sC,gBAAAA,KAAAA,GAAQ6sC,OAAAA,CAAAA,MAAAA,CAAe,IAAA,UAAA,CALrB,KAKqB,CAAfA,CAAR7sC;AACAssC,gBAAAA,kBAAAA,GANE,KAMFA;AANF,eAAA,CAOE,OAAA,CAAA,EAAU;AAGV,oBAAI,YAAA,IAAA,CAAJ,QAAI,CAAJ,EAAgC;AAE9B,sBAAI;AACFtsC,oBAAAA,KAAAA,GAAQjU,kBAAAA,CAAmBqX,MAAAA,CADzB,KACyBA,CAAnBrX,CAARiU;AACAssC,oBAAAA,kBAAAA,GAFE,KAEFA;AAFF,mBAAA,CAGE,OAAA,GAAA,EAL4B,CAAA;AAHtB;AAXA;AADqB;;AAwBnC,mBAxBmC,KAwBnC;AA3EiE;;AA6EnE,mBAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,gBAAIA,kBAAAA,IAAsB,cAAA,IAAA,CAA1B,KAA0B,CAA1B,EAAqD;AAEnDtsC,cAAAA,KAAAA,GAAQgtC,UAAAA,CAAAA,OAAAA,EAF2C,KAE3CA,CAARhtC;;AACA,kBAAA,kBAAA,EAAwB;AAEtBA,gBAAAA,KAAAA,GAAQgtC,UAAAA,CAAAA,YAAAA,EAFc,KAEdA,CAARhtC;AALiD;AADzB;;AAS5B,mBAT4B,KAS5B;AAtFiE;;AAwFnE,mBAAA,eAAA,CAAA,qBAAA,EAAgD;AAC9C,kBAAM9S,OAAAA,GADwC,EAC9C;AACA,gBAF8C,KAE9C;AAGA,kBAAM+/C,IAAAA,GAAOV,aAAAA,CAAAA,iCAAAA,EALiC,IAKjCA,CAAb;;AACA,mBAAQ,CAAA,KAAA,GAAQU,IAAAA,CAAAA,IAAAA,CAAT,qBAASA,CAAR,MAAR,IAAA,EAA4D;AAC1D,kBAAI,GAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IADsD,KAC1D;AACAtsC,cAAAA,CAAAA,GAAIvT,QAAAA,CAAAA,CAAAA,EAFsD,EAEtDA,CAAJuT;;AACA,kBAAIA,CAAAA,IAAJ,OAAA,EAAkB;AAEhB,oBAAIA,CAAAA,KAAJ,CAAA,EAAa;AAAA;AAFG;;AAAA;AAHwC;;AAU1DzT,cAAAA,OAAAA,CAAAA,CAAAA,CAAAA,GAAa,CAAA,IAAA,EAAbA,IAAa,CAAbA;AAhB4C;;AAkB9C,kBAAMggD,KAAAA,GAlBwC,EAkB9C;;AACA,iBAAK,IAAIvsC,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAIzT,OAAAA,CAApB,MAAA,EAAoC,EAApC,CAAA,EAAyC;AACvC,kBAAI,EAAE,CAAA,IAAN,OAAI,CAAJ,EAAqB;AAAA;AADkB;;AAKvC,kBAAI,CAAA,IAAA,EAAA,IAAA,IAAeA,OAAAA,CALoB,CAKpBA,CAAnB;AACAigD,cAAAA,IAAAA,GAAOX,cAAAA,CANgC,IAMhCA,CAAPW;;AACA,kBAAA,IAAA,EAAU;AACRA,gBAAAA,IAAAA,GAAO9pC,QAAAA,CADC,IACDA,CAAP8pC;;AACA,oBAAIxsC,CAAAA,KAAJ,CAAA,EAAa;AACXwsC,kBAAAA,IAAAA,GAAOV,aAAAA,CADI,IACJA,CAAPU;AAHM;AAP6B;;AAavCD,cAAAA,KAAAA,CAAAA,IAAAA,CAbuC,IAavCA;AAhC4C;;AAkC9C,mBAAOA,KAAAA,CAAAA,IAAAA,CAlCuC,EAkCvCA,CAAP;AA1HiE;;AA4HnE,mBAAA,cAAA,CAAA,KAAA,EAA+B;AAC7B,gBAAIltC,KAAAA,CAAAA,UAAAA,CAAJ,GAAIA,CAAJ,EAA2B;AACzB,oBAAMktC,KAAAA,GAAQltC,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CADW,KACXA,CAAd;;AAEA,mBAAK,IAAI5U,CAAAA,GAAT,CAAA,EAAgBA,CAAAA,GAAI8hD,KAAAA,CAApB,MAAA,EAAkC,EAAlC,CAAA,EAAuC;AACrC,sBAAME,SAAAA,GAAYF,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CADmB,GACnBA,CAAlB;;AACA,oBAAIE,SAAAA,KAAc,CAAlB,CAAA,EAAsB;AACpBF,kBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EADS,SACTA,CAAXA;AACAA,kBAAAA,KAAAA,CAAAA,MAAAA,GAAe9hD,CAAAA,GAFK,CAEpB8hD;AAJmC;;AAMrCA,gBAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAWA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,QAAAA,EAN0B,IAM1BA,CAAXA;AATuB;;AAWzBltC,cAAAA,KAAAA,GAAQktC,KAAAA,CAAAA,IAAAA,CAXiB,GAWjBA,CAARltC;AAZ2B;;AAc7B,mBAd6B,KAc7B;AA1IiE;;AA4InE,mBAAA,aAAA,CAAA,QAAA,EAAiC;AAE/B,kBAAMqtC,WAAAA,GAAcC,QAAAA,CAAAA,OAAAA,CAFW,GAEXA,CAApB;;AACA,gBAAID,WAAAA,KAAgB,CAApB,CAAA,EAAwB;AAItB,qBAJsB,QAItB;AAP6B;;AAS/B,kBAAME,QAAAA,GAAWD,QAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EATc,WASdA,CAAjB;AACA,kBAAME,SAAAA,GAAYF,QAAAA,CAAAA,KAAAA,CAAeD,WAAAA,GAVF,CAUbC,CAAlB;AAEA,kBAAMttC,KAAAA,GAAQwtC,SAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAZiB,EAYjBA,CAAd;AACA,mBAAOR,UAAAA,CAAAA,QAAAA,EAbwB,KAaxBA,CAAP;AAzJiE;;AA2JnE,mBAAA,aAAA,CAAA,KAAA,EAA8B;AAW5B,gBAAI,CAAChtC,KAAAA,CAAAA,UAAAA,CAAD,IAACA,CAAD,IAA2B,uBAAA,IAAA,CAA/B,KAA+B,CAA/B,EAAmE;AACjE,qBADiE,KACjE;AAZ0B;;AAqB5B,mBAAO,KAAA,CAAA,OAAA,CAAA,gDAAA,EAEL,UAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAA4C;AAC1C,kBAAIutC,QAAAA,KAAAA,GAAAA,IAAoBA,QAAAA,KAAxB,GAAA,EAA0C;AAExCE,gBAAAA,IAAAA,GAAOA,IAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAFiC,GAEjCA,CAAPA;AACAA,gBAAAA,IAAAA,GAAO,IAAA,CAAA,OAAA,CAAA,oBAAA,EAAmC,UAAA,KAAA,EAAA,GAAA,EAAsB;AAC9D,yBAAOpuC,MAAAA,CAAAA,YAAAA,CAAoBjS,QAAAA,CAAAA,GAAAA,EADmC,EACnCA,CAApBiS,CAAP;AADFouC,iBAAO,CAAPA;AAGA,uBAAOT,UAAAA,CAAAA,OAAAA,EANiC,IAMjCA,CAAP;AAPwC;;AAS1C,kBAAI;AACFS,gBAAAA,IAAAA,GAAOp3B,IAAAA,CADL,IACKA,CAAPo3B;AADF,eAAA,CAEE,OAAA,CAAA,EAXwC,CAAA;;AAY1C,qBAAOT,UAAAA,CAAAA,OAAAA,EAZmC,IAYnCA,CAAP;AAdJ,aAAO,CAAP;AAhLiE;;AAmMnE,iBAnMmE,EAmMnE;;;;;;;;;;;;;;ACjNF,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAKA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AApBA;AAgCA,cAAMU,WAAAA,GAhCN,GAgCA;AACA,cAAMC,wBAAAA,GAjCN,GAiCA;;AAEA,iBAAA,cAAA,CAAA,GAAA,EAA6B;AAC3B,gBAAM9tC,IAAAA,GAAO+tC,GAAAA,CADc,QAC3B;;AACA,cAAI,OAAA,IAAA,KAAJ,QAAA,EAA8B;AAC5B,mBAD4B,IAC5B;AAHyB;;AAK3B,gBAAMC,KAAAA,GAAQnlD,CAAAA,GAAAA,KAAAA,CAAAA,aAAAA,EALa,IAKbA,CAAd;AACA,iBAAOmlD,KAAAA,CANoB,MAM3B;AAzCF;;AA4CA,cAAA,cAAA,CAAqB;AACnB5mD,UAAAA,WAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAuB;AACrB,iBAAA,GAAA,GADqB,GACrB;AACAynB,YAAAA,IAAAA,GAAOA,IAAAA,IAFc,EAErBA;AACA,iBAAA,MAAA,GAAc,YAAA,IAAA,CAHO,GAGP,CAAd;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAeA,IAAAA,CAAhB,WAAC,IAJC,EAIrB;AACA,iBAAA,eAAA,GAAuBA,IAAAA,CAAAA,eAAAA,IALF,KAKrB;;AACA,iBAAA,MAAA,GACEA,IAAAA,CAAAA,MAAAA,IACA,SAAA,qBAAA,GAAiC;AAC/B,qBAAO,IADwB,cACxB,EAAP;AAHJ,aAAA;;AAMA,iBAAA,SAAA,GAZqB,CAYrB;AACA,iBAAA,eAAA,GAAuB1iB,MAAAA,CAAAA,MAAAA,CAbF,IAaEA,CAAvB;AAdiB;;AAiBnB8hD,UAAAA,YAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAoC;AAClC,kBAAMp/B,IAAAA,GAAO;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,aAAb;;AAIA,iBAAA,MAAA,IAAA,IAAA,SAAA,EAA8B;AAC5BA,cAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAaq/B,SAAAA,CADe,IACfA,CAAbr/B;AANgC;;AAQlC,mBAAO,KAAA,OAAA,CAR2B,IAQ3B,CAAP;AAzBiB;;AA4BnBs/B,UAAAA,WAAAA,CAAAA,SAAAA,EAAuB;AACrB,mBAAO,KAAA,OAAA,CADc,SACd,CAAP;AA7BiB;;AAgCnBrlD,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,kBAAMilD,GAAAA,GAAM,KADA,MACA,EAAZ;AACA,kBAAMK,KAAAA,GAAQ,KAFF,SAEE,EAAd;AACA,kBAAMC,cAAAA,GAAkB,KAAA,eAAA,CAAA,KAAA,IAA8B;AAH1C,cAAA;AAG0C,aAAtD;AAIAN,YAAAA,GAAAA,CAAAA,IAAAA,CAAAA,KAAAA,EAAgB,KAPJ,GAOZA;AACAA,YAAAA,GAAAA,CAAAA,eAAAA,GAAsB,KARV,eAQZA;;AACA,iBAAA,MAAA,QAAA,IAAuB,KAAvB,WAAA,EAAyC;AACvC,oBAAM5tC,KAAAA,GAAQ,KAAA,WAAA,CADyB,QACzB,CAAd;;AACA,kBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFK;;AAKvC4tC,cAAAA,GAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EALuC,KAKvCA;AAdU;;AAgBZ,gBAAI,KAAA,MAAA,IAAe,WAAf,IAAA,IAAkC,SAAtC,IAAA,EAAqD;AACnDA,cAAAA,GAAAA,CAAAA,gBAAAA,CAAAA,OAAAA,EAA8B,SAASl/B,IAAAA,CAAT,KAAA,IAAuBA,IAAAA,CAAAA,GAAAA,GADF,CAAA,EACnDk/B;AACAM,cAAAA,cAAAA,CAAAA,cAAAA,GAFmD,wBAEnDA;AAFF,aAAA,MAGO;AACLA,cAAAA,cAAAA,CAAAA,cAAAA,GADK,WACLA;AApBU;;AAsBZN,YAAAA,GAAAA,CAAAA,YAAAA,GAtBY,aAsBZA;;AAEA,gBAAIl/B,IAAAA,CAAJ,OAAA,EAAkB;AAChBk/B,cAAAA,GAAAA,CAAAA,OAAAA,GAAc,UAAA,GAAA,EAAe;AAC3Bl/B,gBAAAA,IAAAA,CAAAA,OAAAA,CAAak/B,GAAAA,CADc,MAC3Bl/B;AADFk/B,eAAAA;AAzBU;;AA6BZA,YAAAA,GAAAA,CAAAA,kBAAAA,GAAyB,KAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EA7Bb,KA6Ba,CAAzBA;AACAA,YAAAA,GAAAA,CAAAA,UAAAA,GAAiB,KAAA,UAAA,CAAA,IAAA,CAAA,IAAA,EA9BL,KA8BK,CAAjBA;AAEAM,YAAAA,cAAAA,CAAAA,iBAAAA,GAAmCx/B,IAAAA,CAhCvB,iBAgCZw/B;AACAA,YAAAA,cAAAA,CAAAA,MAAAA,GAAwBx/B,IAAAA,CAjCZ,MAiCZw/B;AACAA,YAAAA,cAAAA,CAAAA,OAAAA,GAAyBx/B,IAAAA,CAlCb,OAkCZw/B;AACAA,YAAAA,cAAAA,CAAAA,UAAAA,GAA4Bx/B,IAAAA,CAnChB,UAmCZw/B;AAEAN,YAAAA,GAAAA,CAAAA,IAAAA,CArCY,IAqCZA;AAEA,mBAvCY,KAuCZ;AAvEiB;;AA0EnBO,UAAAA,UAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAuB;AACrB,kBAAMD,cAAAA,GAAiB,KAAA,eAAA,CADF,KACE,CAAvB;;AACA,gBAAI,CAAJ,cAAA,EAAqB;AAAA;AAFA;;AAOrB,gBAAIA,cAAAA,CAAJ,UAAA,EAA+B;AAC7BA,cAAAA,cAAAA,CAAAA,UAAAA,CAD6B,GAC7BA;AARmB;AA1EJ;;AAsFnBE,UAAAA,aAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA0B;AACxB,kBAAMF,cAAAA,GAAiB,KAAA,eAAA,CADC,KACD,CAAvB;;AACA,gBAAI,CAAJ,cAAA,EAAqB;AAAA;AAFG;;AAOxB,kBAAMN,GAAAA,GAAMM,cAAAA,CAPY,GAOxB;;AACA,gBAAIN,GAAAA,CAAAA,UAAAA,IAAAA,CAAAA,IAAuBM,cAAAA,CAA3B,iBAAA,EAA6D;AAC3DA,cAAAA,cAAAA,CAD2D,iBAC3DA;AACA,qBAAOA,cAAAA,CAFoD,iBAE3D;AAVsB;;AAaxB,gBAAIN,GAAAA,CAAAA,UAAAA,KAAJ,CAAA,EAA0B;AAAA;AAbF;;AAiBxB,gBAAI,EAAE,KAAA,IAAS,KAAf,eAAI,CAAJ,EAAsC;AAAA;AAjBd;;AAuBxB,mBAAO,KAAA,eAAA,CAvBiB,KAuBjB,CAAP;;AAGA,gBAAIA,GAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IAAoB,KAAxB,MAAA,EAAqC;AACnC,kBAAIM,cAAAA,CAAJ,OAAA,EAA4B;AAC1BA,gBAAAA,cAAAA,CAAAA,OAAAA,CAAuBN,GAAAA,CADG,MAC1BM;AAFiC;;AAAA;AA1Bb;;AAgCxB,kBAAMG,SAAAA,GAAYT,GAAAA,CAAAA,MAAAA,IAhCM,WAgCxB;AAKA,kBAAMU,4BAAAA,GACJD,SAAAA,KAAAA,WAAAA,IACAH,cAAAA,CAAAA,cAAAA,KAvCsB,wBAqCxB;;AAIA,gBACE,CAAA,4BAAA,IACAG,SAAAA,KAAcH,cAAAA,CAFhB,cAAA,EAGE;AACA,kBAAIA,cAAAA,CAAJ,OAAA,EAA4B;AAC1BA,gBAAAA,cAAAA,CAAAA,OAAAA,CAAuBN,GAAAA,CADG,MAC1BM;AAFF;;AAAA;AA5CsB;;AAmDxB,kBAAM1uC,KAAAA,GAAQ+uC,cAAAA,CAnDU,GAmDVA,CAAd;;AACA,gBAAIF,SAAAA,KAAJ,wBAAA,EAA4C;AAC1C,oBAAMG,WAAAA,GAAcZ,GAAAA,CAAAA,iBAAAA,CADsB,eACtBA,CAApB;AACA,oBAAM1gD,OAAAA,GAAU,2BAAA,IAAA,CAF0B,WAE1B,CAAhB;AACAghD,cAAAA,cAAAA,CAAAA,MAAAA,CAAsB;AACpBO,gBAAAA,KAAAA,EAAOrhD,QAAAA,CAASF,OAAAA,CAATE,CAASF,CAATE,EADa,EACbA,CADa;AAAA,gBAAA;AAAA,eAAtB8gD;AAHF,aAAA,MAOO,IAAA,KAAA,EAAW;AAChBA,cAAAA,cAAAA,CAAAA,MAAAA,CAAsB;AACpBO,gBAAAA,KAAAA,EADoB,CAAA;AAAA,gBAAA;AAAA,eAAtBP;AADK,aAAA,MAKA,IAAIA,cAAAA,CAAJ,OAAA,EAA4B;AACjCA,cAAAA,cAAAA,CAAAA,OAAAA,CAAuBN,GAAAA,CADU,MACjCM;AAjEsB;AAtFP;;AA2JnBQ,UAAAA,aAAAA,CAAAA,KAAAA,EAAqB;AACnB,mBAAO,KAAA,eAAA,CAAA,KAAA,EADY,GACnB;AA5JiB;;AA+JnBC,UAAAA,gBAAAA,CAAAA,KAAAA,EAAwB;AACtB,mBAAOV,KAAAA,IAAS,KADM,eACtB;AAhKiB;;AAmKnBW,UAAAA,YAAAA,CAAAA,KAAAA,EAAoB;AAClB,kBAAMhB,GAAAA,GAAM,KAAA,eAAA,CAAA,KAAA,EADM,GAClB;AACA,mBAAO,KAAA,eAAA,CAFW,KAEX,CAAP;AACAA,YAAAA,GAAAA,CAHkB,KAGlBA;AAtKiB;;AAAA;;AA2KrB,cAAA,gBAAA,CAAuB;AACrB3mD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,OAAA,GADkB,MAClB;AACA,iBAAA,QAAA,GAAgB,IAAA,cAAA,CAAmBke,MAAAA,CAAnB,GAAA,EAA+B;AAC7CwB,cAAAA,WAAAA,EAAaxB,MAAAA,CADgC,WAAA;AAE7CyB,cAAAA,eAAAA,EAAiBzB,MAAAA,CAF4B;AAAA,aAA/B,CAAhB;AAIA,iBAAA,eAAA,GAAuBA,MAAAA,CANL,cAMlB;AACA,iBAAA,kBAAA,GAPkB,IAOlB;AACA,iBAAA,oBAAA,GARkB,EAQlB;AATmB;;AAYrB0pC,UAAAA,2BAAAA,CAAAA,MAAAA,EAAoC;AAClC,kBAAMzjD,CAAAA,GAAI,KAAA,oBAAA,CAAA,OAAA,CADwB,MACxB,CAAV;;AACA,gBAAIA,CAAAA,IAAJ,CAAA,EAAY;AACV,mBAAA,oBAAA,CAAA,MAAA,CAAA,CAAA,EADU,CACV;AAHgC;AAZf;;AAmBrBynC,UAAAA,aAAAA,GAAgB;AACd9pC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,yDACdA;AAIA,iBAAA,kBAAA,GAA0B,IAAA,iCAAA,CACxB,KADwB,QAAA,EAExB,KAPY,OAKY,CAA1B;AAIA,mBAAO,KATO,kBASd;AA5BmB;;AA+BrBgqC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,kBAAMnlB,MAAAA,GAAS,IAAA,kCAAA,CACb,KADa,QAAA,EAAA,KAAA,EADU,GACV,CAAf;AAKAA,YAAAA,MAAAA,CAAAA,QAAAA,GAAkB,KAAA,2BAAA,CAAA,IAAA,CANO,IAMP,CAAlBA;;AACA,iBAAA,oBAAA,CAAA,IAAA,CAPyB,MAOzB;;AACA,mBARyB,MAQzB;AAvCmB;;AA0CrBolB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,kBAAMC,OAAAA,GAAU,KAAA,oBAAA,CAAA,KAAA,CAJQ,CAIR,CAAhB;;AACAA,YAAAA,OAAAA,CAAAA,OAAAA,CAAgB,UAAA,MAAA,EAAkB;AAChCrlB,cAAAA,MAAAA,CAAAA,MAAAA,CADgC,MAChCA;AADFqlB,aAAAA;AA/CmB;;AAAA;;;;AAsDvB,cAAA,iCAAA,CAAwC;AACtChsC,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAA6B;AAC3B,iBAAA,QAAA,GAD2B,OAC3B;AAEA,kBAAMynB,IAAAA,GAAO;AACXogC,cAAAA,iBAAAA,EAAmB,KAAA,kBAAA,CAAA,IAAA,CADR,IACQ,CADR;AAEXC,cAAAA,MAAAA,EAAQ,KAAA,OAAA,CAAA,IAAA,CAFG,IAEH,CAFG;AAGXC,cAAAA,OAAAA,EAAS,KAAA,QAAA,CAAA,IAAA,CAHE,IAGF,CAHE;AAIXb,cAAAA,UAAAA,EAAY,KAAA,WAAA,CAAA,IAAA,CAJD,IAIC;AAJD,aAAb;AAMA,iBAAA,IAAA,GAAYhpC,MAAAA,CATe,GAS3B;AACA,iBAAA,cAAA,GAAsB8pC,OAAAA,CAAAA,WAAAA,CAVK,IAULA,CAAtB;AACA,iBAAA,0BAAA,GAX2B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAW3B;AACA,iBAAA,aAAA,GAAqB9pC,MAAAA,CAAAA,YAAAA,IAZM,KAY3B;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CAbK,MAa3B;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAdI,cAc3B;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAhByB;;AAmB3B,iBAAA,qBAAA,GAnB2B,KAmB3B;AACA,iBAAA,iBAAA,GApB2B,KAoB3B;AAEA,iBAAA,aAAA,GAtB2B,EAsB3B;AACA,iBAAA,SAAA,GAvB2B,EAuB3B;AACA,iBAAA,KAAA,GAxB2B,KAwB3B;AACA,iBAAA,YAAA,GAzB2B,SAyB3B;AACA,iBAAA,SAAA,GA1B2B,IA0B3B;AAEA,iBAAA,UAAA,GA5B2B,IA4B3B;AA7BoC;;AAgCtC+pC,UAAAA,kBAAAA,GAAqB;AACnB,kBAAMC,gBAAAA,GAAmB,KADN,cACnB;;AACA,kBAAMC,cAAAA,GAAiB,KAAA,QAAA,CAAA,aAAA,CAFJ,gBAEI,CAAvB;;AAEA,kBAAM1D,iBAAAA,GAAoBx/C,IAAAA,IAAQ;AAChC,qBAAOkjD,cAAAA,CAAAA,iBAAAA,CADyB,IACzBA,CAAP;AADF,aAAA;;AAGA,kBAAM;AAAA,cAAA,kBAAA;AAAA,cAAA;AAAA,gBAGF,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,cAAA,iBAAA;AAEnCzD,cAAAA,MAAAA,EAAQ,KAAA,QAAA,CAF2B,MAAA;AAGnC9kC,cAAAA,cAAAA,EAAgB,KAHmB,eAAA;AAInCJ,cAAAA,YAAAA,EAAc,KAJqB;AAAA,aAAjC,CAHJ;;AAUA,gBAAA,kBAAA,EAAwB;AACtB,mBAAA,iBAAA,GADsB,IACtB;AAlBiB;;AAqBnB,iBAAA,cAAA,GAAsBmlC,eAAAA,IAAmB,KArBtB,cAqBnB;AAEA,iBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAvBE,iBAuBFA,CAAjB;;AAEA,gBAAI,KAAJ,iBAAA,EAA4B;AAK1B,mBAAA,QAAA,CAAA,YAAA,CAL0B,gBAK1B;AA9BiB;;AAiCnB,iBAAA,0BAAA,CAjCmB,OAiCnB;AAjEoC;;AAoEtCwD,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,gBAAA,IAAA,EAAU;AACR,kBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,sBAAMjc,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,gBAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,kBAAAA,KAAAA,EAAO0O,IAAAA,CAAT,KAAA;AAAqByH,kBAAAA,IAAAA,EAArB;AAAA,iBAA1Bid;AAFF,eAAA,MAGO;AACL,qBAAA,aAAA,CAAA,IAAA,CAAwB1kB,IAAAA,CADnB,KACL;AALM;AADE;;AASZ,iBAAA,KAAA,GATY,IASZ;;AACA,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AAAA;AAVvB;;AAaZ,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClD0kB,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GAhBY,EAgBZ;AApFoC;;AAuFtCkc,UAAAA,QAAAA,CAAAA,MAAAA,EAAiB;AACf,kBAAMtnD,GAAAA,GAAM,KADG,IACf;AACA,kBAAM0qB,SAAAA,GAAY68B,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAAAA,MAAAA,EAFH,GAEGA,CAAlB;AACA,iBAAA,YAAA,GAHe,SAGf;;AACA,iBAAA,0BAAA,CAAA,MAAA,CAJe,SAIf;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDnc,cAAAA,iBAAAA,CAAAA,MAAAA,CADkD,SAClDA;AADF,aAAA;;AAGA,iBAAA,SAAA,GARe,EAQf;AACA,iBAAA,aAAA,GATe,EASf;AAhGoC;;AAmGtCX,UAAAA,WAAAA,CAAAA,IAAAA,EAAkB;AAChB,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AACd5gB,gBAAAA,MAAAA,EAAQhS,IAAAA,CADM,MAAA;AAEdiS,gBAAAA,KAAAA,EAAOjS,IAAAA,CAAAA,gBAAAA,GAAwBA,IAAAA,CAAxBA,KAAAA,GAAqC,KAF9B;AAAA,eAAhB;AAFc;AAnGoB;;AA4GtC,cAAI0T,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA7GoC;;AAgHtC,cAAInB,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AAjHoC;;AAoHtC,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AArHoC;;AAwHtC,cAAIE,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AAzHoC;;AA4HtC,cAAIghB,YAAJ,GAAmB;AACjB,mBAAO,KAAA,0BAAA,CADU,OACjB;AA7HoC;;AAgItC,gBAAMC,IAAN,GAAa;AACX,gBAAI,KAAJ,YAAA,EAAuB;AACrB,oBAAM,KADe,YACrB;AAFS;;AAIX,gBAAI,KAAA,aAAA,CAAA,MAAA,GAAJ,CAAA,EAAmC;AACjC,oBAAM9zB,KAAAA,GAAQ,KAAA,aAAA,CADmB,KACnB,EAAd;;AACA,qBAAO;AAAEQ,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AANS;;AAQX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEnW,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AATS;;AAWX,kBAAMid,iBAAAA,GAXK,CAAA,GAAA,KAAA,CAAA,uBAAA,GAWX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAZW,iBAYX;;AACA,mBAAOA,iBAAAA,CAbI,OAaX;AA7IoC;;AAgJtCjf,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,0BAAA,CAAA,MAAA,CAFa,MAEb;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDif,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GANa,EAMb;;AACA,gBAAI,KAAA,QAAA,CAAA,gBAAA,CAA+B,KAAnC,cAAI,CAAJ,EAAyD;AACvD,mBAAA,QAAA,CAAA,YAAA,CAA2B,KAD4B,cACvD;AARW;;AAUb,iBAAA,kBAAA,GAVa,IAUb;AA1JoC;;AAAA;;AA+JxC,cAAA,kCAAA,CAAyC;AACvCnsC,UAAAA,WAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAiC;AAC/B,iBAAA,QAAA,GAD+B,OAC/B;AACA,kBAAMynB,IAAAA,GAAO;AACXqgC,cAAAA,MAAAA,EAAQ,KAAA,OAAA,CAAA,IAAA,CADG,IACH,CADG;AAEXZ,cAAAA,UAAAA,EAAY,KAAA,WAAA,CAAA,IAAA,CAFD,IAEC;AAFD,aAAb;AAIA,iBAAA,UAAA,GAAkBc,OAAAA,CAAAA,YAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EANa,IAMbA,CAAlB;AACA,iBAAA,SAAA,GAP+B,EAO/B;AACA,iBAAA,YAAA,GAR+B,IAQ/B;AACA,iBAAA,KAAA,GAT+B,KAS/B;AAEA,iBAAA,UAAA,GAX+B,IAW/B;AACA,iBAAA,QAAA,GAZ+B,IAY/B;AAbqC;;AAgBvCO,UAAAA,MAAAA,GAAS;AACP,gBAAI,KAAJ,QAAA,EAAmB;AACjB,mBAAA,QAAA,CADiB,IACjB;AAFK;AAhB8B;;AAsBvCH,UAAAA,OAAAA,CAAAA,IAAAA,EAAc;AACZ,kBAAM7vC,KAAAA,GAAQK,IAAAA,CADF,KACZ;;AACA,gBAAI,KAAA,SAAA,CAAA,MAAA,GAAJ,CAAA,EAA+B;AAC7B,oBAAMuzB,iBAAAA,GAAoB,KAAA,SAAA,CADG,KACH,EAA1B;;AACAA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAA1Bid;AAFF,aAAA,MAGO;AACL,mBAAA,YAAA,GADK,KACL;AANU;;AAQZ,iBAAA,KAAA,GARY,IAQZ;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDA,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GAZY,EAYZ;;AACA,iBAbY,MAaZ;AAnCqC;;AAsCvCX,UAAAA,WAAAA,CAAAA,GAAAA,EAAiB;AACf,gBAAI,CAAC,KAAD,oBAAA,IAA8B,KAAlC,UAAA,EAAmD;AACjD,mBAAA,UAAA,CAAgB;AACd5gB,gBAAAA,MAAAA,EAAQD,GAAAA,CAFuC;AACjC,eAAhB;AAFa;AAtCsB;;AA8CvC,cAAIO,oBAAJ,GAA2B;AACzB,mBADyB,KACzB;AA/CqC;;AAkDvC,gBAAMmhB,IAAN,GAAa;AACX,gBAAI,KAAA,YAAA,KAAJ,IAAA,EAAgC;AAC9B,oBAAM9zB,KAAAA,GAAQ,KADgB,YAC9B;AACA,mBAAA,YAAA,GAF8B,IAE9B;AACA,qBAAO;AAAEQ,gBAAAA,KAAAA,EAAF,KAAA;AAAgBmW,gBAAAA,IAAAA,EAAhB;AAAA,eAAP;AAJS;;AAMX,gBAAI,KAAJ,KAAA,EAAgB;AACd,qBAAO;AAAEnW,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAAP;AAPS;;AASX,kBAAMid,iBAAAA,GATK,CAAA,GAAA,KAAA,CAAA,uBAAA,GASX;;AACA,iBAAA,SAAA,CAAA,IAAA,CAVW,iBAUX;;AACA,mBAAOA,iBAAAA,CAXI,OAWX;AA7DqC;;AAgEvCjf,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,iBAAA,KAAA,GADa,IACb;;AACA,iBAAA,SAAA,CAAA,OAAA,CAAuB,UAAA,iBAAA,EAA6B;AAClDif,cAAAA,iBAAAA,CAAAA,OAAAA,CAA0B;AAAEpzB,gBAAAA,KAAAA,EAAF,SAAA;AAAoBmW,gBAAAA,IAAAA,EAApB;AAAA,eAA1Bid;AADF,aAAA;;AAGA,iBAAA,SAAA,GALa,EAKb;;AACA,gBAAI,KAAA,QAAA,CAAA,gBAAA,CAA+B,KAAnC,UAAI,CAAJ,EAAqD;AACnD,mBAAA,QAAA,CAAA,YAAA,CAA2B,KADwB,UACnD;AAPW;;AASb,iBATa,MASb;AAzEqC;;AAAA;;;;;;;;;;;;;AC7ZzC,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAKA,YAAA,cAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AApBA;;AAiCA,iBAAA,kBAAA,CAAA,OAAA,EAAA,eAAA,EAAA,eAAA,EAAuE;AACrE,iBAAO;AACLoY,YAAAA,MAAAA,EADK,KAAA;AAAA,YAAA,OAAA;AAGLiE,YAAAA,MAAAA,EAAQC,eAARD,aAAQC,eAARD,uBAAQC,eAAAA,CAHH,MAAA;AAILC,YAAAA,IAAAA,EAJK,MAAA;AAKLC,YAAAA,WAAAA,EAAahpC,eAAAA,GAAAA,SAAAA,GALR,aAAA;AAMLipC,YAAAA,QAAAA,EANK;AAAA,WAAP;AAlCF;;AA4CA,iBAAA,aAAA,CAAA,WAAA,EAAoC;AAClC,gBAAMC,OAAAA,GAAU,IADkB,OAClB,EAAhB;;AACA,eAAA,MAAA,QAAA,IAAA,WAAA,EAAoC;AAClC,kBAAM9vC,KAAAA,GAAQ2G,WAAAA,CADoB,QACpBA,CAAd;;AACA,gBAAI,OAAA,KAAA,KAAJ,WAAA,EAAkC;AAAA;AAFA;;AAKlCmpC,YAAAA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,EALkC,KAKlCA;AAPgC;;AASlC,iBATkC,OASlC;AArDF;;AAyDA,cAAA,cAAA,CAAqB;AACnB7oD,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,MAAA,GADkB,MAClB;AACA,iBAAA,MAAA,GAAc,YAAA,IAAA,CAAiBke,MAAAA,CAFb,GAEJ,CAAd;AACA,iBAAA,WAAA,GAAoB,KAAA,MAAA,IAAeA,MAAAA,CAAhB,WAAC,IAHF,EAGlB;AAEA,iBAAA,kBAAA,GALkB,IAKlB;AACA,iBAAA,oBAAA,GANkB,EAMlB;AAPiB;;AAUnB,cAAIqtB,sBAAJ,GAA6B;AAAA;;AAC3B,mBAAO,gCAAA,kBAAA,kFAAA,OAAA,KADoB,CAC3B;AAXiB;;AAcnBK,UAAAA,aAAAA,GAAgB;AACd9pC,aAAAA,GAAAA,KAAAA,CAAAA,MAAAA,EACE,CAAC,KADHA,kBAAAA,EADc,uDACdA;AAIA,iBAAA,kBAAA,GAA0B,IAAA,oBAAA,CALZ,IAKY,CAA1B;AACA,mBAAO,KANO,kBAMd;AApBiB;;AAuBnBgqC,UAAAA,cAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAA2B;AACzB,gBAAIxnC,GAAAA,IAAO,KAAX,sBAAA,EAAwC;AACtC,qBADsC,IACtC;AAFuB;;AAIzB,kBAAMqiB,MAAAA,GAAS,IAAA,yBAAA,CAAA,IAAA,EAAA,KAAA,EAJU,GAIV,CAAf;;AACA,iBAAA,oBAAA,CAAA,IAAA,CALyB,MAKzB;;AACA,mBANyB,MAMzB;AA7BiB;;AAgCnBolB,UAAAA,iBAAAA,CAAAA,MAAAA,EAA0B;AACxB,gBAAI,KAAJ,kBAAA,EAA6B;AAC3B,mBAAA,kBAAA,CAAA,MAAA,CAD2B,MAC3B;AAFsB;;AAIxB,kBAAMC,OAAAA,GAAU,KAAA,oBAAA,CAAA,KAAA,CAJQ,CAIR,CAAhB;;AACAA,YAAAA,OAAAA,CAAAA,OAAAA,CAAgB,UAAA,MAAA,EAAkB;AAChCrlB,cAAAA,MAAAA,CAAAA,MAAAA,CADgC,MAChCA;AADFqlB,aAAAA;AArCiB;;AAAA;;;;AA4CrB,cAAA,oBAAA,CAA2B;AACzBhsC,UAAAA,WAAAA,CAAAA,MAAAA,EAAoB;AAClB,iBAAA,OAAA,GADkB,MAClB;AACA,iBAAA,OAAA,GAFkB,IAElB;AACA,iBAAA,OAAA,GAHkB,CAGlB;AACA,iBAAA,SAAA,GAJkB,IAIlB;AACA,kBAAMke,MAAAA,GAAS4rB,MAAAA,CALG,MAKlB;AACA,iBAAA,gBAAA,GAAwB5rB,MAAAA,CAAAA,eAAAA,IANN,KAMlB;AACA,iBAAA,cAAA,GAAsBA,MAAAA,CAPJ,MAOlB;AACA,iBAAA,kBAAA,GARkB,CAAA,GAAA,KAAA,CAAA,uBAAA,GAQlB;AACA,iBAAA,aAAA,GAAqBA,MAAAA,CAAAA,YAAAA,IATH,KASlB;AACA,iBAAA,eAAA,GAAuBA,MAAAA,CAVL,cAUlB;;AACA,gBAAI,CAAC,KAAD,eAAA,IAAyB,CAAC,KAA9B,aAAA,EAAkD;AAChD,mBAAA,aAAA,GADgD,IAChD;AAZgB;;AAelB,gBAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C,mBAAA,gBAAA,GAAwB,IADkB,eAClB,EAAxB;AAhBgB;;AAkBlB,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAlBZ,aAkBlB;AACA,iBAAA,iBAAA,GAAyB,CAACA,MAAAA,CAnBR,YAmBlB;AAEA,iBAAA,QAAA,GAAgB4qC,aAAAA,CAAc,KAAA,OAAA,CArBZ,WAqBFA,CAAhB;AAEA,kBAAM/nD,GAAAA,GAAMmd,MAAAA,CAvBM,GAuBlB;AACApd,YAAAA,KAAAA,CAAAA,GAAAA,EAEEioD,kBAAAA,CACE,KADFA,QAAAA,EAEE,KAFFA,gBAAAA,EAGE,KALJjoD,gBAEEioD,CAFFjoD,CAAAA,CAAAA,IAAAA,CAQQS,QAAAA,IAAY;AAChB,kBAAI,CAACynD,CAAAA,GAAAA,cAAAA,CAAAA,sBAAAA,EAAuBznD,QAAAA,CAA5B,MAAKynD,CAAL,EAA8C;AAC5C,sBAAMV,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAA0B/mD,QAAAA,CAA1B+mD,MAAAA,EADsC,GACtCA,CAAN;AAFc;;AAIhB,mBAAA,OAAA,GAAe/mD,QAAAA,CAAAA,IAAAA,CAJC,SAIDA,EAAf;;AACA,mBAAA,kBAAA,CALgB,OAKhB;;AAEA,oBAAMkjD,iBAAAA,GAAoBx/C,IAAAA,IAAQ;AAChC,uBAAO1D,QAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CADyB,IACzBA,CAAP;AADF,eAAA;;AAGA,oBAAM;AAAA,gBAAA,kBAAA;AAAA,gBAAA;AAAA,kBAGF,CAAA,GAAA,cAAA,CAAA,gCAAA,EAAiC;AAAA,gBAAA,iBAAA;AAEnCmjD,gBAAAA,MAAAA,EAAQ,KAAA,OAAA,CAF2B,MAAA;AAGnC9kC,gBAAAA,cAAAA,EAAgB,KAHmB,eAAA;AAInCJ,gBAAAA,YAAAA,EAAc,KAJqB;AAAA,eAAjC,CAHJ;AAUA,mBAAA,iBAAA,GApBgB,kBAoBhB;AAEA,mBAAA,cAAA,GAAsBmlC,eAAAA,IAAmB,KAtBzB,cAsBhB;AAEA,mBAAA,SAAA,GAAiBC,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAxBD,iBAwBCA,CAAjB;;AAIA,kBAAI,CAAC,KAAD,qBAAA,IAA+B,KAAnC,iBAAA,EAA2D;AACzD,qBAAA,MAAA,CAAY,IAAA,KAAA,CAAA,cAAA,CAD6C,wBAC7C,CAAZ;AA7Bc;AARpB9jD,aAAAA,EAAAA,KAAAA,CAwCS,KAAA,kBAAA,CAhES,MAwBlBA;AA0CA,iBAAA,UAAA,GAlEkB,IAkElB;AAnEuB;;AAsEzB,cAAIsrC,YAAJ,GAAmB;AACjB,mBAAO,KAAA,kBAAA,CADU,OACjB;AAvEuB;;AA0EzB,cAAI9f,QAAJ,GAAe;AACb,mBAAO,KADM,SACb;AA3EuB;;AA8EzB,cAAIlB,aAAJ,GAAoB;AAClB,mBAAO,KADW,cAClB;AA/EuB;;AAkFzB,cAAID,gBAAJ,GAAuB;AACrB,mBAAO,KADc,iBACrB;AAnFuB;;AAsFzB,cAAID,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AAvFuB;;AA0FzB,gBAAMmhB,IAAN,GAAa;AACX,kBAAM,KAAA,kBAAA,CADK,OACX;AACA,kBAAM;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,gBAAkB,MAAM,KAAA,OAAA,CAFnB,IAEmB,EAA9B;;AACA,gBAAA,IAAA,EAAU;AACR,qBAAO;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAAP;AAJS;;AAMX,iBAAA,OAAA,IAAgBtzB,KAAAA,CANL,UAMX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AACd6R,gBAAAA,MAAAA,EAAQ,KADM,OAAA;AAEdC,gBAAAA,KAAAA,EAAO,KAFO;AAAA,eAAhB;AARS;;AAaX,kBAAMpO,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAbJ,MAaX;AACA,mBAAO;AAAE1D,cAAAA,KAAAA,EAAF,MAAA;AAAiBmW,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AAxGuB;;AA2GzBhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,MAAA,CADgB,MAChB;AAFW;;AAIb,gBAAI,KAAJ,gBAAA,EAA2B;AACzB,mBAAA,gBAAA,CADyB,KACzB;AALW;AA3GU;;AAAA;;AAsH3B,cAAA,yBAAA,CAAgC;AAC9BltB,UAAAA,WAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAgC;AAC9B,iBAAA,OAAA,GAD8B,MAC9B;AACA,iBAAA,OAAA,GAF8B,IAE9B;AACA,iBAAA,OAAA,GAH8B,CAG9B;AACA,kBAAMke,MAAAA,GAAS4rB,MAAAA,CAJe,MAI9B;AACA,iBAAA,gBAAA,GAAwB5rB,MAAAA,CAAAA,eAAAA,IALM,KAK9B;AACA,iBAAA,eAAA,GAN8B,CAAA,GAAA,KAAA,CAAA,uBAAA,GAM9B;AACA,iBAAA,qBAAA,GAA6B,CAACA,MAAAA,CAPA,aAO9B;;AAEA,gBAAI,OAAA,eAAA,KAAJ,WAAA,EAA4C;AAC1C,mBAAA,gBAAA,GAAwB,IADkB,eAClB,EAAxB;AAV4B;;AAa9B,iBAAA,QAAA,GAAgB4qC,aAAAA,CAAc,KAAA,OAAA,CAbA,WAadA,CAAhB;;AACA,iBAAA,QAAA,CAAA,MAAA,CAAA,OAAA,EAA8B,SAAA,KAAA,IAAkBxkD,GAAAA,GAdlB,CAAA,EAc9B;;AAEA,kBAAMvD,GAAAA,GAAMmd,MAAAA,CAhBkB,GAgB9B;AACApd,YAAAA,KAAAA,CAAAA,GAAAA,EAEEioD,kBAAAA,CACE,KADFA,QAAAA,EAEE,KAFFA,gBAAAA,EAGE,KALJjoD,gBAEEioD,CAFFjoD,CAAAA,CAAAA,IAAAA,CAQQS,QAAAA,IAAY;AAChB,kBAAI,CAACynD,CAAAA,GAAAA,cAAAA,CAAAA,sBAAAA,EAAuBznD,QAAAA,CAA5B,MAAKynD,CAAL,EAA8C;AAC5C,sBAAMV,CAAAA,GAAAA,cAAAA,CAAAA,yBAAAA,EAA0B/mD,QAAAA,CAA1B+mD,MAAAA,EADsC,GACtCA,CAAN;AAFc;;AAIhB,mBAAA,eAAA,CAJgB,OAIhB;;AACA,mBAAA,OAAA,GAAe/mD,QAAAA,CAAAA,IAAAA,CALC,SAKDA,EAAf;AAbJT,aAAAA,EAAAA,KAAAA,CAeSI,MAAAA,IAAU;AACf,kBAAIA,CAAAA,MAAAA,SAAAA,IAAAA,MAAAA,WAAAA,YAAAA,MAAAA,CAAAA,IAAAA,MAAJ,YAAA,EAAmC;AAAA;AADpB;;AAIf,oBAJe,MAIf;AAnBJJ,aAAAA;AAsBA,iBAAA,UAAA,GAvC8B,IAuC9B;AAxC4B;;AA2C9B,cAAIoqB,oBAAJ,GAA2B;AACzB,mBAAO,KADkB,qBACzB;AA5C4B;;AA+C9B,gBAAMmhB,IAAN,GAAa;AACX,kBAAM,KAAA,eAAA,CADK,OACX;AACA,kBAAM;AAAA,cAAA,KAAA;AAAA,cAAA;AAAA,gBAAkB,MAAM,KAAA,OAAA,CAFnB,IAEmB,EAA9B;;AACA,gBAAA,IAAA,EAAU;AACR,qBAAO;AAAA,gBAAA,KAAA;AAAA,gBAAA;AAAA,eAAP;AAJS;;AAMX,iBAAA,OAAA,IAAgBtzB,KAAAA,CANL,UAMX;;AACA,gBAAI,KAAJ,UAAA,EAAqB;AACnB,mBAAA,UAAA,CAAgB;AAAE6R,gBAAAA,MAAAA,EAAQ,KADP;AACH,eAAhB;AARS;;AAUX,kBAAMnO,MAAAA,GAAS,IAAA,UAAA,CAAA,KAAA,EAVJ,MAUX;AACA,mBAAO;AAAE1D,cAAAA,KAAAA,EAAF,MAAA;AAAiBmW,cAAAA,IAAAA,EAAjB;AAAA,aAAP;AA1D4B;;AA6D9BhC,UAAAA,MAAAA,CAAAA,MAAAA,EAAe;AACb,gBAAI,KAAJ,OAAA,EAAkB;AAChB,mBAAA,OAAA,CAAA,MAAA,CADgB,MAChB;AAFW;;AAIb,gBAAI,KAAJ,gBAAA,EAA2B;AACzB,mBAAA,gBAAA,CADyB,KACzB;AALW;AA7De;;AAAA;;;;;;;;;AC3NhC;;;;AACA,UAAA,wBAAA,GAAA,EAAA;;;;AAEA;;;;AACA,eAAA,mBAAA,CAAA,QAAA,EAAA;AACA;AAAA;;AACA;AAAA,YAAA,YAAA,GAAA,wBAAA,CAAA,QAAA,CAAA;AACA;;AAAA,YAAA,YAAA,KAAA,SAAA,EAAA;AACA;AAAA,iBAAA,YAAA,CAAA,OAAA;AACA;AAAA;AACA;AAAA;;AACA;;;AAAA,YAAA,MAAA,GAAA,wBAAA,CAAA,QAAA,CAAA,GAAA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA,UAAA,OAAA,EAAA;AACA;;AAJA,SAAA;;;AAMA;AAAA;;AACA;;AAAA,QAAA,mBAAA,CAAA,QAAA,CAAA,CAAA,MAAA,EAAA,MAAA,CAAA,OAAA,EAAA,mBAAA;;;AAEA;AAAA;;AACA;;;AAAA,eAAA,MAAA,CAAA,OAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,YAAA,cAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAYA,YAAA,IAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AASA,YAAA,KAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AArCA,YAAA,iBAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,kBAAA,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAAA,YAAA,eAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,WAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,IAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AAAA,YAAA,UAAA,GAAA,mBAAA,CAAA,EAAA,CAAA;;AA8DA,cAAM+7B,YAAAA,GA9DN,SA8DA;AAGA,cAAMC,UAAAA,GAjEN,WAiEA;AAiBqC;AACnC,gBAAM;AAAA,YAAA;AAAA,cAAeC,mBAAAA,CADc,CACdA,CAArB;;AACA,cAAA,QAAA,EAAc;AACZ,kBAAMC,aAAAA,GAAgBD,mBAAAA,CAAAA,EAAAA,CAAAA,CAAtB,aAAA;;AACAE,aAAAA,GAAAA,IAAAA,CAAAA,0BAAAA,EAA2BhrC,MAAAA,IAAU;AACnC,qBAAO,IAAA,aAAA,CAD4B,MAC5B,CAAP;AADFgrC,aAAAA;AAFF,WAAA,MAKO;AACL,kBAAMC,gBAAAA,GAAmBH,mBAAAA,CAAAA,EAAAA,CAAAA,CAAzB,gBAAA;;AACA,gBAFK,cAEL;;AACA,gBAAA,CAAA,GAAA,cAAA,CAAA,gBAAA,GAAA,EAAwB;AACtBI,cAAAA,cAAAA,GAAiBJ,mBAAAA,CAAAA,EAAAA,CAAAA,CAAjBI,cAAAA;AAJG;;AAMLF,aAAAA,GAAAA,IAAAA,CAAAA,0BAAAA,EAA2BhrC,MAAAA,IAAU;AACnC,kBAAIkrC,cAAAA,IAAkBloD,CAAAA,GAAAA,cAAAA,CAAAA,eAAAA,EAAgBgd,MAAAA,CAAtC,GAAsBhd,CAAtB,EAAmD;AACjD,uBAAO,IAAA,cAAA,CAD0C,MAC1C,CAAP;AAFiC;;AAInC,qBAAO,IAAA,gBAAA,CAJ4B,MAI5B,CAAP;AAJFgoD,aAAAA;AAbiC;;;;;;;;;A7BxErC;CAVA","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  CMapCompressionType,\n  isString,\n  removeNullCharacters,\n  stringToBytes,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    unreachable(\"Abstract method `create` called.\");\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n}\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._document.createElement(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    canvas.width = width;\n    canvas.height = height;\n    return {\n      canvas,\n      context,\n    };\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    if (\n      (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n      (isFetchSupported() && isValidFetchUrl(url, document.baseURI))\n    ) {\n      return fetch(url).then(async response => {\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        let cMapData;\n        if (this.isCompressed) {\n          cMapData = new Uint8Array(await response.arrayBuffer());\n        } else {\n          cMapData = stringToBytes(await response.text());\n        }\n        return { cMapData, compressionType };\n      });\n    }\n\n    // The Fetch API is not supported.\n    return new Promise((resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", url, true);\n\n      if (this.isCompressed) {\n        request.responseType = \"arraybuffer\";\n      }\n      request.onreadystatechange = () => {\n        if (request.readyState !== XMLHttpRequest.DONE) {\n          return;\n        }\n        if (request.status === 200 || request.status === 0) {\n          let cMapData;\n          if (this.isCompressed && request.response) {\n            cMapData = new Uint8Array(request.response);\n          } else if (!this.isCompressed && request.responseText) {\n            cMapData = stringToBytes(request.responseText);\n          }\n          if (cMapData) {\n            resolve({ cMapData, compressionType });\n            return;\n          }\n        }\n        reject(new Error(request.statusText));\n      };\n\n      request.send(null);\n    });\n  }\n}\n\nclass DOMSVGFactory {\n  create(width, height) {\n    assert(width > 0 && height > 0, \"Invalid SVG dimensions\");\n\n    const svg = document.createElementNS(SVG_NS, \"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", width + \"px\");\n    svg.setAttribute(\"height\", height + \"px\");\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n\n    return svg;\n  }\n\n  createElement(type) {\n    assert(typeof type === \"string\", \"Invalid SVG element type\");\n\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg);\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLLinkElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isFetchSupported() {\n  return (\n    typeof fetch !== \"undefined\" &&\n    typeof Response !== \"undefined\" &&\n    \"body\" in Response.prototype &&\n    typeof ReadableStream !== \"undefined\"\n  );\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\nexport {\n  addLinkAttributes,\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  DEFAULT_LINK_REL,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isDataScheme,\n  isFetchSupported,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  RenderingCancelledException,\n  StatTimer,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} baseUrl - An absolute URL.\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {}\n\nclass MissingPDFException extends BaseException {}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {}\n\nconst NullCharactersRegExp = /\\x00/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\n// prettier-ignore\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,\n  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,\n  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,\n  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(String.fromCharCode((char >> 8) & 0xff));\n    buf.push(String.fromCharCode(char & 0xff));\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for globalThis in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Safari<10.1, Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    let isReadableStreamSupported = false;\n\n    if (typeof ReadableStream !== \"undefined\") {\n      // MS Edge may say it has ReadableStream but they are not up to spec yet.\n      try {\n        // eslint-disable-next-line no-new\n        new ReadableStream({\n          start(controller) {\n            controller.close();\n          },\n        });\n        isReadableStreamSupported = true;\n      } catch (e) {\n        // The ReadableStream constructor cannot be used.\n      }\n    }\n    if (isReadableStreamSupported) {\n      return;\n    }\n    globalThis.ReadableStream = require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n\n  // Provides support for String.prototype.padStart in legacy browsers.\n  // Support: Chrome<57, Safari<10\n  (function checkStringPadStart() {\n    if (String.prototype.padStart) {\n      return;\n    }\n    require(\"core-js/es/string/pad-start.js\");\n  })();\n\n  // Provides support for String.prototype.padEnd in legacy browsers.\n  // Support: Chrome<57, Safari<10\n  (function checkStringPadEnd() {\n    if (String.prototype.padEnd) {\n      return;\n    }\n    require(\"core-js/es/string/pad-end.js\");\n  })();\n\n  // Provides support for Object.values in legacy browsers.\n  // Support: Chrome<54, Safari<10.1\n  (function checkObjectValues() {\n    if (Object.values) {\n      return;\n    }\n    Object.values = require(\"core-js/es/object/values.js\");\n  })();\n\n  // Provides support for Object.entries in legacy browsers.\n  // Support: Chrome<54, Safari<10.1\n  (function checkObjectEntries() {\n    if (Object.entries) {\n      return;\n    }\n    Object.entries = require(\"core-js/es/object/entries.js\");\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport { NodeCanvasFactory, NodeCMapReaderFactory } from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { apiCompatibilityParams } from \"./api_compatibility.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { WebGLContext } from \"./webgl.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via `@font-face` rules. If disabled, fonts will\n *   be rendered using a built-in font renderer that constructs the glyphs with\n *   primitive path commands. The default value is `false`.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace = apiCompatibilityParams.disableFontFace || false;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          messageHandler.postMessageTransfers = worker.postMessageTransfers;\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise} A promise that is resolved when the worker ID of the\n *   `MessageHandler` is known.\n * @private\n */\nfunction _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    return Promise.reject(new Error(\"Worker was destroyed\"));\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  return worker.messageHandler\n    .sendWithPromise(\"GetDocRequest\", {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n    })\n    .then(function (workerId) {\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n      return workerId;\n    });\n}\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n *\n * @typedef {Object} PDFDocumentLoadingTask\n * @property {string} docId - Unique identifier for the document loading task.\n * @property {boolean} destroyed - Whether the loading task is destroyed or not.\n * @property {function} [onPassword] - Callback to request a password if a wrong\n *   or no password was provided. The callback receives two parameters: a\n *   function that should be called with the new password, and a reason (see\n *   {@link PasswordResponses}).\n * @property {function} [onProgress] - Callback to be able to monitor the\n *   loading progress of the PDF file (necessary to implement e.g. a loading\n *   bar). The callback receives an {Object} with the properties `loaded`\n *   ({number}) and `total` ({number}) that indicate how many bytes are loaded.\n * @property {function} [onUnsupportedFeature] - Callback for when an\n *   unsupported feature is used in the PDF document. The callback receives an\n *   {@link UNSUPPORTED_FEATURES} argument.\n * @property {Promise<PDFDocumentProxy>} promise - Promise for document loading\n *   task completion.\n * @property {function} destroy - Abort all network requests and destroy\n *   the worker. Returns a promise that is resolved when destruction is\n *   completed.\n */\n\n/**\n * @type {any}\n * @ignore\n */\nconst PDFDocumentLoadingTask = (function PDFDocumentLoadingTaskClosure() {\n  let nextDocumentId = 0;\n\n  /**\n   * The loading task controls the operations required to load a PDF document\n   * (such as network requests) and provides a way to listen for completion,\n   * after which individual pages can be rendered.\n   */\n  // eslint-disable-next-line no-shadow\n  class PDFDocumentLoadingTask {\n    constructor() {\n      this._capability = createPromiseCapability();\n      this._transport = null;\n      this._worker = null;\n\n      /**\n       * Unique identifier for the document loading task.\n       * @type {string}\n       */\n      this.docId = \"d\" + nextDocumentId++;\n\n      /**\n       * Whether the loading task is destroyed or not.\n       * @type {boolean}\n       */\n      this.destroyed = false;\n\n      /**\n       * Callback to request a password if a wrong or no password was provided.\n       * The callback receives two parameters: a function that should be called\n       * with the new password, and a reason (see {@link PasswordResponses}).\n       * @type {function}\n       */\n      this.onPassword = null;\n\n      /**\n       * Callback to be able to monitor the loading progress of the PDF file\n       * (necessary to implement e.g. a loading bar). The callback receives\n       * an {Object} with the properties `loaded` ({number}) and `total`\n       * ({number}) that indicate how many bytes are loaded.\n       * @type {function}\n       */\n      this.onProgress = null;\n\n      /**\n       * Callback for when an unsupported feature is used in the PDF document.\n       * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n       * @type {function}\n       */\n      this.onUnsupportedFeature = null;\n    }\n\n    /**\n     * Promise for document loading task completion.\n     * @type {Promise<PDFDocumentProxy>}\n     */\n    get promise() {\n      return this._capability.promise;\n    }\n\n    /**\n     * @returns {Promise<void>} A promise that is resolved when destruction is\n     *   completed.\n     */\n    destroy() {\n      this.destroyed = true;\n\n      const transportDestroyed = !this._transport\n        ? Promise.resolve()\n        : this._transport.destroy();\n      return transportDestroyed.then(() => {\n        this._transport = null;\n        if (this._worker) {\n          this._worker.destroy();\n          this._worker = null;\n        }\n      });\n    }\n  }\n  return PDFDocumentLoadingTask;\n})();\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {string} A (not guaranteed to be) unique ID to identify a PDF.\n   */\n  get fingerprint() {\n    return this._pdfInfo.fingerprint;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return this._pdfInfo.isPureXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {{num: number, gen: number}} ref - The page reference. Must have\n   *   the `num` and `gen` properties.\n   * @returns {Promise<{num: number, gen: number}>} A promise that is resolved\n   *   with the page index (starting from zero) that is associated with the\n   *   reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any>>} A promise that is resolved with all\n   *   information of the given named destination.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @returns {Promise<PDFDocumentStats>} A promise this is resolved with\n   *   current statistics about document structures (see\n   *   {@link PDFDocumentStats}).\n   */\n  getStats() {\n    return this._transport.getStats();\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are either needed in the viewer and/or\n   *   whose default values may be affected by the `apiCompatibilityParams`.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @param {AnnotationStorage} annotationStorage - Storage for annotation\n   *   data in forms.\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument(annotationStorage) {\n    return this._transport.saveDocument(annotationStorage);\n  }\n\n  /**\n   * @returns {Promise<Array<Object> | null>} A promise that is resolved with an\n   *   {Array<Object>} containing /AcroForm field data for the JS sandbox,\n   *   or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem>} items - Array of {@link TextItem} objects.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} intent - Determines the annotations that will be fetched,\n *   can be either 'display' (viewable annotations) or 'print' (printable\n *   annotations). If the parameter is omitted, all annotations are fetched.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display' or 'print'.\n *   The default value is 'display'.\n * @property {boolean} [enableWebGL] - Enables WebGL accelerated rendering for\n *   some operations. The default value is `false`.\n * @property {boolean} [renderInteractiveForms] - Whether or not interactive\n *   form elements are rendered in the display layer. If so, we do not render\n *   them on the canvas as well.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {AnnotationStorage} [annotationStorage] - Storage for annotation\n *   data in forms.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {Object} The reference that points to this page. It has `num` and\n   *   `gen` properties.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = null } = {}) {\n    if (!this._annotationsPromise || this._annotationsIntent !== intent) {\n      this._annotationsPromise = this._transport.getAnnotations(\n        this._pageIndex,\n        intent\n      );\n      this._annotationsIntent = intent;\n    }\n    return this._annotationsPromise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  getXfa() {\n    return (this._xfaPromise ||= this._transport.getPageXfa(this._pageIndex));\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    enableWebGL = false,\n    renderInteractiveForms = false,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    annotationStorage = null,\n    optionalContentConfigPromise = null,\n  }) {\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(renderingIntent);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(renderingIntent, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const webGLContext = new WebGLContext({\n      enable: enableWebGL,\n    });\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList({\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        renderInteractiveForms: renderInteractiveForms === true,\n        annotationStorage: annotationStorage?.serializable || null,\n      });\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || renderingIntent === \"print\") {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error,\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      webGLContext,\n      useRequestAnimationFrame: renderingIntent !== \"print\",\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents page's operator list.\n   */\n  getOperatorList() {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const renderingIntent = \"oplist\";\n    let intentState = this._intentStates.get(renderingIntent);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(renderingIntent, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList({\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n      });\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n    this._transport.pageCache[this._pageIndex] = null;\n\n    const waitOn = [];\n    for (const [intent, intentState] of this._intentStates) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intent === \"oplist\") {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationsPromise = null;\n    this._jsActionsPromise = null;\n    this._xfaPromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationsPromise = null;\n    this._jsActionsPromise = null;\n    this._xfaPromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, intent) {\n    const intentState = this._intentStates.get(intent);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList(args) {\n    assert(\n      args.intent,\n      'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.'\n    );\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      args\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(args.intent);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    assert(\n      reason instanceof Error ||\n        (typeof reason === \"object\" && reason !== null),\n      'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.'\n    );\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader.cancel(new AbortException(reason?.message));\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [intent, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(intent);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve(undefined);\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(value) {\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      if (cloned.has(value)) {\n        // already cloned the object\n        return cloned.get(value);\n      }\n      let buffer, result;\n      if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n        // We found object with ArrayBuffer (typed array).\n        if (transfers?.includes(buffer)) {\n          result = new value.constructor(\n            buffer,\n            value.byteOffset,\n            value.byteLength\n          );\n        } else {\n          result = new value.constructor(value);\n        }\n        cloned.set(value, result);\n        return result;\n      }\n      if (value instanceof Map) {\n        result = new Map();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const [key, val] of value) {\n          result.set(key, cloneValue(val));\n        }\n        return result;\n      }\n      if (value instanceof Set) {\n        result = new Set();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const val of value) {\n          result.add(cloneValue(val));\n        }\n        return result;\n      }\n      result = Array.isArray(value) ? [] : {};\n      cloned.set(value, result); // Adding to cache now for cyclic references.\n      // Cloning all value and object properties, however ignoring properties\n      // defined via getter.\n      for (const i in value) {\n        let desc,\n          p = value;\n        while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n          p = Object.getPrototypeOf(p);\n        }\n        if (typeof desc.value === \"undefined\") {\n          continue;\n        }\n        if (typeof desc.value === \"function\") {\n          if (value.hasOwnProperty?.(i)) {\n            throw new Error(\n              `LoopbackPort.postMessage - cannot clone: ${value[i]}`\n            );\n          }\n          continue;\n        }\n        result[i] = cloneValue(desc.value);\n      }\n      return result;\n    }\n\n    const cloned = new WeakMap();\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level; the\n *   constants from {@link VerbosityLevel} should be used.\n */\n\n/** @type {any} */\nconst PDFWorker = (function PDFWorkerClosure() {\n  const pdfWorkerPorts = new WeakMap();\n  let isWorkerDisabled = false;\n  let fallbackWorkerSrc;\n  let nextFakeWorkerId = 0;\n  let fakeWorkerCapability;\n\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n    // eslint-disable-next-line no-undef\n    if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n      // Workers aren't supported in Node.js, force-disabling them there.\n      isWorkerDisabled = true;\n\n      if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"LIB\")) {\n        fallbackWorkerSrc = \"../pdf.worker.js\";\n      } else {\n        fallbackWorkerSrc = \"./pdf.worker.js\";\n      }\n    } else if (typeof document === \"object\" && \"currentScript\" in document) {\n      const pdfjsFilePath = document.currentScript?.src;\n      if (pdfjsFilePath) {\n        fallbackWorkerSrc = pdfjsFilePath.replace(\n          /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n          \".worker$1$2\"\n        );\n      }\n    }\n  }\n\n  function getWorkerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (typeof fallbackWorkerSrc !== \"undefined\") {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  function getMainThreadWorkerMessageHandler() {\n    let mainWorkerMessageHandler;\n    try {\n      mainWorkerMessageHandler = globalThis.pdfjsWorker?.WorkerMessageHandler;\n    } catch (ex) {\n      /* Ignore errors. */\n    }\n    return mainWorkerMessageHandler || null;\n  }\n\n  // Loads worker code into main thread.\n  function setupFakeWorkerGlobal() {\n    if (fakeWorkerCapability) {\n      return fakeWorkerCapability.promise;\n    }\n    fakeWorkerCapability = createPromiseCapability();\n\n    const loader = async function () {\n      const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(getWorkerSrc());\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(getWorkerSrc());\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n    loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n\n    return fakeWorkerCapability.promise;\n  }\n\n  function createCDNWrapper(url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = \"importScripts('\" + url + \"');\";\n    return URL.createObjectURL(new Blob([wrapper]));\n  }\n\n  /**\n   * PDF.js web worker abstraction that controls the instantiation of PDF\n   * documents. Message handlers are used to pass information from the main\n   * thread to the worker thread and vice versa. If the creation of a web\n   * worker is not possible, a \"fake\" worker will be used instead.\n   */\n  // eslint-disable-next-line no-shadow\n  class PDFWorker {\n    /**\n     * @param {PDFWorkerParameters} params - Worker initialization parameters.\n     */\n    constructor({\n      name = null,\n      port = null,\n      verbosity = getVerbosityLevel(),\n    } = {}) {\n      if (port && pdfWorkerPorts.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port\");\n      }\n\n      this.name = name;\n      this.destroyed = false;\n      this.postMessageTransfers = true;\n      this.verbosity = verbosity;\n\n      this._readyCapability = createPromiseCapability();\n      this._port = null;\n      this._webWorker = null;\n      this._messageHandler = null;\n\n      if (port) {\n        pdfWorkerPorts.set(port, this);\n        this._initializeFromPort(port);\n        return;\n      }\n      this._initialize();\n    }\n\n    get promise() {\n      return this._readyCapability.promise;\n    }\n\n    get port() {\n      return this._port;\n    }\n\n    get messageHandler() {\n      return this._messageHandler;\n    }\n\n    _initializeFromPort(port) {\n      this._port = port;\n      this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n      this._messageHandler.on(\"ready\", function () {\n        // Ignoring 'ready' event -- MessageHandler shall be already initialized\n        // and ready to accept the messages.\n      });\n      this._readyCapability.resolve();\n    }\n\n    _initialize() {\n      // If worker support isn't disabled explicit and the browser has worker\n      // support, create a new web worker and test if it/the browser fulfills\n      // all requirements to run parts of pdf.js in a web worker.\n      // Right now, the requirement is, that an Uint8Array is still an\n      // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n      if (\n        typeof Worker !== \"undefined\" &&\n        !isWorkerDisabled &&\n        !getMainThreadWorkerMessageHandler()\n      ) {\n        let workerSrc = getWorkerSrc();\n\n        try {\n          // Wraps workerSrc path into blob URL, if the former does not belong\n          // to the same origin.\n          if (\n            typeof PDFJSDev !== \"undefined\" &&\n            PDFJSDev.test(\"GENERIC\") &&\n            !isSameOrigin(window.location.href, workerSrc)\n          ) {\n            workerSrc = createCDNWrapper(\n              new URL(workerSrc, window.location).href\n            );\n          }\n\n          // Some versions of FF can't create a worker on localhost, see:\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n          const worker = new Worker(workerSrc);\n          const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n          const terminateEarly = () => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            messageHandler.destroy();\n            worker.terminate();\n            if (this.destroyed) {\n              this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n            } else {\n              // Fall back to fake worker if the termination is caused by an\n              // error (e.g. NetworkError / SecurityError).\n              this._setupFakeWorker();\n            }\n          };\n\n          const onWorkerError = () => {\n            if (!this._webWorker) {\n              // Worker failed to initialize due to an error. Clean up and fall\n              // back to the fake worker.\n              terminateEarly();\n            }\n          };\n          worker.addEventListener(\"error\", onWorkerError);\n\n          messageHandler.on(\"test\", data => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            if (this.destroyed) {\n              terminateEarly();\n              return; // worker was destroyed\n            }\n            if (data) {\n              // supportTypedArray\n              this._messageHandler = messageHandler;\n              this._port = worker;\n              this._webWorker = worker;\n              if (!data.supportTransfers) {\n                this.postMessageTransfers = false;\n              }\n              this._readyCapability.resolve();\n              // Send global setting, e.g. verbosity level.\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity,\n              });\n            } else {\n              this._setupFakeWorker();\n              messageHandler.destroy();\n              worker.terminate();\n            }\n          });\n\n          messageHandler.on(\"ready\", data => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            if (this.destroyed) {\n              terminateEarly();\n              return; // worker was destroyed\n            }\n            try {\n              sendTest();\n            } catch (e) {\n              // We need fallback to a faked worker.\n              this._setupFakeWorker();\n            }\n          });\n\n          const sendTest = () => {\n            const testObj = new Uint8Array([\n              this.postMessageTransfers ? 255 : 0,\n            ]);\n            // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n            // typed array. Also, checking if we can use transfers.\n            try {\n              messageHandler.send(\"test\", testObj, [testObj.buffer]);\n            } catch (ex) {\n              warn(\"Cannot use postMessage transfers.\");\n              testObj[0] = 0;\n              messageHandler.send(\"test\", testObj);\n            }\n          };\n\n          // It might take time for worker to initialize (especially when AMD\n          // loader is used). We will try to send test immediately, and then\n          // when 'ready' message will arrive. The worker shall process only\n          // first received 'test'.\n          sendTest();\n          return;\n        } catch (e) {\n          info(\"The worker has been disabled.\");\n        }\n      }\n      // Either workers are disabled, not supported or have thrown an exception.\n      // Thus, we fallback to a faked worker.\n      this._setupFakeWorker();\n    }\n\n    _setupFakeWorker() {\n      if (!isWorkerDisabled) {\n        warn(\"Setting up fake worker.\");\n        isWorkerDisabled = true;\n      }\n\n      setupFakeWorkerGlobal()\n        .then(WorkerMessageHandler => {\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n            return;\n          }\n          const port = new LoopbackPort();\n          this._port = port;\n\n          // All fake workers use the same port, making id unique.\n          const id = \"fake\" + nextFakeWorkerId++;\n\n          // If the main thread is our worker, setup the handling for the\n          // messages -- the main thread sends to it self.\n          const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n          WorkerMessageHandler.setup(workerHandler, port);\n\n          const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n          this._messageHandler = messageHandler;\n          this._readyCapability.resolve();\n          // Send global setting, e.g. verbosity level.\n          messageHandler.send(\"configure\", {\n            verbosity: this.verbosity,\n          });\n        })\n        .catch(reason => {\n          this._readyCapability.reject(\n            new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n          );\n        });\n    }\n\n    /**\n     * Destroys the worker instance.\n     */\n    destroy() {\n      this.destroyed = true;\n      if (this._webWorker) {\n        // We need to terminate only web worker created resource.\n        this._webWorker.terminate();\n        this._webWorker = null;\n      }\n      pdfWorkerPorts.delete(this._port);\n      this._port = null;\n      if (this._messageHandler) {\n        this._messageHandler.destroy();\n        this._messageHandler = null;\n      }\n    }\n\n    /**\n     * @param {PDFWorkerParameters} params - The worker initialization\n     *   parameters.\n     */\n    static fromPort(params) {\n      if (!params || !params.port) {\n        throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n      }\n      if (pdfWorkerPorts.has(params.port)) {\n        return pdfWorkerPorts.get(params.port);\n      }\n      return new PDFWorker(params);\n    }\n\n    static getWorkerSrc() {\n      return getWorkerSrc();\n    }\n  }\n  return PDFWorker;\n})();\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n    });\n    this._params = params;\n    this.CMapReaderFactory = new params.CMapReaderFactory({\n      baseUrl: params.cMapUrl,\n      isCompressed: params.cMapPacked,\n    });\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n\n    this.pageCache = [];\n    this.pagePromises = [];\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get loadingTaskSettled() {\n    return this.loadingTask._capability.settled;\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    this.pageCache.forEach(function (page) {\n      if (page) {\n        waitOn.push(page._destroy());\n      }\n    });\n    this.pageCache.length = 0;\n    this.pagePromises.length = 0;\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.loadingTaskSettled) {\n      const annotationStorageResetModified = this.loadingTask.promise\n        .then(pdfDocument => {\n          // Avoid initializing the `annotationStorage` if it doesn't exist.\n          if (pdfDocument.hasOwnProperty(\"annotationStorage\")) {\n            pdfDocument.annotationStorage.resetModified();\n          }\n        })\n        .catch(() => {});\n      waitOn.push(annotationStorageResetModified);\n    }\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress && loadingTask.onProgress) {\n            loadingTask.onProgress(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: evt.loaded,\n                total: evt.total,\n              });\n            }\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n      }\n      if (!(reason instanceof Error)) {\n        const msg = \"DocException - expected a valid Error.\";\n        if (\n          typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ) {\n          unreachable(msg);\n        } else {\n          warn(msg);\n        }\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.length,\n          total: data.length,\n        });\n      }\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.pageCache[data.pageIndex];\n      page._startRenderPage(data.transparency, data.intent);\n    });\n\n    messageHandler.on(\"commonobj\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const [id, type, exportedData] = data;\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", data => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return undefined;\n      }\n\n      const [id, pageIndex, type, imageData] = data;\n      const pageProxy = this.pageCache[pageIndex];\n      if (pageProxy.objs.has(id)) {\n        return undefined;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n      return undefined;\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.loaded,\n          total: data.total,\n        });\n      }\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", (data, sink) => {\n      if (this.destroyed) {\n        sink.error(new Error(\"Worker was destroyed\"));\n        return;\n      }\n      let fetched = false;\n\n      sink.onPull = () => {\n        if (fetched) {\n          sink.close();\n          return;\n        }\n        fetched = true;\n\n        this.CMapReaderFactory.fetch(data)\n          .then(function (builtInCMap) {\n            sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n          })\n          .catch(function (reason) {\n            sink.error(reason);\n          });\n      };\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    if (this.loadingTask.onUnsupportedFeature) {\n      this.loadingTask.onUnsupportedFeature(featureId);\n    }\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1;\n    if (pageIndex in this.pagePromises) {\n      return this.pagePromises[pageIndex];\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n    this.pagePromises[pageIndex] = promise;\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler\n      .sendWithPromise(\"GetPageIndex\", {\n        ref,\n      })\n      .catch(function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument(annotationStorage) {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        numPages: this._numPages,\n        annotationStorage: annotationStorage?.serializable || null,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        if (annotationStorage) {\n          annotationStorage.resetModified();\n        }\n      });\n  }\n\n  getFieldObjects() {\n    return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getPageXfa(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageXfa\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  getStats() {\n    return this.messageHandler.sendWithPromise(\"GetStats\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n      const page = this.pageCache[i];\n      if (!page) {\n        continue;\n      }\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n      disableFontFace: params.disableFontFace,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nconst InternalRenderTask = (function InternalRenderTaskClosure() {\n  const canvasInRendering = new WeakSet();\n\n  // eslint-disable-next-line no-shadow\n  class InternalRenderTask {\n    constructor({\n      callback,\n      params,\n      objs,\n      commonObjs,\n      operatorList,\n      pageIndex,\n      canvasFactory,\n      webGLContext,\n      useRequestAnimationFrame = false,\n      pdfBug = false,\n    }) {\n      this.callback = callback;\n      this.params = params;\n      this.objs = objs;\n      this.commonObjs = commonObjs;\n      this.operatorListIdx = null;\n      this.operatorList = operatorList;\n      this._pageIndex = pageIndex;\n      this.canvasFactory = canvasFactory;\n      this.webGLContext = webGLContext;\n      this._pdfBug = pdfBug;\n\n      this.running = false;\n      this.graphicsReadyCallback = null;\n      this.graphicsReady = false;\n      this._useRequestAnimationFrame =\n        useRequestAnimationFrame === true && typeof window !== \"undefined\";\n      this.cancelled = false;\n      this.capability = createPromiseCapability();\n      this.task = new RenderTask(this);\n      // caching this-bound methods\n      this._cancelBound = this.cancel.bind(this);\n      this._continueBound = this._continue.bind(this);\n      this._scheduleNextBound = this._scheduleNext.bind(this);\n      this._nextBound = this._next.bind(this);\n      this._canvas = params.canvasContext.canvas;\n    }\n\n    get completed() {\n      return this.capability.promise.catch(function () {\n        // Ignoring errors, since we only want to know when rendering is\n        // no longer pending.\n      });\n    }\n\n    initializeGraphics({ transparency = false, optionalContentConfig }) {\n      if (this.cancelled) {\n        return;\n      }\n      if (this._canvas) {\n        if (canvasInRendering.has(this._canvas)) {\n          throw new Error(\n            \"Cannot use the same canvas during multiple render() operations. \" +\n              \"Use different canvas or ensure previous operations were \" +\n              \"cancelled or completed.\"\n          );\n        }\n        canvasInRendering.add(this._canvas);\n      }\n\n      if (this._pdfBug && globalThis.StepperManager?.enabled) {\n        this.stepper = globalThis.StepperManager.create(this._pageIndex);\n        this.stepper.init(this.operatorList);\n        this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n      }\n      const {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      } = this.params;\n\n      this.gfx = new CanvasGraphics(\n        canvasContext,\n        this.commonObjs,\n        this.objs,\n        this.canvasFactory,\n        this.webGLContext,\n        imageLayer,\n        optionalContentConfig\n      );\n      this.gfx.beginDrawing({\n        transform,\n        viewport,\n        transparency,\n        background,\n      });\n      this.operatorListIdx = 0;\n      this.graphicsReady = true;\n      if (this.graphicsReadyCallback) {\n        this.graphicsReadyCallback();\n      }\n    }\n\n    cancel(error = null) {\n      this.running = false;\n      this.cancelled = true;\n      if (this.gfx) {\n        this.gfx.endDrawing();\n      }\n      if (this._canvas) {\n        canvasInRendering.delete(this._canvas);\n      }\n      this.callback(\n        error ||\n          new RenderingCancelledException(\n            `Rendering cancelled, page ${this._pageIndex + 1}`,\n            \"canvas\"\n          )\n      );\n    }\n\n    operatorListChanged() {\n      if (!this.graphicsReady) {\n        if (!this.graphicsReadyCallback) {\n          this.graphicsReadyCallback = this._continueBound;\n        }\n        return;\n      }\n\n      if (this.stepper) {\n        this.stepper.updateOperatorList(this.operatorList);\n      }\n\n      if (this.running) {\n        return;\n      }\n      this._continue();\n    }\n\n    _continue() {\n      this.running = true;\n      if (this.cancelled) {\n        return;\n      }\n      if (this.task.onContinue) {\n        this.task.onContinue(this._scheduleNextBound);\n      } else {\n        this._scheduleNext();\n      }\n    }\n\n    _scheduleNext() {\n      if (this._useRequestAnimationFrame) {\n        window.requestAnimationFrame(() => {\n          this._nextBound().catch(this._cancelBound);\n        });\n      } else {\n        Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n      }\n    }\n\n    async _next() {\n      if (this.cancelled) {\n        return;\n      }\n      this.operatorListIdx = this.gfx.executeOperatorList(\n        this.operatorList,\n        this.operatorListIdx,\n        this._continueBound,\n        this.stepper\n      );\n      if (this.operatorListIdx === this.operatorList.argsArray.length) {\n        this.running = false;\n        if (this.operatorList.lastChunk) {\n          this.gfx.endDrawing();\n          if (this._canvas) {\n            canvasInRendering.delete(this._canvas);\n          }\n          this.callback();\n        }\n      }\n    }\n  }\n  return InternalRenderTask;\n})();\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement = null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    this.nativeFontFaces.forEach(nativeFontFace => {\n      this._document.fonts.delete(nativeFontFace);\n    });\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    return shadow(this, \"isFontLoadingAPISupported\", !!this._document?.fonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (i = 0, ii = fonts.length; i < ii; i++) {\n        names.push(fonts[i].loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (i = 0, ii = names.length; i < ii; ++i) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = names[i];\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        this._document.body.removeChild(div);\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(new Uint8Array(this.data));\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    const rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds, current;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      let args,\n        js = \"\";\n      for (let i = 0, ii = cmds.length; i < ii; i++) {\n        current = cmds[i];\n\n        if (current.args !== undefined) {\n          args = current.args.join(\",\");\n        } else {\n          args = \"\";\n        }\n        js += \"c.\" + current.cmd + \"(\" + args + \");\\n\";\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\"c\", \"size\", js));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (let i = 0, ii = cmds.length; i < ii; i++) {\n        current = cmds[i];\n\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport { BaseCanvasFactory, BaseCMapReaderFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    create(width, height) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n      const Canvas = __non_webpack_require__(\"canvas\");\n      const canvas = Canvas.createCanvas(width, height);\n      return {\n        canvas,\n        context: canvas.getContext(\"2d\"),\n      };\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return new Promise((resolve, reject) => {\n        const fs = __non_webpack_require__(\"fs\");\n        fs.readFile(url, (error, data) => {\n          if (error || !data) {\n            reject(new Error(error));\n            return;\n          }\n          resolve({ cMapData: new Uint8Array(data), compressionType });\n        });\n      });\n    }\n  };\n}\n\nexport { NodeCanvasFactory, NodeCMapReaderFactory };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deprecated } from \"./display_utils.js\";\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable efffects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const obj = this._storage.get(key);\n    return obj !== undefined ? obj : defaultValue;\n  }\n\n  /**\n   * @deprecated\n   */\n  getOrCreateValue(key, defaultValue) {\n    deprecated(\"Use getValue instead.\");\n    if (this._storage.has(key)) {\n      return this._storage.get(key);\n    }\n\n    this._storage.set(key, defaultValue);\n    return defaultValue;\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      this._storage.set(key, value);\n      modified = true;\n    }\n    if (modified) {\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"../shared/is_node.js\";\n\nconst compatibilityParams = Object.create(null);\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  // Support: Node.js\n  (function checkFontFace() {\n    // Node.js is missing native support for `@font-face`.\n    if (isNodeJS) {\n      compatibilityParams.disableFontFace = true;\n    }\n  })();\n}\nconst apiCompatibilityParams = Object.freeze(compatibilityParams);\n\nexport { apiCompatibilityParams };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { getShadingPatternFromIR, TilingPattern } from \"./pattern_helper.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (!ctx.mozCurrentTransform) {\n    ctx._originalSave = ctx.save;\n    ctx._originalRestore = ctx.restore;\n    ctx._originalRotate = ctx.rotate;\n    ctx._originalScale = ctx.scale;\n    ctx._originalTranslate = ctx.translate;\n    ctx._originalTransform = ctx.transform;\n    ctx._originalSetTransform = ctx.setTransform;\n    ctx._originalResetTransform = ctx.resetTransform;\n\n    ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n    ctx._transformStack = [];\n\n    try {\n      // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n      // \"TypeError: Method lineWidth called on incompatible receiver\n      //  #<CanvasRenderingContext2D>\".\n      const desc = Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(ctx),\n        \"lineWidth\"\n      );\n\n      ctx._setLineWidth = desc.set;\n      ctx._getLineWidth = desc.get;\n\n      Object.defineProperty(ctx, \"lineWidth\", {\n        set: function setLineWidth(width) {\n          this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n        },\n        get: function getLineWidth() {\n          return this._getLineWidth();\n        },\n      });\n    } catch (_) {}\n\n    Object.defineProperty(ctx, \"mozCurrentTransform\", {\n      get: function getCurrentTransform() {\n        return this._transformMatrix;\n      },\n    });\n\n    Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n      get: function getCurrentTransformInverse() {\n        // Calculation done using WolframAlpha:\n        // http://www.wolframalpha.com/input/?\n        //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n        const m = this._transformMatrix;\n        const a = m[0],\n          b = m[1],\n          c = m[2],\n          d = m[3],\n          e = m[4],\n          f = m[5];\n\n        const ad_bc = a * d - b * c;\n        const bc_ad = b * c - a * d;\n\n        return [\n          d / ad_bc,\n          b / bc_ad,\n          c / bc_ad,\n          a / ad_bc,\n          (d * e - c * f) / bc_ad,\n          (b * e - a * f) / ad_bc,\n        ];\n      },\n    });\n\n    ctx.save = function ctxSave() {\n      const old = this._transformMatrix;\n      this._transformStack.push(old);\n      this._transformMatrix = old.slice(0, 6);\n\n      this._originalSave();\n    };\n\n    ctx.restore = function ctxRestore() {\n      const prev = this._transformStack.pop();\n      if (prev) {\n        this._transformMatrix = prev;\n        this._originalRestore();\n      }\n    };\n\n    ctx.translate = function ctxTranslate(x, y) {\n      const m = this._transformMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n\n      this._originalTranslate(x, y);\n    };\n\n    ctx.scale = function ctxScale(x, y) {\n      const m = this._transformMatrix;\n      m[0] = m[0] * x;\n      m[1] = m[1] * x;\n      m[2] = m[2] * y;\n      m[3] = m[3] * y;\n\n      this._originalScale(x, y);\n    };\n\n    ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n      const m = this._transformMatrix;\n      this._transformMatrix = [\n        m[0] * a + m[2] * b,\n        m[1] * a + m[3] * b,\n        m[0] * c + m[2] * d,\n        m[1] * c + m[3] * d,\n        m[0] * e + m[2] * f + m[4],\n        m[1] * e + m[3] * f + m[5],\n      ];\n\n      ctx._originalTransform(a, b, c, d, e, f);\n    };\n\n    ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n      this._transformMatrix = [a, b, c, d, e, f];\n\n      ctx._originalSetTransform(a, b, c, d, e, f);\n    };\n\n    ctx.resetTransform = function ctxResetTransform() {\n      this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n      ctx._originalResetTransform();\n    };\n\n    ctx.rotate = function ctxRotate(angle) {\n      const cosValue = Math.cos(angle);\n      const sinValue = Math.sin(angle);\n\n      const m = this._transformMatrix;\n      this._transformMatrix = [\n        m[0] * cosValue + m[2] * sinValue,\n        m[1] * cosValue + m[3] * sinValue,\n        m[0] * -sinValue + m[2] * cosValue,\n        m[1] * -sinValue + m[3] * cosValue,\n        m[4],\n        m[5],\n      ];\n\n      this._originalRotate(angle);\n    };\n  }\n}\n\nconst CachedCanvases = (function CachedCanvasesClosure() {\n  // eslint-disable-next-line no-shadow\n  function CachedCanvases(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n  CachedCanvases.prototype = {\n    getCanvas: function CachedCanvases_getCanvas(\n      id,\n      width,\n      height,\n      trackTransform\n    ) {\n      let canvasEntry;\n      if (this.cache[id] !== undefined) {\n        canvasEntry = this.cache[id];\n        this.canvasFactory.reset(canvasEntry, width, height);\n        // reset canvas transform for emulated mozCurrentTransform, if needed\n        canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        canvasEntry = this.canvasFactory.create(width, height);\n        this.cache[id] = canvasEntry;\n      }\n      if (trackTransform) {\n        addContextCurrentTransform(canvasEntry.context);\n      }\n      return canvasEntry;\n    },\n    clear() {\n      for (const id in this.cache) {\n        const canvasEntry = this.cache[id];\n        this.canvasFactory.destroy(canvasEntry);\n        delete this.cache[id];\n      }\n    },\n  };\n  return CachedCanvases;\n})();\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n  // prettier-ignore\n  const POINT_TYPES =\n      new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1);\n      coords.push((p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nconst CanvasExtraState = (function CanvasExtraStateClosure() {\n  // eslint-disable-next-line no-shadow\n  function CanvasExtraState() {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.resumeSMaskCtx = null; // nonclonable field (see the save method below)\n    this.transferMaps = null;\n  }\n\n  CanvasExtraState.prototype = {\n    clone: function CanvasExtraState_clone() {\n      return Object.create(this);\n    },\n    setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    },\n  };\n  return CanvasExtraState;\n})();\n\n/**\n * @type {any}\n */\nconst CanvasGraphics = (function CanvasGraphicsClosure() {\n  // Defines the time the executeOperatorList is going to be executing\n  // before it stops and shedules a continue of execution.\n  const EXECUTION_TIME = 15;\n  // Defines the number of steps before checking the execution time\n  const EXECUTION_STEPS = 10;\n\n  // eslint-disable-next-line no-shadow\n  function CanvasGraphics(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    webGLContext,\n    imageLayer,\n    optionalContentConfig\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState();\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.webGLContext = webGLContext;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see pdf\n    // spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    if (canvasCtx) {\n      // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n      // the transformation must already be set in canvasCtx._transformMatrix.\n      addContextCurrentTransform(canvasCtx);\n    }\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  function putBinaryImageData(ctx, imgData, transferMaps = null) {\n    if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n      ctx.putImageData(imgData, 0, 0);\n      return;\n    }\n\n    // Put the image data to the canvas in chunks, rather than putting the\n    // whole image at once.  This saves JS memory, because the ImageData object\n    // is smaller. It also possibly saves C++ memory within the implementation\n    // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n    // the data passed to putImageData()). |n| shouldn't be too small, however,\n    // because too many putImageData() calls will slow things down.\n    //\n    // Note: as written, if the last chunk is partial, the putImageData() call\n    // will (conceptually) put pixels past the bounds of the canvas.  But\n    // that's ok; any such pixels are ignored.\n\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0,\n      destPos;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n    let i, j, thisChunkHeight, elemsInThisChunk;\n\n    let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n    if (transferMaps) {\n      switch (transferMaps.length) {\n        case 1:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[0];\n          transferMapBlue = transferMaps[0];\n          transferMapGray = transferMaps[0];\n          break;\n        case 4:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[1];\n          transferMapBlue = transferMaps[2];\n          transferMapGray = transferMaps[3];\n          break;\n      }\n    }\n\n    // There are multiple forms in which the pixel data can be passed, and\n    // imgData.kind tells us which one this is.\n    if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n      // Grayscale, 1 bit per pixel (i.e. black-and-white).\n      const srcLength = src.byteLength;\n      const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n      const dest32DataLength = dest32.length;\n      const fullSrcDiff = (width + 7) >> 3;\n      let white = 0xffffffff;\n      let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n      if (transferMapGray) {\n        if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n          [white, black] = [black, white];\n        }\n      }\n\n      for (i = 0; i < totalChunks; i++) {\n        thisChunkHeight =\n          i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        destPos = 0;\n        for (j = 0; j < thisChunkHeight; j++) {\n          const srcDiff = srcLength - srcPos;\n          let k = 0;\n          const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n          const kEndUnrolled = kEnd & ~7;\n          let mask = 0;\n          let srcByte = 0;\n          for (; k < kEndUnrolled; k += 8) {\n            srcByte = src[srcPos++];\n            dest32[destPos++] = srcByte & 128 ? white : black;\n            dest32[destPos++] = srcByte & 64 ? white : black;\n            dest32[destPos++] = srcByte & 32 ? white : black;\n            dest32[destPos++] = srcByte & 16 ? white : black;\n            dest32[destPos++] = srcByte & 8 ? white : black;\n            dest32[destPos++] = srcByte & 4 ? white : black;\n            dest32[destPos++] = srcByte & 2 ? white : black;\n            dest32[destPos++] = srcByte & 1 ? white : black;\n          }\n          for (; k < kEnd; k++) {\n            if (mask === 0) {\n              srcByte = src[srcPos++];\n              mask = 128;\n            }\n\n            dest32[destPos++] = srcByte & mask ? white : black;\n            mask >>= 1;\n          }\n        }\n        // We ran out of input. Make all remaining pixels transparent.\n        while (destPos < dest32DataLength) {\n          dest32[destPos++] = 0;\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n      // RGBA, 32-bits per pixel.\n      const hasTransferMaps = !!(\n        transferMapRed ||\n        transferMapGreen ||\n        transferMapBlue\n      );\n\n      j = 0;\n      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n      for (i = 0; i < fullChunks; i++) {\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n        srcPos += elemsInThisChunk;\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < elemsInThisChunk; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n        j += FULL_CHUNK_HEIGHT;\n      }\n      if (i < totalChunks) {\n        elemsInThisChunk = width * partialChunkHeight * 4;\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < elemsInThisChunk; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n      }\n    } else if (imgData.kind === ImageKind.RGB_24BPP) {\n      // RGB, 24-bits per pixel.\n      const hasTransferMaps = !!(\n        transferMapRed ||\n        transferMapGreen ||\n        transferMapBlue\n      );\n\n      thisChunkHeight = FULL_CHUNK_HEIGHT;\n      elemsInThisChunk = width * thisChunkHeight;\n      for (i = 0; i < totalChunks; i++) {\n        if (i >= fullChunks) {\n          thisChunkHeight = partialChunkHeight;\n          elemsInThisChunk = width * thisChunkHeight;\n        }\n\n        destPos = 0;\n        for (j = elemsInThisChunk; j--; ) {\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = 255;\n        }\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < destPos; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else {\n      throw new Error(`bad image kind: ${imgData.kind}`);\n    }\n  }\n\n  function putBinaryImageMask(ctx, imgData) {\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n\n    for (let i = 0; i < totalChunks; i++) {\n      const thisChunkHeight =\n        i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n      // Expand the mask so it can be used by the canvas.  Any required\n      // inversion has already been handled.\n      let destPos = 3; // alpha component offset\n      for (let j = 0; j < thisChunkHeight; j++) {\n        let elem,\n          mask = 0;\n        for (let k = 0; k < width; k++) {\n          if (!mask) {\n            elem = src[srcPos++];\n            mask = 128;\n          }\n          dest[destPos] = elem & mask ? 0 : 255;\n          destPos += 4;\n          mask >>= 1;\n        }\n      }\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  }\n\n  function copyCtxState(sourceCtx, destCtx) {\n    const properties = [\n      \"strokeStyle\",\n      \"fillStyle\",\n      \"fillRule\",\n      \"globalAlpha\",\n      \"lineWidth\",\n      \"lineCap\",\n      \"lineJoin\",\n      \"miterLimit\",\n      \"globalCompositeOperation\",\n      \"font\",\n    ];\n    for (let i = 0, ii = properties.length; i < ii; i++) {\n      const property = properties[i];\n      if (sourceCtx[property] !== undefined) {\n        destCtx[property] = sourceCtx[property];\n      }\n    }\n    if (sourceCtx.setLineDash !== undefined) {\n      destCtx.setLineDash(sourceCtx.getLineDash());\n      destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n    }\n  }\n\n  function resetCtxToDefault(ctx) {\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRule = \"nonzero\";\n    ctx.globalAlpha = 1;\n    ctx.lineWidth = 1;\n    ctx.lineCap = \"butt\";\n    ctx.lineJoin = \"miter\";\n    ctx.miterLimit = 10;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.font = \"10px sans-serif\";\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash([]);\n      ctx.lineDashOffset = 0;\n    }\n  }\n\n  function composeSMaskBackdrop(bytes, r0, g0, b0) {\n    const length = bytes.length;\n    for (let i = 3; i < length; i += 4) {\n      const alpha = bytes[i];\n      if (alpha === 0) {\n        bytes[i - 3] = r0;\n        bytes[i - 2] = g0;\n        bytes[i - 1] = b0;\n      } else if (alpha < 255) {\n        const alpha_ = 255 - alpha;\n        bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n        bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n        bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n      }\n    }\n  }\n\n  function composeSMaskAlpha(maskData, layerData, transferMap) {\n    const length = maskData.length;\n    const scale = 1 / 255;\n    for (let i = 3; i < length; i += 4) {\n      const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n      layerData[i] = (layerData[i] * alpha * scale) | 0;\n    }\n  }\n\n  function composeSMaskLuminosity(maskData, layerData, transferMap) {\n    const length = maskData.length;\n    for (let i = 3; i < length; i += 4) {\n      const y =\n        maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n        maskData[i - 2] * 152 + // * 0.59 ....\n        maskData[i - 1] * 28; // * 0.11 ....\n      layerData[i] = transferMap\n        ? (layerData[i] * transferMap[y >> 8]) >> 8\n        : (layerData[i] * y) >> 16;\n    }\n  }\n\n  function genericComposeSMask(\n    maskCtx,\n    layerCtx,\n    width,\n    height,\n    subtype,\n    backdrop,\n    transferMap\n  ) {\n    const hasBackdrop = !!backdrop;\n    const r0 = hasBackdrop ? backdrop[0] : 0;\n    const g0 = hasBackdrop ? backdrop[1] : 0;\n    const b0 = hasBackdrop ? backdrop[2] : 0;\n\n    let composeFn;\n    if (subtype === \"Luminosity\") {\n      composeFn = composeSMaskLuminosity;\n    } else {\n      composeFn = composeSMaskAlpha;\n    }\n\n    // processing image in chunks to save memory\n    const PIXELS_TO_PROCESS = 1048576;\n    const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n    for (let row = 0; row < height; row += chunkSize) {\n      const chunkHeight = Math.min(chunkSize, height - row);\n      const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n      const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n      if (hasBackdrop) {\n        composeSMaskBackdrop(maskData.data, r0, g0, b0);\n      }\n      composeFn(maskData.data, layerData.data, transferMap);\n\n      maskCtx.putImageData(layerData, 0, row);\n    }\n  }\n\n  function composeSMask(ctx, smask, layerCtx, webGLContext) {\n    const mask = smask.canvas;\n    const maskCtx = smask.context;\n\n    ctx.setTransform(\n      smask.scaleX,\n      0,\n      0,\n      smask.scaleY,\n      smask.offsetX,\n      smask.offsetY\n    );\n\n    const backdrop = smask.backdrop || null;\n    if (!smask.transferMap && webGLContext.isEnabled) {\n      const composed = webGLContext.composeSMask({\n        layer: layerCtx.canvas,\n        mask,\n        properties: {\n          subtype: smask.subtype,\n          backdrop,\n        },\n      });\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n      return;\n    }\n    genericComposeSMask(\n      maskCtx,\n      layerCtx,\n      mask.width,\n      mask.height,\n      smask.subtype,\n      backdrop,\n      smask.transferMap\n    );\n    ctx.drawImage(mask, 0, 0);\n  }\n\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n  const NORMAL_CLIP = {};\n  const EO_CLIP = {};\n\n  CanvasGraphics.prototype = {\n    beginDrawing({\n      transform,\n      viewport,\n      transparency = false,\n      background = null,\n    }) {\n      // For pdfs that use blend modes we have to clear the canvas else certain\n      // blend modes can look wrong since we'd be blending with a white\n      // backdrop. The problem with a transparent backdrop though is we then\n      // don't get sub pixel anti aliasing on text, creating temporary\n      // transparent canvas when we have blend modes.\n      const width = this.ctx.canvas.width;\n      const height = this.ctx.canvas.height;\n\n      this.ctx.save();\n      this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n      this.ctx.fillRect(0, 0, width, height);\n      this.ctx.restore();\n\n      if (transparency) {\n        const transparentCanvas = this.cachedCanvases.getCanvas(\n          \"transparent\",\n          width,\n          height,\n          true\n        );\n        this.compositeCtx = this.ctx;\n        this.transparentCanvas = transparentCanvas.canvas;\n        this.ctx = transparentCanvas.context;\n        this.ctx.save();\n        // The transform can be applied before rendering, transferring it to\n        // the new canvas.\n        this.ctx.transform.apply(\n          this.ctx,\n          this.compositeCtx.mozCurrentTransform\n        );\n      }\n\n      this.ctx.save();\n      resetCtxToDefault(this.ctx);\n      if (transform) {\n        this.ctx.transform.apply(this.ctx, transform);\n      }\n      this.ctx.transform.apply(this.ctx, viewport.transform);\n\n      this.baseTransform = this.ctx.mozCurrentTransform.slice();\n      this._combinedScaleFactor = Math.hypot(\n        this.baseTransform[0],\n        this.baseTransform[2]\n      );\n\n      if (this.imageLayer) {\n        this.imageLayer.beginLayout();\n      }\n    },\n\n    executeOperatorList: function CanvasGraphics_executeOperatorList(\n      operatorList,\n      executionStartIdx,\n      continueCallback,\n      stepper\n    ) {\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      let i = executionStartIdx || 0;\n      const argsArrayLen = argsArray.length;\n\n      // Sometimes the OperatorList to execute is empty.\n      if (argsArrayLen === i) {\n        return i;\n      }\n\n      const chunkOperations =\n        argsArrayLen - i > EXECUTION_STEPS &&\n        typeof continueCallback === \"function\";\n      const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n      let steps = 0;\n\n      const commonObjs = this.commonObjs;\n      const objs = this.objs;\n      let fnId;\n\n      while (true) {\n        if (stepper !== undefined && i === stepper.nextBreakPoint) {\n          stepper.breakIt(i, continueCallback);\n          return i;\n        }\n\n        fnId = fnArray[i];\n\n        if (fnId !== OPS.dependency) {\n          this[fnId].apply(this, argsArray[i]);\n        } else {\n          for (const depObjId of argsArray[i]) {\n            const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n            // If the promise isn't resolved yet, add the continueCallback\n            // to the promise and bail out.\n            if (!objsPool.has(depObjId)) {\n              objsPool.get(depObjId, continueCallback);\n              return i;\n            }\n          }\n        }\n\n        i++;\n\n        // If the entire operatorList was executed, stop as were done.\n        if (i === argsArrayLen) {\n          return i;\n        }\n\n        // If the execution took longer then a certain amount of time and\n        // `continueCallback` is specified, interrupt the execution.\n        if (chunkOperations && ++steps > EXECUTION_STEPS) {\n          if (Date.now() > endTime) {\n            continueCallback();\n            return i;\n          }\n          steps = 0;\n        }\n\n        // If the operatorList isn't executed completely yet OR the execution\n        // time was short enough, do another execution round.\n      }\n    },\n\n    endDrawing: function CanvasGraphics_endDrawing() {\n      // Finishing all opened operations such as SMask group painting.\n      while (this.stateStack.length || this.current.activeSMask !== null) {\n        this.restore();\n      }\n\n      this.ctx.restore();\n\n      if (this.transparentCanvas) {\n        this.ctx = this.compositeCtx;\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n        this.ctx.drawImage(this.transparentCanvas, 0, 0);\n        this.ctx.restore();\n        this.transparentCanvas = null;\n      }\n\n      this.cachedCanvases.clear();\n      this.webGLContext.clear();\n\n      if (this.imageLayer) {\n        this.imageLayer.endLayout();\n      }\n    },\n\n    // Graphics state\n    setLineWidth: function CanvasGraphics_setLineWidth(width) {\n      this.current.lineWidth = width;\n      this.ctx.lineWidth = width;\n    },\n    setLineCap: function CanvasGraphics_setLineCap(style) {\n      this.ctx.lineCap = LINE_CAP_STYLES[style];\n    },\n    setLineJoin: function CanvasGraphics_setLineJoin(style) {\n      this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n    },\n    setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n      this.ctx.miterLimit = limit;\n    },\n    setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n      const ctx = this.ctx;\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash(dashArray);\n        ctx.lineDashOffset = dashPhase;\n      }\n    },\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    },\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    },\n    setGState: function CanvasGraphics_setGState(states) {\n      for (let i = 0, ii = states.length; i < ii; i++) {\n        const state = states[i];\n        const key = state[0];\n        const value = state[1];\n\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value[0], value[1]);\n            break;\n          case \"CA\":\n            this.current.strokeAlpha = state[1];\n            break;\n          case \"ca\":\n            this.current.fillAlpha = state[1];\n            this.ctx.globalAlpha = state[1];\n            break;\n          case \"BM\":\n            this.ctx.globalCompositeOperation = value;\n            break;\n          case \"SMask\":\n            if (this.current.activeSMask) {\n              // If SMask is currrenly used, it needs to be suspended or\n              // finished. Suspend only makes sense when at least one save()\n              // was performed and state needs to be reverted on restore().\n              if (\n                this.stateStack.length > 0 &&\n                this.stateStack[this.stateStack.length - 1].activeSMask ===\n                  this.current.activeSMask\n              ) {\n                this.suspendSMaskGroup();\n              } else {\n                this.endSMaskGroup();\n              }\n            }\n            this.current.activeSMask = value ? this.tempSMask : null;\n            if (this.current.activeSMask) {\n              this.beginSMaskGroup();\n            }\n            this.tempSMask = null;\n            break;\n          case \"TR\":\n            this.current.transferMaps = value;\n        }\n      }\n    },\n    beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n      const activeSMask = this.current.activeSMask;\n      const drawnWidth = activeSMask.canvas.width;\n      const drawnHeight = activeSMask.canvas.height;\n      const cacheId = \"smaskGroupAt\" + this.groupLevel;\n      const scratchCanvas = this.cachedCanvases.getCanvas(\n        cacheId,\n        drawnWidth,\n        drawnHeight,\n        true\n      );\n\n      const currentCtx = this.ctx;\n      const currentTransform = currentCtx.mozCurrentTransform;\n      this.ctx.save();\n\n      const groupCtx = scratchCanvas.context;\n      groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n      groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n      groupCtx.transform.apply(groupCtx, currentTransform);\n\n      activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([\n        [\"BM\", \"source-over\"],\n        [\"ca\", 1],\n        [\"CA\", 1],\n      ]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    },\n    suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n      // Similar to endSMaskGroup, the intermediate canvas has to be composed\n      // and future ctx state restored.\n      const groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n\n      composeSMask(\n        this.ctx,\n        this.current.activeSMask,\n        groupCtx,\n        this.webGLContext\n      );\n      this.ctx.restore();\n      this.ctx.save(); // save is needed since SMask will be resumed.\n      copyCtxState(groupCtx, this.ctx);\n\n      // Saving state for resuming.\n      this.current.resumeSMaskCtx = groupCtx;\n      // Transform was changed in the SMask canvas, reflecting this change on\n      // this.ctx.\n      const deltaTransform = Util.transform(\n        this.current.activeSMask.startTransformInverse,\n        groupCtx.mozCurrentTransform\n      );\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n\n      // SMask was composed, the results at the groupCtx can be cleared.\n      groupCtx.save();\n      groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n      groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n      groupCtx.restore();\n    },\n    resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {\n      // Resuming state saved by suspendSMaskGroup. We don't need to restore\n      // any groupCtx state since restore() command (the only caller) will do\n      // that for us. See also beginSMaskGroup.\n      const groupCtx = this.current.resumeSMaskCtx;\n      const currentCtx = this.ctx;\n      this.ctx = groupCtx;\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    },\n    endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n      const groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n\n      composeSMask(\n        this.ctx,\n        this.current.activeSMask,\n        groupCtx,\n        this.webGLContext\n      );\n      this.ctx.restore();\n      copyCtxState(groupCtx, this.ctx);\n      // Transform was changed in the SMask canvas, reflecting this change on\n      // this.ctx.\n      const deltaTransform = Util.transform(\n        this.current.activeSMask.startTransformInverse,\n        groupCtx.mozCurrentTransform\n      );\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n    },\n    save: function CanvasGraphics_save() {\n      this.ctx.save();\n      const old = this.current;\n      this.stateStack.push(old);\n      this.current = old.clone();\n      this.current.resumeSMaskCtx = null;\n    },\n    restore: function CanvasGraphics_restore() {\n      // SMask was suspended, we just need to resume it.\n      if (this.current.resumeSMaskCtx) {\n        this.resumeSMaskGroup();\n      }\n      // SMask has to be finished once there is no states that are using the\n      // same SMask.\n      if (\n        this.current.activeSMask !== null &&\n        (this.stateStack.length === 0 ||\n          this.stateStack[this.stateStack.length - 1].activeSMask !==\n            this.current.activeSMask)\n      ) {\n        this.endSMaskGroup();\n      }\n\n      if (this.stateStack.length !== 0) {\n        this.current = this.stateStack.pop();\n        this.ctx.restore();\n\n        // Ensure that the clipping path is reset (fixes issue6413.pdf).\n        this.pendingClip = null;\n\n        this._cachedGetSinglePixelWidth = null;\n      } else {\n        // We've finished all the SMask groups, reflect that in our state.\n        this.current.activeSMask = null;\n      }\n    },\n    transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n      this.ctx.transform(a, b, c, d, e, f);\n\n      this._cachedGetSinglePixelWidth = null;\n    },\n\n    // Path\n    constructPath: function CanvasGraphics_constructPath(ops, args) {\n      const ctx = this.ctx;\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n        switch (ops[i] | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n\n            const xw = x + width;\n            const yh = y + height;\n            ctx.moveTo(x, y);\n            if (width === 0 || height === 0) {\n              ctx.lineTo(xw, yh);\n            } else {\n              ctx.lineTo(xw, y);\n              ctx.lineTo(xw, yh);\n              ctx.lineTo(x, yh);\n            }\n\n            ctx.closePath();\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.moveTo(x, y);\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.lineTo(x, y);\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            ctx.bezierCurveTo(\n              args[j],\n              args[j + 1],\n              args[j + 2],\n              args[j + 3],\n              x,\n              y\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            ctx.bezierCurveTo(\n              x,\n              y,\n              args[j],\n              args[j + 1],\n              args[j + 2],\n              args[j + 3]\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n            j += 4;\n            break;\n          case OPS.closePath:\n            ctx.closePath();\n            break;\n        }\n      }\n      current.setCurrentPoint(x, y);\n    },\n    closePath: function CanvasGraphics_closePath() {\n      this.ctx.closePath();\n    },\n    stroke: function CanvasGraphics_stroke(consumePath) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      const ctx = this.ctx;\n      const strokeColor = this.current.strokeColor;\n      // For stroke we want to temporarily change the global alpha to the\n      // stroking alpha.\n      ctx.globalAlpha = this.current.strokeAlpha;\n      if (this.contentVisible) {\n        if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n          // for patterns, we transform to pattern space, calculate\n          // the pattern, call stroke, and restore to user space\n          ctx.save();\n          // The current transform will be replaced while building the pattern,\n          // but the line width needs to be adjusted by the current transform,\n          // so we must scale it. To properly fix this we should be using a\n          // pattern transform instead (see #10955).\n          const transform = ctx.mozCurrentTransform;\n          const scale = Util.singularValueDecompose2dScale(transform)[0];\n          ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n          const lineWidth = this.getSinglePixelWidth();\n          const scaledLineWidth = this.current.lineWidth * scale;\n          if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          } else {\n            ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);\n          }\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          const lineWidth = this.getSinglePixelWidth();\n          if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n            // The current transform will transform a square pixel into a\n            // parallelogram where both heights are lower than 1 and not equal.\n            ctx.save();\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            // Prevent drawing too thin lines by enforcing a minimum line width.\n            ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n            ctx.stroke();\n          }\n        }\n      }\n      if (consumePath) {\n        this.consumePath();\n      }\n      // Restore the global alpha to the fill alpha\n      ctx.globalAlpha = this.current.fillAlpha;\n    },\n    closeStroke: function CanvasGraphics_closeStroke() {\n      this.closePath();\n      this.stroke();\n    },\n    fill: function CanvasGraphics_fill(consumePath) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      const ctx = this.ctx;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      let needRestore = false;\n\n      if (isPatternFill) {\n        ctx.save();\n        if (this.baseTransform) {\n          ctx.setTransform.apply(ctx, this.baseTransform);\n        }\n        ctx.fillStyle = fillColor.getPattern(ctx, this);\n        needRestore = true;\n      }\n\n      if (this.contentVisible) {\n        if (this.pendingEOFill) {\n          ctx.fill(\"evenodd\");\n          this.pendingEOFill = false;\n        } else {\n          ctx.fill();\n        }\n      }\n\n      if (needRestore) {\n        ctx.restore();\n      }\n      if (consumePath) {\n        this.consumePath();\n      }\n    },\n    eoFill: function CanvasGraphics_eoFill() {\n      this.pendingEOFill = true;\n      this.fill();\n    },\n    fillStroke: function CanvasGraphics_fillStroke() {\n      this.fill(false);\n      this.stroke(false);\n\n      this.consumePath();\n    },\n    eoFillStroke: function CanvasGraphics_eoFillStroke() {\n      this.pendingEOFill = true;\n      this.fillStroke();\n    },\n    closeFillStroke: function CanvasGraphics_closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    },\n    closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n      this.pendingEOFill = true;\n      this.closePath();\n      this.fillStroke();\n    },\n    endPath: function CanvasGraphics_endPath() {\n      this.consumePath();\n    },\n\n    // Clipping\n    clip: function CanvasGraphics_clip() {\n      this.pendingClip = NORMAL_CLIP;\n    },\n    eoClip: function CanvasGraphics_eoClip() {\n      this.pendingClip = EO_CLIP;\n    },\n\n    // Text\n    beginText: function CanvasGraphics_beginText() {\n      this.current.textMatrix = IDENTITY_MATRIX;\n      this.current.textMatrixScale = 1;\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    },\n    endText: function CanvasGraphics_endText() {\n      const paths = this.pendingTextPaths;\n      const ctx = this.ctx;\n      if (paths === undefined) {\n        ctx.beginPath();\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      for (let i = 0; i < paths.length; i++) {\n        const path = paths[i];\n        ctx.setTransform.apply(ctx, path.transform);\n        ctx.translate(path.x, path.y);\n        path.addToPath(ctx, path.fontSize);\n      }\n      ctx.restore();\n      ctx.clip();\n      ctx.beginPath();\n      delete this.pendingTextPaths;\n    },\n    setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n      this.current.charSpacing = spacing;\n    },\n    setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n      this.current.wordSpacing = spacing;\n    },\n    setHScale: function CanvasGraphics_setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    },\n    setLeading: function CanvasGraphics_setLeading(leading) {\n      this.current.leading = -leading;\n    },\n    setFont: function CanvasGraphics_setFont(fontRefName, size) {\n      const fontObj = this.commonObjs.get(fontRefName);\n      const current = this.current;\n\n      if (!fontObj) {\n        throw new Error(`Can't find font for ${fontRefName}`);\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      // A valid matrix needs all main diagonal elements to be non-zero\n      // This also ensures we bypass FF bugzilla bug #719844.\n      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n        warn(\"Invalid font matrix for font \" + fontRefName);\n      }\n\n      // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n      // and in some docs this can be negative (inverted x-y axes).\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n\n      this.current.font = fontObj;\n      this.current.fontSize = size;\n\n      if (fontObj.isType3Font) {\n        return; // we don't need ctx.font for Type3 fonts\n      }\n\n      const name = fontObj.loadedName || \"sans-serif\";\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n      const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n      // Some font backends cannot handle fonts below certain size.\n      // Keeping the font at minimal size and using the fontSizeScale to change\n      // the current transformation matrix before the fillText/strokeText.\n      // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n      let browserFontSize = size;\n      if (size < MIN_FONT_SIZE) {\n        browserFontSize = MIN_FONT_SIZE;\n      } else if (size > MAX_FONT_SIZE) {\n        browserFontSize = MAX_FONT_SIZE;\n      }\n      this.current.fontSizeScale = size / browserFontSize;\n\n      this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n    },\n    setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n      this.current.textRenderingMode = mode;\n    },\n    setTextRise: function CanvasGraphics_setTextRise(rise) {\n      this.current.textRise = rise;\n    },\n    moveText: function CanvasGraphics_moveText(x, y) {\n      this.current.x = this.current.lineX += x;\n      this.current.y = this.current.lineY += y;\n    },\n    setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    },\n    setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n      this.current.textMatrix = [a, b, c, d, e, f];\n      this.current.textMatrixScale = Math.hypot(a, b);\n\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    },\n    nextLine: function CanvasGraphics_nextLine() {\n      this.moveText(0, this.current.leading);\n    },\n\n    paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const textRenderingMode = current.textRenderingMode;\n      const fontSize = current.fontSize / current.fontSizeScale;\n      const fillStrokeMode =\n        textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      const isAddToPathSet = !!(\n        textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n      );\n      const patternFill = current.patternFill && !font.missingFile;\n\n      let addToPath;\n      if (font.disableFontFace || isAddToPathSet || patternFill) {\n        addToPath = font.getPathGenerator(this.commonObjs, character);\n      }\n\n      if (font.disableFontFace || patternFill) {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.beginPath();\n        addToPath(ctx, fontSize);\n        if (patternTransform) {\n          ctx.setTransform.apply(ctx, patternTransform);\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.FILL ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          ctx.fill();\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          if (resetLineWidthToOne) {\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          }\n          ctx.stroke();\n        }\n        ctx.restore();\n      } else {\n        if (\n          fillStrokeMode === TextRenderingMode.FILL ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          ctx.fillText(character, x, y);\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          if (resetLineWidthToOne) {\n            ctx.save();\n            ctx.moveTo(x, y);\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.strokeText(character, 0, 0);\n            ctx.restore();\n          } else {\n            ctx.strokeText(character, x, y);\n          }\n        }\n      }\n\n      if (isAddToPathSet) {\n        const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n        paths.push({\n          transform: ctx.mozCurrentTransform,\n          x,\n          y,\n          fontSize,\n          addToPath,\n        });\n      }\n    },\n\n    get isFontSubpixelAAEnabled() {\n      // Checks if anti-aliasing is enabled when scaled text is painted.\n      // On Windows GDI scaled fonts looks bad.\n      const { context: ctx } = this.cachedCanvases.getCanvas(\n        \"isFontSubpixelAAEnabled\",\n        10,\n        10\n      );\n      ctx.scale(1.5, 1);\n      ctx.fillText(\"I\", 0, 10);\n      const data = ctx.getImageData(0, 0, 10, 10).data;\n      let enabled = false;\n      for (let i = 3; i < data.length; i += 4) {\n        if (data[i] > 0 && data[i] < 255) {\n          enabled = true;\n          break;\n        }\n      }\n      return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n    },\n\n    showText: function CanvasGraphics_showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      if (font.isType3Font) {\n        return this.showType3Text(glyphs);\n      }\n\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return undefined;\n      }\n\n      const ctx = this.ctx;\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const glyphsLength = glyphs.length;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      const simpleFillText =\n        current.textRenderingMode === TextRenderingMode.FILL &&\n        !font.disableFontFace &&\n        !current.patternFill;\n\n      ctx.save();\n      let patternTransform;\n      if (current.patternFill) {\n        // TODO: Patterns are not applied correctly to text if a non-embedded\n        // font is used. E.g. issue 8111 and ShowText-ShadingPattern.pdf.\n        ctx.save();\n        const pattern = current.fillColor.getPattern(ctx, this);\n        patternTransform = ctx.mozCurrentTransform;\n        ctx.restore();\n        ctx.fillStyle = pattern;\n      }\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y + current.textRise);\n\n      if (fontDirection > 0) {\n        ctx.scale(textHScale, -1);\n      } else {\n        ctx.scale(textHScale, 1);\n      }\n\n      let lineWidth = current.lineWidth;\n      let resetLineWidthToOne = false;\n      const scale = current.textMatrixScale;\n      if (scale === 0 || lineWidth === 0) {\n        const fillStrokeMode =\n          current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          this._cachedGetSinglePixelWidth = null;\n          lineWidth = this.getSinglePixelWidth();\n          resetLineWidthToOne = lineWidth < 0;\n        }\n      } else {\n        lineWidth /= scale;\n      }\n\n      if (fontSizeScale !== 1.0) {\n        ctx.scale(fontSizeScale, fontSizeScale);\n        lineWidth /= fontSizeScale;\n      }\n\n      ctx.lineWidth = lineWidth;\n\n      let x = 0,\n        i;\n      for (i = 0; i < glyphsLength; ++i) {\n        const glyph = glyphs[i];\n        if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        let restoreNeeded = false;\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        const accent = glyph.accent;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          const vx =\n            -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (font.remeasure && width > 0) {\n          // Some standard fonts may not have the exact width: rescale per\n          // character if measured width is greater than expected glyph width\n          // and subpixel-aa is enabled, otherwise just center the glyph.\n          const measuredWidth =\n            ((ctx.measureText(character).width * 1000) / fontSize) *\n            fontSizeScale;\n          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n            const characterScaleX = width / measuredWidth;\n            restoreNeeded = true;\n            ctx.save();\n            ctx.scale(characterScaleX, 1);\n            scaledX /= characterScaleX;\n          } else if (width !== measuredWidth) {\n            scaledX +=\n              (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n          }\n        }\n\n        // Only attempt to draw the glyph if it is actually in the embedded font\n        // file or if there isn't a font file so the fallback font is shown.\n        if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n          if (simpleFillText && !accent) {\n            // common case\n            ctx.fillText(character, scaledX, scaledY);\n          } else {\n            this.paintChar(\n              character,\n              scaledX,\n              scaledY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n            if (accent) {\n              const scaledAccentX =\n                scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n              const scaledAccentY =\n                scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n              this.paintChar(\n                accent.fontChar,\n                scaledAccentX,\n                scaledAccentY,\n                patternTransform,\n                resetLineWidthToOne\n              );\n            }\n          }\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n        x += charWidth;\n\n        if (restoreNeeded) {\n          ctx.restore();\n        }\n      }\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n      ctx.restore();\n    },\n\n    showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n      // Type3 fonts - each glyph is a \"mini-PDF\"\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      const fontDirection = current.fontDirection;\n      const spacingDir = font.vertical ? 1 : -1;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const textHScale = current.textHScale * fontDirection;\n      const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n      const glyphsLength = glyphs.length;\n      const isTextInvisible =\n        current.textRenderingMode === TextRenderingMode.INVISIBLE;\n      let i, glyph, width, spacingLength;\n\n      if (isTextInvisible || fontSize === 0) {\n        return;\n      }\n      this._cachedGetSinglePixelWidth = null;\n\n      ctx.save();\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y);\n\n      ctx.scale(textHScale, fontDirection);\n\n      for (i = 0; i < glyphsLength; ++i) {\n        glyph = glyphs[i];\n        if (isNum(glyph)) {\n          spacingLength = (spacingDir * glyph * fontSize) / 1000;\n          this.ctx.translate(spacingLength, 0);\n          current.x += spacingLength * textHScale;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const operatorList = font.charProcOperatorList[glyph.operatorListId];\n        if (!operatorList) {\n          warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n          continue;\n        }\n        if (this.contentVisible) {\n          this.processingType3 = glyph;\n          this.save();\n          ctx.scale(fontSize, fontSize);\n          ctx.transform.apply(ctx, fontMatrix);\n          this.executeOperatorList(operatorList);\n          this.restore();\n        }\n\n        const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n        width = transformed[0] * fontSize + spacing;\n\n        ctx.translate(width, 0);\n        current.x += width * textHScale;\n      }\n      ctx.restore();\n      this.processingType3 = null;\n    },\n\n    // Type3 fonts\n    setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {\n      // We can safely ignore this since the width should be the same\n      // as the width in the Widths array.\n    },\n    setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(\n      xWidth,\n      yWidth,\n      llx,\n      lly,\n      urx,\n      ury\n    ) {\n      // TODO According to the spec we're also suppose to ignore any operators\n      // that set color or include images while processing this type3 font.\n      this.ctx.rect(llx, lly, urx - llx, ury - lly);\n      this.clip();\n      this.endPath();\n    },\n\n    // Color\n    getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n      let pattern;\n      if (IR[0] === \"TilingPattern\") {\n        const color = IR[1];\n        const baseTransform =\n          this.baseTransform || this.ctx.mozCurrentTransform.slice();\n        const canvasGraphicsFactory = {\n          createCanvasGraphics: ctx => {\n            return new CanvasGraphics(\n              ctx,\n              this.commonObjs,\n              this.objs,\n              this.canvasFactory,\n              this.webGLContext\n            );\n          },\n        };\n        pattern = new TilingPattern(\n          IR,\n          color,\n          this.ctx,\n          canvasGraphicsFactory,\n          baseTransform\n        );\n      } else {\n        pattern = getShadingPatternFromIR(IR);\n      }\n      return pattern;\n    },\n    setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n      this.current.strokeColor = this.getColorN_Pattern(arguments);\n    },\n    setFillColorN: function CanvasGraphics_setFillColorN() {\n      this.current.fillColor = this.getColorN_Pattern(arguments);\n      this.current.patternFill = true;\n    },\n    setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n      const color = Util.makeHexColor(r, g, b);\n      this.ctx.strokeStyle = color;\n      this.current.strokeColor = color;\n    },\n    setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n      const color = Util.makeHexColor(r, g, b);\n      this.ctx.fillStyle = color;\n      this.current.fillColor = color;\n      this.current.patternFill = false;\n    },\n\n    shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n\n      this.save();\n      const pattern = getShadingPatternFromIR(patternIR);\n      ctx.fillStyle = pattern.getPattern(ctx, this, true);\n\n      const inv = ctx.mozCurrentTransformInverse;\n      if (inv) {\n        const canvas = ctx.canvas;\n        const width = canvas.width;\n        const height = canvas.height;\n\n        const bl = Util.applyTransform([0, 0], inv);\n        const br = Util.applyTransform([0, height], inv);\n        const ul = Util.applyTransform([width, 0], inv);\n        const ur = Util.applyTransform([width, height], inv);\n\n        const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n      } else {\n        // HACK to draw the gradient onto an infinite rectangle.\n        // PDF gradients are drawn across the entire image while\n        // Canvas only allows gradients to be drawn in a rectangle\n        // The following bug should allow us to remove this.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n      }\n\n      this.restore();\n    },\n\n    // Images\n    beginInlineImage: function CanvasGraphics_beginInlineImage() {\n      unreachable(\"Should not call beginInlineImage\");\n    },\n    beginImageData: function CanvasGraphics_beginImageData() {\n      unreachable(\"Should not call beginImageData\");\n    },\n\n    paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(\n      matrix,\n      bbox\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.save();\n      this.baseTransformStack.push(this.baseTransform);\n\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform.apply(this, matrix);\n      }\n\n      this.baseTransform = this.ctx.mozCurrentTransform;\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n        this.ctx.rect(bbox[0], bbox[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n    },\n\n    paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.restore();\n      this.baseTransform = this.baseTransformStack.pop();\n    },\n\n    beginGroup: function CanvasGraphics_beginGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.save();\n      const currentCtx = this.ctx;\n      // TODO non-isolated groups - according to Rik at adobe non-isolated\n      // group results aren't usually that different and they even have tools\n      // that ignore this setting. Notes from Rik on implementing:\n      // - When you encounter an transparency group, create a new canvas with\n      // the dimensions of the bbox\n      // - copy the content from the previous canvas to the new canvas\n      // - draw as usual\n      // - remove the backdrop alpha:\n      // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n      // value of your transparency group and 'alphaBackdrop' the alpha of the\n      // backdrop\n      // - remove background color:\n      // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n      if (!group.isolated) {\n        info(\"TODO: Support non-isolated groups.\");\n      }\n\n      // TODO knockout - supposedly possible with the clever use of compositing\n      // modes.\n      if (group.knockout) {\n        warn(\"Knockout groups not supported.\");\n      }\n\n      const currentTransform = currentCtx.mozCurrentTransform;\n      if (group.matrix) {\n        currentCtx.transform.apply(currentCtx, group.matrix);\n      }\n      if (!group.bbox) {\n        throw new Error(\"Bounding box is required.\");\n      }\n\n      // Based on the current transform figure out how big the bounding box\n      // will actually be.\n      let bounds = Util.getAxialAlignedBoundingBox(\n        group.bbox,\n        currentCtx.mozCurrentTransform\n      );\n      // Clip the bounding box to the current canvas.\n      const canvasBounds = [\n        0,\n        0,\n        currentCtx.canvas.width,\n        currentCtx.canvas.height,\n      ];\n      bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n      // Use ceil in case we're between sizes so we don't create canvas that is\n      // too small and make the canvas at least 1x1 pixels.\n      const offsetX = Math.floor(bounds[0]);\n      const offsetY = Math.floor(bounds[1]);\n      let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n      let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n      let scaleX = 1,\n        scaleY = 1;\n      if (drawnWidth > MAX_GROUP_SIZE) {\n        scaleX = drawnWidth / MAX_GROUP_SIZE;\n        drawnWidth = MAX_GROUP_SIZE;\n      }\n      if (drawnHeight > MAX_GROUP_SIZE) {\n        scaleY = drawnHeight / MAX_GROUP_SIZE;\n        drawnHeight = MAX_GROUP_SIZE;\n      }\n\n      let cacheId = \"groupAt\" + this.groupLevel;\n      if (group.smask) {\n        // Using two cache entries is case if masks are used one after another.\n        cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n      }\n      const scratchCanvas = this.cachedCanvases.getCanvas(\n        cacheId,\n        drawnWidth,\n        drawnHeight,\n        true\n      );\n      const groupCtx = scratchCanvas.context;\n\n      // Since we created a new canvas that is just the size of the bounding box\n      // we have to translate the group ctx.\n      groupCtx.scale(1 / scaleX, 1 / scaleY);\n      groupCtx.translate(-offsetX, -offsetY);\n      groupCtx.transform.apply(groupCtx, currentTransform);\n\n      if (group.smask) {\n        // Saving state and cached mask to be used in setGState.\n        this.smaskStack.push({\n          canvas: scratchCanvas.canvas,\n          context: groupCtx,\n          offsetX,\n          offsetY,\n          scaleX,\n          scaleY,\n          subtype: group.smask.subtype,\n          backdrop: group.smask.backdrop,\n          transferMap: group.smask.transferMap || null,\n          startTransformInverse: null, // used during suspend operation\n        });\n      } else {\n        // Setup the current ctx so when the group is popped we draw it at the\n        // right location.\n        currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n        currentCtx.translate(offsetX, offsetY);\n        currentCtx.scale(scaleX, scaleY);\n      }\n      // The transparency group inherits all off the current graphics state\n      // except the blend mode, soft mask, and alpha constants.\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([\n        [\"BM\", \"source-over\"],\n        [\"ca\", 1],\n        [\"CA\", 1],\n      ]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n\n      // Reseting mask state, masks will be applied on restore of the group.\n      this.current.activeSMask = null;\n    },\n\n    endGroup: function CanvasGraphics_endGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.groupLevel--;\n      const groupCtx = this.ctx;\n      this.ctx = this.groupStack.pop();\n      // Turn off image smoothing to avoid sub pixel interpolation which can\n      // look kind of blurry for some pdfs.\n      if (this.ctx.imageSmoothingEnabled !== undefined) {\n        this.ctx.imageSmoothingEnabled = false;\n      } else {\n        this.ctx.mozImageSmoothingEnabled = false;\n      }\n      if (group.smask) {\n        this.tempSMask = this.smaskStack.pop();\n      } else {\n        this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      }\n      this.restore();\n    },\n\n    beginAnnotations: function CanvasGraphics_beginAnnotations() {\n      this.save();\n      if (this.baseTransform) {\n        this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n      }\n    },\n\n    endAnnotations: function CanvasGraphics_endAnnotations() {\n      this.restore();\n    },\n\n    beginAnnotation: function CanvasGraphics_beginAnnotation(\n      rect,\n      transform,\n      matrix\n    ) {\n      this.save();\n      resetCtxToDefault(this.ctx);\n      this.current = new CanvasExtraState();\n\n      if (Array.isArray(rect) && rect.length === 4) {\n        const width = rect[2] - rect[0];\n        const height = rect[3] - rect[1];\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n\n      this.transform.apply(this, transform);\n      this.transform.apply(this, matrix);\n    },\n\n    endAnnotation: function CanvasGraphics_endAnnotation() {\n      this.restore();\n    },\n\n    paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      const width = img.width,\n        height = img.height;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n\n      const glyph = this.processingType3;\n\n      if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n          glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n        } else {\n          glyph.compiled = null;\n        }\n      }\n\n      if (glyph?.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, img);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(maskCtx, this)\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      this.paintInlineImageXObject(maskCanvas.canvas);\n    },\n\n    paintImageMaskXObjectRepeat(\n      imgData,\n      scaleX,\n      skewX = 0,\n      skewY = 0,\n      scaleY,\n      positions\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, imgData);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(maskCtx, this)\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      const ctx = this.ctx;\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        ctx.save();\n        ctx.transform(\n          scaleX,\n          skewX,\n          skewY,\n          scaleY,\n          positions[i],\n          positions[i + 1]\n        );\n        ctx.scale(1, -1);\n        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n    },\n\n    paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(\n      images\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      for (let i = 0, ii = images.length; i < ii; i++) {\n        const image = images[i];\n        const width = image.width,\n          height = image.height;\n\n        const maskCanvas = this.cachedCanvases.getCanvas(\n          \"maskCanvas\",\n          width,\n          height\n        );\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n\n        putBinaryImageMask(maskCtx, image);\n\n        maskCtx.globalCompositeOperation = \"source-in\";\n\n        maskCtx.fillStyle = isPatternFill\n          ? fillColor.getPattern(maskCtx, this)\n          : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n\n        maskCtx.restore();\n\n        ctx.save();\n        ctx.transform.apply(ctx, image.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n    },\n\n    paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      this.paintInlineImageXObject(imgData);\n    },\n\n    paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(\n      objId,\n      scaleX,\n      scaleY,\n      positions\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      const width = imgData.width;\n      const height = imgData.height;\n      const map = [];\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        map.push({\n          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n          x: 0,\n          y: 0,\n          w: width,\n          h: height,\n        });\n      }\n      this.paintInlineImageXObjectGroup(imgData, map);\n    },\n\n    paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(\n      imgData\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const width = imgData.width;\n      const height = imgData.height;\n      const ctx = this.ctx;\n\n      this.save();\n      // scale the image to the unit square\n      ctx.scale(1 / width, -1 / height);\n\n      const currentTransform = ctx.mozCurrentTransformInverse;\n      let widthScale = Math.max(\n        Math.hypot(currentTransform[0], currentTransform[1]),\n        1\n      );\n      let heightScale = Math.max(\n        Math.hypot(currentTransform[2], currentTransform[3]),\n        1\n      );\n\n      let imgToPaint, tmpCanvas, tmpCtx;\n      // typeof check is needed due to node.js support, see issue #8489\n      if (\n        (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n        !imgData.data\n      ) {\n        imgToPaint = imgData;\n      } else {\n        tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n        tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n        imgToPaint = tmpCanvas.canvas;\n      }\n\n      let paintWidth = width,\n        paintHeight = height;\n      let tmpCanvasId = \"prescale1\";\n      // Vertical or horizontal scaling shall not be more than 2 to not lose the\n      // pixels during drawImage operation, painting on the temporary canvas(es)\n      // that are twice smaller in size.\n      while (\n        (widthScale > 2 && paintWidth > 1) ||\n        (heightScale > 2 && paintHeight > 1)\n      ) {\n        let newWidth = paintWidth,\n          newHeight = paintHeight;\n        if (widthScale > 2 && paintWidth > 1) {\n          newWidth = Math.ceil(paintWidth / 2);\n          widthScale /= paintWidth / newWidth;\n        }\n        if (heightScale > 2 && paintHeight > 1) {\n          newHeight = Math.ceil(paintHeight / 2);\n          heightScale /= paintHeight / newHeight;\n        }\n        tmpCanvas = this.cachedCanvases.getCanvas(\n          tmpCanvasId,\n          newWidth,\n          newHeight\n        );\n        tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, newWidth, newHeight);\n        tmpCtx.drawImage(\n          imgToPaint,\n          0,\n          0,\n          paintWidth,\n          paintHeight,\n          0,\n          0,\n          newWidth,\n          newHeight\n        );\n        imgToPaint = tmpCanvas.canvas;\n        paintWidth = newWidth;\n        paintHeight = newHeight;\n        tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n      }\n      ctx.drawImage(\n        imgToPaint,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        -height,\n        width,\n        height\n      );\n\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(0, -height);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: width / currentTransform[0],\n          height: height / currentTransform[3],\n        });\n      }\n      this.restore();\n    },\n\n    paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(\n      imgData,\n      map\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      const w = imgData.width;\n      const h = imgData.height;\n\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n      for (let i = 0, ii = map.length; i < ii; i++) {\n        const entry = map[i];\n        ctx.save();\n        ctx.transform.apply(ctx, entry.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(\n          tmpCanvas.canvas,\n          entry.x,\n          entry.y,\n          entry.w,\n          entry.h,\n          0,\n          -1,\n          1,\n          1\n        );\n        if (this.imageLayer) {\n          const position = this.getCanvasPosition(entry.x, entry.y);\n          this.imageLayer.appendImage({\n            imgData,\n            left: position[0],\n            top: position[1],\n            width: w,\n            height: h,\n          });\n        }\n        ctx.restore();\n      }\n    },\n\n    paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.ctx.fillRect(0, 0, 1, 1);\n    },\n\n    // Marked content\n\n    markPoint: function CanvasGraphics_markPoint(tag) {\n      // TODO Marked content.\n    },\n    markPointProps: function CanvasGraphics_markPointProps(tag, properties) {\n      // TODO Marked content.\n    },\n    beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    },\n    beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(\n      tag,\n      properties\n    ) {\n      if (tag === \"OC\") {\n        this.markedContentStack.push({\n          visible: this.optionalContentConfig.isVisible(properties),\n        });\n      } else {\n        this.markedContentStack.push({\n          visible: true,\n        });\n      }\n      this.contentVisible = this.isContentVisible();\n    },\n    endMarkedContent: function CanvasGraphics_endMarkedContent() {\n      this.markedContentStack.pop();\n      this.contentVisible = this.isContentVisible();\n    },\n\n    // Compatibility\n\n    beginCompat: function CanvasGraphics_beginCompat() {\n      // TODO ignore undefined operators (should we do that anyway?)\n    },\n    endCompat: function CanvasGraphics_endCompat() {\n      // TODO stop ignoring undefined operators\n    },\n\n    // Helper functions\n\n    consumePath: function CanvasGraphics_consumePath() {\n      const ctx = this.ctx;\n      if (this.pendingClip) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n        this.pendingClip = null;\n      }\n      ctx.beginPath();\n    },\n    getSinglePixelWidth() {\n      if (this._cachedGetSinglePixelWidth === null) {\n        // If transform is [a b] then a pixel (square) is transformed\n        //                 [c d]\n        // into a parallelogram: its area is the abs value of the determinant.\n        // This parallelogram has 2 heights:\n        //  - Area / |col_1|;\n        //  - Area / |col_2|.\n        // so in order to get a height of at least 1, pixel height\n        // must be computed as followed:\n        //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n        // This is equivalent to:\n        //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n        const m = this.ctx.mozCurrentTransform;\n\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n        const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n        const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n        if (\n          sqNorm1 !== sqNorm2 &&\n          this._combinedScaleFactor * pixelHeight > 1\n        ) {\n          // The parallelogram isn't a square and at least one height\n          // is lower than 1 so the resulting line width must be 1\n          // but it cannot be achieved with one scale: when scaling a pixel\n          // we'll get a rectangle (see issue #12295).\n          // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n          // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n          // then we'll get a rectangle 1x1e5 which is wrong.\n          // In this case, we must reset the transform, set linewidth to 1\n          // and then stroke.\n          this._cachedGetSinglePixelWidth = -(\n            this._combinedScaleFactor * pixelHeight\n          );\n        } else if (absDet > Number.EPSILON) {\n          this._cachedGetSinglePixelWidth = pixelHeight;\n        } else {\n          // Matrix is non-invertible.\n          this._cachedGetSinglePixelWidth = 1;\n        }\n      }\n\n      return this._cachedGetSinglePixelWidth;\n    },\n    getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n      const transform = this.ctx.mozCurrentTransform;\n      return [\n        transform[0] * x + transform[2] * y + transform[4],\n        transform[1] * x + transform[3] * y + transform[5],\n      ];\n    },\n\n    isContentVisible: function CanvasGraphics_isContentVisible() {\n      for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n        if (!this.markedContentStack[i].visible) {\n          return false;\n        }\n      }\n      return true;\n    },\n  };\n\n  for (const op in OPS) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n\n  return CanvasGraphics;\n})();\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormatError, info, Util } from \"../shared/util.js\";\n\nconst ShadingIRs = {};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nShadingIRs.RadialAxial = {\n  fromIR: function RadialAxial_fromIR(raw) {\n    const type = raw[1];\n    const bbox = raw[2];\n    const colorStops = raw[3];\n    const p0 = raw[4];\n    const p1 = raw[5];\n    const r0 = raw[6];\n    const r1 = raw[7];\n    return {\n      getPattern: function RadialAxial_getPattern(ctx) {\n        applyBoundingBox(ctx, bbox);\n        let grad;\n        if (type === \"axial\") {\n          grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n        } else if (type === \"radial\") {\n          grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n        }\n\n        for (let i = 0, ii = colorStops.length; i < ii; ++i) {\n          const c = colorStops[i];\n          grad.addColorStop(c[0], c[1]);\n        }\n        return grad;\n      },\n    };\n  },\n};\n\nconst createMeshCanvas = (function createMeshCanvasClosure() {\n  function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n    // Very basic Gouraud-shaded triangle rasterization algorithm.\n    const coords = context.coords,\n      colors = context.colors;\n    const bytes = data.data,\n      rowSize = data.width * 4;\n    let tmp;\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n    if (coords[p2 + 1] > coords[p3 + 1]) {\n      tmp = p2;\n      p2 = p3;\n      p3 = tmp;\n      tmp = c2;\n      c2 = c3;\n      c3 = tmp;\n    }\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n    const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n    const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n    const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n    const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n    const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n    const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n    if (y1 >= y3) {\n      return;\n    }\n    const c1r = colors[c1],\n      c1g = colors[c1 + 1],\n      c1b = colors[c1 + 2];\n    const c2r = colors[c2],\n      c2g = colors[c2 + 1],\n      c2b = colors[c2 + 2];\n    const c3r = colors[c3],\n      c3g = colors[c3 + 1],\n      c3b = colors[c3 + 2];\n\n    const minY = Math.round(y1),\n      maxY = Math.round(y3);\n    let xa, car, cag, cab;\n    let xb, cbr, cbg, cbb;\n    for (let y = minY; y <= maxY; y++) {\n      if (y < y2) {\n        let k;\n        if (y < y1) {\n          k = 0;\n        } else if (y1 === y2) {\n          k = 1;\n        } else {\n          k = (y1 - y) / (y1 - y2);\n        }\n        xa = x1 - (x1 - x2) * k;\n        car = c1r - (c1r - c2r) * k;\n        cag = c1g - (c1g - c2g) * k;\n        cab = c1b - (c1b - c2b) * k;\n      } else {\n        let k;\n        if (y > y3) {\n          k = 1;\n        } else if (y2 === y3) {\n          k = 0;\n        } else {\n          k = (y2 - y) / (y2 - y3);\n        }\n        xa = x2 - (x2 - x3) * k;\n        car = c2r - (c2r - c3r) * k;\n        cag = c2g - (c2g - c3g) * k;\n        cab = c2b - (c2b - c3b) * k;\n      }\n\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else if (y > y3) {\n        k = 1;\n      } else {\n        k = (y1 - y) / (y1 - y3);\n      }\n      xb = x1 - (x1 - x3) * k;\n      cbr = c1r - (c1r - c3r) * k;\n      cbg = c1g - (c1g - c3g) * k;\n      cbb = c1b - (c1b - c3b) * k;\n      const x1_ = Math.round(Math.min(xa, xb));\n      const x2_ = Math.round(Math.max(xa, xb));\n      let j = rowSize * y + x1_ * 4;\n      for (let x = x1_; x <= x2_; x++) {\n        k = (xa - x) / (xa - xb);\n        if (k < 0) {\n          k = 0;\n        } else if (k > 1) {\n          k = 1;\n        }\n        bytes[j++] = (car - (car - cbr) * k) | 0;\n        bytes[j++] = (cag - (cag - cbg) * k) | 0;\n        bytes[j++] = (cab - (cab - cbb) * k) | 0;\n        bytes[j++] = 255;\n      }\n    }\n  }\n\n  function drawFigure(data, figure, context) {\n    const ps = figure.coords;\n    const cs = figure.colors;\n    let i, ii;\n    switch (figure.type) {\n      case \"lattice\":\n        const verticesPerRow = figure.verticesPerRow;\n        const rows = Math.floor(ps.length / verticesPerRow) - 1;\n        const cols = verticesPerRow - 1;\n        for (i = 0; i < rows; i++) {\n          let q = i * verticesPerRow;\n          for (let j = 0; j < cols; j++, q++) {\n            drawTriangle(\n              data,\n              context,\n              ps[q],\n              ps[q + 1],\n              ps[q + verticesPerRow],\n              cs[q],\n              cs[q + 1],\n              cs[q + verticesPerRow]\n            );\n            drawTriangle(\n              data,\n              context,\n              ps[q + verticesPerRow + 1],\n              ps[q + 1],\n              ps[q + verticesPerRow],\n              cs[q + verticesPerRow + 1],\n              cs[q + 1],\n              cs[q + verticesPerRow]\n            );\n          }\n        }\n        break;\n      case \"triangles\":\n        for (i = 0, ii = ps.length; i < ii; i += 3) {\n          drawTriangle(\n            data,\n            context,\n            ps[i],\n            ps[i + 1],\n            ps[i + 2],\n            cs[i],\n            cs[i + 1],\n            cs[i + 2]\n          );\n        }\n        break;\n      default:\n        throw new Error(\"illegal figure\");\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function createMeshCanvas(\n    bounds,\n    combinesScale,\n    coords,\n    colors,\n    figures,\n    backgroundColor,\n    cachedCanvases,\n    webGLContext\n  ) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    const boundsWidth = Math.ceil(bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords,\n      colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    let canvas, tmpCanvas, i, ii;\n    if (webGLContext.isEnabled) {\n      canvas = webGLContext.drawFigures({\n        width,\n        height,\n        backgroundColor,\n        figures,\n        context,\n      });\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=972126\n      tmpCanvas = cachedCanvases.getCanvas(\n        \"mesh\",\n        paddedWidth,\n        paddedHeight,\n        false\n      );\n      tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n      canvas = tmpCanvas.canvas;\n    } else {\n      tmpCanvas = cachedCanvases.getCanvas(\n        \"mesh\",\n        paddedWidth,\n        paddedHeight,\n        false\n      );\n      const tmpCtx = tmpCanvas.context;\n\n      const data = tmpCtx.createImageData(width, height);\n      if (backgroundColor) {\n        const bytes = data.data;\n        for (i = 0, ii = bytes.length; i < ii; i += 4) {\n          bytes[i] = backgroundColor[0];\n          bytes[i + 1] = backgroundColor[1];\n          bytes[i + 2] = backgroundColor[2];\n          bytes[i + 3] = 255;\n        }\n      }\n      for (i = 0; i < figures.length; i++) {\n        drawFigure(data, figures[i], context);\n      }\n      tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n      canvas = tmpCanvas.canvas;\n    }\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n  return createMeshCanvas;\n})();\n\nShadingIRs.Mesh = {\n  fromIR: function Mesh_fromIR(raw) {\n    // var type = raw[1];\n    const coords = raw[2];\n    const colors = raw[3];\n    const figures = raw[4];\n    const bounds = raw[5];\n    const matrix = raw[6];\n    const bbox = raw[7];\n    const background = raw[8];\n    return {\n      getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n        applyBoundingBox(ctx, bbox);\n        let scale;\n        if (shadingFill) {\n          scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n        } else {\n          // Obtain scale from matrix and current transformation matrix.\n          scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n          if (matrix) {\n            const matrixScale = Util.singularValueDecompose2dScale(matrix);\n            scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n          }\n        }\n\n        // Rasterizing on the main thread since sending/queue large canvases\n        // might cause OOM.\n        const temporaryPatternCanvas = createMeshCanvas(\n          bounds,\n          scale,\n          coords,\n          colors,\n          figures,\n          shadingFill ? null : background,\n          owner.cachedCanvases,\n          owner.webGLContext\n        );\n\n        if (!shadingFill) {\n          ctx.setTransform.apply(ctx, owner.baseTransform);\n          if (matrix) {\n            ctx.transform.apply(ctx, matrix);\n          }\n        }\n\n        ctx.translate(\n          temporaryPatternCanvas.offsetX,\n          temporaryPatternCanvas.offsetY\n        );\n        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n        return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n      },\n    };\n  },\n};\n\nShadingIRs.Dummy = {\n  fromIR: function Dummy_fromIR() {\n    return {\n      getPattern: function Dummy_fromIR_getPattern() {\n        return \"hotpink\";\n      },\n    };\n  },\n};\n\nfunction getShadingPatternFromIR(raw) {\n  const shadingIR = ShadingIRs[raw[0]];\n  if (!shadingIR) {\n    throw new Error(`Unknown IR type: ${raw[0]}`);\n  }\n  return shadingIR.fromIR(raw);\n}\n\n/**\n * @type {any}\n */\nconst TilingPattern = (function TilingPatternClosure() {\n  const PaintType = {\n    COLORED: 1,\n    UNCOLORED: 2,\n  };\n\n  const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n\n  // eslint-disable-next-line no-shadow\n  function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n    this.ctx = ctx;\n  }\n\n  TilingPattern.prototype = {\n    createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n      const operatorList = this.operatorList;\n      const bbox = this.bbox;\n      const xstep = this.xstep;\n      const ystep = this.ystep;\n      const paintType = this.paintType;\n      const tilingType = this.tilingType;\n      const color = this.color;\n      const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n      info(\"TilingType: \" + tilingType);\n\n      // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n      // described by bbox, and may repeat regularly by shifting the cell by\n      // xstep and ystep.\n      // Because the HTML5 canvas API does not support pattern repetition with\n      // gaps in between, we use the xstep/ystep instead of the bbox's size.\n      //\n      // This has the following consequences (similarly for ystep):\n      //\n      // - If xstep is the same as bbox, then there is no observable difference.\n      //\n      // - If xstep is larger than bbox, then the pattern canvas is partially\n      //   empty: the area bounded by bbox is painted, the outside area is void.\n      //\n      // - If xstep is smaller than bbox, then the pixels between xstep and the\n      //   bbox boundary will be missing. This is INCORRECT behavior.\n      //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n      //   but overlapping cells without common pixels are still valid.\n      //   TODO: Fix the implementation, to allow this scenario to be painted\n      //   correctly.\n\n      const x0 = bbox[0],\n        y0 = bbox[1],\n        x1 = bbox[2],\n        y1 = bbox[3];\n\n      // Obtain scale from matrix and current transformation matrix.\n      const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n      const curMatrixScale = Util.singularValueDecompose2dScale(\n        this.baseTransform\n      );\n      const combinedScale = [\n        matrixScale[0] * curMatrixScale[0],\n        matrixScale[1] * curMatrixScale[1],\n      ];\n\n      // Use width and height values that are as close as possible to the end\n      // result when the pattern is used. Too low value makes the pattern look\n      // blurry. Too large value makes it look too crispy.\n      const dimx = this.getSizeAndScale(\n        xstep,\n        this.ctx.canvas.width,\n        combinedScale[0]\n      );\n      const dimy = this.getSizeAndScale(\n        ystep,\n        this.ctx.canvas.height,\n        combinedScale[1]\n      );\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        dimx.size,\n        dimy.size,\n        true\n      );\n      const tmpCtx = tmpCanvas.context;\n      const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n      graphics.groupLevel = owner.groupLevel;\n\n      this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n      graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n      // transform coordinates to pattern space\n      graphics.transform(1, 0, 0, 1, -x0, -y0);\n\n      this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n\n      graphics.executeOperatorList(operatorList);\n\n      this.ctx.transform(1, 0, 0, 1, x0, y0);\n\n      // Rescale canvas so that the ctx.createPattern call generates a pattern\n      // with the desired size.\n      this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n      return tmpCanvas.canvas;\n    },\n\n    getSizeAndScale: function TilingPattern_getSizeAndScale(\n      step,\n      realOutputSize,\n      scale\n    ) {\n      // xstep / ystep may be negative -- normalize.\n      step = Math.abs(step);\n      // MAX_PATTERN_SIZE is used to avoid OOM situation.\n      // Use the destination canvas's size if it is bigger than the hard-coded\n      // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n      // whole canvas.\n      const maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n      let size = Math.ceil(step * scale);\n      if (size >= maxSize) {\n        size = maxSize;\n      } else {\n        scale = size / step;\n      }\n      return { scale, size };\n    },\n\n    clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n      if (Array.isArray(bbox) && bbox.length === 4) {\n        const bboxWidth = x1 - x0;\n        const bboxHeight = y1 - y0;\n        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n        graphics.clip();\n        graphics.endPath();\n      }\n    },\n\n    setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(\n      graphics,\n      paintType,\n      color\n    ) {\n      const context = graphics.ctx,\n        current = graphics.current;\n      switch (paintType) {\n        case PaintType.COLORED:\n          const ctx = this.ctx;\n          context.fillStyle = ctx.fillStyle;\n          context.strokeStyle = ctx.strokeStyle;\n          current.fillColor = ctx.fillStyle;\n          current.strokeColor = ctx.strokeStyle;\n          break;\n        case PaintType.UNCOLORED:\n          const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n          context.fillStyle = cssColor;\n          context.strokeStyle = cssColor;\n          // Set color needed by image masks (fixes issues 3226 and 8741).\n          current.fillColor = cssColor;\n          current.strokeColor = cssColor;\n          break;\n        default:\n          throw new FormatError(`Unsupported paint type: ${paintType}`);\n      }\n    },\n\n    getPattern: function TilingPattern_getPattern(ctx, owner) {\n      ctx = this.ctx;\n      // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n      ctx.setTransform.apply(ctx, this.baseTransform);\n      ctx.transform.apply(ctx, this.matrix);\n\n      const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n      return ctx.createPattern(temporaryPatternCanvas, \"repeat\");\n    },\n  };\n\n  return TilingPattern;\n})();\n\nexport { getShadingPatternFromIR, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      reason instanceof Error ||\n        (typeof reason === \"object\" && reason !== null),\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  } else {\n    if (typeof reason !== \"object\" || reason === null) {\n      return reason;\n    }\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this._postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this._postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          this._postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        self._postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink,\n        // so when it changes from negative to positive,\n        // set ready property as resolved promise.\n        if (\n          this.streamSinks[streamId].desiredSize <= 0 &&\n          data.desiredSize > 0\n        ) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const { onPull } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(\n          this.streamControllers[streamId],\n          \"enqueue should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(\n          this.streamControllers[streamId],\n          \"close should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(\n          this.streamControllers[streamId],\n          \"error should have stream controller\"\n        );\n        this.streamControllers[streamId].controller.error(\n          wrapReason(data.reason)\n        );\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n        const { onCancel } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        this.streamSinks[streamId].sinkCapability.reject(\n          wrapReason(data.reason)\n        );\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled(\n      [\n        this.streamControllers[streamId].startCall,\n        this.streamControllers[streamId].pullCall,\n        this.streamControllers[streamId].cancelCall,\n      ].map(function (capability) {\n        return capability && capability.promise;\n      })\n    );\n    delete this.streamControllers[streamId];\n  }\n\n  /**\n   * Sends raw message to the comObj.\n   * @param {Object} message - Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   * @private\n   */\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  constructor({ parsedData, rawData }) {\n    this._metadataMap = parsedData;\n    this._data = rawData;\n  }\n\n  getRaw() {\n    return this._data;\n  }\n\n  get(name) {\n    return this._metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this._metadataMap);\n  }\n\n  has(name) {\n    return this._metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  isVisible(group) {\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available. Until\n      // we implement this, just fallback to using the group policy for now.\n      if (group.expression) {\n        warn(\"Visibility expression not supported yet.\");\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    const readers = this._rangeReaders.slice(0);\n    readers.forEach(function (rangeReader) {\n      rangeReader.cancel(reason);\n    });\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({ value: undefined, done: true });\n      });\n      this._requests = [];\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable no-multi-str */\n\nimport { shadow } from \"../shared/util.js\";\n\nclass WebGLContext {\n  constructor({ enable = false }) {\n    this._enabled = enable === true;\n  }\n\n  get isEnabled() {\n    let enabled = this._enabled;\n    if (enabled) {\n      enabled = WebGLUtils.tryInitGL();\n    }\n    return shadow(this, \"isEnabled\", enabled);\n  }\n\n  composeSMask({ layer, mask, properties }) {\n    return WebGLUtils.composeSMask(layer, mask, properties);\n  }\n\n  drawFigures({ width, height, backgroundColor, figures, context }) {\n    return WebGLUtils.drawFigures(\n      width,\n      height,\n      backgroundColor,\n      figures,\n      context\n    );\n  }\n\n  clear() {\n    WebGLUtils.cleanup();\n  }\n}\n\nconst WebGLUtils = (function WebGLUtilsClosure() {\n  function loadShader(gl, code, shaderType) {\n    const shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, code);\n    gl.compileShader(shader);\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n      const errorMsg = gl.getShaderInfoLog(shader);\n      throw new Error(\"Error during shader compilation: \" + errorMsg);\n    }\n    return shader;\n  }\n  function createVertexShader(gl, code) {\n    return loadShader(gl, code, gl.VERTEX_SHADER);\n  }\n  function createFragmentShader(gl, code) {\n    return loadShader(gl, code, gl.FRAGMENT_SHADER);\n  }\n  function createProgram(gl, shaders) {\n    const program = gl.createProgram();\n    for (let i = 0, ii = shaders.length; i < ii; ++i) {\n      gl.attachShader(program, shaders[i]);\n    }\n    gl.linkProgram(program);\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n      const errorMsg = gl.getProgramInfoLog(program);\n      throw new Error(\"Error during program linking: \" + errorMsg);\n    }\n    return program;\n  }\n  function createTexture(gl, image, textureId) {\n    gl.activeTexture(textureId);\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Set the parameters so we can render any size image.\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    // Upload the image into the texture.\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    return texture;\n  }\n\n  let currentGL, currentCanvas;\n  function generateGL() {\n    if (currentGL) {\n      return;\n    }\n\n    // The temporary canvas is used in the WebGL context.\n    currentCanvas = document.createElement(\"canvas\");\n    currentGL = currentCanvas.getContext(\"webgl\", {\n      premultipliedalpha: false,\n    });\n  }\n\n  const smaskVertexShaderCode =\n    \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec2 a_texCoord;                                    \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_texCoord = a_texCoord;                                    \\\n  }                                                             \";\n\n  const smaskFragmentShaderCode =\n    \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  uniform vec4 u_backdrop;                                      \\\n  uniform int u_subtype;                                        \\\n  uniform sampler2D u_image;                                    \\\n  uniform sampler2D u_mask;                                     \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n    vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n    if (u_backdrop.a > 0.0) {                                   \\\n      maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                      u_backdrop.rgb * (1.0 - maskColor.a);     \\\n    }                                                           \\\n    float lum;                                                  \\\n    if (u_subtype == 0) {                                       \\\n      lum = maskColor.a;                                        \\\n    } else {                                                    \\\n      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n            maskColor.b * 0.11;                                 \\\n    }                                                           \\\n    imageColor.a *= lum;                                        \\\n    imageColor.rgb *= imageColor.a;                             \\\n    gl_FragColor = imageColor;                                  \\\n  }                                                             \";\n\n  let smaskCache = null;\n\n  function initSmaskGL() {\n    generateGL();\n    const canvas = currentCanvas;\n    currentCanvas = null;\n    const gl = currentGL;\n    currentGL = null;\n\n    // setup a GLSL program\n    const vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n    const fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n    const program = createProgram(gl, [vertexShader, fragmentShader]);\n    gl.useProgram(program);\n\n    const cache = {};\n    cache.gl = gl;\n    cache.canvas = canvas;\n    cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n    cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n    cache.backdropLocation = gl.getUniformLocation(program, \"u_backdrop\");\n    cache.subtypeLocation = gl.getUniformLocation(program, \"u_subtype\");\n\n    const texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n    const texLayerLocation = gl.getUniformLocation(program, \"u_image\");\n    const texMaskLocation = gl.getUniformLocation(program, \"u_mask\");\n\n    // provide texture coordinates for the rectangle.\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    // prettier-ignore\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      0.0, 0.0,\n      1.0, 0.0,\n      0.0, 1.0,\n      0.0, 1.0,\n      1.0, 0.0,\n      1.0, 1.0]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    gl.uniform1i(texLayerLocation, 0);\n    gl.uniform1i(texMaskLocation, 1);\n\n    smaskCache = cache;\n  }\n\n  function composeSMask(layer, mask, properties) {\n    const width = layer.width,\n      height = layer.height;\n\n    if (!smaskCache) {\n      initSmaskGL();\n    }\n    const cache = smaskCache,\n      canvas = cache.canvas,\n      gl = cache.gl;\n    canvas.width = width;\n    canvas.height = height;\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.uniform2f(cache.resolutionLocation, width, height);\n\n    if (properties.backdrop) {\n      gl.uniform4f(\n        cache.resolutionLocation,\n        properties.backdrop[0],\n        properties.backdrop[1],\n        properties.backdrop[2],\n        1\n      );\n    } else {\n      gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n    }\n    gl.uniform1i(\n      cache.subtypeLocation,\n      properties.subtype === \"Luminosity\" ? 1 : 0\n    );\n\n    // Create a textures\n    const texture = createTexture(gl, layer, gl.TEXTURE0);\n    const maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n\n    // Create a buffer and put a single clipspace rectangle in\n    // it (2 triangles)\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    // prettier-ignore\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n      0, 0,\n      width, 0,\n      0, height,\n      0, height,\n      width, 0,\n      width, height]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.positionLocation);\n    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // draw\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    gl.flush();\n\n    gl.deleteTexture(texture);\n    gl.deleteTexture(maskTexture);\n    gl.deleteBuffer(buffer);\n\n    return canvas;\n  }\n\n  const figuresVertexShaderCode =\n    \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec3 a_color;                                       \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n  uniform vec2 u_scale;                                         \\\n  uniform vec2 u_offset;                                        \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 position = (a_position + u_offset) * u_scale;          \\\n    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_color = vec4(a_color / 255.0, 1.0);                       \\\n  }                                                             \";\n\n  const figuresFragmentShaderCode =\n    \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    gl_FragColor = v_color;                                     \\\n  }                                                             \";\n\n  let figuresCache = null;\n\n  function initFiguresGL() {\n    generateGL();\n    const canvas = currentCanvas;\n    currentCanvas = null;\n    const gl = currentGL;\n    currentGL = null;\n\n    // setup a GLSL program\n    const vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n    const fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n    const program = createProgram(gl, [vertexShader, fragmentShader]);\n    gl.useProgram(program);\n\n    const cache = {};\n    cache.gl = gl;\n    cache.canvas = canvas;\n    cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n    cache.scaleLocation = gl.getUniformLocation(program, \"u_scale\");\n    cache.offsetLocation = gl.getUniformLocation(program, \"u_offset\");\n    cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n    cache.colorLocation = gl.getAttribLocation(program, \"a_color\");\n\n    figuresCache = cache;\n  }\n\n  function drawFigures(width, height, backgroundColor, figures, context) {\n    if (!figuresCache) {\n      initFiguresGL();\n    }\n    const cache = figuresCache,\n      canvas = cache.canvas,\n      gl = cache.gl;\n\n    canvas.width = width;\n    canvas.height = height;\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.uniform2f(cache.resolutionLocation, width, height);\n\n    // count triangle points\n    let count = 0;\n    for (let i = 0, ii = figures.length; i < ii; i++) {\n      switch (figures[i].type) {\n        case \"lattice\":\n          const rows =\n            (figures[i].coords.length / figures[i].verticesPerRow) | 0;\n          count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n          break;\n        case \"triangles\":\n          count += figures[i].coords.length;\n          break;\n      }\n    }\n    // transfer data\n    const coords = new Float32Array(count * 2);\n    const colors = new Uint8Array(count * 3);\n    const coordsMap = context.coords,\n      colorsMap = context.colors;\n    let pIndex = 0,\n      cIndex = 0;\n    for (let i = 0, ii = figures.length; i < ii; i++) {\n      const figure = figures[i],\n        ps = figure.coords,\n        cs = figure.colors;\n      switch (figure.type) {\n        case \"lattice\":\n          const cols = figure.verticesPerRow;\n          const rows = (ps.length / cols) | 0;\n          for (let row = 1; row < rows; row++) {\n            let offset = row * cols + 1;\n            for (let col = 1; col < cols; col++, offset++) {\n              coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n              coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n              coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n              coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n              coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n              coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n              colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n              colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n              colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n              colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n              colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n              colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n              colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n              colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n              colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n\n              coords[pIndex + 6] = coords[pIndex + 2];\n              coords[pIndex + 7] = coords[pIndex + 3];\n              coords[pIndex + 8] = coords[pIndex + 4];\n              coords[pIndex + 9] = coords[pIndex + 5];\n              coords[pIndex + 10] = coordsMap[ps[offset]];\n              coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n              colors[cIndex + 9] = colors[cIndex + 3];\n              colors[cIndex + 10] = colors[cIndex + 4];\n              colors[cIndex + 11] = colors[cIndex + 5];\n              colors[cIndex + 12] = colors[cIndex + 6];\n              colors[cIndex + 13] = colors[cIndex + 7];\n              colors[cIndex + 14] = colors[cIndex + 8];\n              colors[cIndex + 15] = colorsMap[cs[offset]];\n              colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n              colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n              pIndex += 12;\n              cIndex += 18;\n            }\n          }\n          break;\n        case \"triangles\":\n          for (let j = 0, jj = ps.length; j < jj; j++) {\n            coords[pIndex] = coordsMap[ps[j]];\n            coords[pIndex + 1] = coordsMap[ps[j] + 1];\n            colors[cIndex] = colorsMap[cs[j]];\n            colors[cIndex + 1] = colorsMap[cs[j] + 1];\n            colors[cIndex + 2] = colorsMap[cs[j] + 2];\n            pIndex += 2;\n            cIndex += 3;\n          }\n          break;\n      }\n    }\n\n    // draw\n    if (backgroundColor) {\n      gl.clearColor(\n        backgroundColor[0] / 255,\n        backgroundColor[1] / 255,\n        backgroundColor[2] / 255,\n        1.0\n      );\n    } else {\n      gl.clearColor(0, 0, 0, 0);\n    }\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    const coordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.positionLocation);\n    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    const colorsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.colorLocation);\n    gl.vertexAttribPointer(\n      cache.colorLocation,\n      3,\n      gl.UNSIGNED_BYTE,\n      false,\n      0,\n      0\n    );\n\n    gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n    gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n\n    gl.drawArrays(gl.TRIANGLES, 0, count);\n\n    gl.flush();\n\n    gl.deleteBuffer(coordsBuffer);\n    gl.deleteBuffer(colorsBuffer);\n\n    return canvas;\n  }\n\n  return {\n    tryInitGL() {\n      try {\n        generateGL();\n        return !!currentGL;\n      } catch (ex) {}\n      return false;\n    },\n\n    composeSMask,\n\n    drawFigures,\n\n    cleanup() {\n      if (smaskCache?.canvas) {\n        smaskCache.canvas.width = 0;\n        smaskCache.canvas.height = 0;\n      }\n      if (figuresCache?.canvas) {\n        figuresCache.canvas.width = 0;\n        figuresCache.canvas.height = 0;\n      }\n      smaskCache = null;\n      figuresCache = null;\n    },\n  };\n})();\n\nexport { WebGLContext };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  addLinkAttributes,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  LinkTarget,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPage} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderInteractiveForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderInteractiveForms = parameters.renderInteractiveForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width = width - 2 * data.borderStyle.width;\n        height = height - 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.color) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n    container.style.width = `${width}px`;\n    container.style.height = `${height}px`;\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      title: data.title,\n      modificationDate: data.modificationDate,\n      contents: data.contents,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    this.quadrilaterals.forEach(quadrilateral => {\n      quadrilateral.className = className;\n    });\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, { isRenderable, createQuadrilaterals: true });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      addLinkAttributes(link, {\n        url: data.url,\n        target: data.newWindow\n          ? LinkTarget.BLANK\n          : linkService.externalLinkTarget,\n        rel: linkService.externalLinkRel,\n        enabled: linkService.externalLinkEnabled,\n      });\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else if (\n      data.actions &&\n      (data.actions.Action ||\n        data.actions[\"Mouse Up\"] ||\n        data.actions[\"Mouse Down\"]) &&\n      this.enableScripting &&\n      this.hasJSActions\n    ) {\n      this._bindJSAction(link, data);\n    } else {\n      this._bindLink(link, \"\");\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n    link.className = \"internalLink\";\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    return (\n      (navigator.platform.includes(\"Win\") && event.ctrlKey) ||\n      (navigator.platform.includes(\"Mac\") && event.metaKey)\n    );\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setColor(event) {\n    const { detail, target } = event;\n    const { style } = target;\n    for (const name of [\n      \"bgColor\",\n      \"fillColor\",\n      \"fgColor\",\n      \"textColor\",\n      \"borderColor\",\n      \"strokeColor\",\n    ]) {\n      let color = detail[name];\n      if (!color) {\n        continue;\n      }\n      color = ColorConverters[`${color[0]}_HTML`](color.slice(1));\n      switch (name) {\n        case \"bgColor\":\n        case \"fillColor\":\n          style.backgroundColor = color;\n          break;\n        case \"fgColor\":\n        case \"textColor\":\n          style.color = color;\n          break;\n        case \"borderColor\":\n        case \"strokeColor\":\n          style.borderColor = color;\n          break;\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderInteractiveForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderInteractiveForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: event.target.value });\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        event.target.setSelectionRange(0, 0);\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", event => {\n          const { detail } = event;\n          const actions = {\n            value() {\n              elementData.userValue = detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString() {\n              elementData.formattedValue = detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            focus() {\n              setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n            },\n            userName() {\n              // tooltip\n              event.target.title = detail.userName;\n            },\n            hidden() {\n              event.target.style.visibility = detail.hidden\n                ? \"hidden\"\n                : \"visible\";\n              storage.setValue(id, { hidden: detail.hidden });\n            },\n            editable() {\n              event.target.disabled = !detail.editable;\n            },\n            selRange() {\n              const [selStart, selEnd] = detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          Object.keys(detail)\n            .filter(name => name in actions)\n            .forEach(name => actions[name]());\n          this._setColor(event);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    const value = storage.getValue(id, {\n      value:\n        data.fieldValue &&\n        ((data.exportValue && data.exportValue === data.fieldValue) ||\n          (!data.exportValue && data.fieldValue !== \"Off\")),\n    }).value;\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = this.data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n\n    element.addEventListener(\"change\", function (event) {\n      const name = event.target.name;\n      for (const checkbox of document.getElementsByName(name)) {\n        if (checkbox !== event.target) {\n          checkbox.checked = false;\n          storage.setValue(\n            checkbox.parentNode.getAttribute(\"data-annotation-id\"),\n            { value: false }\n          );\n        }\n      }\n      storage.setValue(id, { value: event.target.checked });\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", event => {\n        const { detail } = event;\n        const actions = {\n          value() {\n            event.target.checked = detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n          focus() {\n            setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n          },\n          hidden() {\n            event.target.style.visibility = detail.hidden\n              ? \"hidden\"\n              : \"visible\";\n            storage.setValue(id, { hidden: detail.hidden });\n          },\n          editable() {\n            event.target.disabled = !detail.editable;\n          },\n        };\n        Object.keys(detail)\n          .filter(name => name in actions)\n          .forEach(name => actions[name]());\n        this._setColor(event);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    const value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n\n    const element = document.createElement(\"input\");\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n\n    element.addEventListener(\"change\", function (event) {\n      const { target } = event;\n      for (const radio of document.getElementsByName(target.name)) {\n        if (radio !== target) {\n          storage.setValue(radio.getAttribute(\"id\"), { value: false });\n        }\n      }\n      storage.setValue(id, { value: target.checked });\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", event => {\n        const { detail } = event;\n        const actions = {\n          value() {\n            const checked = pdfButtonValue === detail.value;\n            for (const radio of document.getElementsByName(event.target.name)) {\n              const radioId = radio.getAttribute(\"id\");\n              radio.checked = radioId === id && checked;\n              storage.setValue(radioId, { value: radio.checked });\n            }\n          },\n          focus() {\n            setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n          },\n          hidden() {\n            event.target.style.visibility = detail.hidden\n              ? \"hidden\"\n              : \"visible\";\n            storage.setValue(id, { hidden: detail.hidden });\n          },\n          editable() {\n            event.target.disabled = !detail.editable;\n          },\n        };\n        Object.keys(detail)\n          .filter(name => name in actions)\n          .forEach(name => actions[name]());\n        this._setColor(event);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    const selectElement = document.createElement(\"select\");\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", event => {\n        const { detail } = event;\n        const actions = {\n          value() {\n            const options = selectElement.options;\n            const value = detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            Array.prototype.forEach.call(options, option => {\n              option.selected = values.has(option.value);\n            });\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection() {\n            selectElement.multiple = true;\n          },\n          remove() {\n            const options = selectElement.options;\n            const index = detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear() {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert() {\n            const { index, displayValue, exportValue } = detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items() {\n            const { items } = detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices() {\n            const indices = new Set(detail.indices);\n            const options = event.target.options;\n            Array.prototype.forEach.call(options, (option, i) => {\n              option.selected = indices.has(i);\n            });\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          focus() {\n            setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n          },\n          hidden() {\n            event.target.style.visibility = detail.hidden\n              ? \"hidden\"\n              : \"visible\";\n            storage.setValue(id, { hidden: detail.hidden });\n          },\n          editable() {\n            event.target.disabled = !detail.editable;\n          },\n        };\n        Object.keys(detail)\n          .filter(name => name in actions)\n          .forEach(name => actions[name]());\n        this._setColor(event);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(parameters.data.title || parameters.data.contents);\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      title: this.data.title,\n      modificationDate: this.data.modificationDate,\n      contents: this.data.contents,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.title = parameters.title;\n    this.modificationDate = parameters.modificationDate;\n    this.contents = parameters.contents;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.textContent = this.title;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    const contents = this._formatContents(this.contents);\n    popup.appendChild(contents);\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    this.trigger.forEach(element => {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    });\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {string} contents\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents(contents) {\n    const p = document.createElement(\"p\");\n    const lines = contents.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPage} page\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderInteractiveForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: parameters.div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderInteractiveForms: parameters.renderInteractiveForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            parameters.div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            parameters.div.prepend(rendered);\n          } else {\n            parameters.div.appendChild(rendered);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    for (const data of parameters.annotations) {\n      const elements = parameters.div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        elements.forEach(element => {\n          element.style.transform = transform;\n        });\n      }\n    }\n    parameters.div.hidden = false;\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\n/**\n * @typedef {Object} TextLayerRenderTask\n * @property {Promise<void>} promise\n * @property {() => void} cancel\n * @property {(expandDivs: boolean) => void} expandTextDivs\n */\n\n/**\n * @type {(renderParameters: TextLayerRenderParameters) => TextLayerRenderTask}\n */\nconst renderTextLayer = (function renderTextLayerClosure() {\n  const MAX_TEXT_DIVS_TO_RENDER = 100000;\n  const DEFAULT_FONT_SIZE = 30;\n  const DEFAULT_FONT_ASCENT = 0.8;\n  const ascentCache = new Map();\n\n  const NonWhitespaceRegexp = /\\S/;\n\n  function isAllWhitespace(str) {\n    return !NonWhitespaceRegexp.test(str);\n  }\n\n  function getAscent(fontFamily, ctx) {\n    const cachedAscent = ascentCache.get(fontFamily);\n    if (cachedAscent) {\n      return cachedAscent;\n    }\n\n    ctx.save();\n    ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n    const metrics = ctx.measureText(\"\");\n\n    // Both properties aren't available by default in Firefox.\n    let ascent = metrics.fontBoundingBoxAscent;\n    let descent = Math.abs(metrics.fontBoundingBoxDescent);\n    if (ascent) {\n      ctx.restore();\n      const ratio = ascent / (ascent + descent);\n      ascentCache.set(fontFamily, ratio);\n      return ratio;\n    }\n\n    // Try basic heuristic to guess ascent/descent.\n    // Draw a g with baseline at 0,0 and then get the line\n    // number where a pixel has non-null red component (starting\n    // from bottom).\n    ctx.strokeStyle = \"red\";\n    ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n    ctx.strokeText(\"g\", 0, 0);\n    let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE)\n      .data;\n    descent = 0;\n    for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n      if (pixels[i] > 0) {\n        descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n        break;\n      }\n    }\n\n    // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n    // number where a pixel has non-null red component (starting\n    // from top).\n    ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n    ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n    pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n    ascent = 0;\n    for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n      if (pixels[i] > 0) {\n        ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n        break;\n      }\n    }\n\n    ctx.restore();\n\n    if (ascent) {\n      const ratio = ascent / (ascent + descent);\n      ascentCache.set(fontFamily, ratio);\n      return ratio;\n    }\n\n    ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n    return DEFAULT_FONT_ASCENT;\n  }\n\n  function appendText(task, geom, styles, ctx) {\n    // Initialize all used properties to keep the caches monomorphic.\n    const textDiv = document.createElement(\"span\");\n    const textDivProperties = {\n      angle: 0,\n      canvasWidth: 0,\n      isWhitespace: false,\n      originalTransform: null,\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n      paddingTop: 0,\n      scale: 1,\n    };\n\n    task._textDivs.push(textDiv);\n    if (isAllWhitespace(geom.str)) {\n      textDivProperties.isWhitespace = true;\n      task._textDivProperties.set(textDiv, textDivProperties);\n      return;\n    }\n\n    const tx = Util.transform(task._viewport.transform, geom.transform);\n    let angle = Math.atan2(tx[1], tx[0]);\n    const style = styles[geom.fontName];\n    if (style.vertical) {\n      angle += Math.PI / 2;\n    }\n    const fontHeight = Math.hypot(tx[2], tx[3]);\n    const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n    let left, top;\n    if (angle === 0) {\n      left = tx[4];\n      top = tx[5] - fontAscent;\n    } else {\n      left = tx[4] + fontAscent * Math.sin(angle);\n      top = tx[5] - fontAscent * Math.cos(angle);\n    }\n    // Setting the style properties individually, rather than all at once,\n    // should be OK since the `textDiv` isn't appended to the document yet.\n    textDiv.style.left = `${left}px`;\n    textDiv.style.top = `${top}px`;\n    textDiv.style.fontSize = `${fontHeight}px`;\n    textDiv.style.fontFamily = style.fontFamily;\n\n    textDiv.textContent = geom.str;\n    // geom.dir may be 'ttb' for vertical texts.\n    textDiv.dir = geom.dir;\n\n    // `fontName` is only used by the FontInspector, and we only use `dataset`\n    // here to make the font name available in the debugger.\n    if (task._fontInspectorEnabled) {\n      textDiv.dataset.fontName = geom.fontName;\n    }\n    if (angle !== 0) {\n      textDivProperties.angle = angle * (180 / Math.PI);\n    }\n    // We don't bother scaling single-char text divs, because it has very\n    // little effect on text highlighting. This makes scrolling on docs with\n    // lots of such divs a lot faster.\n    let shouldScaleText = false;\n    if (geom.str.length > 1) {\n      shouldScaleText = true;\n    } else if (geom.transform[0] !== geom.transform[3]) {\n      const absScaleX = Math.abs(geom.transform[0]),\n        absScaleY = Math.abs(geom.transform[3]);\n      // When the horizontal/vertical scaling differs significantly, also scale\n      // even single-char text to improve highlighting (fixes issue11713.pdf).\n      if (\n        absScaleX !== absScaleY &&\n        Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n      ) {\n        shouldScaleText = true;\n      }\n    }\n    if (shouldScaleText) {\n      if (style.vertical) {\n        textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n      } else {\n        textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n      }\n    }\n    task._textDivProperties.set(textDiv, textDivProperties);\n    if (task._textContentStream) {\n      task._layoutText(textDiv);\n    }\n\n    if (task._enhanceTextSelection) {\n      let angleCos = 1,\n        angleSin = 0;\n      if (angle !== 0) {\n        angleCos = Math.cos(angle);\n        angleSin = Math.sin(angle);\n      }\n      const divWidth =\n        (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n      const divHeight = fontHeight;\n\n      let m, b;\n      if (angle !== 0) {\n        m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n        b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n      } else {\n        b = [left, top, left + divWidth, top + divHeight];\n      }\n\n      task._bounds.push({\n        left: b[0],\n        top: b[1],\n        right: b[2],\n        bottom: b[3],\n        div: textDiv,\n        size: [divWidth, divHeight],\n        m,\n      });\n    }\n  }\n\n  function render(task) {\n    if (task._canceled) {\n      return;\n    }\n    const textDivs = task._textDivs;\n    const capability = task._capability;\n    const textDivsLength = textDivs.length;\n\n    // No point in rendering many divs as it would make the browser\n    // unusable even after the divs are rendered.\n    if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n      task._renderingDone = true;\n      capability.resolve();\n      return;\n    }\n\n    if (!task._textContentStream) {\n      for (let i = 0; i < textDivsLength; i++) {\n        task._layoutText(textDivs[i]);\n      }\n    }\n\n    task._renderingDone = true;\n    capability.resolve();\n  }\n\n  function findPositiveMin(ts, offset, count) {\n    let result = 0;\n    for (let i = 0; i < count; i++) {\n      const t = ts[offset++];\n      if (t > 0) {\n        result = result ? Math.min(t, result) : t;\n      }\n    }\n    return result;\n  }\n\n  function expand(task) {\n    const bounds = task._bounds;\n    const viewport = task._viewport;\n\n    const expanded = expandBounds(viewport.width, viewport.height, bounds);\n    for (let i = 0; i < expanded.length; i++) {\n      const div = bounds[i].div;\n      const divProperties = task._textDivProperties.get(div);\n      if (divProperties.angle === 0) {\n        divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n        divProperties.paddingTop = bounds[i].top - expanded[i].top;\n        divProperties.paddingRight = expanded[i].right - bounds[i].right;\n        divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n        task._textDivProperties.set(div, divProperties);\n        continue;\n      }\n      // Box is rotated -- trying to find padding so rotated div will not\n      // exceed its expanded bounds.\n      const e = expanded[i],\n        b = bounds[i];\n      const m = b.m,\n        c = m[0],\n        s = m[1];\n      // Finding intersections with expanded box.\n      const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n      const ts = new Float64Array(64);\n      points.forEach(function (p, j) {\n        const t = Util.applyTransform(p, m);\n        ts[j + 0] = c && (e.left - t[0]) / c;\n        ts[j + 4] = s && (e.top - t[1]) / s;\n        ts[j + 8] = c && (e.right - t[0]) / c;\n        ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n        ts[j + 16] = s && (e.left - t[0]) / -s;\n        ts[j + 20] = c && (e.top - t[1]) / c;\n        ts[j + 24] = s && (e.right - t[0]) / -s;\n        ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n        ts[j + 32] = c && (e.left - t[0]) / -c;\n        ts[j + 36] = s && (e.top - t[1]) / -s;\n        ts[j + 40] = c && (e.right - t[0]) / -c;\n        ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n        ts[j + 48] = s && (e.left - t[0]) / s;\n        ts[j + 52] = c && (e.top - t[1]) / -c;\n        ts[j + 56] = s && (e.right - t[0]) / s;\n        ts[j + 60] = c && (e.bottom - t[1]) / -c;\n      });\n      // Not based on math, but to simplify calculations, using cos and sin\n      // absolute values to not exceed the box (it can but insignificantly).\n      const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n      divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n      divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n      divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n      divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n      task._textDivProperties.set(div, divProperties);\n    }\n  }\n\n  function expandBounds(width, height, boxes) {\n    const bounds = boxes.map(function (box, i) {\n      return {\n        x1: box.left,\n        y1: box.top,\n        x2: box.right,\n        y2: box.bottom,\n        index: i,\n        x1New: undefined,\n        x2New: undefined,\n      };\n    });\n    expandBoundsLTR(width, bounds);\n    const expanded = new Array(boxes.length);\n    bounds.forEach(function (b) {\n      const i = b.index;\n      expanded[i] = {\n        left: b.x1New,\n        top: 0,\n        right: b.x2New,\n        bottom: 0,\n      };\n    });\n\n    // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n    // array and objects.\n    boxes.map(function (box, i) {\n      const e = expanded[i],\n        b = bounds[i];\n      b.x1 = box.top;\n      b.y1 = width - e.right;\n      b.x2 = box.bottom;\n      b.y2 = width - e.left;\n      b.index = i;\n      b.x1New = undefined;\n      b.x2New = undefined;\n    });\n    expandBoundsLTR(height, bounds);\n\n    bounds.forEach(function (b) {\n      const i = b.index;\n      expanded[i].top = b.x1New;\n      expanded[i].bottom = b.x2New;\n    });\n    return expanded;\n  }\n\n  function expandBoundsLTR(width, bounds) {\n    // Sorting by x1 coordinate and walk by the bounds in the same order.\n    bounds.sort(function (a, b) {\n      return a.x1 - b.x1 || a.index - b.index;\n    });\n\n    // First we see on the horizon is a fake boundary.\n    const fakeBoundary = {\n      x1: -Infinity,\n      y1: -Infinity,\n      x2: 0,\n      y2: Infinity,\n      index: -1,\n      x1New: 0,\n      x2New: 0,\n    };\n    const horizon = [\n      {\n        start: -Infinity,\n        end: Infinity,\n        boundary: fakeBoundary,\n      },\n    ];\n\n    bounds.forEach(function (boundary) {\n      // Searching for the affected part of horizon.\n      // TODO red-black tree or simple binary search\n      let i = 0;\n      while (i < horizon.length && horizon[i].end <= boundary.y1) {\n        i++;\n      }\n      let j = horizon.length - 1;\n      while (j >= 0 && horizon[j].start >= boundary.y2) {\n        j--;\n      }\n\n      let horizonPart, affectedBoundary;\n      let q,\n        k,\n        maxXNew = -Infinity;\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        let xNew;\n        if (affectedBoundary.x2 > boundary.x1) {\n          // In the middle of the previous element, new x shall be at the\n          // boundary start. Extending if further if the affected boundary\n          // placed on top of the current one.\n          xNew =\n            affectedBoundary.index > boundary.index\n              ? affectedBoundary.x1New\n              : boundary.x1;\n        } else if (affectedBoundary.x2New === undefined) {\n          // We have some space in between, new x in middle will be a fair\n          // choice.\n          xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n        } else {\n          // Affected boundary has x2new set, using it as new x.\n          xNew = affectedBoundary.x2New;\n        }\n        if (xNew > maxXNew) {\n          maxXNew = xNew;\n        }\n      }\n\n      // Set new x1 for current boundary.\n      boundary.x1New = maxXNew;\n\n      // Adjusts new x2 for the affected boundaries.\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        if (affectedBoundary.x2New === undefined) {\n          // Was not set yet, choosing new x if possible.\n          if (affectedBoundary.x2 > boundary.x1) {\n            // Current and affected boundaries intersect. If affected boundary\n            // is placed on top of the current, shrinking the affected.\n            if (affectedBoundary.index > boundary.index) {\n              affectedBoundary.x2New = affectedBoundary.x2;\n            }\n          } else {\n            affectedBoundary.x2New = maxXNew;\n          }\n        } else if (affectedBoundary.x2New > maxXNew) {\n          // Affected boundary is touching new x, pushing it back.\n          affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n        }\n      }\n\n      // Fixing the horizon.\n      const changedHorizon = [];\n      let lastBoundary = null;\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        // Checking which boundary will be visible.\n        const useBoundary =\n          affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n        if (lastBoundary === useBoundary) {\n          // Merging with previous.\n          changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n        } else {\n          changedHorizon.push({\n            start: horizonPart.start,\n            end: horizonPart.end,\n            boundary: useBoundary,\n          });\n          lastBoundary = useBoundary;\n        }\n      }\n      if (horizon[i].start < boundary.y1) {\n        changedHorizon[0].start = boundary.y1;\n        changedHorizon.unshift({\n          start: horizon[i].start,\n          end: boundary.y1,\n          boundary: horizon[i].boundary,\n        });\n      }\n      if (boundary.y2 < horizon[j].end) {\n        changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n        changedHorizon.push({\n          start: boundary.y2,\n          end: horizon[j].end,\n          boundary: horizon[j].boundary,\n        });\n      }\n\n      // Set x2 new of boundary that is no longer visible (see overlapping case\n      // above).\n      // TODO more efficient, e.g. via reference counting.\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        if (affectedBoundary.x2New !== undefined) {\n          continue;\n        }\n        let used = false;\n        for (\n          k = i - 1;\n          !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n          k--\n        ) {\n          used = horizon[k].boundary === affectedBoundary;\n        }\n        for (\n          k = j + 1;\n          !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n          k++\n        ) {\n          used = horizon[k].boundary === affectedBoundary;\n        }\n        for (k = 0; !used && k < changedHorizon.length; k++) {\n          used = changedHorizon[k].boundary === affectedBoundary;\n        }\n        if (!used) {\n          affectedBoundary.x2New = maxXNew;\n        }\n      }\n\n      Array.prototype.splice.apply(\n        horizon,\n        [i, j - i + 1].concat(changedHorizon)\n      );\n    });\n\n    // Set new x2 for all unset boundaries.\n    horizon.forEach(function (horizonPart) {\n      const affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n      }\n    });\n  }\n\n  /**\n   * Text layer rendering task.\n   *\n   * @param {TextContent} textContent\n   * @param {HTMLElement} container\n   * @param {PageViewport} viewport\n   * @param {Array} textDivs\n   * @param {boolean} enhanceTextSelection\n   * @private\n   */\n  function TextLayerRenderTask({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        /* Avoid \"Uncaught promise\" messages in the console. */\n      });\n  }\n  TextLayerRenderTask.prototype = {\n    get promise() {\n      return this._capability.promise;\n    },\n\n    cancel: function TextLayer_cancel() {\n      this._canceled = true;\n      if (this._reader) {\n        this._reader.cancel(new AbortException(\"TextLayer task cancelled.\"));\n        this._reader = null;\n      }\n      if (this._renderTimer !== null) {\n        clearTimeout(this._renderTimer);\n        this._renderTimer = null;\n      }\n      this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n    },\n\n    _processItems(items, styleCache) {\n      for (let i = 0, len = items.length; i < len; i++) {\n        this._textContentItemsStr.push(items[i].str);\n        appendText(this, items[i], styleCache, this._layoutTextCtx);\n      }\n    },\n\n    _layoutText(textDiv) {\n      const textDivProperties = this._textDivProperties.get(textDiv);\n      if (textDivProperties.isWhitespace) {\n        return;\n      }\n\n      let transform = \"\";\n      if (textDivProperties.canvasWidth !== 0) {\n        const { fontSize, fontFamily } = textDiv.style;\n\n        // Only build font string and set to context if different from last.\n        if (\n          fontSize !== this._layoutTextLastFontSize ||\n          fontFamily !== this._layoutTextLastFontFamily\n        ) {\n          this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n          this._layoutTextLastFontSize = fontSize;\n          this._layoutTextLastFontFamily = fontFamily;\n        }\n        // Only measure the width for multi-char text divs, see `appendText`.\n        const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n        if (width > 0) {\n          textDivProperties.scale = textDivProperties.canvasWidth / width;\n          transform = `scaleX(${textDivProperties.scale})`;\n        }\n      }\n      if (textDivProperties.angle !== 0) {\n        transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n      }\n      if (transform.length > 0) {\n        if (this._enhanceTextSelection) {\n          textDivProperties.originalTransform = transform;\n        }\n        textDiv.style.transform = transform;\n      }\n      this._textDivProperties.set(textDiv, textDivProperties);\n      this._container.appendChild(textDiv);\n    },\n\n    _render: function TextLayer_render(timeout) {\n      const capability = createPromiseCapability();\n      let styleCache = Object.create(null);\n\n      // The temporary canvas is used to measure text length in the DOM.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n      ) {\n        canvas.mozOpaque = true;\n      }\n      this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n      if (this._textContent) {\n        const textItems = this._textContent.items;\n        const textStyles = this._textContent.styles;\n        this._processItems(textItems, textStyles);\n        capability.resolve();\n      } else if (this._textContentStream) {\n        const pump = () => {\n          this._reader.read().then(({ value, done }) => {\n            if (done) {\n              capability.resolve();\n              return;\n            }\n\n            Object.assign(styleCache, value.styles);\n            this._processItems(value.items, styleCache);\n            pump();\n          }, capability.reject);\n        };\n\n        this._reader = this._textContentStream.getReader();\n        pump();\n      } else {\n        throw new Error(\n          'Neither \"textContent\" nor \"textContentStream\"' +\n            \" parameters specified.\"\n        );\n      }\n\n      capability.promise.then(() => {\n        styleCache = null;\n        if (!timeout) {\n          // Render right away\n          render(this);\n        } else {\n          // Schedule\n          this._renderTimer = setTimeout(() => {\n            render(this);\n            this._renderTimer = null;\n          }, timeout);\n        }\n      }, this._capability.reject);\n    },\n\n    expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n      if (!this._enhanceTextSelection || !this._renderingDone) {\n        return;\n      }\n      if (this._bounds !== null) {\n        expand(this);\n        this._bounds = null;\n      }\n      const transformBuf = [],\n        paddingBuf = [];\n\n      for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n        const div = this._textDivs[i];\n        const divProps = this._textDivProperties.get(div);\n\n        if (divProps.isWhitespace) {\n          continue;\n        }\n        if (expandDivs) {\n          transformBuf.length = 0;\n          paddingBuf.length = 0;\n\n          if (divProps.originalTransform) {\n            transformBuf.push(divProps.originalTransform);\n          }\n          if (divProps.paddingTop > 0) {\n            paddingBuf.push(`${divProps.paddingTop}px`);\n            transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n          } else {\n            paddingBuf.push(0);\n          }\n          if (divProps.paddingRight > 0) {\n            paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n          } else {\n            paddingBuf.push(0);\n          }\n          if (divProps.paddingBottom > 0) {\n            paddingBuf.push(`${divProps.paddingBottom}px`);\n          } else {\n            paddingBuf.push(0);\n          }\n          if (divProps.paddingLeft > 0) {\n            paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n            transformBuf.push(\n              `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n            );\n          } else {\n            paddingBuf.push(0);\n          }\n\n          div.style.padding = paddingBuf.join(\" \");\n          if (transformBuf.length) {\n            div.style.transform = transformBuf.join(\" \");\n          }\n        } else {\n          div.style.padding = null;\n          div.style.transform = divProps.originalTransform;\n        }\n      }\n    },\n  };\n\n  // eslint-disable-next-line no-shadow\n  function renderTextLayer(renderParameters) {\n    const task = new TextLayerRenderTask({\n      textContent: renderParameters.textContent,\n      textContentStream: renderParameters.textContentStream,\n      container: renderParameters.container,\n      viewport: renderParameters.viewport,\n      textDivs: renderParameters.textDivs,\n      textContentItemsStr: renderParameters.textContentItemsStr,\n      enhanceTextSelection: renderParameters.enhanceTextSelection,\n    });\n    task._render(renderParameters.timeout);\n    return task;\n  }\n\n  return renderTextLayer;\n})();\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = function () {\n  throw new Error(\"Not implemented: SVGGraphics\");\n};\n\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89,\n      0x50,\n      0x4e,\n      0x47,\n      0x0d,\n      0x0a,\n      0x1a,\n      0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  // eslint-disable-next-line no-shadow\n  SVGGraphics = class SVGGraphics {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0] = Util.applyTransform([x0, y0], matrix);\n      const [tx1, ty1] = Util.applyTransform([x1, y1], matrix);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        this.extraStack.forEach(function (prev) {\n          prev.clipGroup = null;\n        });\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaLayer {\n  static setAttributes(html, attrs) {\n    for (const [key, value] of Object.entries(attrs)) {\n      if (value === null || value === undefined) {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        html.setAttribute(key, value);\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n  }\n\n  static render(parameters) {\n    const root = parameters.xfa;\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      XfaLayer.setAttributes(rootHtml, root.attributes);\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n    const coeffs = parameters.viewport.transform.join(\",\");\n    rootDiv.style.transform = `matrix(${coeffs})`;\n\n    // Set defaults.\n    rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        html.appendChild(document.createTextNode(child.value));\n        continue;\n      }\n\n      const childHtml = document.createElement(name);\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        XfaLayer.setAttributes(childHtml, child.attributes);\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        childHtml.appendChild(document.createTextNode(child.value));\n      }\n    }\n  }\n\n  /**\n   * Update the xfa layer.\n   *\n   * @public\n   * @param {XfaLayerParameters} parameters\n   * @memberof XfaLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n\n    const readers = this._rangeRequestReaders.slice(0);\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const {\n        allowRangeRequests,\n        suggestedLength,\n      } = validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: stream.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const bytes = Array.from(value, function (ch) {\n          return ch.charCodeAt(0) & 0xff;\n        });\n        value = decoder.decode(new Uint8Array(bytes));\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args) {\n    this.url = url;\n    args = args || {};\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || {};\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = {\n      xhr,\n    });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      // Maybe abortRequest was called...\n      return;\n    }\n\n    if (pendingRequest.onProgress) {\n      pendingRequest.onProgress(evt);\n    }\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      // Maybe abortRequest was called...\n      return;\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else if (pendingRequest.onError) {\n      pendingRequest.onError(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    const readers = this._rangeRequestReaders.slice(0);\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const {\n      allowRangeRequests,\n      suggestedLength,\n    } = validateRangeRequestCapabilities({\n      getResponseHeader,\n      isHttp: this._manager.isHttp,\n      rangeChunkSize: this._rangeChunkSize,\n      disableRange: this._disableRange,\n    });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(args) {\n    if (args) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: args.chunk, done: false });\n      } else {\n        this._cachedChunks.push(args.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n  }\n\n  _onError(status) {\n    const url = this._url;\n    const exception = createResponseStatusError(status, url);\n    this._storedError = exception;\n    this._headersReceivedCapability.reject(exception);\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.reject(exception);\n    });\n    this._requests = [];\n    this._cachedChunks = [];\n  }\n\n  _onProgress(data) {\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: data.loaded,\n        total: data.lengthComputable ? data.total : this._contentLength,\n      });\n    }\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n    const args = {\n      onDone: this._onDone.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    if (this.onClosed) {\n      this.onClosed(this);\n    }\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n    this._close();\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported && this.onProgress) {\n      this.onProgress({\n        loaded: evt.loaded,\n      });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._requests.forEach(function (requestCapability) {\n      requestCapability.resolve({ value: undefined, done: true });\n    });\n    this._requests = [];\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    const readers = this._rangeRequestReaders.slice(0);\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const {\n          allowRangeRequests,\n          suggestedLength,\n        } = validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: this._stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(reason => {\n        if (reason?.name === \"AbortError\") {\n          return;\n        }\n        throw reason;\n      });\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isFetchSupported,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport {\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { apiCompatibilityParams } from \"./display/api_compatibility.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n  setPDFNetworkStreamFactory(params => {\n    return streamsPromise.then(streams => {\n      const [{ PDFNetworkStream }, { PDFFetchStream }] = streams;\n      if (isFetchSupported() && isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  });\n} else if (PDFJSDev.test(\"GENERIC\")) {\n  const { isNodeJS } = require(\"./shared/is_node.js\");\n  if (isNodeJS) {\n    const PDFNodeStream = require(\"./display/node_stream.js\").PDFNodeStream;\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const PDFNetworkStream = require(\"./display/network.js\").PDFNetworkStream;\n    let PDFFetchStream;\n    if (isFetchSupported()) {\n      PDFFetchStream = require(\"./display/fetch_stream.js\").PDFFetchStream;\n    }\n    setPDFNetworkStreamFactory(params => {\n      if (PDFFetchStream && isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n} else if (PDFJSDev.test(\"CHROME\")) {\n  const PDFNetworkStream = require(\"./display/network.js\").PDFNetworkStream;\n  let PDFFetchStream;\n  const isChromeWithFetchCredentials = function () {\n    // fetch does not include credentials until Chrome 61.0.3138.0 and later.\n    // https://chromium.googlesource.com/chromium/src/+/2e231cf052ca5e68e22baf0008ac9e5e29121707\n    try {\n      // Indexed properties on window are read-only in Chrome 61.0.3151.0+\n      // https://chromium.googlesource.com/chromium/src.git/+/58ab4a971b06dec13e4edf9de8382ca6847f6190\n      window[999] = 123; // should throw. Note: JS strict mode MUST be enabled.\n      delete window[999];\n      return false;\n    } catch (e) {\n      return true;\n    }\n  };\n  if (isFetchSupported() && isChromeWithFetchCredentials()) {\n    PDFFetchStream = require(\"./display/fetch_stream.js\").PDFFetchStream;\n  }\n  setPDFNetworkStreamFactory(params => {\n    if (PDFFetchStream && isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  RenderingCancelledException,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./shared/util.js\":\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/api_compatibility.js\":\n  apiCompatibilityParams,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}