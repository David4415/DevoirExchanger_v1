{"ast":null,"code":"var _jsxFileName = \"/Users/Programmation/Documents/Hubrium v_2 copie/client_3/src/components/Body/Routes/FormCourse.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport './FormCourse.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FormCourse extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit({ ...formValues\n      });\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `form_item ${meta.error && meta.touched ? 'error' : ''}`,\n        ...input,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderTextArea = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: `form_item ${meta.error && meta.touched ? 'error' : ''}`,\n        ...input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  componentDidMount() {}\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), this.checkErrorUpload]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"formCourse\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemCreate\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          htmlFor: \"title\",\n          children: \"Title \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"title\",\n          component: this.renderInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemCreate\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          htmlFor: \"description\",\n          children: \"Description \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"description\",\n          component: this.renderTextArea\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 88\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemCreate\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          htmlFor: \"tags\",\n          children: \"Tags \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"tags\",\n          component: this.renderInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 74\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemCreate\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          htmlFor: \"matiere\",\n          children: \"Mati\\xE8re\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"matiere\",\n          className: \"form_item field\",\n          component: \"select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"anglais\",\n            children: \"Anglais\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"fran\\xE7ais\",\n            children: \"Fran\\xE7ais\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pc\",\n            children: \"Physique-Chimie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"math\",\n            children: \"Math\\xE9matiques\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"geographie\",\n            children: \"G\\xE9ographie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"svt\",\n            children: \"SVT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"histoire\",\n            children: \"Histoire\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonSubmitCreateDoc\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if (!formValues.title) errors.title = 'You must enter a title';else if (formValues.title.length >= 10 && 50 <= formValues.title.length) errors.title = 'You must enter minimum 10 characters and maximum 50 characters';\n  if (!formValues.description) errors.description = 'You must enter a description';else if (formValues.description.length > 1000) errors.description = 'You must enter maximum 1000 characters';\n  if (!formValues.matiere) errors.matiere = 'Please choose a subject';\n  console.log(errors);\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'DocumentForm',\n  validate\n})(FormCourse);","map":{"version":3,"sources":["/Users/Programmation/Documents/Hubrium v_2 copie/client_3/src/components/Body/Routes/FormCourse.js"],"names":["React","connect","Field","reduxForm","FormCourse","Component","onSubmit","formValues","props","renderInput","input","label","meta","error","touched","renderTextArea","componentDidMount","renderError","checkErrorUpload","render","handleSubmit","validate","errors","title","length","description","matiere","console","log","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport './FormCourse.scss';\n\nclass FormCourse extends React.Component {\n    componentDidMount() {\n        \n    }\n\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className=\"\">\n                    <div className=\"\">{error}</div>\n                    {this.checkErrorUpload}\n                </div>\n            );\n        }\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onSubmit({...formValues});\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        return (\n            <input className={`form_item ${meta.error && meta.touched ? 'error' : ''}`} {...input} autoComplete=\"off\" /> \n        );\n    }\n    renderTextArea = ({ input, label, meta }) => {\n        return (\n            <textarea className={`form_item ${meta.error && meta.touched ? 'error' : ''}`} {...input} /> \n        );\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"formCourse\">\n                <div className=\"itemCreate\">\n                    <label className=\"label\" htmlFor=\"title\">Title </label><Field name=\"title\" component={this.renderInput}/>\n                </div>\n\n                <div className=\"itemCreate\">\n                    <label className=\"label\" htmlFor=\"description\">Description </label><Field name=\"description\" component={this.renderTextArea}/>\n                </div>\n                \n                <div className=\"itemCreate\">\n                    <label className=\"label\" htmlFor=\"tags\">Tags </label><Field name=\"tags\" component={this.renderInput}/>\n                </div>\n\n                <div className=\"itemCreate\">\n                    <label className=\"label\" htmlFor=\"matiere\">Matière</label>\n                    <Field name=\"matiere\" className=\"form_item field\" component=\"select\">\n                        <option></option>\n                        <option value=\"anglais\">Anglais</option>\n                        <option value=\"français\">Français</option>\n                        <option value=\"pc\">Physique-Chimie</option>\n                        <option value=\"math\">Mathématiques</option>\n                        <option value=\"geographie\">Géographie</option>\n                        <option value=\"svt\">SVT</option>\n                        <option value=\"histoire\">Histoire</option>\n                    </Field>\n                </div>\n                \n                <button className=\"buttonSubmitCreateDoc\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.title) errors.title = 'You must enter a title';\n    else if (formValues.title.length >= 10 && 50 <= formValues.title.length) errors.title = 'You must enter minimum 10 characters and maximum 50 characters';\n\n    if (!formValues.description) errors.description = 'You must enter a description';\n    else if (formValues.description.length > 1000) errors.description = 'You must enter maximum 1000 characters';\n\n    if (!formValues.matiere) errors.matiere = 'Please choose a subject';\n\n    console.log(errors);\n    return errors;\n};\n\nexport default reduxForm({\n    form: 'DocumentForm',\n    validate\n})(FormCourse);"]},"metadata":{},"sourceType":"module"}