{"ast":null,"code":"import { formValues } from 'redux-form';\nimport server from '../apis/server';\nexport const menuChange = to => {\n  return {\n    type: 'ON_MENU_CHANGE',\n    payload: to\n  };\n};\nexport const signIn = userInfo => async dispatch => {\n  // get info from data base\n  const response = await server.post(`/getUserInfo/${userInfo.getId()}`, [userInfo]);\n  dispatch({\n    type: 'SIGN_IN',\n    payload: {\n      id: userInfo.getId(),\n      info: response.data[0]\n    }\n  });\n};\nexport const signOut = () => {\n  return {\n    type: 'SIGN_OUT'\n  };\n};\nexport const getCoursesFrom = userId => async dispatch => {\n  const response = await server.get(`/getCourseUserId/${userId}`);\n  dispatch({\n    type: 'GET_COURSE_FROM_ID',\n    payload: response.data\n  });\n};\nexport const getCourses = (queries, search) => async dispatch => {\n  const response = await server.post(`/getCourses`, [queries, search]);\n  dispatch({\n    type: 'GET_COURSES',\n    payload: response.data\n  });\n};\nexport const getCourse = id => async dispatch => {\n  const response = await server.get(`/getCourse/${id}`);\n  console.log(response);\n  dispatch({\n    type: 'GET_COURSE',\n    payload: response.data\n  });\n};\nexport const likedContent = (docId, like, creatorId) => async dispatch => {\n  const response = await server.get(`/likedContent/${docId}?like=${like}&creatorId=${creatorId}`);\n};\nexport const viewContent = (docId, creatorId) => async dispatch => {\n  const response = await server.get(`/viewContent/${docId}?creatorId=${creatorId}`);\n};\nexport const getBadges = () => async dispatch => {\n  const response = await server.get(`/getBadges`);\n  dispatch({\n    type: 'GET_BADGES',\n    payload: response.data\n  });\n};\nexport const getBadgesUser = userId => async dispatch => {\n  const response = await server.get(`/getBadgesUser/${userId}`);\n  dispatch({\n    type: 'GET_BADGES_USER',\n    payload: response.data\n  });\n};\nexport const getBadgesUserTypes = userId => async dispatch => {\n  const response = await server.get(`/getBadgesUserGetTypes/${userId}`);\n  let bronze = 0,\n      silver = 0,\n      gold = 0,\n      diamond = 0;\n\n  for (let x of response.data) {\n    const last = x.badgeName.split(\" \");\n\n    switch (last[last.length - 1]) {\n      case \"I\":\n        bronze++;\n        break;\n\n      case \"II\":\n        silver++;\n        break;\n\n      case \"III\":\n        gold++;\n        break;\n\n      case \"IV\":\n        diamond++;\n        break;\n    }\n  }\n\n  console.log([bronze, silver, gold, diamond]);\n  dispatch({\n    type: 'GET_BADGES_USER_TYPES',\n    payload: [bronze, silver, gold, diamond]\n  });\n};\nexport const getForums = () => async dispatch => {\n  const response = await server.get(`/getForums`);\n  dispatch({\n    type: 'GET_FORUMS',\n    payload: response.data\n  });\n};\nexport const getForum = id => async dispatch => {\n  const response = await server.get(`/getForum/${id}`);\n  dispatch({\n    type: 'GET_FORUM',\n    payload: response.data\n  });\n};\nexport const getPostsFromForum = id => async dispatch => {\n  const response = await server.get(`/getPostsFromForum/${id}`);\n  dispatch({\n    type: 'GET_POSTS_FROM_FORUM',\n    payload: {\n      'id': id,\n      'actual': response.data\n    }\n  });\n};\nexport const likedForum = (forumId, like) => async dispatch => {\n  const response = await server.get(`/likedForum/${forumId}?like=${like}`);\n};\nexport const likedMessage = (forumId, messageId, like) => async dispatch => {\n  const response = await server.get(`/likedMessage/${forumId}?messageId=${messageId}&like=${like}`);\n};\nexport const createDoc = formValues => async dispatch => {\n  const response = await server.post(`/createDoc`, formValues);\n  console.log(response);\n  console.log(formValues);\n};","map":{"version":3,"sources":["/Users/Programmation/Documents/HubriumV_2Copie/client_3/src/actions/index.js"],"names":["formValues","server","menuChange","to","type","payload","signIn","userInfo","dispatch","response","post","getId","id","info","data","signOut","getCoursesFrom","userId","get","getCourses","queries","search","getCourse","console","log","likedContent","docId","like","creatorId","viewContent","getBadges","getBadgesUser","getBadgesUserTypes","bronze","silver","gold","diamond","x","last","badgeName","split","length","getForums","getForum","getPostsFromForum","likedForum","forumId","likedMessage","messageId","createDoc"],"mappings":"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","sourcesContent":["import { formValues } from 'redux-form';\nimport server from '../apis/server';\n\nexport const menuChange = (to) => {\n    return { type: 'ON_MENU_CHANGE', payload: to};\n};\n\n\nexport const signIn = (userInfo) => async (dispatch) => {\n    // get info from data base\n    const response = await server.post(`/getUserInfo/${userInfo.getId()}`, [userInfo]);\n    dispatch({ type: 'SIGN_IN', payload: {id: userInfo.getId(), info: response.data[0]}});\n};\nexport const signOut = () => {\n    return { type: 'SIGN_OUT' }\n};\n\nexport const getCoursesFrom = (userId) => async (dispatch) => {\n    const response = await server.get(`/getCourseUserId/${userId}`);\n    dispatch({ type:'GET_COURSE_FROM_ID', payload: response.data });\n};\n\nexport const getCourses = (queries, search) => async (dispatch) => {\n    const response = await server.post(`/getCourses`, [queries, search]);\n    dispatch({ type:'GET_COURSES', payload: response.data });\n};\n\nexport const getCourse = (id) => async (dispatch) => {\n    const response = await server.get(`/getCourse/${id}`);\n    console.log(response);\n    dispatch({ type:'GET_COURSE', payload: response.data });\n}\n\nexport const likedContent = (docId, like, creatorId) => async (dispatch) => {\n    const response = await server.get(`/likedContent/${docId}?like=${like}&creatorId=${creatorId}`);\n}\n\nexport const viewContent = (docId, creatorId) => async (dispatch) => {\n    const response = await server.get(`/viewContent/${docId}?creatorId=${creatorId}`);\n}\n\nexport const getBadges = () => async (dispatch) => {\n    const response = await server.get(`/getBadges`);\n    dispatch({ type:'GET_BADGES', payload: response.data });\n}\n\nexport const getBadgesUser = (userId) => async (dispatch) => {\n    const response = await server.get(`/getBadgesUser/${userId}`);\n    dispatch({ type:'GET_BADGES_USER', payload: response.data });\n}\n\nexport const getBadgesUserTypes = (userId) => async (dispatch) => {\n    const response = await server.get(`/getBadgesUserGetTypes/${userId}`);\n    let bronze = 0, silver = 0, gold = 0, diamond = 0;\n    for (let x of response.data) {\n        const last = x.badgeName.split(\" \")\n        switch (last[last.length-1]) {\n            case \"I\": bronze++; break;\n            case \"II\": silver++; break;\n            case \"III\": gold++; break;\n            case \"IV\": diamond++; break;\n        }\n    }\n\n    console.log([bronze, silver, gold, diamond]);\n    dispatch({ type:'GET_BADGES_USER_TYPES', payload: [bronze, silver, gold, diamond] });\n}\n\nexport const getForums = () => async (dispatch) => {\n    const response = await server.get(`/getForums`);\n    dispatch({ type:'GET_FORUMS', payload: response.data });\n}\n\nexport const getForum = (id) => async (dispatch) => {\n    const response = await server.get(`/getForum/${id}`);\n    dispatch({ type:'GET_FORUM', payload: response.data });\n}\n\nexport const getPostsFromForum = (id) => async (dispatch) => {\n    const response = await server.get(`/getPostsFromForum/${id}`);\n    dispatch({ type:'GET_POSTS_FROM_FORUM', payload: {'id': id, 'actual': response.data } });\n}\n\nexport const likedForum = (forumId, like) => async (dispatch) => {\n    const response = await server.get(`/likedForum/${forumId}?like=${like}`);\n}\nexport const likedMessage = (forumId, messageId, like) => async (dispatch) => {\n    const response = await server.get(`/likedMessage/${forumId}?messageId=${messageId}&like=${like}`);\n}\n\nexport const createDoc = (formValues) => async (dispatch) => {\n    const response = await server.post(`/createDoc`, formValues);\n    console.log(response);\n    console.log(formValues);\n}"]},"metadata":{},"sourceType":"module"}